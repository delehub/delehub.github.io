<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  <subtitle>Lemon</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://delehub.vercel.app/"/>
  <updated>2020-12-03T06:23:27.194Z</updated>
  <id>https://delehub.vercel.app/</id>
  
  <author>
    <name>dele</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无接触智能安防物联网控制系统</title>
    <link href="https://delehub.vercel.app/2021/06/19/wu-jie-hong-zhi-neng-an-fang-wu-lian-wang-kong-zhi-xi-tong/"/>
    <id>https://delehub.vercel.app/2021/06/19/wu-jie-hong-zhi-neng-an-fang-wu-lian-wang-kong-zhi-xi-tong/</id>
    <published>2021-06-19T02:52:53.245Z</published>
    <updated>2020-12-03T06:23:27.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无接触智能安防物联网控制系统设计"><a href="#无接触智能安防物联网控制系统设计" class="headerlink" title="无接触智能安防物联网控制系统设计"></a>无接触智能安防物联网控制系统设计</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><h4 id="本设计以STM32为核心，组成以识别模块、联网模块、控制模块、红外测温模块的无接触安防系统。结合人脸识别K210模块、语音识别模块以及MQ系列气体检测模块等等，实现用户非配合状态下的快速身份识别技术-快速确认人员身份。检测多个相关性传感器来采集系统内的温度数值以及各项气体达标数值，通过机智云APP平台实时反馈数据。本设计增设了控制模块，RGB灯来表达出开灯或者关灯，运用RGB灯进行模拟开门与关门，这样可以简捷的演示实现功能。实现在疫情下远距离社交，蜗居在家保证家庭生活环境安全，实现了节省成本，多位一体的无接触安防系统。"><a href="#本设计以STM32为核心，组成以识别模块、联网模块、控制模块、红外测温模块的无接触安防系统。结合人脸识别K210模块、语音识别模块以及MQ系列气体检测模块等等，实现用户非配合状态下的快速身份识别技术-快速确认人员身份。检测多个相关性传感器来采集系统内的温度数值以及各项气体达标数值，通过机智云APP平台实时反馈数据。本设计增设了控制模块，RGB灯来表达出开灯或者关灯，运用RGB灯进行模拟开门与关门，这样可以简捷的演示实现功能。实现在疫情下远距离社交，蜗居在家保证家庭生活环境安全，实现了节省成本，多位一体的无接触安防系统。" class="headerlink" title="本设计以STM32为核心，组成以识别模块、联网模块、控制模块、红外测温模块的无接触安防系统。结合人脸识别K210模块、语音识别模块以及MQ系列气体检测模块等等，实现用户非配合状态下的快速身份识别技术,快速确认人员身份。检测多个相关性传感器来采集系统内的温度数值以及各项气体达标数值，通过机智云APP平台实时反馈数据。本设计增设了控制模块，RGB灯来表达出开灯或者关灯，运用RGB灯进行模拟开门与关门，这样可以简捷的演示实现功能。实现在疫情下远距离社交，蜗居在家保证家庭生活环境安全，实现了节省成本，多位一体的无接触安防系统。"></a>本设计以STM32为核心，组成以识别模块、联网模块、控制模块、红外测温模块的无接触安防系统。结合人脸识别K210模块、语音识别模块以及MQ系列气体检测模块等等，实现用户非配合状态下的快速身份识别技术,快速确认人员身份。检测多个相关性传感器来采集系统内的温度数值以及各项气体达标数值，通过机智云APP平台实时反馈数据。本设计增设了控制模块，RGB灯来表达出开灯或者关灯，运用RGB灯进行模拟开门与关门，这样可以简捷的演示实现功能。实现在疫情下远距离社交，蜗居在家保证家庭生活环境安全，实现了节省成本，多位一体的无接触安防系统。</h4><h2 id="系统框图"><a href="#系统框图" class="headerlink" title="系统框图"></a>系统框图</h2><p><img src="https://img-blog.csdnimg.cn/20201202102522505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="系统框图"></p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol><li><p>STM32基本外设库移植</p></li><li><p>传感器部分代码驱动移植</p></li><li><p>显示模块 语音播报模块代码移植</p></li><li><p>ESP8266 WIFI模块 机智云协议移植</p></li><li><p>手势识别 语音识别 人脸识别与口罩检测部分功能实现</p></li><li><p>机智云APP部分修改优化</p></li><li><p>综合实验</p><h3 id="STM32基本外设库移植"><a href="#STM32基本外设库移植" class="headerlink" title="STM32基本外设库移植"></a>STM32基本外设库移植</h3></li><li><p>串口移植(关键部分之一)</p></li><li><p>串口分布情况 </p><ol><li><p>USART1 PA9 PA10 串口打印调试功能</p><pre class=" language-C"><code class="language-C"> #if EN_USART1_RX   //如果使能了接收 //串口1中断服务程序//注意,读取USARTx->SR能避免莫名其妙的错误        u8 USART_RX_BUF[USART_REC_LEN];     //接收缓冲,最大USART_REC_LEN个字节.//接收状态 //bit15，    接收完成标志//bit14，    接收到0x0d //bit13~0，    接收到的有效字节数目 u16 USART_RX_STA=0;       //接收状态标记     //初始化IO 串口1 //bound:波特率 void uart_init(u32 bound){    //GPIO端口设置 GPIO_InitTypeDef GPIO_InitStructure;     USART_InitTypeDef USART_InitStructure;     NVIC_InitTypeDef NVIC_InitStructure;     RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); //使能GPIOA时钟     RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//使能USART1时钟     //串口1对应引脚复用映射     GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); //GPIOA9复用为USART1     GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); //GPIOA10复用为USART1     //USART1端口配置     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;    //速度50MHz     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉     GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA9，PA10    //USART1 初始化设置     USART_InitStructure.USART_BaudRate = bound;//波特率设置     USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式     USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位     USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位     USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;    //收发模式     USART_Init(USART1, &USART_InitStructure); //初始化串口1     USART_Cmd(USART1, ENABLE);  //使能串口1      //USART_ClearFlag(USART1, USART_FLAG_TC); #if EN_USART1_RX         USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启相关中断     //Usart1 NVIC 配置     NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=1;//抢占优先级3     NVIC_InitStructure.NVIC_IRQChannelSubPriority =1;        //子优先级3     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //IRQ通道使能     NVIC_Init(&NVIC_InitStructure);    //根据指定的参数初始化VIC寄存器、 #endif } void USART1_IRQHandler(void)                    //串口1中断服务程序 {     u8 Res; #if SYSTEM_SUPPORT_OS         //如果SYSTEM_SUPPORT_OS为真，则需要支持OS.     OSIntEnter();     #endif     if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)     {         Res =USART_ReceiveData(USART1);//(USART1->DR);    //读取接收到的数据         if((USART_RX_STA&0x8000)==0)//接收未完成         {             if(USART_RX_STA&0x4000)//接收到了0x0d         {                 if(Res!=0x0a)USART_RX_STA=0;//接收错误,重新开始             else USART_RX_STA|=0x8000;    //接收完成了              }             else //还没收到0X0D             {                 if(Res==0x0d)USART_RX_STA|=0x4000;                 else                 {                     USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;                     USART_RX_STA++;                     if(USART_RX_STA>(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收                       }                      }         }               }  #if SYSTEM_SUPPORT_OS     //如果SYSTEM_SUPPORT_OS为真，则需要支持OS.     OSIntExit();                                                #endif }  #endif    //初始化IO 串口1  //bound:波特率 void uart_init(u32 bound) {    //GPIO端口设置     GPIO_InitTypeDef GPIO_InitStructure;     USART_InitTypeDef USART_InitStructure;     NVIC_InitTypeDef NVIC_InitStructure;     RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); //使能GPIOA时钟     RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//使能USART1时钟     //串口1对应引脚复用映射     GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); //GPIOA9复用为USART1     GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); //GPIOA10复用为USART1     //USART1端口配置     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;    //速度50MHz     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉     GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA9，PA10    //USART1 初始化设置     USART_InitStructure.USART_BaudRate = bound;//波特率设置     USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式     USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位     USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位     USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;    //收发模式     USART_Init(USART1, &USART_InitStructure); //初始化串口1     USART_Cmd(USART1, ENABLE);  //使能串口1      //USART_ClearFlag(USART1, USART_FLAG_TC); #if EN_USART1_RX         USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启相关中断     //Usart1 NVIC 配置     NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=1;//抢占优先级3     NVIC_InitStructure.NVIC_IRQChannelSubPriority =1;        //子优先级3     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //IRQ通道使能     NVIC_Init(&NVIC_InitStructure);    //根据指定的参数初始化VIC寄存器、 #endif }</code></pre></li></ol></li></ol><pre><code>    void USART1_IRQHandler(void)                    //串口1中断服务程序    {        u8 Res;    #if SYSTEM_SUPPORT_OS         //如果SYSTEM_SUPPORT_OS为真，则需要支持OS.        OSIntEnter();        #endif        if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)        {            Res =USART_ReceiveData(USART1);//(USART1-&gt;DR);    //读取接收到的数据            if((USART_RX_STA&amp;0x8000)==0)//接收未完成            {                if(USART_RX_STA&amp;0x4000)//接收到了0x0d                {                    if(Res!=0x0a)USART_RX_STA=0;//接收错误,重新开始                    else USART_RX_STA|=0x8000;    //接收完成了                 }                else //还没收到0X0D                {                        if(Res==0x0d)USART_RX_STA|=0x4000;                    else                    {                        USART_RX_BUF[USART_RX_STA&amp;0X3FFF]=Res ;                        USART_RX_STA++;                        if(USART_RX_STA&gt;(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收                          }                         }            }                  }     #if SYSTEM_SUPPORT_OS     //如果SYSTEM_SUPPORT_OS为真，则需要支持OS.        OSIntExit();                                                   #endif    }     #endif        ```2. USART2 初始化    ```C    //串口2中断服务函数             void USART2_IRQHandler(void)    {        u8 res;                if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)//接收到数据        {                 res =USART_ReceiveData(USART2);                }    }                                             //初始化IO 串口2    //bound:波特率          void USART2_Init(u32 bound)    {          NVIC_InitTypeDef NVIC_InitStructure;        GPIO_InitTypeDef GPIO_InitStructure;        USART_InitTypeDef USART_InitStructure;        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);      //使能GPIOB时钟        RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);     //使能USART3时钟         USART_DeInit(USART2);                                     //复位串口3        GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);  //GPIOB11复用为USART3        GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);  //GPIOB10复用为USART3            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;    //GPIOB11和GPIOB10初始化        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;              //复用功能        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;          //速度50MHz        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;            //推挽复用输出        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;              //上拉        GPIO_Init(GPIOA,&amp;GPIO_InitStructure);                     //初始化GPIOB11，和GPIOB10        USART_InitStructure.USART_BaudRate = bound;                                    //波特率         USART_InitStructure.USART_WordLength = USART_WordLength_8b;                    //字长为8位数据格式        USART_InitStructure.USART_StopBits = USART_StopBits_1;                         //一个停止位        USART_InitStructure.USART_Parity = USART_Parity_No;                            //无奇偶校验位        USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制        USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;                  //收发模式        USART_Init(USART2, &amp;USART_InitStructure);                                      //初始化串口3        USART_Cmd(USART2, ENABLE);                                                     //使能串口         USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);            //开启中断           NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=2 ;//抢占优先级2        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;        //子优先级3        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //IRQ通道使能        NVIC_Init(&amp;NVIC_InitStructure);                            //根据指定的参数初始化VIC寄存器    }    ```3. USART3 ESP8266 WIFI模块通信```C//初始化IO 串口3//bound:波特率      void usart3_init(u32 bound){      NVIC_InitTypeDef NVIC_InitStructure;    GPIO_InitTypeDef GPIO_InitStructure;    USART_InitTypeDef USART_InitStructure;    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);      //使能GPIOB时钟    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE);     //使能USART3时钟     USART_DeInit(USART3);                                     //复位串口3    GPIO_PinAFConfig(GPIOB,GPIO_PinSource11,GPIO_AF_USART3);  //GPIOB11复用为USART3    GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_USART3);  //GPIOB10复用为USART3        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_10;    //GPIOB11和GPIOB10初始化    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;              //复用功能    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;          //速度50MHz    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;            //推挽复用输出    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;              //上拉    GPIO_Init(GPIOB,&amp;GPIO_InitStructure);                     //初始化GPIOB11，和GPIOB10    USART_InitStructure.USART_BaudRate = bound;                                    //波特率     USART_InitStructure.USART_WordLength = USART_WordLength_8b;                    //字长为8位数据格式    USART_InitStructure.USART_StopBits = USART_StopBits_1;                         //一个停止位    USART_InitStructure.USART_Parity = USART_Parity_No;                            //无奇偶校验位    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;                  //收发模式    USART_Init(USART3, &amp;USART_InitStructure);                                      //初始化串口3    USART_Cmd(USART3, ENABLE);                                                     //使能串口     USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);            //开启中断       NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=2 ;//抢占优先级2    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;        //子优先级3    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //IRQ通道使能    NVIC_Init(&amp;NVIC_InitStructure);                            //根据指定的参数初始化VIC寄存器}//串口3中断服务函数         void USART3_IRQHandler(void){    u8 res;            if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)//接收到数据    {                 res =USART_ReceiveData(USART3);                   gizPutData(&amp;res, 1);//数据写入到缓冲区            }}        ```4. SYN6288语音播报模块 串口4    ```C    //初始化IO 串口4    //bound:波特率          void UART4_Init(u32 bound)    {          NVIC_InitTypeDef NVIC_InitStructure;        GPIO_InitTypeDef GPIO_InitStructure;        USART_InitTypeDef USART_InitStructure;        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);      //使能GPIOB时钟        RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4,ENABLE);     //使能USART3时钟         USART_DeInit(UART4);                                     //复位串口3        GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_UART4);  //GPIOB11复用为USART3        GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_UART4);  //GPIOB10复用为USART3            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;    //GPIOB11和GPIOB10初始化        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;              //复用功能        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;          //速度50MHz        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;            //推挽复用输出        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;              //上拉        GPIO_Init(GPIOC,&amp;GPIO_InitStructure);                     //初始化GPIOB11，和GPIOB10        USART_InitStructure.USART_BaudRate = bound;                                    //波特率         USART_InitStructure.USART_WordLength = USART_WordLength_8b;                    //字长为8位数据格式        USART_InitStructure.USART_StopBits = USART_StopBits_1;                         //一个停止位        USART_InitStructure.USART_Parity = USART_Parity_No;                            //无奇偶校验位        USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制        USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;                  //收发模式        USART_Init(UART4, &amp;USART_InitStructure);                                      //初始化串口3        USART_Cmd(UART4, ENABLE);                                                     //使能串口         USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);            //开启中断           NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=2 ;//抢占优先级2        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;        //子优先级3        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //IRQ通道使能        NVIC_Init(&amp;NVIC_InitStructure);                            //根据指定的参数初始化VIC寄存器    }    //串口4中断服务函数             void UART4_IRQHandler(void)    {        u8 res;                if(USART_GetITStatus(UART4, USART_IT_RXNE) != RESET)//接收到数据        {                 res =USART_ReceiveData(UART4);                if(res==&#39;3&#39;)            {                face_mask = 1;//切换一下                switch_count = 0;            }            else if(res==&#39;2&#39;)            {                LED_door = 1;                face_mask = 0;//切换一下                switch_count = 0;                            SYN_FrameInfo(0,&quot;请进&quot;);                delay_ms(200);                delay_ms(300);                delay_ms(300);                delay_ms(300);                LED_door = 0;            }        }    }        ```5. 串口发送函数    ```C    ////发送函数    void USART_SendChar(USART_TypeDef* USARTx, unsigned char Char)    {        while((USARTx-&gt;SR &amp; USART_SR_TC) == 0);         // 等待上次发送完成               USARTx-&gt;DR = Char;                              // 装载本次发送数据        }    //接收函数    unsigned char USART_ReceiveChar(USART_TypeDef* USARTx)    {        return USARTx-&gt;DR;    }    //  函数功能: USART 发送字符串    void USART_SendString(USART_TypeDef* USARTx, uint8_t *String)    {        while(*String != &#39;\0&#39;)                          // \0 表示字符串结束标志，通过检测是否字符串末尾        {            USART_SendChar(USARTx, *String);            String++;        }      }    //发送数组    void USART_SendArray(USART_TypeDef* USARTx, uint8_t *Array, uint16_t Count)    {        uint8_t i = 0;                            // 定义局部变量 用于函数循环        for(i=0; i&lt;Count; i++)        {            USART_SendChar(USARTx, Array[i]);            }    }    ```</code></pre><ol start="3"><li><p>SYN6288语音播报模块</p><ol><li><p>实物图片</p><p><img src="https://i.loli.net/2020/12/03/3AqrNbTm5C6cLOX.png" alt=""></p><p><img src="https://i.loli.net/2020/12/03/QhxKrfUSsOmlzj9.png" alt=""></p></li></ol></li><li><p>SYN6288.C</p><pre class=" language-C"><code class="language-C"> #include "syn6288.h" #include "USART.H"                     // 包含内设头文件 USART-USART通信总线 #include "main.h" void USART_SendString2(USART_TypeDef* USARTx,u8 *DAT,u8 len) {     u8 i;     for(i=0;i<len;i++)     {                 USART_SendChar(USART2,*DAT++);     }     } //Music:选择背景音乐。0:无背景音乐，1~15：选择背景音乐 void SYN_FrameInfo(u8 Music, u8 *HZdata) {   /****************需要发送的文本**********************************/     unsigned  char  Frame_Info[50];     unsigned  char  HZ_Length;     unsigned  char  ecc  = 0;              //定义校验字节     unsigned  int i = 0;       HZ_Length = strlen(HZdata);             //需要发送文本的长度   /*****************帧固定配置信息**************************************/   Frame_Info[0] = 0xFD ;             //构造帧头FD   Frame_Info[1] = 0x00 ;             //构造数据区长度的高字节   Frame_Info[2] = HZ_Length + 3;         //构造数据区长度的低字节   Frame_Info[3] = 0x01 ;             //构造命令字：合成播放命令   Frame_Info[4] = 0x01 | Music << 4 ; //构造命令参数：背景音乐设定   /*******************校验码计算***************************************/   for(i = 0; i < 5; i++)                   //依次发送构造好的5个帧头字节   {     ecc = ecc ^ (Frame_Info[i]);        //对发送的字节进行异或校验   }   for(i = 0; i < HZ_Length; i++)           //依次发送待合成的文本数据   {     ecc = ecc ^ (HZdata[i]);                 //对发送的字节进行异或校验   }   /*******************发送帧信息***************************************/     memcpy(&Frame_Info[5], HZdata, HZ_Length);     Frame_Info[5 + HZ_Length] = ecc;     USART_SendString2(USART2,Frame_Info, 5 + HZ_Length + 1); }</code></pre></li></ol><pre><code>/************************************************************ 名    称： YS_SYN_Set(u8 *Info_data)* 功    能： 主函数    程序入口* 入口参数： *Info_data:固定的配置信息变量* 出口参数：* 说    明：本函数用于配置，停止合成、暂停合成等设置 ，默认波特率9600bps。* 调用方法：通过调用已经定义的相关数组进行配置。**********************************************************/void YS_SYN_Set(u8 *Info_data){    u8 Com_Len;    Com_Len = strlen(Info_data);    //USART_SendString2(USART3,Info_data, Com_Len);    USART_SendString2(UART4,Info_data, Com_Len);}```</code></pre><ol start="3"><li><p>SYN6288.H</p><pre class=" language-C"><code class="language-C"> #ifndef __SYN6288_H #define __SYN6288_H #include "sys.h" void SYN_FrameInfo(u8 Music, u8 *HZdata); void YS_SYN_Set(u8 *Info_data); #endif</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;无接触智能安防物联网控制系统设计&quot;&gt;&lt;a href=&quot;#无接触智能安防物联网控制系统设计&quot; class=&quot;headerlink&quot; title=&quot;无接触智能安防物联网控制系统设计&quot;&gt;&lt;/a&gt;无接触智能安防物联网控制系统设计&lt;/h1&gt;&lt;h2 id=&quot;摘要&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>STM32的GPIO的8种工作模式</title>
    <link href="https://delehub.vercel.app/2021/01/05/stm32-de-gpio-de-8-chong-gong-zuo-mo-shi/"/>
    <id>https://delehub.vercel.app/2021/01/05/stm32-de-gpio-de-8-chong-gong-zuo-mo-shi/</id>
    <published>2021-01-05T02:22:28.664Z</published>
    <updated>2021-01-05T02:31:06.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>STM32F103ZET6一共有7组IO口，即GPIOA,GPIOB,GPIOC到GPIOG。每组IO口有16个IO，所以一共有112个IO。STM32的大部分引脚除了当GPIO使用外，还可以复用为外设功能引脚（比如串口）。<br> 下图为I/O端口位的基本结构<br> <img src="https://img-blog.csdnimg.cn/20200813162402414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <hr> <p>最近在看数据手册的时候，发现在Cortex-M3里，对于GPIO的配置种类有8种之多：<br> （1）GPIO_Mode_AIN 模拟输入<br> （2）GPIO_Mode_IN_FLOATING 浮空输入<br> （3）GPIO_Mode_IPD 下拉输入<br> （4）GPIO_Mode_IPU 上拉输入<br> （5）GPIO_Mode_Out_OD 开漏输出<br> （6）GPIO_Mode_Out_PP 推挽输出<br> （7）GPIO_Mode_AF_OD 复用开漏输出<br> （8）GPIO_Mode_AF_PP 复用推挽输出</p> <p>对于刚入门的新手，我想这几个概念是必须得搞清楚的，平时接触的最多的也就是推挽输出、开漏输出、上拉输入这三种，但一直未曾对这些做过归纳。因此，在这里做一个总结：</p> <h1><a name="t1"></a><a name="t1"></a><a id="1__18"></a>1. 推挽输出</h1> <p>推挽输出:可以输出强高,低电平,连接数字器件; 推挽结构一般是指两个三极管分别受两互补信号的控制,总是在一个三极管导通的时候另一个截止。高低电平由IC的电源低定。<br> <img src="https://img-blog.csdnimg.cn/20200813162625821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <p>推挽电路是两个参数相同的三极管或MOSFET,以推挽方式存在于电路中,各负责正负半周的波形放大任务,电路工作时，两只对称的功率开关管每次只有一个导通，所以导通损耗小、效率高。输出既可以向负载灌电流，也可以从负载抽取电流。推拉式输出级既提高电路的负载能力，又提高开关速度。<br> <img src="https://img-blog.csdnimg.cn/20200813154318408.png#pic_center" alt="在这里插入图片描述"><br> 如图所示，推挽放大器的输出级有两个“臂”（两组放大元件），一个“臂”的电流增加时，另一个“臂”的电流则减小，二者的状态轮流转换。对负载而言，好像是一个“臂”在推，一个“臂”在拉，共同完成电流输出任务。当输出高电平时，也就是下级负载门输入高电平时，输出端的电流将是下级门从本级电源经VT3拉出。这样一来，输出高低电平时，VT3 一路和 VT5 一路将交替工作，从而减低了功耗，提高了每个管的承受能力。又由于不论走哪一路，管子导通电阻都很小，使RC常数很小，转变速度很快。因此，推拉式输出级既提高电路的负载能力，又提高开关速度。</p> <h1><a name="t2"></a><a name="t2"></a><a id="2__26"></a>2. 开漏输出</h1> <p>开漏输出:只可以输出强低电平，高电平得靠外部电阻拉高。输出端相当于三极管的集电极。要得到高电平状态需要上拉电阻才行。适合于做电流型的驱动，其吸收电流的能力相对强(一般20mA以内)。<br> <img src="https://img-blog.csdnimg.cn/20200813162541291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <p>开漏形式的电路有以下几个特点：</p> <ol><li> <p>利用外部电路的驱动能力，减少IC内部的驱动。当IC内部MOSFET导通时，驱动电流是从外部的VCC流经R pull-up ，MOSFET到GND。IC内部仅需很下的栅极驱动电流。</p> </li><li> <p>一般来说，开漏是用来连接不同电平的器件，匹配电平用的，因为开漏引脚不连接外部的上拉电阻时，只能输出低电平，如果需要同时具备输出高电平的功能，则需要接上拉电阻，很好的一个优点是通过改变上拉电源的电压，便可以改变传输电平。比如加上上拉电阻就可以提供TTL/CMOS电平输出等。（上拉电阻的阻值决定了逻辑电平转换的沿的速度 。阻值越大，速度越低功耗越小，所以负载电阻的选择要兼顾功耗和速度。）</p> </li><li> <p>OPEN-DRAIN提供了灵活的输出方式，但是也有其弱点，就是带来上升沿的延时。因为上升沿是通过外接上拉无源电阻对负载充电，所以当电阻选择小时延时就小，但功耗大；反之延时大功耗小。所以如果对延时有要求，则建议用下降沿输出。</p> </li><li> <p>可以将多个开漏输出的Pin，连接到一条线上。通过一只上拉电阻，在不增加任何器件的情况下，形成“与逻辑”关系。这也是I2C，SMBus等总线判断总线占用状态的原理。补充：什么是“线与”？：</p> </li></ol> <p>在一个结点(线)上, 连接一个上拉电阻到电源 VCC 或 VDD 和 n 个 NPN 或 NMOS 晶体管的集电极 C 或漏极 D, 这些晶体管的发射极 E 或源极 S 都接到地线上, 只要有一个晶体管饱和, 这个结点(线)就被拉到地线电平上. 因为这些晶体管的基极注入电流(NPN)或栅极加上高电平(NMOS), 晶体管就会饱和, 所以这些基极或栅极对这个结点(线)的关系是或非 NOR 逻辑. 如果这个结点后面加一个反相器, 就是或 OR 逻辑.</p> <p>其实可以简单的理解为：在所有引脚连在一起时，外接一上拉电阻，如果有一个引脚输出为逻辑0，相当于接地，与之并联的回路“相当于被一根导线短路”，所以外电路逻辑电平便为0，只有都为高电平时，与的结果才为逻辑1。</p> <p>关于推挽输出和开漏输出，最后用一幅最简单的图形来概括：<br> <img src="https://img-blog.csdnimg.cn/20200813154507233.png#pic_center" alt="在这里插入图片描述"><br> 该图中左边的便是推挽输出模式，其中比较器输出高电平时下面的PNP三极管截止，而上面NPN三极管导通，输出电平VS+；当比较器输出低电平时则恰恰相反，PNP三极管导通，输出和地相连，为低电平。右边的则可以理解为开漏输出形式，需要接上拉。</p> <h1><a name="t3"></a><a name="t3"></a><a id="3__48"></a>3. 浮空输入</h1> <p>浮空输入：浮空（floating）就是逻辑器件的输入引脚即不接高电平，也不接低电平。由于逻辑器件的内部结构，当它输入引脚悬空时，相当于该引脚接了高电平。一般实际运用时，引脚不建议悬空，易受干扰。 通俗讲就是让管脚什么都不接，浮空着。<br> <img src="https://img-blog.csdnimg.cn/2020081316243415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <p><img src="https://img-blog.csdnimg.cn/20200813154535882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 由于浮空输入一般多用于外部按键输入，结合图上的输入部分电路，我理解为浮空输入状态下，IO的电平状态是不确定的，完全由外部输入决定，如果在该引脚悬空的情况下，读取该端口的电平是不确定的。</p> <h1><a name="t4"></a><a name="t4"></a><a id="4__55"></a>4. 上拉输入</h1> <p>上拉输入：上拉就是把电位拉高，比如拉到Vcc。上拉就是将不确定的信号通过一个电阻嵌位在高电平！电阻同时起限流作用！强弱只是上拉电阻的阻值不同，没有什么严格区分。<br> <img src="https://img-blog.csdnimg.cn/20200813162451641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <h1><a name="t5"></a><a name="t5"></a><a id="5__59"></a>5. 下拉输入</h1> <p>下拉输入：就是把电压拉低，拉到GND。与上拉原理相似。<br> <img src="https://img-blog.csdnimg.cn/20200813162501388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <h1><a name="t6"></a><a name="t6"></a><a id="6__63"></a>6. 模拟输入</h1> <p>模拟输入：模拟输入是指传统方式的输入。数字输入是输入PCM数字信号，即0，1的二进制数字信号，通过数模转换，转换成模拟信号，经前级放大进入功率放大器，功率放大器还是模拟的。<br> <img src="https://img-blog.csdnimg.cn/20200813162510670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <h1><a name="t7"></a><a name="t7"></a><a id="7__68"></a>7. 复用开漏输出、复用推挽输出</h1> <p>复用开漏输出、复用推挽输出：可以理解为GPIO口被用作第二功能时的配置情况（即并非作为通用IO口使用）。端口必须配置成复用功能输出模式(推挽或开漏)。<br> 复用开漏输出如下图所示：<br> <img src="https://img-blog.csdnimg.cn/20200813162609644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 复用推挽输出如下图所示：<br> <img src="https://img-blog.csdnimg.cn/20200813162648365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <h1><a name="t8"></a><a name="t8"></a><a id="8_1_77"></a>8. 总结1：</h1> <p>（1） 浮空输入_IN_FLOATING ——浮空输入，可以做KEY识别，RX1<br> （2）带上拉输入_IPU——IO内部上拉电阻输入<br> （3）带下拉输入_IPD—— IO内部下拉电阻输入<br> （4） 模拟输入_AIN ——应用ADC模拟输入，或者低功耗下省电<br> （5）开漏输出_OUT_OD ——IO输出0接GND，IO输出1，悬空，需要外接上拉电阻，才能实现输出高电平。当输出为1时，IO口的状态由上拉电阻拉高电平，但由于是开漏输出模式，这样IO口也就可以由外部电路改变为低电平或不变。可以读IO输入电平变化，实现C51的IO双向功能<br> （6）推挽输出_OUT_PP ——IO输出0-接GND， IO输出1 -接VCC，读输入值是未知的<br> （7）复用功能的推挽输出_AF_PP ——片内外设功能（I2C的SCL,SDA）<br> （8）复用功能的开漏输出_AF_OD——片内外设功能（TX1,MOSI,MISO.SCK.SS）</p> <h1><a name="t9"></a><a name="t9"></a><a id="9_2_87"></a>9. 总结2</h1> <p>通常有5种方式使用某个引脚功能，它们的配置方式如下：</p> <ol><li>作为普通GPIO输入：根据需要配置该引脚为浮空输入、带弱上拉输入或带弱下拉输入，同时不要使能该引脚对应的所有复用功能模块。</li><li>作为普通GPIO输出：根据需要配置该引脚为推挽输出或开漏输出，同时不要使能该引脚对应的所有复用功能模块。</li><li>作为普通模拟输入：配置该引脚为模拟输入模式，同时不要使能该引脚对应的所有复用功能模块。</li><li>作为内置外设的输入：根据需要配置该引脚为浮空输入、带弱上拉输入或带弱下拉输入，同时使能该引脚对应的某个复用功能模块。</li><li>作为内置外设的输出：根据需要配置该引脚为复用推挽输出或复用开漏输出，同时使能该引脚对应的所有复用功能模块。</li></ol> <h1><a name="t10"></a><a name="t10"></a><a id="10__95"></a>10. 注意</h1> <ol><li>注意如果有多个复用功能模块对应同一个引脚，只能使能其中之一，其它模块保持非使能状态。</li><li>stm32 复位后,IO 端口处于输入浮空状态.</li><li>JTAG 引脚复位以后,处于上拉或者下拉状态</li><li>所有 IO 端口都具有外部中断能力,端口必须配置成输入模式,才能使用外部中断功能</li><li>对于复用功能输入,端口可以配置成任意输入模式或者复用功能输出模式.</li><li>对于复用功能输出,端口必须配置成复用功能输出</li><li>对于双向复用功能,端口必须配置成复用功能输出</li><li>stm32 的部分 IO 端口的复用功能可以重新映射成另外的复用功能.</li><li>stm32 具有GPIO 锁定机制,即锁定 GPIO 配置,下次复位前不能再修改.</li><li>当 LSE 振荡器关闭时,OSC32_IN 和 OSC32_OUT可以用作通用 IO PC14 和 PC15.</li><li>当进入待机模式或者备份域由 Vbat 供电,PC14,PC15 功能丢失,该两个 IO口线设置为模拟输入功能.</li><li>OSC_IN 和 OSC_OUT 可以重新映射为 GPIO PD0,PD1.</li><li>注意 PD0,PD1用于输出地时候仅能用于 50MHz 输出模式.</li><li>注意:PC13,PC14,PC15 只能用于 2MHz 的输出模式,最多只能带30pf 的负载,并且同时只能使用一个引脚</li></ol> <h1><a name="t11"></a><a name="t11"></a><a id="11_STM32_111"></a>11. STM32设置实例</h1> <ol><li> <p>模拟I2C使用开漏输出_OUT_OD，接上拉电阻，能够正确输出0和1；读值时先GPIO_SetBits(GPIOB, GPIO_Pin_0)；拉高，然后可以读IO的值；使用GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0)；</p> </li><li> <p>如果是接上拉电阻，IO默认是高电平；需要读取IO的值，可以使用带上拉输入_IPU和浮空输入_IN_FLOATING和开漏输出_OUT_OD；</p> </li></ol> <h1><a name="t12"></a><a name="t12"></a><a id="12_GPIO_116"></a>12. 补充：GPIO相关配置寄存器</h1> <p>STM32F103ZET6一共有7组IO口，每组IO口有16个IO，每组IO口包含7个寄存器，一共可以控制一组GPIO的16个IO口。</p> <ul><li>GPIOx_CRL :端口配置低寄存器</li><li>GPIOx_CRH:端口配置高寄存器</li><li>GPIOx_IDR:端口输入寄存器</li><li>GPIOx_ODR:端口输出寄存器</li><li>GPIOx_BSRR:端口位设置/清除寄存器</li><li>GPIOx_BRR :端口位清除寄存器</li><li>GPIOx_LCKR:端口配置锁存寄存器</li></ul> <p>每个I/O端口位可以自由编程，然而I/O端口寄存器必须按32位字被访问(不允许半字或字节访问)</p> <h1><a name="t13"></a><a name="t13"></a><a id="13__128"></a>13. 补充：端口复用功能</h1> <p>STM32的大部分端口都具有复用功能。<br> 所谓复用，就是一些端口不仅仅可以做为通用IO口，还可以复用为一<br> 些外设引脚，比如PA9,PA10可以复用为STM32的串口1引脚。<br> 作用：最大限度的利用端口资源</p> <h1><a name="t14"></a><a name="t14"></a><a id="14__133"></a>14. 端口重映射功能</h1> <p>就是可以把某些功能引脚映射到其他引脚。<br> 比如串口1默认引脚是PA9,PA10可以通过配置重映射映<br> 射到PB6,PB7<br> 作用：方便布线</p>                </div><div data-report-view="{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/mahoon411/article/details/107981244&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}"><div></div></div>                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-10218d227c.css" rel="stylesheet">                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-6aa8c38f9a.css" rel="stylesheet">        </div>    </article>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;STM32F103ZET6一共有7组IO口，即GPIOA,GPIOB,GPIOC到GPIOG。每组IO口有16个IO，所以一
      
    
    </summary>
    
    
      <category term="STM32单片机" scheme="https://delehub.vercel.app/categories/STM32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="C" scheme="https://delehub.vercel.app/categories/STM32%E5%8D%95%E7%89%87%E6%9C%BA/C/"/>
    
      <category term="嵌入式" scheme="https://delehub.vercel.app/categories/STM32%E5%8D%95%E7%89%87%E6%9C%BA/C/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="嵌入式" scheme="https://delehub.vercel.app/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
      <category term="STM32单片机" scheme="https://delehub.vercel.app/tags/STM32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="GPIO工作模式" scheme="https://delehub.vercel.app/tags/GPIO%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>BearPi-HM Nano HarmonyOS 环境搭建</title>
    <link href="https://delehub.vercel.app/2021/01/05/bearpi-hm-nano-harmonyos-huan-jing-da-jian/"/>
    <id>https://delehub.vercel.app/2021/01/05/bearpi-hm-nano-harmonyos-huan-jing-da-jian/</id>
    <published>2021-01-05T02:21:36.896Z</published>
    <updated>2021-01-05T02:28:41.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BearPi-HM-Nano-HarmonyOS-环境搭建"><a href="#BearPi-HM-Nano-HarmonyOS-环境搭建" class="headerlink" title="BearPi-HM Nano HarmonyOS 环境搭建"></a>BearPi-HM Nano HarmonyOS 环境搭建</h1><h1 id="BearPi-HM-Nano-介绍"><a href="#BearPi-HM-Nano-介绍" class="headerlink" title="BearPi-HM_Nano 介绍"></a>BearPi-HM_Nano 介绍</h1><p>BearPi-HM_Nano开发板是一块专门为鸿蒙OS设计的鸿蒙OS开发板，板载高度集成的2.4GHz WLAN SoC芯片Hi3861，并板载NFC电路及标准的E53接口，标准的E53接口可扩展智能加湿器、智能台灯、智能安防、智能烟感等案例。</p><h3 id="视频教程地址-点击观看"><a href="#视频教程地址-点击观看" class="headerlink" title="视频教程地址 点击观看"></a>视频教程地址 <a href="https://space.bilibili.com/470797387/channel/detail?cid=161760" target="_blank" rel="noopener">点击观看</a></h3><p><img src="https://img-blog.csdnimg.cn/img_convert/9b376b80cf57cdeea119bd2047ca7fa1.png" alt="BearPi-HM_Nano"></p><h1 id="BearPi-HM-Nano-快速上手"><a href="#BearPi-HM-Nano-快速上手" class="headerlink" title="BearPi-HM_Nano 快速上手"></a>BearPi-HM_Nano 快速上手</h1><ul><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/BearPi-HM_Nano开发板快速入门.md">BearPi-HM_Nano 开发板快速入门</a><ul><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/BearPi-HM_Nano开发板介绍.md">BearPi-HM_Nano 开发板介绍</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/BearPi-HM_Nano开发搭建环境.md">BearPi-HM_Nano 开发搭建环境</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/源码获取.md">BearPi-HM_Nano 开发板源码获取</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/BearPi-HM_Nano开发板如何烧录程序.md">BearPi-HM_Nano 开发板如何烧录程序</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/BearPi-HM_Nano开发板第一个示例程序.md">BearPi-HM_Nano 开发第一个示例程序</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/sample/README.md">BearPi-HM_Nano 案例开发</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/常见问题.md">常见问题</a></li></ul></li></ul><h1 id="BearPi-HM-Nano-案例开发"><a href="#BearPi-HM-Nano-案例开发" class="headerlink" title="BearPi-HM_Nano 案例开发"></a>BearPi-HM_Nano 案例开发</h1><p>BearPi-HM_Nano 提供的例程多达 24个，每个例程都有非常详细的注释，代码风格统一，按照基本例程到高级例程的方式编排，方便初学者由浅入深逐步学习。开发者拿到工程后经过简单的编译和下载即可看到实验现象。</p><p>这些例程包括四个类别：内核类、基本外设类、驱动类、物联网类。不仅包括了硬件资源的应用，更是提供了丰富的物联网领域的应用示例，帮助物联网开发者更好更快地进行开发。</p><p>例程列表如下所示：</p><table><thead><tr><th>编号</th><th>类别</th><th>例程名</th><th>说明</th></tr></thead><tbody><tr><td>A1</td><td>内核</td><td>thread</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A1_kernal_thread/README.md">任务交替打印</a></td></tr><tr><td>A2</td><td>内核</td><td>timer</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A2_kernel_timer/README.md">定时器  </a></td></tr><tr><td>A3</td><td>内核</td><td>event</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A3_kernel_event/README.md">事件</a></td></tr><tr><td>A4</td><td>内核</td><td>mutex</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A4_kernel_mutex/README.md">互斥锁</a></td></tr><tr><td>A5</td><td>内核</td><td>semp</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A5_kernel_semaphore/README.md">信号量</a></td></tr><tr><td>A6</td><td>内核</td><td>message</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A6_kernel_message/README.md">消息队列</a></td></tr><tr><td>B1</td><td>基础</td><td>led_blink</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B1_basic_led_blink/README.md">红色 LED 不间断烁</a></td></tr><tr><td>B2</td><td>基础</td><td>button</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B2_basic_button/README.md">按键控制LED灯亮灭</a></td></tr><tr><td>B3</td><td>基础</td><td>pwm_led</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B3_basic_pwm_led/README.md">红色 LED 呼吸灯</a></td></tr><tr><td>B4</td><td>基础</td><td>adc_mq2</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B4_basic_adc/README.md">ADC读取电压</a></td></tr><tr><td>B5</td><td>基础</td><td>i2c_bh1750</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B5_basic_i2c_nfc/README.md">I2C读取NFC标签</a></td></tr><tr><td>B6</td><td>基础</td><td>basic_uart</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B6_basic_uart/README.md">UART自发自收</a></td></tr><tr><td>C1</td><td>E53传感器</td><td>e53_sf1_example</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/C1_e53_sf1_mq2/README.md">驱动烟雾传感器 MQ2</a></td></tr><tr><td>C2</td><td>E53传感器</td><td>e53_ia1_example</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/C2_e53_ia1_temp_humi_pls/README.md">驱动温湿度传感器 SHT30</a></td></tr><tr><td>C3</td><td>E53传感器</td><td>e53_sc1_example</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/C3_e53_sc1_pls/README.md">驱动光强传感器 BH1750</a></td></tr><tr><td>C4</td><td>E53传感器</td><td>e53_sc2_example</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/C4_e53_sc2_axis/README.md">驱动 6 轴陀螺仪 MPU6050</a></td></tr><tr><td>C5</td><td>E53传感器</td><td>e53_is1_example</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/C5_e53_is1_infrared/README.md">驱动人体红外传感器</a></td></tr><tr><td>D1</td><td>物联网</td><td>iot_wifi_sta</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D1_iot_wifi_sta/README.md">Wifi扫描热点</a></td></tr><tr><td>D2</td><td>物联网</td><td>iot_wifi_sta_connect</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D2_iot_wifi_sta_connect/README.md">Wifi联网</a></td></tr><tr><td>D3</td><td>物联网</td><td>udp_client</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D3_iot_udp_client/README.md">使用 Socket 实现 UDP 客户端</a></td></tr><tr><td>D4</td><td>物联网</td><td>tcp_server</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D4_iot_tcp_server/README.md">使用 Socket 实现 TCP 服务端</a></td></tr><tr><td>D5</td><td>物联网</td><td>iot_mqtt</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D5_iot_mqtt/README.md">使用 Paho-MQTT 软件包实现 MQTT 协议通信</a></td></tr><tr><td>D6</td><td>物联网</td><td>iot_cloud_oc_sample</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D6_iot_cloud_oc/README.md">接入华为IoT 云平台</a></td></tr><tr><td>D7</td><td>物联网</td><td>iot_cloud_onenet_sample</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D7_iot_cloud_onenet/README.md">接入中国移动 OneNET 云平台</a></td></tr><tr><td>## 环境搭建</td><td></td><td></td><td></td></tr><tr><td>### Ubuntu 18.04 阿里云服务器 SSH登录</td><td></td><td></td><td></td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20201214131506462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></td><td></td><td></td><td></td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20201214131518869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></td><td></td><td></td><td></td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20201214131518647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></td><td></td><td></td><td></td></tr><tr><td>### 更新源</td><td></td><td></td><td></td></tr></tbody></table><pre class=" language-bash"><code class="language-bash">更新源<span class="token function">sudo</span> <span class="token function">apt-get</span> update</code></pre><h3 id="修改bash"><a href="#修改bash" class="headerlink" title="修改bash"></a>修改bash</h3><pre class=" language-bash"><code class="language-bash">将Linux shell改为bash<span class="token function">ls</span> -l /bin/sh<span class="token function">sudo</span> dpkg-reconfigure dash</code></pre><h3 id="Python环境配置"><a href="#Python环境配置" class="headerlink" title="Python环境配置"></a>Python环境配置</h3><p>按照视频一步一步的修改</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3.8<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip<span class="token function">sudo</span> pip3 <span class="token function">install</span> setuptools<span class="token function">sudo</span> pip3 <span class="token function">install</span> kconfiglib<span class="token function">sudo</span> pip3 <span class="token function">install</span> pycryptodome<span class="token function">sudo</span> pip3 <span class="token function">install</span> six --upgrade --ignore-installed six<span class="token function">sudo</span> pip3 <span class="token function">install</span> ecdsa修改python2 python3 修改为3.8<span class="token function">rm</span> /usr/bin/python<span class="token function">ln</span> -s python3.8 /usr/bin/python<span class="token function">rm</span> /usr/bin/python3<span class="token function">ln</span> -s python3.8 /usr/bin/python3</code></pre><p>查看python版本<br><img src="https://img-blog.csdnimg.cn/20201214131814483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="编译工具链安装"><a href="#编译工具链安装" class="headerlink" title="编译工具链安装"></a>编译工具链安装</h3><p>（有时间在写，最近考试）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BearPi-HM-Nano-HarmonyOS-环境搭建&quot;&gt;&lt;a href=&quot;#BearPi-HM-Nano-HarmonyOS-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;BearPi-HM Nano HarmonyOS 环境搭建&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="物联网" scheme="https://delehub.vercel.app/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="C" scheme="https://delehub.vercel.app/categories/%E7%89%A9%E8%81%94%E7%BD%91/C/"/>
    
      <category term="嵌入式" scheme="https://delehub.vercel.app/categories/%E7%89%A9%E8%81%94%E7%BD%91/C/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="鸿蒙" scheme="https://delehub.vercel.app/categories/%E7%89%A9%E8%81%94%E7%BD%91/C/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E9%B8%BF%E8%92%99/"/>
    
    
      <category term="嵌入式" scheme="https://delehub.vercel.app/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
      <category term="物联网" scheme="https://delehub.vercel.app/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="鸿蒙" scheme="https://delehub.vercel.app/tags/%E9%B8%BF%E8%92%99/"/>
    
      <category term="Bearpi" scheme="https://delehub.vercel.app/tags/Bearpi/"/>
    
      <category term="云服务器" scheme="https://delehub.vercel.app/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://delehub.vercel.app/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>STM32F1案例 串口USART库使用</title>
    <link href="https://delehub.vercel.app/2020/11/11/stm32f1-an-li-chuan-kou-usart-ku-shi-yong/"/>
    <id>https://delehub.vercel.app/2020/11/11/stm32f1-an-li-chuan-kou-usart-ku-shi-yong/</id>
    <published>2020-11-11T08:00:35.191Z</published>
    <updated>2020-11-11T08:18:06.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STM32F1案例-串口USART使用"><a href="#STM32F1案例-串口USART使用" class="headerlink" title="STM32F1案例 串口USART使用"></a>STM32F1案例 串口USART使用</h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板</li><li>STM32F103ZET6核心板</li><li>ST7735 TFT液晶显示屏<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><br><img src="https://img-blog.csdnimg.cn/20201105223425237.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2><ol><li>Keil MDK 5.31</li><li>串口调试助手</li></ol><h2 id="STM32F103ZET6-串口"><a href="#STM32F103ZET6-串口" class="headerlink" title="STM32F103ZET6 串口"></a>STM32F103ZET6 串口</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="https://img-blog.csdnimg.cn/2020111115592397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="USART 功能框图"></p><h3 id="串口引脚分布与解释"><a href="#串口引脚分布与解释" class="headerlink" title="串口引脚分布与解释"></a>串口引脚分布与解释</h3><ol><li>TX：发送数据输出引脚。</li><li>RX：接收数据输入引脚。</li><li>SW_RX：数据接收引脚，只用于单线和智能卡模式，属于内部引脚，没有具体外部引脚。</li><li>nRTS：请求以发送(Request To Send)，n 表示低电平有效。如果使能 RTS 流控制，当USART 接收器准备好接收新数据时就会将 nRTS 变成低电平；当接收寄存器已满时，nRTS将被设置为高电平。该引脚只适用于硬件流控制。</li><li>nCTS：清除以发送(Clear To Send)，n 表示低电平有效。如果使能 CTS 流控制，发送器在发送下一帧数据之前会检测 nCTS 引脚，如果为低电平，表示可以发送数据，如果为高电平则在发送完当前数据帧之后停止发送。该引脚只适用于硬件流控制。</li><li>SCLK：发送器时钟输出引脚。这个引脚仅适用于同步模式。<br><img src="https://img-blog.csdnimg.cn/20201111155054300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32F103VET6 芯片的 USART 引脚"></li></ol><h3 id="串口配置步骤"><a href="#串口配置步骤" class="headerlink" title="串口配置步骤"></a>串口配置步骤</h3><ol><li>使能RX和TX引脚GPIO时钟和USART时钟；</li><li>初始化 GPIO，并将GPIO复用到USART.上；</li><li>配置 USART参数；</li><li>配置中断控制器并使能USART接收中断；</li><li>使 能USART；</li><li>在USART接收中断服务函数实现数据接收和发送。</li></ol><h3 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  包含的系统外设头文件    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"USART.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QDTFT_demo.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Picture.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"oled.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"beep.h"</span></span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//unsigned char num;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time1 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag1 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time2 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag2 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time3 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag3 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time4 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag4 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Basictime <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> BasictimeCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Basictimeflag <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  硬件端口定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  引用函数声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Usart_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">oled_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Basic_GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USart_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 硬件初始化配置</span><span class="token comment" spellcheck="true">//  函数说明: Hareware_Iint</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//中断优先级分组 分2组</span>    <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器配置</span>    <span class="token function">USart_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//板载LED配置</span>    <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//板载独立按键测试</span>    <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// IIC 0.96 oled</span>    <span class="token function">Lcd_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//ST7735 LCD配置</span>    LCD_LED_SET<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置背光</span>    <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span>    <span class="token function">BEEP_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蜂鸣器配置</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LED测试函数</span><span class="token comment" spellcheck="true">//  函数说明: PB5 LED0  PE5 LED1</span><span class="token comment" spellcheck="true">//  函数备注: 板载LED 正常 </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      LED0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT_ShowTEST测试函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: ST7735 TFTLCD 测试正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span>  <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">Redraw_Mainmenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Num_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Font_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Color_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowImage</span><span class="token punctuation">(</span>gImage_qq<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span>      <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"By delehub"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_Float_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">123.56</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"By 2020-11-5"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"stm32 tft test "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: TIM2,3,4,5</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">USart_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UART4_Configuration</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口4配置</span>    <span class="token function">USART1_Configuration</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口1配置</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Usart_Test测试函数</span><span class="token comment" spellcheck="true">//  函数说明: 串口配置测试函数  STM32F103ZET6 5个串口</span><span class="token comment" spellcheck="true">//  函数备注: USART1  USART2 USART3 UART4 UART5 </span><span class="token comment" spellcheck="true">//   TX端口   PA9     PA2    PB10   PC10  PC12</span><span class="token comment" spellcheck="true">//   RX端口   PA10    PA3    PB11   PC11  PD2</span><span class="token comment" spellcheck="true">//  串口1~5 测试正常 打印效果正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">Usart_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">UART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"usart1 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"usart1 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">UART_SendString</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span><span class="token string">"usart2 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"usart2 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">UART_SendString</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span><span class="token string">"usart3 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"usart3 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">UART_SendString</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span><span class="token string">"uart4 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token string">"uart4 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0 </span>  <span class="token function">UART_SendString</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span><span class="token string">"uart5 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token string">"uart5 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 1</span>  <span class="token function">UART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendNumber_Float</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">123.56</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendNumber_Binary</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: oled_test测试函数</span><span class="token comment" spellcheck="true">//  函数说明: 采用软件IIC 进行配置   SDA PB9  SCL PB10 </span><span class="token comment" spellcheck="true">//  函数备注:  测试正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">oled_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_SignedInteger_06x08</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_UnsignedInteger_06x08</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_Float_06x08</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">123.46</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowString_06x08</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"oled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED_Clear();</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Key_Test 按键测试函数</span><span class="token comment" spellcheck="true">//  函数说明: KEY0 PE4 KEY1 PE3 KEY_WK_UP PA0</span><span class="token comment" spellcheck="true">//  函数备注: KEY0_PRES 1  KEY1_PRES 1  WKUP_PRES 3 </span><span class="token comment" spellcheck="true">//----------------------------------------- ---------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">Key_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"KEY:"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      key_value<span class="token operator">=</span><span class="token function">KEY_Scan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//USART_SendString(USART1,"key_value:3 \r\n");</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//USART_SendString(USART1,"key_value:2 \r\n");</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//USART_SendString(USART1,"key_value:1 \r\n");</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器配置</span><span class="token comment" spellcheck="true">//  函数说明: TIM2,3,4,5</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*定时器配置*/</span>    <span class="token function">BASIC_TIM_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM3_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM2_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM4_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 通用定时器定时器测试</span><span class="token comment" spellcheck="true">//  函数说明: TIM2,3,4,5</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// TIM5</span>    <span class="token punctuation">{</span>      timeflag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount1<span class="token operator">++</span><span class="token punctuation">;</span>                 LED1<span class="token operator">=</span><span class="token operator">!</span>LED1<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount1 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span>timeCount1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//TIM3     </span>    <span class="token punctuation">{</span>      timeflag2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount2<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount2 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>timeCount2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//TIM2  </span>    <span class="token punctuation">{</span>      timeflag3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount3<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount3 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span>timeCount3<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Green<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag4 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//TIM4   </span>    <span class="token punctuation">{</span>      timeflag4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount4<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount4 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span>timeCount4<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Green<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 基本定时器定时器测试</span><span class="token comment" spellcheck="true">//  函数说明: TIM6,7</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> Basictime <span class="token operator">==</span> <span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 1000 * 1 ms = 1s 时间到 */</span>          <span class="token punctuation">{</span>      Basictime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      BasictimeCount<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>BasictimeCount <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        BasictimeCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span>BasictimeCount<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Black<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器定时 1s 测试</span><span class="token comment" spellcheck="true">//  函数说明:  </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">Basic_GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通用定时器定时器测试</span>  <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本定时器定时器测试</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"stm32 timertest"</span><span class="token punctuation">,</span>Magenta<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"timeCount1 "</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"timeCount2 "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"timeCount3 "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token string">"timeCount4"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token string">"Basictime"</span><span class="token punctuation">,</span>Magenta<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 主函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>        <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//硬件初始化配置</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Usart_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="USART-C"><a href="#USART-C" class="headerlink" title="USART.C"></a>USART.C</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"USART.H"</span></span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART1_Configuration串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: USART1初始化函数</span><span class="token comment" spellcheck="true">//  函数备注: bound:波特率</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token comment" spellcheck="true">//#if EN_USART1_RX   //如果使能了接收  </span><span class="token comment" spellcheck="true">// 使用串口中断时 解除注释 #if EN_USART1_RX </span><span class="token comment" spellcheck="true">//注意,读取USARTx->SR能避免莫名其妙的错误       </span>u8 USART_RX_BUF<span class="token punctuation">[</span>USART_REC_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//接收缓冲,最大USART_REC_LEN个字节.</span><span class="token comment" spellcheck="true">//接收状态</span><span class="token comment" spellcheck="true">//bit15，    接收完成标志</span><span class="token comment" spellcheck="true">//bit14，    接收到0x0d</span><span class="token comment" spellcheck="true">//bit13~0，    接收到的有效字节数目</span>u16 USART_RX_STA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//接收状态标记      </span><span class="token keyword">void</span> <span class="token function">USART1_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//GPIO端口设置</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_USART1<span class="token operator">|</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使能USART1，GPIOA时钟</span>    <span class="token comment" spellcheck="true">//USART1_TX   GPIOA.9</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PA.9</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//复用推挽输出</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化GPIOA.9</span>    <span class="token comment" spellcheck="true">//USART1_RX      GPIOA.10初始化</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PA10</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浮空输入</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化GPIOA.10  </span>    <span class="token comment" spellcheck="true">//Usart1 NVIC 配置</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> USART1_IRQn<span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抢占优先级3</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子优先级3</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//IRQ通道使能</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据指定的参数初始化VIC寄存器</span>    <span class="token comment" spellcheck="true">//USART 初始化设置</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口波特率</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字长为8位数据格式</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个停止位</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无奇偶校验位</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无硬件数据流控制</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收发模式</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化串口1</span>    <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启串口接受中断</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//使能串口1 </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART1_IRQHandler串口中断服务函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">USART1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//串口1中断服务程序</span><span class="token punctuation">{</span>    u8 r<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收中断</span>    <span class="token punctuation">{</span>        r <span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(USART1->DR);    //读取接收到的数据</span>        <span class="token function">USART_SendData</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span> <span class="token operator">!=</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//#endif</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART2_Configuration串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: USART2初始化函数</span><span class="token comment" spellcheck="true">//  函数备注: bound:波特率</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token comment" spellcheck="true">//#if EN_USART2_RX   //如果使能了接收</span><span class="token keyword">void</span> <span class="token function">USART2_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_USART2<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//USART2 TX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//复用推挽输出；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口A；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//USART2 RX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//浮空输入；</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口A；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//波特率；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据位8位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//停止位1位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无校验位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无硬件流控；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收发模式；</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置串口参数；</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置中断组，4位抢占优先级，4位响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> USART2_IRQn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断号；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能串口；</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART2_IRQHandler串口中断服务函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">USART2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中断处理函数；</span><span class="token punctuation">{</span>   u8 r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收中断</span>  <span class="token punctuation">{</span>    r <span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>USART2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(USART1->DR);    //读取接收到的数据</span>    <span class="token function">USART_SendData</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span> <span class="token operator">!=</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//#endif</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART3_Configuration串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: USART3初始化函数</span><span class="token comment" spellcheck="true">//  函数备注: bound:波特率</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token comment" spellcheck="true">//#if EN_USART3_RX   //如果使能了接收</span><span class="token keyword">void</span> <span class="token function">USART3_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_USART3<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//USART3 TX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//复用推挽输出；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口B；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//USART3 RX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//浮空输入；</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口B；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//波特率；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据位8位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//停止位1位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无校验位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无硬件流控；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收发模式；</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置串口参数；</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置中断组，4位抢占优先级，4位响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> USART3_IRQn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断号；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能串口；</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART3_IRQHandler串口中断服务函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">USART3_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中断处理函数；</span><span class="token punctuation">{</span>  u8 r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收中断</span>  <span class="token punctuation">{</span>    r <span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>USART3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(USART1->DR);    //读取接收到的数据</span>    <span class="token function">USART_SendData</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span> <span class="token operator">!=</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//#endif</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: UART4_Configuration串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: UART4初始化函数</span><span class="token comment" spellcheck="true">//  函数备注: bound:波特率</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token comment" spellcheck="true">//#if EN_USART4_RX</span><span class="token keyword">void</span> <span class="token function">UART4_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_UART4<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//UART4 TX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//复用推挽输出；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口C；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//UART4 RX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//浮空输入；</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口C；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//波特率；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据位8位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//停止位1位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无校验位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无硬件流控；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收发模式；</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置串口参数；</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置中断组，4位抢占优先级，4位响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> UART4_IRQn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断号；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能串口；</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: UART4_IRQHandler串口中断服务函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">UART4_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中断处理函数；</span><span class="token punctuation">{</span>  u8 r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收中断</span>  <span class="token punctuation">{</span>    r <span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>UART4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(USART1->DR);    //读取接收到的数据</span>    <span class="token function">USART_SendData</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span> <span class="token operator">!=</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//#endif</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: UART5_Configuration串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: UART5初始化函数</span><span class="token comment" spellcheck="true">//  函数备注: bound:波特率</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token comment" spellcheck="true">//#if EN_USART5_RX</span><span class="token keyword">void</span> <span class="token function">UART5_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token operator">|</span>RCC_APB2Periph_GPIOD<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_UART5<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_12<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//UART5 TX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//复用推挽输出；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口C；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//UART5 RX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//浮空输入；</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口D；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//波特率；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据位8位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//停止位1位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无校验位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无硬件流控；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收发模式；</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置串口参数；</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置中断组，4位抢占优先级，4位响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> UART5_IRQn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断号；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能串口；</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: UART5_IRQHandler串口中断服务函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">UART5_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中断处理函数；</span><span class="token punctuation">{</span>  u8 r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收中断</span>  <span class="token punctuation">{</span>    r <span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>UART5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(USART1->DR);    //读取接收到的数据</span>    <span class="token function">USART_SendData</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span> <span class="token operator">!=</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//#endif</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送字节</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 本函数没有考虑发送9位数据可能性</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Byte - 字节  取值范文 - ASCII字符</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>USARTx <span class="token operator">-></span> SR <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 等待上次发送完成   </span>    USARTx <span class="token operator">-></span> DR <span class="token operator">=</span> Char<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 装载本次发送数据  </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 接收字符</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//  输出参量: Char - 待接收字节  取值范围 - ASCII字符</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">UART_ReceiveChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> USARTx<span class="token operator">-></span>DR<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送字符串</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            String - 待发送字符串指针  取值范文 - ASCII字符串</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendString</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true">// \0 表示字符串结束标志，通过检测是否字符串末尾</span>    <span class="token punctuation">{</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数组</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Array - 待发送数组的指针  取值范围 - 指针类型</span><span class="token comment" spellcheck="true">//            Count - 待发送数组的数量  取值范围 - 0~255</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> Array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送回车换行</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 换行</span>    <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 回车</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送有符号整型数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送整数  取值范围 - 整型类型 -99999~+99999</span><span class="token comment" spellcheck="true">//            Count - 显示的位数  取值范围 - 1~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 定义局部数组，用于数据存储</span>    <span class="token comment" spellcheck="true">// 判断 整型数字正负</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 负数转整数</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 发送串口数据</span>    <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送无符号整型数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送整数  取值范围 - 整型类型 0~99999</span><span class="token comment" spellcheck="true">//            Count - 显示的位数  取值范围 - 1~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 定义局部数组，用于数据存储</span>    <span class="token comment" spellcheck="true">// 断言检查参数</span>    <span class="token comment" spellcheck="true">// 执行相关操作</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送串口数据</span>    <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数字 浮点类型</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 本函数打印浮点数字与实际输入数字存在偏差</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送浮点型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count1 - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            Count2 - 小数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_Float</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">float</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储整数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储小数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span>  Number_Integer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的整数部分</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span>  Number_Decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的小数部分</span>    <span class="token comment" spellcheck="true">// 判断 浮点数字正负</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number<span class="token punctuation">;</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 限制 发送位数</span>    <span class="token comment" spellcheck="true">// 由于由于float型的有效十进制数值最多为7位，即整数位 + 小数位 数量一定小于等于7</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">+</span> Count2 <span class="token operator">></span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Count1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 分离 整数位与小数位</span>    <span class="token comment" spellcheck="true">// 取整数部分</span>    Number_Integer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 取小数部分 1e5科学计数法表示10000</span>    Number_Decimal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Number <span class="token operator">-</span> Number_Integer <span class="token operator">+</span> <span class="token number">0.000005</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span><span class="token punctuation">,</span> Count1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 显示整数位</span>    <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        Count2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 显示小数位</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数字 二进制数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送有符号长整型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_Binary</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Count<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Number <span class="token operator">&amp;</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>Count<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Number <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="USART-H"><a href="#USART-H" class="headerlink" title="USART.H"></a>USART.H</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __USART_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __USART_H__</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token comment" spellcheck="true">/*******************************************************************************// STM32C串口1 中断测试*******************************************************************************/</span> <span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  宏自定义声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_REC_LEN              200      </span><span class="token comment" spellcheck="true">//定义最大接收字节数 200</span><span class="token macro property">#<span class="token directive keyword">define</span> EN_USART1_RX             1        </span><span class="token comment" spellcheck="true">//使能（1）/禁止（0）串口1接收</span><span class="token macro property">#<span class="token directive keyword">define</span> EN_USART2_RX             1        </span><span class="token comment" spellcheck="true">//使能（1）/禁止（0）串口1接收      </span><span class="token macro property">#<span class="token directive keyword">define</span> EN_USART3_RX             1        </span><span class="token comment" spellcheck="true">//使能（1）/禁止（0）串口1接收 </span><span class="token macro property">#<span class="token directive keyword">define</span> EN_USART4_RX             1        </span><span class="token comment" spellcheck="true">//使能（1）/禁止（0）串口1接收      </span><span class="token macro property">#<span class="token directive keyword">define</span> EN_USART5_RX             1        </span><span class="token comment" spellcheck="true">//使能（1）/禁止（0）串口1接收 </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//如果想串口中断接收，请不要注释以下宏定义</span><span class="token keyword">extern</span> u8  USART_RX_BUF<span class="token punctuation">[</span>USART_REC_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接收缓冲,最大USART_REC_LEN个字节.末字节为换行符 </span><span class="token keyword">extern</span> u16 USART_RX_STA<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//接收状态标记    </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 串口配置函数</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">USART1_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART2_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART3_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART4_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART5_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 串口发送函数</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART_SendString</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">UART_ReceiveChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送数组 </span><span class="token keyword">void</span> <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送回车换行</span><span class="token keyword">void</span> <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送数字 </span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_Float</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">float</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_Binary</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="串口打印效果"><a href="#串口打印效果" class="headerlink" title="串口打印效果"></a>串口打印效果</h3><p><img src="https://img-blog.csdnimg.cn/20201111155436387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="串口发送函数"><br><img src="https://img-blog.csdnimg.cn/20201111155436252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="串口1 串口4测试"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;STM32F1案例-串口USART使用&quot;&gt;&lt;a href=&quot;#STM32F1案例-串口USART使用&quot; class=&quot;headerlink&quot; title=&quot;STM32F1案例 串口USART使用&quot;&gt;&lt;/a&gt;STM32F1案例 串口USART使用&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="C" scheme="https://delehub.vercel.app/categories/C/"/>
    
      <category term="嵌入式 STM32" scheme="https://delehub.vercel.app/categories/C/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/"/>
    
      <category term="串口通信" scheme="https://delehub.vercel.app/categories/C/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
      <category term="软件开发" scheme="https://delehub.vercel.app/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="USART 串口通信" scheme="https://delehub.vercel.app/tags/USART-%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>STM32F1案例 基本定时器(TIM6_7)与通用定时器(TIM2_3_4_5)使用</title>
    <link href="https://delehub.vercel.app/2020/11/09/stm32f1-an-li-ji-ben-ding-shi-qi-tim6-7-yu-tong-yong-ding-shi-qi-tim2-3-4-5-shi-yong/"/>
    <id>https://delehub.vercel.app/2020/11/09/stm32f1-an-li-ji-ben-ding-shi-qi-tim6-7-yu-tong-yong-ding-shi-qi-tim2-3-4-5-shi-yong/</id>
    <published>2020-11-09T15:52:42.199Z</published>
    <updated>2020-11-09T15:54:40.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STM32F1案例-ST7735-TFT液晶显示屏综合库使用"><a href="#STM32F1案例-ST7735-TFT液晶显示屏综合库使用" class="headerlink" title="STM32F1案例 ST7735 TFT液晶显示屏综合库使用"></a>STM32F1案例 ST7735 TFT液晶显示屏综合库使用</h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板</li><li>STM32F103ZET6核心板</li><li>ST7735 TFT液晶显示屏<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><br><img src="https://img-blog.csdnimg.cn/20201105223425237.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2><ol><li><p>Keil MDK 5.31</p></li><li><p>串口调试助手</p><h2 id="STM32F103ZET6-定时器"><a href="#STM32F103ZET6-定时器" class="headerlink" title="STM32F103ZET6 定时器"></a>STM32F103ZET6 定时器</h2><h4 id="STM32F1系列中，除了互联型的产品，共有-8-个定时器。"><a href="#STM32F1系列中，除了互联型的产品，共有-8-个定时器。" class="headerlink" title="STM32F1系列中，除了互联型的产品，共有 8 个定时器。"></a>STM32F1系列中，除了互联型的产品，共有 8 个定时器。</h4></li><li><p>基本定时器<br>TIM6和 TIM7是一个 16 位的只能向上计数的定时器，<br>功能：只能定时，没有外部 IO。</p></li><li><p>通用定时器<br>TIM2/3/4/5 是一个 16 位的可以向上/下计数的定时器，<br>功能：可以定时，可以输出比较，可以输入捕捉，每个定时器有四个外部 IO。</p></li><li><p>高级定时器<br>TIM1/8是一个 16 位的可以向上/下计数的定时器，<br>功能：可以定时，可以输出比较，可以输入捕捉，还可以有三相电机互补输出信号，每个定时器有 8 个外部 IO。<br><img src="https://img-blog.csdnimg.cn/20201109233843761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="定时器分布情况"></p><h4 id="TIM-TimeBaseInitTypeDef-结构体内部成员"><a href="#TIM-TimeBaseInitTypeDef-结构体内部成员" class="headerlink" title="TIM_TimeBaseInitTypeDef 结构体内部成员"></a>TIM_TimeBaseInitTypeDef 结构体内部成员</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>uint16_t TIM_Prescaler<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定时器预分频器  </span>uint16_t TIM_CounterMode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计数模式</span>uint16_t TIM_Period<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定时器周期    </span>uint16_t TIM_ClockDivision<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 时钟分频 7200</span>uint8_t TIM_RepetitionCounter<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 高级定时器 重复计数器</span></code></pre></li></ol><p>} TIM_TimeBaseInitTypeDef;       </p><pre><code>#### 定时器中断服务函数```cvoid TIMx_IRQHandler(void)   //TIMx中断{     if (TIM_GetITStatus(TIMx, TIM_IT_Update) != RESET)  //检查TIMx更新中断发生与否    {        //do somethings         TIM_ClearITPendingBit(TIMx, TIM_IT_Update  );  //清除TIMx更新中断标志    }}</code></pre><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><h3 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  包含的头文件    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"UART.H"</span></span><span class="token comment" spellcheck="true">//#include "USART.H"</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QDTFT_demo.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Picture.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"oled.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"beep.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  宏自定义声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//unsigned char num;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time1 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag1 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time2 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag2 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time3 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag3 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time4 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag4 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Basictime <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> BasictimeCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Basictimeflag <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  硬件端口定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  引用函数声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Usart_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">oled_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Basic_GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 硬件初始化配置</span><span class="token comment" spellcheck="true">//  函数说明: Hareware_Iint</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口配置</span>    <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器配置</span>    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//板载LED配置</span>    <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//板载独立按键测试</span>    <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// IIC 0.96 oled</span>    <span class="token function">Lcd_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//ST7735 LCD配置</span>    LCD_LED_SET<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置背光</span>    <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span>    <span class="token function">BEEP_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蜂鸣器配置</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LED测试函数</span><span class="token comment" spellcheck="true">//  函数说明: PB5 LED0  PE5 LED1</span><span class="token comment" spellcheck="true">//  函数备注: 板载LED 正常 </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      LED0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT_ShowTEST测试函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: ST7735 TFTLCD 测试正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span>  <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">Redraw_Mainmenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Num_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Font_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Color_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowImage</span><span class="token punctuation">(</span>gImage_qq<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span>      <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"By delehub"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_Float_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">123.56</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"By 2020-11-5"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"stm32 tft test "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Usart_Test测试函数</span><span class="token comment" spellcheck="true">//  函数说明: 串口配置测试函数  STM32F103ZET6 5个串口</span><span class="token comment" spellcheck="true">//  函数备注: USART1  USART2 USART3 UART4 UART5 </span><span class="token comment" spellcheck="true">//   TX端口   PA9     PA2    PB10   PC10  PC12</span><span class="token comment" spellcheck="true">//   RX端口   PA10    PA3    PB11   PC11  PD2</span><span class="token comment" spellcheck="true">//  串口1~5 测试正常 打印效果正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">Usart_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"usart1 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"usart1 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span><span class="token string">"usart2 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"usart2 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span><span class="token string">"usart3 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"usart3 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span><span class="token string">"uart4 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token string">"uart4 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span><span class="token string">"uart5 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token string">"uart5 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: oled_test测试函数</span><span class="token comment" spellcheck="true">//  函数说明: 采用软件IIC 进行配置   SDA PB9  SCL PB10 </span><span class="token comment" spellcheck="true">//  函数备注:  测试正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">oled_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_SignedInteger_06x08</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_UnsignedInteger_06x08</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_Float_06x08</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">123.46</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowString_06x08</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"oled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED_Clear();</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Key_Test 按键测试函数</span><span class="token comment" spellcheck="true">//  函数说明: KEY0 PE4 KEY1 PE3 KEY_WK_UP PA0</span><span class="token comment" spellcheck="true">//  函数备注: KEY0_PRES 1  KEY1_PRES 1  WKUP_PRES 3 </span><span class="token comment" spellcheck="true">//----------------------------------------- ---------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">Key_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"KEY:"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      key_value<span class="token operator">=</span><span class="token function">KEY_Scan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"key_value:3 \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"key_value:2 \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"key_value:1 \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*定时器配置*/</span>    <span class="token function">BASIC_TIM_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM3_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM2_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM4_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 通用定时器定时器测试</span><span class="token comment" spellcheck="true">//  函数说明: TIM2,3,4,5</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// TIM5</span>    <span class="token punctuation">{</span>      timeflag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount1<span class="token operator">++</span><span class="token punctuation">;</span>                 LED1<span class="token operator">=</span><span class="token operator">!</span>LED1<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount1 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span>timeCount1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//TIM3     </span>    <span class="token punctuation">{</span>      timeflag2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount2<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount2 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>timeCount2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//TIM2  </span>    <span class="token punctuation">{</span>      timeflag3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount3<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount3 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span>timeCount3<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Green<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag4 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//TIM4   </span>    <span class="token punctuation">{</span>      timeflag4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount4<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount4 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span>timeCount4<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Green<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 基本定时器定时器测试</span><span class="token comment" spellcheck="true">//  函数说明: TIM6,7</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> Basictime <span class="token operator">==</span> <span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 1000 * 1 ms = 1s 时间到 */</span>          <span class="token punctuation">{</span>      Basictime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      BasictimeCount<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>BasictimeCount <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        BasictimeCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span>BasictimeCount<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Black<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器定时 1s 测试</span><span class="token comment" spellcheck="true">//  函数说明:  </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">Basic_GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通用定时器定时器测试</span>  <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本定时器定时器测试</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 主函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>        <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"stm32 timertest"</span><span class="token punctuation">,</span>Magenta<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"timeCount1 "</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"timeCount2 "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"timeCount3 "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token string">"timeCount4"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token string">"Basictime"</span><span class="token punctuation">,</span>Magenta<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token function">Basic_GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="timer-c"><a href="#timer-c" class="headerlink" title="timer.c"></a>timer.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器1 初始化函数</span><span class="token comment" spellcheck="true">//  函数说明: 高级定时器 TIM1 TIM8</span><span class="token comment" spellcheck="true">//  函数备注: 定时，输出比较，输入捕捉，有三相电机互补输出信号，每个定时器有8个外部IO。</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">TIM1_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span> u16 psc<span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_TIM1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> psc<span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_RepetitionCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM1_UP_IRQn<span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TIM2_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span> u16 psc<span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//时钟使能</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置在下一个更新事件装入活动的自动重装载寄存器周期的值     计数到5000为500ms</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span>psc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置用来作为TIMx时钟频率除数的预分频值  10Khz的计数频率</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置时钟分割:TDTS = Tck_tim</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能指定的TIM3中断,允许更新中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM2_IRQn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM3中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先占优先级0级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从优先级3级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IRQ通道被使能</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使能TIMx</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//=================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器3 初始化函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">TIM3_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span> u16 psc<span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    TIM_OCInitTypeDef TIM_OCInitStructure;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//时钟使能</span>    <span class="token comment" spellcheck="true">//RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);</span>    <span class="token comment" spellcheck="true">//定时器TIM3初始化</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置在下一个更新事件装入活动的自动重装载寄存器周期的值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> psc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置用来作为TIMx时钟频率除数的预分频值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置时钟分割:TDTS = Tck_tim</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据指定的参数初始化TIMx的时间基数单位</span><span class="token comment" spellcheck="true">//    //pwm 初始化</span><span class="token comment" spellcheck="true">//    TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;</span><span class="token comment" spellcheck="true">//    TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Enable;</span><span class="token comment" spellcheck="true">//    TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_Low;</span><span class="token comment" spellcheck="true">//    TIM_OC3Init(TIM3,&amp;TIM_OCInitStructure);</span><span class="token comment" spellcheck="true">//    TIM_OC3PreloadConfig(TIM3,TIM_OCPreload_Enable);</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>     NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM3_IRQn<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//TIM3中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先占优先级0级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//从优先级3级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//IRQ通道被使能</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器4 初始化函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">TIM4_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span> u16 psc<span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//时钟使能</span>    <span class="token comment" spellcheck="true">//定时器TIM4初始化</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置在下一个更新事件装入活动的自动重装载寄存器周期的值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> psc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置用来作为TIMx时钟频率除数的预分频值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置时钟分割:TDTS = Tck_tim</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据指定的参数初始化TIMx的时间基数单位</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能指定的TIM4中断,允许更新中断</span>    <span class="token comment" spellcheck="true">//中断优先级NVIC设置</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM4_IRQn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM4中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先占优先级0级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从优先级3级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IRQ通道被使能</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化NVIC寄存器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能定时器4</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器5 初始化函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">TIM5_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM5<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//时钟使能</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置在下一个更新事件装入活动的自动重装载寄存器周期的值     计数到5000为500ms</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span>psc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置用来作为TIMx时钟频率除数的预分频值  10Khz的计数频率</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置时钟分割:TDTS = Tck_tim</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM5<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM5<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能指定的TIM3中断,允许更新中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM5_IRQn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM3中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先占优先级0级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从优先级3级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IRQ通道被使能</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM5<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使能TIMx</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: TIME6,7 基本定时器</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: 无</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">// 中断优先级配置</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BASIC_TIM_NVIC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 设置中断组为0</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_0<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置中断来源</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> BASIC_TIM_IRQ <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置主优先级为 0</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 设置抢占优先级为3</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * 注意：TIM_TimeBaseInitTypeDef结构体里面有5个成员，TIM6和TIM7的寄存器里面只有 * TIM_Prescaler和TIM_Period，所以使用TIM6和TIM7的时候只需初始化这两个成员即可， * 另外三个成员是通用定时器和高级定时器才有. *----------------------------------------------------------------------------- *typedef struct *{ TIM_Prescaler            都有 *    TIM_CounterMode                 TIMx,x[6,7]没有，其他都有 *  TIM_Period               都有 *  TIM_ClockDivision        TIMx,x[6,7]没有，其他都有 *  TIM_RepetitionCounter    TIMx,x[1,8,15,16,17]才有 *}TIM_TimeBaseInitTypeDef;  *----------------------------------------------------------------------------- */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BASIC_TIM_Mode_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启定时器时钟,即内部时钟CK_INT=72M</span>    <span class="token function">BASIC_TIM_APBxClock_FUN</span><span class="token punctuation">(</span>BASIC_TIM_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自动重装载寄存器的值，累计TIM_Period+1个频率后产生一个更新或者中断</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> BASIC_TIM_Period<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 时钟预分频数为</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler<span class="token operator">=</span> BASIC_TIM_Prescaler<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 时钟分频因子 ，基本定时器没有，不用管</span>    <span class="token comment" spellcheck="true">//TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;</span>        <span class="token comment" spellcheck="true">// 计数器计数模式，基本定时器只能向上计数，没有计数模式的设置</span>    <span class="token comment" spellcheck="true">//TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; </span>        <span class="token comment" spellcheck="true">// 重复计数器的值，基本定时器没有，不用管</span>        <span class="token comment" spellcheck="true">//TIM_TimeBaseStructure.TIM_RepetitionCounter=0;</span>      <span class="token comment" spellcheck="true">// 初始化定时器</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 清除计数器中断标志位</span>    <span class="token function">TIM_ClearFlag</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span> TIM_FLAG_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启计数器中断</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使能计数器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">BASIC_TIM_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">BASIC_TIM_NVIC_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BASIC_TIM_Mode_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器1 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">TIM1_UP_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">TIM_ClearFlag</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_IT_Update <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器1 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time3<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag3<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_FLAG_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>              time3<span class="token operator">++</span><span class="token punctuation">;</span>       timeflag3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器3 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time2<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag2<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM3_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//TIM3中断</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//检查指定的TIM中断发生与否:TIM 中断源 </span>     <span class="token punctuation">{</span>       <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_IT_Update  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//清除TIMx的中断待处理位:TIM 中断源 </span>       time2<span class="token operator">++</span><span class="token punctuation">;</span>       timeflag2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器4 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time4<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag4<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">TIM4_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//TIM4中断</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//检查TIM4更新中断发生与否</span>    <span class="token punctuation">{</span>      <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_IT_Update  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//清除TIM4更新中断标志</span>       time4<span class="token operator">++</span><span class="token punctuation">;</span>       timeflag4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器5 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time1<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag1<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM5_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//TIM3中断</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM5<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//检查指定的TIM中断发生与否:TIM 中断源</span>    <span class="token punctuation">{</span>      <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM5<span class="token punctuation">,</span> TIM_IT_Update  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//清除TIMx的中断待处理位:TIM 中断源</span>       time1<span class="token operator">++</span><span class="token punctuation">;</span>       timeflag1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器6,7 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明:  基本定时器6，7 </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Basictime<span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">BASIC_TIM_IRQHandler</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span> BASIC_TIM<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET <span class="token punctuation">)</span>     <span class="token punctuation">{</span>            <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>BASIC_TIM <span class="token punctuation">,</span> TIM_FLAG_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>    Basictime<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>             <span class="token punctuation">}</span></code></pre><h3 id="timer-h"><a href="#timer-h" class="headerlink" title="timer.h"></a>timer.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __TIMER_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __TIMER_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token comment" spellcheck="true">/********************基本定时器TIM参数定义，只限TIM6、7************/</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM6 </span><span class="token comment" spellcheck="true">// 如果使用TIM7，注释掉这个宏即可</span><span class="token macro property">#<span class="token directive keyword">ifdef</span>  BASIC_TIM6 </span><span class="token comment" spellcheck="true">// 使用基本定时器TIM6</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM                   TIM6</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_APBxClock_FUN     RCC_APB1PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_CLK               RCC_APB1Periph_TIM6</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_Period            (1000-1)</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_Prescaler         71</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_IRQ               TIM6_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_IRQHandler        TIM6_IRQHandler</span><span class="token macro property">#<span class="token directive keyword">else</span>  </span><span class="token comment" spellcheck="true">// 使用基本定时器TIM7</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM                   TIM7</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_APBxClock_FUN     RCC_APB1PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_CLK               RCC_APB1Periph_TIM7</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_Period            1000-1</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_Prescaler         71</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_IRQ               TIM7_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_IRQHandler        TIM7_IRQHandler</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">TIM1_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM2_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM3_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM4_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM5_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BASIC_TIM_Mode_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">BASIC_TIM_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="简单效果图片"><a href="#简单效果图片" class="headerlink" title="简单效果图片"></a>简单效果图片</h3><p><img src="https://img-blog.csdnimg.cn/20201109234248875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="定时器1s效果图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;STM32F1案例-ST7735-TFT液晶显示屏综合库使用&quot;&gt;&lt;a href=&quot;#STM32F1案例-ST7735-TFT液晶显示屏综合库使用&quot; class=&quot;headerlink&quot; title=&quot;STM32F1案例 ST7735 TFT液晶显示屏综合库使用&quot;&gt;
      
    
    </summary>
    
    
      <category term="C" scheme="https://delehub.vercel.app/categories/C/"/>
    
      <category term="嵌入式 STM32" scheme="https://delehub.vercel.app/categories/C/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/"/>
    
      <category term="定时器" scheme="https://delehub.vercel.app/categories/C/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
      <category term="软件开发" scheme="https://delehub.vercel.app/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="嵌入式STM32" scheme="https://delehub.vercel.app/tags/%E5%B5%8C%E5%85%A5%E5%BC%8FSTM32/"/>
    
      <category term="野火F1系列开发板" scheme="https://delehub.vercel.app/tags/%E9%87%8E%E7%81%ABF1%E7%B3%BB%E5%88%97%E5%BC%80%E5%8F%91%E6%9D%BF/"/>
    
      <category term="TFT液晶显示屏" scheme="https://delehub.vercel.app/tags/TFT%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%B1%8F/"/>
    
      <category term="基本定时器 通用定时器" scheme="https://delehub.vercel.app/tags/%E5%9F%BA%E6%9C%AC%E5%AE%9A%E6%97%B6%E5%99%A8-%E9%80%9A%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>STM32F1案例 ST7735 TFT液晶显示屏综合库使用</title>
    <link href="https://delehub.vercel.app/2020/11/05/stm32f1-an-li-st7735-tft-ye-jing-xian-shi-ping-zong-he-ku-shi-yong/"/>
    <id>https://delehub.vercel.app/2020/11/05/stm32f1-an-li-st7735-tft-ye-jing-xian-shi-ping-zong-he-ku-shi-yong/</id>
    <published>2020-11-05T14:48:44.295Z</published>
    <updated>2020-11-05T14:55:11.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STM32F1案例-ST7735-TFT液晶显示屏综合库使用"><a href="#STM32F1案例-ST7735-TFT液晶显示屏综合库使用" class="headerlink" title="STM32F1案例 ST7735 TFT液晶显示屏综合库使用"></a>STM32F1案例 ST7735 TFT液晶显示屏综合库使用</h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板</li><li>STM32F103ZET6核心板</li><li>ST7735 TFT液晶显示屏<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><br><img src="https://img-blog.csdnimg.cn/20201105223425237.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2><ol><li>Keil MDK 5.31</li><li>串口调试助手</li></ol><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><h3 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  包含的头文件    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QDTFT_demo.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Picture.h"</span></span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  宏自定义声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  硬件端口定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  引用函数声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 硬件初始化配置</span><span class="token comment" spellcheck="true">//  函数说明: Hareware_Iint</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LCD_LED_SET<span class="token punctuation">;</span>    <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LED测试函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      LED0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT_ShowTEST测试函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span>  <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">Redraw_Mainmenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Num_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Font_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Color_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowImage</span><span class="token punctuation">(</span>gImage_qq<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span>      <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"By delehub"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_Float_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">123.56</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"By 2020-11-5"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"stm32 tft test "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 主函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>        <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="LCD-C"><a href="#LCD-C" class="headerlink" title="LCD.C"></a>LCD.C</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  包含的头文件    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"font.h"</span></span><span class="token comment" spellcheck="true">//#include "Picture.h"</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  宏自定义声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//初始化PB5和PE5为输出口</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  硬件端口定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  引用函数声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LCD_GPIO_Init</span><span class="token comment" spellcheck="true">//  函数说明: //液晶IO初始化配置</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">LCD_GPIO_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span> RCC_APB2Periph_GPIOB <span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0<span class="token operator">|</span> GPIO_Pin_10<span class="token operator">|</span> GPIO_Pin_1<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span> RCC_APB2Periph_GPIOA <span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_4<span class="token operator">|</span> GPIO_Pin_5<span class="token operator">|</span> GPIO_Pin_7<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: SPI_WriteData</span><span class="token comment" spellcheck="true">//  函数说明: 向SPI总线传输一个8位数据</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span>  <span class="token function">SPI_WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span>                LCD_SDA_SET<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出数据</span>            <span class="token keyword">else</span> LCD_SDA_CLR<span class="token punctuation">;</span>      LCD_SCL_CLR<span class="token punctuation">;</span>             LCD_SCL_SET<span class="token punctuation">;</span>      Data<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Lcd_WriteIndex</span><span class="token comment" spellcheck="true">//  函数说明: 向液晶屏写一个8位指令</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Index<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//SPI 写命令时序开始</span>   LCD_CS_CLR<span class="token punctuation">;</span>   LCD_RS_CLR<span class="token punctuation">;</span>     <span class="token function">SPI_WriteData</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>   LCD_CS_SET<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Lcd_WriteData</span><span class="token comment" spellcheck="true">//  函数说明: 向液晶屏写一个8位数据</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>   LCD_CS_CLR<span class="token punctuation">;</span>   LCD_RS_SET<span class="token punctuation">;</span>   <span class="token function">SPI_WriteData</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>   LCD_CS_SET<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LCD_WriteData_16Bit</span><span class="token comment" spellcheck="true">//  函数说明: 向液晶屏写一个16位数据</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//向液晶屏写一个16位数据</span><span class="token keyword">void</span> <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>   LCD_CS_CLR<span class="token punctuation">;</span>   LCD_RS_SET<span class="token punctuation">;</span>     <span class="token function">SPI_WriteData</span><span class="token punctuation">(</span>Data<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//写入高8位数据</span>     <span class="token function">SPI_WriteData</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//写入低8位数据</span>   LCD_CS_SET<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Lcd_WriteReg</span><span class="token comment" spellcheck="true">//  函数说明: 写寄存器内容函数</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteReg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Index<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Lcd_Reset</span><span class="token comment" spellcheck="true">//  函数说明: LCD复位</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Lcd_Reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    LCD_RST_CLR<span class="token punctuation">;</span>    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LCD_RST_SET<span class="token punctuation">;</span>    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Lcd_Init</span><span class="token comment" spellcheck="true">//  函数说明: LCD硬件初始化</span><span class="token comment" spellcheck="true">//  函数备注: //LCD Init For 1.44Inch LCD Panel with ST7735R.</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Lcd_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">LCD_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Reset before LCD Init.</span>    <span class="token comment" spellcheck="true">//LCD Init For 1.44Inch LCD Panel with ST7735R.</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Sleep exit </span>    <span class="token function">delay_ms</span> <span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ST7735R Frame Rate</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xB1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xB2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xB3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xB4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Column inversion </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//ST7735R Power Sequence</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0xA2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x84</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0xC5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x8A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x8A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0xEE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//VCOM </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//MX, MY, RGB mode </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//ST7735R Gamma Sequence</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x7f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x9f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xF0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Enable test command  </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xF6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Disable ram power save mode </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x3A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//65k mode </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Display on     </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************函数名：LCD_Set_Region功能：设置lcd显示区域，在此区域写点数据自动换行入口参数：xy起点和终点返回值：无*************************************************/</span><span class="token keyword">void</span> <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x_start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y_start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x_end<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y_end<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>x_start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Lcd_WriteData(x_start+2);</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>x_end<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>y_start<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>y_end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************函数名：LCD_Set_XY功能：设置lcd显示起始点入口参数：xy坐标返回值：无*************************************************/</span><span class="token keyword">void</span> <span class="token function">Lcd_SetXY</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************函数名：LCD_DrawPoint功能：画一个点入口参数：无返回值：无*************************************************/</span><span class="token keyword">void</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***************************************** 函数功能：读TFT某一点的颜色                           出口参数：color  点颜色值                                 ******************************************/</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">Lcd_ReadPoint</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Data<span class="token punctuation">;</span>  <span class="token function">Lcd_SetXY</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************函数名：Lcd_Clear功能：全屏清屏函数入口参数：填充颜色COLOR返回值：无*************************************************/</span><span class="token keyword">void</span> <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Color<span class="token punctuation">)</span>               <span class="token punctuation">{</span>       <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>m<span class="token punctuation">;</span>   <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>X_MAX_PIXEL<span class="token number">-1</span><span class="token punctuation">,</span>Y_MAX_PIXEL<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>X_MAX_PIXEL<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>Y_MAX_PIXEL<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>              <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LCD_BGR2RGB</span><span class="token comment" spellcheck="true">//  函数说明: </span>  <span class="token comment" spellcheck="true">//读出的数据为GBR格式，而我们写入的时候为RGB格式。</span>  <span class="token comment" spellcheck="true">//通过该函数转换</span>  <span class="token comment" spellcheck="true">//c:GBR格式的颜色值</span>  <span class="token comment" spellcheck="true">//返回值：RGB格式的颜色值</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token function">LCD_BGR2RGB</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">,</span>rgb<span class="token punctuation">;</span>     b<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token operator">>></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x1f</span><span class="token punctuation">;</span>  g<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">;</span>  r<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token operator">>></span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x1f</span><span class="token punctuation">;</span>       rgb<span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token operator">&lt;&lt;</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>g<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span><span class="token punctuation">(</span>rgb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_Circle</span><span class="token comment" spellcheck="true">//  函数说明: 画圆函数</span><span class="token comment" spellcheck="true">//  函数备注: Bresenham算法 </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_Circle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> R<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>     <span class="token keyword">int</span> c<span class="token punctuation">;</span>     a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     b<span class="token operator">=</span>R<span class="token punctuation">;</span>     c<span class="token operator">=</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>R<span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>a<span class="token punctuation">,</span>Y<span class="token operator">+</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        7 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>a<span class="token punctuation">,</span>Y<span class="token operator">+</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        6 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>a<span class="token punctuation">,</span>Y<span class="token operator">-</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        2 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>a<span class="token punctuation">,</span>Y<span class="token operator">-</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        3 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>b<span class="token punctuation">,</span>Y<span class="token operator">+</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        8 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>b<span class="token punctuation">,</span>Y<span class="token operator">+</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        5 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>b<span class="token punctuation">,</span>Y<span class="token operator">-</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        1 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>b<span class="token punctuation">,</span>Y<span class="token operator">-</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        4 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> c<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>a<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             c<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>             b<span class="token operator">-</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        a<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>a<span class="token punctuation">,</span>Y<span class="token operator">+</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>a<span class="token punctuation">,</span>Y<span class="token operator">+</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>a<span class="token punctuation">,</span>Y<span class="token operator">-</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>a<span class="token punctuation">,</span>Y<span class="token operator">-</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>b<span class="token punctuation">,</span>Y<span class="token operator">+</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>b<span class="token punctuation">,</span>Y<span class="token operator">+</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>b<span class="token punctuation">,</span>Y<span class="token operator">-</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>b<span class="token punctuation">,</span>Y<span class="token operator">-</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_DrawLine</span><span class="token comment" spellcheck="true">//  函数说明: 画线函数</span><span class="token comment" spellcheck="true">//  函数备注: 画线函数，使用Bresenham 画线算法</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x0<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Color<span class="token punctuation">)</span>   <span class="token punctuation">{</span>  <span class="token keyword">int</span> dx<span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">// difference in x's</span>      dy<span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">// difference in y's</span>      dx2<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// dx,dy * 2</span>      dy2<span class="token punctuation">,</span>       x_inc<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// amount in pixel space to move during drawing</span>      y_inc<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// amount in pixel space to move during drawing</span>      error<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// the discriminant i.e. error i.e. decision variable</span>      index<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// used for looping    </span>      <span class="token function">Lcd_SetXY</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">)</span><span class="token punctuation">;</span>      dx <span class="token operator">=</span> x1<span class="token operator">-</span>x0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算x距离</span>      dy <span class="token operator">=</span> y1<span class="token operator">-</span>y0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算y距离</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        x_inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        x_inc <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        dx    <span class="token operator">=</span> <span class="token operator">-</span>dx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>dy<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        y_inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">else</span>      <span class="token punctuation">{</span>        y_inc <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        dy    <span class="token operator">=</span> <span class="token operator">-</span>dy<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       dx2 <span class="token operator">=</span> dx <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>      dy2 <span class="token operator">=</span> dy <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dx <span class="token operator">></span> dy<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//x距离大于y距离，那么每个x轴上只有一个点，每个y轴上有若干个点</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//且线的点数等于x距离，以x轴递增画点</span>      <span class="token comment" spellcheck="true">// initialize error term</span>      error <span class="token operator">=</span> dy2 <span class="token operator">-</span> dx<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// draw the line</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> dx<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//要画的点数不会超过x距离</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//画点</span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// test if error has overflowed</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//是否需要增加y坐标值</span>        <span class="token punctuation">{</span>          error<span class="token operator">-</span><span class="token operator">=</span>dx2<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// move to next line</span>          y0<span class="token operator">+</span><span class="token operator">=</span>y_inc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加y坐标值</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end if error overflowed</span>        <span class="token comment" spellcheck="true">// adjust the error term</span>        error<span class="token operator">+</span><span class="token operator">=</span>dy2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// move to the next pixel</span>        x0<span class="token operator">+</span><span class="token operator">=</span>x_inc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x坐标值每次画点后都递增1</span>      <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end for</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end if |slope| &lt;= 1</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//y轴大于x轴，则每个y轴上只有一个点，x轴若干个点</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//以y轴为递增画点</span>      <span class="token comment" spellcheck="true">// initialize error term</span>      error <span class="token operator">=</span> dx2 <span class="token operator">-</span> dy<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// draw the line</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> dy<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// set the pixel</span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// test if error overflowed</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          error<span class="token operator">-</span><span class="token operator">=</span>dy2<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// move to next line</span>          x0<span class="token operator">+</span><span class="token operator">=</span>x_inc<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end if error overflowed</span>        <span class="token comment" spellcheck="true">// adjust the error term</span>        error<span class="token operator">+</span><span class="token operator">=</span>dx2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// move to the next pixel</span>        y0<span class="token operator">+</span><span class="token operator">=</span>y_inc<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end for</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end else |slope| > 1</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_box</span><span class="token comment" spellcheck="true">//  函数说明: 画矩形函数</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_box</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> w<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> h<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>w<span class="token number">-2</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>h<span class="token number">-2</span><span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Gui_box2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> w<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> h<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> mode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************************************************************功能描述: 在屏幕显示一凸起的按钮框输    入: unsigned short x1,y1,x2,y2 按钮框左上角和右下角坐标输    出: 无**************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">DisplayButtonDown</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>  x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span> GRAY2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> GRAY1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>  x1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> GRAY2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//V</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y2<span class="token punctuation">,</span> GRAY1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//V</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y2<span class="token punctuation">,</span>  x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>  x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//V</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************************************************************功能描述: 在屏幕显示一凹下的按钮框输    入: unsigned short x1,y1,x2,y2 按钮框左上角和右下角坐标输    出: 无**************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">DisplayButtonUp</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>  x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>  x1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//V</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y2<span class="token number">-1</span><span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token number">-1</span><span class="token punctuation">,</span> GRAY1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y2<span class="token punctuation">,</span>  x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> GRAY2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x2<span class="token number">-1</span><span class="token punctuation">,</span>y1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token number">-1</span><span class="token punctuation">,</span>y2<span class="token punctuation">,</span> GRAY1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//V</span>  <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x2  <span class="token punctuation">,</span>y1  <span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> GRAY2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//V</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_DrawFont_GBK16</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: fc:font Color  bc :background Color</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_GBK16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> k<span class="token punctuation">,</span>x0<span class="token punctuation">;</span>    x0<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span>     <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            k<span class="token operator">=</span><span class="token operator">*</span>s<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                x<span class="token operator">=</span>x0<span class="token punctuation">;</span>                y<span class="token operator">+</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">32</span><span class="token punctuation">)</span> k<span class="token operator">-</span><span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span> <span class="token keyword">else</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>asc16<span class="token punctuation">[</span>k<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span>                         <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>hz16_num<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hz16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>hz16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Index<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>hz16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Msk<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>hz16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Msk<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                 <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            s<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_DrawFont_GBK24</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: fc:font Color  bc :background Color</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_GBK24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">*</span>s <span class="token operator">&lt;</span> <span class="token number">0x80</span> <span class="token punctuation">)</span>         <span class="token punctuation">{</span>            k<span class="token operator">=</span><span class="token operator">*</span>s<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">32</span><span class="token punctuation">)</span> k<span class="token operator">-</span><span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span> <span class="token keyword">else</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>asc16<span class="token punctuation">[</span>k<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                     <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            s<span class="token operator">++</span><span class="token punctuation">;</span>x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>hz24_num<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hz24<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>hz24<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Index<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">24</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>hz24<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Msk<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                 <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>hz24<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Msk<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>hz24<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Msk<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                 <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            s<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_DrawFont_Num32</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: fc:font Color  bc :background Color</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_Num32</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            c<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>sz32<span class="token operator">+</span>num<span class="token operator">*</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>k<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>        <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span>             <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>k<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 定位光标</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X_Start - X起始坐标  取值范围 - 0~239</span><span class="token comment" spellcheck="true">//            Y_Start - Y起始坐标  取值范围 - 0~239</span><span class="token comment" spellcheck="true">//            X_End - X终止坐标  取值范围 - 0~239</span><span class="token comment" spellcheck="true">//            Y_End - Y终止坐标  取值范围 - 0~239</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_SetArea</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X_Start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y_Start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X_End<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y_End<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行相应操作</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (TFT_FUNCTION_SCREEEN_VH == 0)      </span><span class="token comment" spellcheck="true">// 竖屏</span>    <span class="token punctuation">{</span>        <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>X_Start<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>X_End<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Y_Start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Y_End<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (TFT_FUNCTION_SCREEEN_VH == 0)</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (TFT_FUNCTION_SCREEEN_VH == 1)      </span><span class="token comment" spellcheck="true">// 横屏 待调整</span>    <span class="token punctuation">{</span>        <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>X_Start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>X_End<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Y_Start<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Y_End<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (TFT_FUNCTION_SCREEEN_VH == 1)</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示ASCII字符 08x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            ASCII - 待显示ASCII字符  取值范围 - ASCII字符</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> ASCII<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 定义局部变量 用于循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 定义局部变量 用于临时存储</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数</span>    FontCount <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_ASCII_08x16_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_ASCII_08x16_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 开始字库内容匹配                             </span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ASCII <span class="token operator">==</span> TFT_ASCII_08x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">TFT_SetArea</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> X<span class="token operator">+</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> Y<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置显示位置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 循环写入16字节 一个字符信息包含16字节</span>            <span class="token punctuation">{</span>                Data <span class="token operator">=</span> TFT_ASCII_08x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x80</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 判断最高位是否为1</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>FontColor<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 最高位为1 写入字符颜色</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 最高位为0 写入背景颜色</span>                    <span class="token punctuation">}</span>                    Data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 结束字库内容匹配                              </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示中文 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//            3. 1个汉字等同2个字节组成</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            Chinese - 待显示汉字  取值范围 - 单个汉字组成的字符串</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowChinese_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Chinese<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 定义局部变量 用于循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 定义局部变量 用于临时存储</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数    </span>    FontCount <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_CHINESE_16x16_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_CHINESE_16x16_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 开始字库内容匹配                             </span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>Chinese     <span class="token operator">==</span> TFT_CHINESE_16x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>Chinese<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> TFT_CHINESE_16x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">TFT_SetArea</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> X<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> Y<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置显示位置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 循环写入32字节 一个汉字信息包含32字节</span>            <span class="token punctuation">{</span>                Data <span class="token operator">=</span> TFT_CHINESE_16x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x80</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 判断最高位是否为1</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>FontColor<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 最高位为1 写入字符颜色</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 最高位为0 写入背景颜色</span>                    <span class="token punctuation">}</span>                    Data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 结束字库内容匹配                              </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示字符串 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            String - 待显示字符串  取值范围 - 字母/数字/符号/汉字混合组成的字符串</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 定义局部变量 用于标记字符串位置</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断字符串中的某字符的编码值是否小于0x80</span>        <span class="token comment" spellcheck="true">// 如果小于0x80 即为ASCII字符</span>        <span class="token comment" spellcheck="true">// 如果大于0x80 即为汉字字符串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>String <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示ASCII字符</span>            <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span>Position<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token operator">++</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>            Position<span class="token operator">++</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 字符串位置下一个位置</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示汉字</span>            <span class="token function">TFT_ShowChinese_16x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span>Position<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>String<span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>            Position<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 字符串位置下一个位置</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示中文 24x24像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//            3. 1个汉字等同2个字节组成</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            Chinese - 待显示汉字  取值范围 - 单个汉字组成的字符串</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowChinese_24x24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Chinese<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 定义局部变量 用于循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 定义局部变量 用于临时存储</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数    </span>    FontCount <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_CHINESE_24x24_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_CHINESE_24x24_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 开始字库内容匹配                             </span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>Chinese     <span class="token operator">==</span> TFT_CHINESE_24x24_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>Chinese<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> TFT_CHINESE_24x24_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">TFT_SetArea</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> X<span class="token operator">+</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> Y<span class="token operator">+</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置显示位置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">72</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 循环写入32字节 一个汉字信息包含32字节</span>            <span class="token punctuation">{</span>                Data <span class="token operator">=</span> TFT_CHINESE_24x24_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x80</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 判断最高位是否为1</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>FontColor<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 最高位为1 写入字符颜色</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 最高位为0 写入背景颜色</span>                    <span class="token punctuation">}</span>                    Data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 结束字库内容匹配                              </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示字符串 24x24像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            String - 待显示字符串  取值范围 - 字母/数字/符号/汉字混合组成的字符串</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowString_24x24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 定义局部变量 用于标记字符串位置</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断字符串中的某字符的编码值是否小于0x80</span>        <span class="token comment" spellcheck="true">// 如果小于0x80 即为ASCII字符</span>        <span class="token comment" spellcheck="true">// 如果大于0x80 即为汉字字符串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>String <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示ASCII字符</span>            <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span>Position<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token operator">++</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>            Position<span class="token operator">++</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 字符串位置下一个位置</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示汉字</span>            <span class="token function">TFT_ShowChinese_24x24</span><span class="token punctuation">(</span>X<span class="token operator">+</span>Position<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>String<span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>            Position<span class="token operator">+</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 字符串位置下一个位置</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示有符号整形数字 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成数字显示不完全</span><span class="token comment" spellcheck="true">//            2. 注意输入数字的取值范围</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            IntegerNumber - 待显示整型数字  取值范围 - -32767~+32768</span><span class="token comment" spellcheck="true">//            Count - 待显示整型数字长度      取值范围 - 1~5</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义局部数据 用于装载显示数据</span>    <span class="token comment" spellcheck="true">// 判断数字正负型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>IntegerNumber <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        IntegerNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">-</span>IntegerNumber<span class="token punctuation">;</span>        <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 限制显示字符数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 装载显示字符</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行显示操作</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示无符号整形数字 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成数字显示不完全</span><span class="token comment" spellcheck="true">//            2. 注意输入数字的取值范围</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            IntegerNumber - 待显示整型数字  取值范围 - -32767~+32768</span><span class="token comment" spellcheck="true">//            Count - 待显示整型数字长度      取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_UnsignedInteger_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义局部数据 用于装载显示数据</span>    <span class="token comment" spellcheck="true">// 限制 显示字符数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 装载显示字符</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行显示操作</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示浮点数字 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成数字显示不完全</span><span class="token comment" spellcheck="true">//            2. float型数据的有效数字7位 double型数据的有效数字16位</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            FloatNumber - 待显示浮点型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count1 - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            Count2 - 小数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_Float_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span> <span class="token keyword">float</span> FloatNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储整数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储小数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> Number_Integer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的 整数部分</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> Number_Decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的 小数部分</span>    <span class="token comment" spellcheck="true">// 判断数字正负型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>FloatNumber <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        FloatNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">-</span>FloatNumber<span class="token punctuation">;</span>        <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 限制 显示字符数</span>    <span class="token comment" spellcheck="true">// 由于由于float型的有效十进制数值最多为7位，即整数位 + 小数位 数量一定小于等于7</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">+</span> Count2 <span class="token operator">></span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Count1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算浮点数字的整数部分与小数部分</span>    Number_Integer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>FloatNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">// 取整数部分</span>    Number_Decimal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FloatNumber <span class="token operator">-</span> Number_Integer <span class="token operator">+</span> <span class="token number">0.000005</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 取小数部分，1e5科学计数法</span>    <span class="token comment" spellcheck="true">// 装载显示字符</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span><span class="token number">10000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 计算整数部分</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span><span class="token number">10000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 计算小数部分</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span>Count2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行显示操作</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>            Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span> X<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>Count1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span>                             FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>                                               <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span>Count1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示二进制数字 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 注意输入数字的取值范围</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            BinaryNumber - 待显示二进制数字  取值范围 - 0~65535</span><span class="token comment" spellcheck="true">//            Count - 二进制显示位数  取值范围 - 1~16</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_Binary_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> BinaryNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量，用于函数循环计数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Count<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>BinaryNumber <span class="token operator">&amp;</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>Count<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 显示二进制字符'1'</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 显示二进制字符'1'</span>        <span class="token punctuation">}</span>        BinaryNumber <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 移位运算</span>        X <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 数组位置下一个位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//取模方式 水平扫描 从左到右 低位在前</span><span class="token keyword">void</span> <span class="token function">TFT_ShowImage</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> picH<span class="token punctuation">,</span>picL<span class="token punctuation">;</span>    <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏  </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>           <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token operator">*</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token operator">*</span>k<span class="token punctuation">,</span><span class="token number">40</span><span class="token operator">*</span>j<span class="token operator">+</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//坐标设置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">40</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                     picL<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据低位在前</span>                picH<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>picH<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span>picL<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token punctuation">}</span>             <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="LCD-H"><a href="#LCD-H" class="headerlink" title="LCD.H"></a>LCD.H</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __LCD_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __LCD_H     </span><span class="token comment" spellcheck="true">//////////////////////////////////////////////////////////////////////////////////     </span><span class="token comment" spellcheck="true">//本程序只供学习使用，未经作者许可，不得用于其它任何用途</span><span class="token comment" spellcheck="true">//  功能描述   : 1.8寸LCD 4接口演示例程(STM32系列)</span><span class="token comment" spellcheck="true">/******************************************************************************//本程序适用与STM32F103C8//              GND   电源地//              VCC   接5V或3.3v电源//              SCL   接PA5（SCL）//              SDA   接PA7（SDA）//              RES   接PB0//              DC    接PB1//              CS    接PA4 //                            BL        接PB10*******************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">define</span> X_MAX_PIXEL            128</span><span class="token macro property">#<span class="token directive keyword">define</span> Y_MAX_PIXEL            160</span><span class="token comment" spellcheck="true">//  TFT 功能选项</span><span class="token macro property">#<span class="token directive keyword">define</span> TFT_FUNCTION_SCREEEN_VH     0            </span><span class="token comment" spellcheck="true">// TFT功能选项 屏幕横竖 取值范围 - 0为默认竖屏 1为横屏</span><span class="token macro property">#<span class="token directive keyword">define</span> RED        0xf800</span><span class="token macro property">#<span class="token directive keyword">define</span> GREEN      0x07e0</span><span class="token macro property">#<span class="token directive keyword">define</span> BLUE       0x001f</span><span class="token macro property">#<span class="token directive keyword">define</span> WHITE      0xffff</span><span class="token macro property">#<span class="token directive keyword">define</span> BLACK      0x0000</span><span class="token macro property">#<span class="token directive keyword">define</span> YELLOW  0xFFE0</span><span class="token macro property">#<span class="token directive keyword">define</span> GRAY0   0xEF7D           </span><span class="token comment" spellcheck="true">//灰色0 3165 00110 001011 00101</span><span class="token macro property">#<span class="token directive keyword">define</span> GRAY1   0x8410          </span><span class="token comment" spellcheck="true">//灰色1      00000 000000 00000</span><span class="token macro property">#<span class="token directive keyword">define</span> GRAY2   0x4208          </span><span class="token comment" spellcheck="true">//灰色2  1111111111011111</span><span class="token comment" spellcheck="true">//  TFT 显示颜色 枚举</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> enumTFT_Color<span class="token punctuation">{</span>    White   <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 白色</span>    Black   <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 黑色</span>    Blue1   <span class="token operator">=</span> <span class="token number">0x001F</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 浅蓝色</span>    Blue2   <span class="token operator">=</span> <span class="token number">0x051F</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 深蓝色</span>    Red     <span class="token operator">=</span> <span class="token number">0xF800</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 红色</span>    Magenta <span class="token operator">=</span> <span class="token number">0xF81F</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 品红色</span>    Green   <span class="token operator">=</span> <span class="token number">0x07E0</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 绿色</span>    Cyan    <span class="token operator">=</span> <span class="token number">0x7FFF</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 青色</span>    Yellow  <span class="token operator">=</span> <span class="token number">0xFFE0</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 黄色</span><span class="token punctuation">}</span>enumTFT_Color<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_CTRLA             GPIOA        </span><span class="token comment" spellcheck="true">//定义TFT数据端口</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_CTRLB             GPIOB        </span><span class="token comment" spellcheck="true">//定义TFT数据端口</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_SCL            GPIO_Pin_5    </span><span class="token comment" spellcheck="true">//PB13--->>TFT --SCL/SCK</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_SDA            GPIO_Pin_7    </span><span class="token comment" spellcheck="true">//PB15 MOSI--->>TFT --SDA/DIN</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_CS            GPIO_Pin_4  </span><span class="token comment" spellcheck="true">//MCU_PB11--->>TFT --CS/CE</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_LED            GPIO_Pin_10  </span><span class="token comment" spellcheck="true">//MCU_PB9--->>TFT --BL</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_RS             GPIO_Pin_1    </span><span class="token comment" spellcheck="true">//PB11--->>TFT --RS/DC</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_RST           GPIO_Pin_0    </span><span class="token comment" spellcheck="true">//PB10--->>TFT --RST</span><span class="token comment" spellcheck="true">//液晶控制口置1操作语句宏定义</span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_SCL_SET      LCD_CTRLA->BSRR=LCD_SCL    </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_SDA_SET      LCD_CTRLA->BSRR=LCD_SDA   </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_CS_SET      LCD_CTRLA->BSRR=LCD_CS  </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_LED_SET      LCD_CTRLB->BSRR=LCD_LED   </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_RS_SET      LCD_CTRLB->BSRR=LCD_RS </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_RST_SET      LCD_CTRLB->BSRR=LCD_RST </span><span class="token comment" spellcheck="true">//液晶控制口置0操作语句宏定义</span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_SCL_CLR      LCD_CTRLA->BRR=LCD_SCL  </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_SDA_CLR      LCD_CTRLA->BRR=LCD_SDA </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_CS_CLR      LCD_CTRLA->BRR=LCD_CS </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_LED_CLR      LCD_CTRLB->BRR=LCD_LED </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_RST_CLR      LCD_CTRLB->BRR=LCD_RST</span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_RS_CLR      LCD_CTRLB->BRR=LCD_RS </span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_DATAOUT(x) LCD_DATA->ODR=x; </span><span class="token comment" spellcheck="true">//数据输出</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_DATAIN     LCD_DATA->IDR;   </span><span class="token comment" spellcheck="true">//数据输入</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_WR_DATA(data){\LCD_RS_SET;\LCD_CS_CLR;\LCD_DATAOUT(data);\LCD_WR_CLR;\LCD_WR_SET;\LCD_CS_SET;\} </span><span class="token keyword">void</span> <span class="token function">LCD_GPIO_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteReg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Index<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token function">Lcd_ReadReg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> LCD_Reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_Reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_SetXY</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">Lcd_ReadPoint</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x_start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y_start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x_end<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y_end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token function">LCD_BGR2RGB</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_Circle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> R<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x0<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Color<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">Gui_box</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> w<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> h<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_box2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> w<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> h<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DisplayButtonDown</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DisplayButtonUp</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_GBK16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_GBK24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_Num32</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> num<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_SetArea</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X_Start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y_Start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X_End<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y_End<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowImage</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  TFT 显示字符/汉字/字符串</span><span class="token keyword">void</span> <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> ASCII<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowChinese_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Chinese<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowChinese_24x24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Chinese<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  TFT 显示有符号整型/无符号整型/浮点型数字</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_UnsignedInteger_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_Float_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">float</span> FloatNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_Binary_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> BinaryNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h4 id="工程下载地址"><a href="#工程下载地址" class="headerlink" title="工程下载地址"></a>工程下载地址</h4><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20201105224710603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="汉字 数字"><br><img src="https://img-blog.csdnimg.cn/20201105224710613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="字符串 数字 字符 浮点数"><br><img src="https://img-blog.csdnimg.cn/20201105224710572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="数码管字体"><br><img src="https://img-blog.csdnimg.cn/20201105224710563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="框架 汉字显示"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;STM32F1案例-ST7735-TFT液晶显示屏综合库使用&quot;&gt;&lt;a href=&quot;#STM32F1案例-ST7735-TFT液晶显示屏综合库使用&quot; class=&quot;headerlink&quot; title=&quot;STM32F1案例 ST7735 TFT液晶显示屏综合库使用&quot;&gt;
      
    
    </summary>
    
    
      <category term="C" scheme="https://delehub.vercel.app/categories/C/"/>
    
      <category term="嵌入式 STM32" scheme="https://delehub.vercel.app/categories/C/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/"/>
    
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
      <category term="软件开发" scheme="https://delehub.vercel.app/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="嵌入式STM32" scheme="https://delehub.vercel.app/tags/%E5%B5%8C%E5%85%A5%E5%BC%8FSTM32/"/>
    
      <category term="野火F1系列开发板" scheme="https://delehub.vercel.app/tags/%E9%87%8E%E7%81%ABF1%E7%B3%BB%E5%88%97%E5%BC%80%E5%8F%91%E6%9D%BF/"/>
    
      <category term="TFT液晶显示屏" scheme="https://delehub.vercel.app/tags/TFT%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>2020电子设计竞赛F题</title>
    <link href="https://delehub.vercel.app/2020/10/16/2020-dian-zi-she-ji-jing-sai-f-ti/"/>
    <id>https://delehub.vercel.app/2020/10/16/2020-dian-zi-she-ji-jing-sai-f-ti/</id>
    <published>2020-10-16T12:54:31.273Z</published>
    <updated>2020-10-16T13:24:12.884Z</updated>
    
    <content type="html"><![CDATA[<video id="video" controls="" preload="none" width="800px" height="500px" poster="https://res.nuedc-training.com.cn/s/png/2019/01/26/bbs_201901266708.png"><source id="mp4" src="https://player.bilibili.com/player.html?aid=244995234&bvid=BV1Bv411k7ZV&cid=245900724&page=1" type="video/mp4"></video>]]></content>
    
    <summary type="html">
    
      
      
        &lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot; width=&quot;800px&quot; height=&quot;500px&quot; poster=&quot;https://res.nuedc-training.com.cn/s/png/2019/01/26/bbs_201
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>野火F1开发板STM32案例 0.96 oled综合库使用</title>
    <link href="https://delehub.vercel.app/2020/10/07/ye-huo-f1-kai-fa-ban-stm32-an-li-0.96-oled-zong-he-ku-shi-yong/"/>
    <id>https://delehub.vercel.app/2020/10/07/ye-huo-f1-kai-fa-ban-stm32-an-li-0.96-oled-zong-he-ku-shi-yong/</id>
    <published>2020-10-07T10:56:42.897Z</published>
    <updated>2020-10-07T10:56:57.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="野火F1开发板STM32案例-MultiButton移植"><a href="#野火F1开发板STM32案例-MultiButton移植" class="headerlink" title="野火F1开发板STM32案例-MultiButton移植"></a><strong>野火F1开发板STM32案例-MultiButton移植</strong></h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板</li><li>0.96 IIC  oled模块<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2></li><li>Keil MDK 5.31</li><li>串口调试助手</li></ol><h2 id="IIC总线"><a href="#IIC总线" class="headerlink" title="IIC总线"></a>IIC总线</h2><p>处理器和芯片间的通信可以形象的比喻成两个人讲话：1、你说的别人得能听懂：双方约定信号的协议。2、你的语速别人得能接受：双方满足时序要求。 <br> 一、IIC总线的信号类型 <br> <img src="https://img-blog.csdn.net/20160331152600089" alt="开始和停止信号" title=""> <br> 1、开始信号：处理器让SCL时钟保持高电平，然后让SDA数据信号由高变低就表示一个开始信号。同时IIC总线上的设备检测到这个开始信号它就知道处理器要发送数据了。</p> </p><p>2、停止信号：处理器让SCL时钟保持高电平，然后让SDA数据信号由低变高就表示一个停止信号。同时IIC总线上的设备检测到这个停止信号它就知道处理器已经结束了数据传输，我们就可以各忙各个的了，如休眠等。 <br> 二、IIC数据传输过程 <br> 、<img src="https://img-blog.csdn.net/20160331153143263" alt="IIC数据传输" title=""> <br> 1、在数据传输时，SDA的数据在SCL为高电平时，必须保持稳定，SCL高电平器件完成数据的传输。在SCL低电平器件，可以任意改变SDA的数据。数据写入过程是从最好为开始，高位在前，低位在后，即MSB。 <br> 2、响应信号（ACK）：接收器在接收到8位数据后，在第9个时钟周期，拉低SDA电平。即接收数据的IC在接收到8bit数据后，向发送数据的IC发出特定的低电平脉冲，表示已收到数据。CPU向受控单元发出一个信号后，等待受控单元发出一个应答信号，CPU接收到应答信号后，根据实际情况作出是否继续传递信号的判断。若未收到应答信号，由判断为受控单元出现故障。 <br> 3、数据写入的过程 <br> <img src="https://img-blog.csdn.net/20160331153850250" alt="写入数据过程" title=""> <br> 首先发送一个开始信号，接着发送从机地址，OLED的从机地址前7位为地址，最后一位表示读(1)或者写(0)。应答ACK信号表示有这个从设备存在。在接收到应答信号后，发送控制位，来区分之后所发送的数据是控制命令还是显示相关的数据。在发送控制位后，等待应答信号。然后发送相应的控制命令或者数据。最后发送停止信号，表示数据传输完成。</p> <h2 id="bsp-oled-c"><a href="#bsp-oled-c" class="headerlink" title="bsp_oled.c"></a>bsp_oled.c</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//  功能描述   : 0.96寸OLED 接口演示例程(STM32F103ZE系列IIC)</span><span class="token comment" spellcheck="true">//              说明: </span><span class="token comment" spellcheck="true">//              ----------------------------------------------------------------</span><span class="token comment" spellcheck="true">//              GND   电源地</span><span class="token comment" spellcheck="true">//              VCC   接5V或3.3v电源</span><span class="token comment" spellcheck="true">//              SCL   接PD6（SCL）</span><span class="token comment" spellcheck="true">//              SDA   接PD7（SDA）            </span><span class="token comment" spellcheck="true">//              --------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"oled.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdlib.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"oledfont.h"</span>       </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"math.h"</span></span><span class="token comment" spellcheck="true">//OLED的显存</span><span class="token comment" spellcheck="true">//存放格式如下.</span><span class="token comment" spellcheck="true">//[0]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[1]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[2]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[3]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[4]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[5]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[6]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[7]0 1 2 3 ... 127             </span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> OLED_GRAM<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> OLED_GRAM_TEMP<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**********************************************//IIC Start**********************************************/</span><span class="token keyword">void</span> <span class="token function">IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_SCLK_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token function">OLED_SDIN_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_SDIN_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_SCLK_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********************************************//IIC Stop**********************************************/</span><span class="token keyword">void</span> <span class="token function">IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">OLED_SCLK_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token function">OLED_SDIN_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_SDIN_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_SCLK_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token function">OLED_SCLK_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********************************************// IIC Write byte**********************************************/</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Byte<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> message<span class="token punctuation">,</span>dat<span class="token punctuation">;</span>    dat<span class="token operator">=</span>IIC_Byte<span class="token punctuation">;</span>    <span class="token function">OLED_SCLK_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>      message<span class="token operator">=</span>dat<span class="token punctuation">;</span>      message<span class="token operator">=</span>message<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>message<span class="token operator">==</span><span class="token number">0x80</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">OLED_SDIN_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        <span class="token function">OLED_SDIN_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          dat<span class="token operator">=</span>dat<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">OLED_SCLK_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">OLED_SCLK_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********************************************// IIC Write Command**********************************************/</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Command</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Command<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Slave address,SA0=0</span>     <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//write command</span>     <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span>IIC_Command<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********************************************// IIC Write Data**********************************************/</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Data<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//D/C#=0; R/W#=0</span>     <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//write data</span>     <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span>IIC_Data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//OLED_WR_Byte(写数据，写命令)</span><span class="token comment" spellcheck="true">// OLED_WR_Byte-->Write_IIC_Data</span><span class="token comment" spellcheck="true">// OLED_WR_Byte-->Write_IIC_Command</span><span class="token comment" spellcheck="true">/*#define OLED_CMD  0    //写命令#define OLED_DATA 1    //写数据 */</span><span class="token keyword">void</span> <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> dat<span class="token punctuation">,</span><span class="token keyword">unsigned</span> cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token function">Write_IIC_Data</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>   <span class="token punctuation">{</span>    <span class="token function">Write_IIC_Command</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/********************************************// fill_Picture********************************************/</span><span class="token keyword">void</span> <span class="token function">fill_picture</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> fill_Data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>m<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//page0-page1</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//low column start address</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//high column start address</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>fill_Data<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************Delay****************************************/</span><span class="token keyword">void</span> <span class="token function">Delay_50ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Delay_50ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>Delay_50ms<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>Delay_50ms<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">6245</span><span class="token punctuation">;</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Delay_1ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Delay_1ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> count<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Delay_1ms<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">123</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化SSD1306                        </span><span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span>     <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使能PC,D,G端口时钟</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_9<span class="token operator">|</span>GPIO_Pin_10<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//PD3,PD6推挽输出  </span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//推挽输出</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//速度50MHz</span>     <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//初始化GPIOD3,6</span>     <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>GPIO_Pin_9<span class="token operator">|</span>GPIO_Pin_10<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//PD3,PD6 输出高</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xAE</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--display off</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//---set low column address</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//---set high column address</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--set start line address  </span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xB0</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--set page address</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// contract control</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--128   </span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xA1</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set segment remap </span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xA6</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--normal / reverse</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xA8</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--set multiplex ratio(1 to 64)</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x3F</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--1/32 duty</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xC8</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Com scan direction</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xD3</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-set display offset</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xD5</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set osc division</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xD8</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set area color mode off</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x05</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xD9</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set Pre-Charge Period</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xF1</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xDA</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set com pin configuartion</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xDB</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set Vcomh</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x8D</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set charge pump enable</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xAF</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--turn on oled panel</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//更新显存到LCD         </span><span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    u8 i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>i<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置页地址（0~7）</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置―列低地址</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置―列高地址   </span>        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>OLED_GRAM<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: OLED 外设驱动函数部分</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: 无</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//开启OLED显示    </span><span class="token keyword">void</span> <span class="token function">OLED_Display_On</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0X8D</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//SET DCDC命令</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0X14</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DCDC ON</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0XAF</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DISPLAY ON</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关闭OLED显示     </span><span class="token keyword">void</span> <span class="token function">OLED_Display_Off</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0X8D</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//SET DCDC命令</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0X10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DCDC OFF</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0XAE</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DISPLAY OFF</span><span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!      </span><span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      uint8_t count<span class="token punctuation">,</span>num<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>count<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置页地址（0~7）</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置—列低地址</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置—列高地址</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>num<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//更新显示</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_On</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      uint8_t count<span class="token punctuation">,</span>num<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>count<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置页地址（0~7）</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置—列低地址</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置—列高地址</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>num<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//更新显示</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_Fill，填充整个屏幕  * @param  fill_Data:要填充的数据    * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_Fill</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> fill_Data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//全屏填充</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>m<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//page0-page1</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//low column start address</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//high column start address</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>fill_Data<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//显示汉字</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 显示汉字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            Chinese - 待显示汉字  取值范围 - 单个汉字组成的字符串</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Chinese<span class="token punctuation">)</span><span class="token punctuation">{</span>                          <span class="token keyword">unsigned</span> <span class="token keyword">char</span> count<span class="token punctuation">,</span>adder<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>CHinese<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>Chinese<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>    adder<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>CHinese<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>Chinese<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>    adder<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED_Set_Pos 定位光标</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>Y<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token operator">&amp;</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token operator">&amp;</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 清除屏幕区域内容</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            X_Size - X方向尺寸  取值范围 - 1~127</span><span class="token comment" spellcheck="true">//            Y_Size - Y方向尺寸  取值范围 - 1~  7</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_AreaClear</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> X_Size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y_Size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token punctuation">(</span>Y_Size<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 遍历每一行</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 设置显示坐标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>X_Size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 遍历每一列</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示字符 06x08像素</span><span class="token comment" spellcheck="true">//  函数标记: 应用函数 已完成 </span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            Char - 待写字符   取值范围 - ASCII字符</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数</span>    FontCount<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 遍历每一字库</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Char <span class="token operator">==</span> OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 设置显示坐标</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 遍历每一列</span>            <span class="token punctuation">{</span>                <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示字符串 06x08像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//            3. 06x08像素不能显示汉字 只能显示ASCII字符</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            String - 待显示字符串  取值范围 - ASCII字符串</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowString_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span>                                  <span class="token comment" spellcheck="true">// 判断字符串是否为空 </span>    <span class="token punctuation">{</span>        <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 指定位置显示字符</span>        String<span class="token operator">++</span><span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>        X<span class="token operator">+</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// X坐标移动下一个位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示字符 08x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 应用函数 已完成 </span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            Char - 待显示字符  取值范围 - ASCII字符</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数</span>    FontCount<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_08x16_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_08x16_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 循环查询字符字模位置</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Char <span class="token operator">==</span> OLED_ASCII_08x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 设置显示坐标 用于显示字符</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>OLED_ASCII_08x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置显示坐标 用于显示字符</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>OLED_ASCII_08x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED 指定位置 显示中文 16x16像素</span><span class="token comment" spellcheck="true">////  函数标记: 应用函数 已完成 </span><span class="token comment" spellcheck="true">////  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">////            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">////            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">////            Chinese - 待显示汉字  取值范围 - 单个汉字组成的字符串</span><span class="token comment" spellcheck="true">////  输出参量: 无</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">//void OLED_ShowChinese_16x16(unsigned char X, unsigned char Y, unsigned char *Chinese)</span><span class="token comment" spellcheck="true">//{</span><span class="token comment" spellcheck="true">//    unsigned char i;                                // 定义局部变量 用于函数循环计数</span><span class="token comment" spellcheck="true">//    unsigned char j;                                // 定义局部变量 用于函数循环计数</span><span class="token comment" spellcheck="true">//    unsigned char FontCount;                        // 定义局部变量 用于记录字符字库个数</span><span class="token comment" spellcheck="true">//    // 断言检查参数</span><span class="token comment" spellcheck="true">//    </span><span class="token comment" spellcheck="true">//    FontCount=sizeof(OLED_CHINESE_16x16_FontCode)/sizeof(OLED_CHINESE_16x16_FontCode[0]);</span><span class="token comment" spellcheck="true">//    for(i=0; i&lt;FontCount; i++)                      // 循环查询字符字模位置</span><span class="token comment" spellcheck="true">//    {</span><span class="token comment" spellcheck="true">//        if ((*Chinese     == OLED_CHINESE_16x16_FontCode[i].Char[0])</span><span class="token comment" spellcheck="true">//        &amp;&amp;  (*(Chinese+1) == OLED_CHINESE_16x16_FontCode[i].Char[1]))</span><span class="token comment" spellcheck="true">//        {</span><span class="token comment" spellcheck="true">//            OLED_SetArea(X,Y);                      // 设置显示坐标 用于显示字符</span><span class="token comment" spellcheck="true">//            for(j=0; j&lt;16; j++)</span><span class="token comment" spellcheck="true">//            {</span><span class="token comment" spellcheck="true">//                OLED_WR_Byte(OLED_CHINESE_16x16_FontCode[i].Code[j],OLED_DATA);</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            OLED_SetArea(X,Y+1);                    // 设置显示坐标 用于显示字符</span><span class="token comment" spellcheck="true">//            for(j=16; j&lt;32; j++)</span><span class="token comment" spellcheck="true">//            {</span><span class="token comment" spellcheck="true">//                OLED_WR_Byte(OLED_CHINESE_16x16_FontCode[i].Code[j],OLED_DATA);</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            break;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示中英文混合字符串 08x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 目前能显示英文和汉字混合字符串</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            String - 待显示字符串  取值范围 - ASCII和汉字混合字符串</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowString_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 定义局部变量 用于标记字符串位置</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断字符串中的某字符的编码值是否小于0x80</span>        <span class="token comment" spellcheck="true">// 如果小于0x80 即为ASCII字符</span>        <span class="token comment" spellcheck="true">// 如果大于0x80 即为汉字字符串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>String <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示ASCII字符</span>            <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span>Position<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token operator">++</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>            Position<span class="token operator">++</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 字符串位置下一个位置</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            // 显示汉字</span><span class="token comment" spellcheck="true">//            OLED_ShowChinese_16x16(X+Position*8, Y, (unsigned char*)String);</span><span class="token comment" spellcheck="true">//            String+=2;                              // 字符串指针移动下一个字节</span><span class="token comment" spellcheck="true">//            Position+=2;                            // 字符串位置下一个位置</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> k<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数</span>    FontCount<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">// 循环查询字符字模位置</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>Array <span class="token operator">==</span> OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 设置显示坐标 用于显示字符</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Array<span class="token operator">++</span><span class="token punctuation">;</span>        X <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 数组位置下一个位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示有符号整形数字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1.最大显示5位数字 位置选取不恰当 可能造成数字显示不完全</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            IntegerNumber - 待显示整型数字 取值范围 - -32767~+32768</span><span class="token comment" spellcheck="true">//            Count - 待显示整型数字长度     取值范围 - 0~5；</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_SignedInteger_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 定义局部数组 用于数组数据存储</span>    <span class="token comment" spellcheck="true">// 判断 整型数字正负</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>IntegerNumber <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        IntegerNumber<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">-</span> IntegerNumber<span class="token punctuation">;</span>        <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行显示操作</span>    <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示无符号整形数字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1.最大显示5位数字 位置选取不恰当 可能造成数字显示不完全</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            IntegerNumber - 待显示整型数字 取值范围 - -32767~+32768</span><span class="token comment" spellcheck="true">//            Count - 待显示整型数字长度     取值范围 - 0~5；</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_UnsignedInteger_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 定义局部数组 用于数组数据存储</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行显示操作</span>    <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示06x08大小的浮点数字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: float型数据有效数字显示7位 double型数据有效数字16位</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            FloatNumber - 待显示浮点型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count1 - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            Count2 - 小数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Float_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">float</span> FloatNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储整数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储小数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Number_Integer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的 整数部分</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Number_Decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的 小数部分</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>FloatNumber <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        FloatNumber<span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> FloatNumber<span class="token punctuation">;</span>        <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 限制 显示字符数</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 由于由于float型的有效十进制数值最多为7位 即整数位 + 小数位 数量一定小于等于7</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">+</span> Count2 <span class="token operator">></span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Count1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Number_Integer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>FloatNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">// 取整数部分</span>    Number_Decimal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FloatNumber <span class="token operator">-</span> Number_Integer <span class="token operator">+</span> <span class="token number">0.000005</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取小数部分 1e5科学计数法</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span><span class="token number">10000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 计算整数部分</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span><span class="token number">10000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 计算小数部分</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">,</span>            Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span><span class="token punctuation">,</span> Count1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 显示整数位</span>    <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span> X<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>Count1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// 显示小数点</span>    <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span>Count1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        Count2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 显示小数位</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示06x08大小的二进制数字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 显示8位二进制数字 主要作为寄存器数据显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            BinaryNumber - 待显示二进制数字  取值范围 - 0~4294967295</span><span class="token comment" spellcheck="true">//            Count - 二进制显示位数  取值范围 - 1~16</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Binary_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> BinaryNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Count<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>BinaryNumber <span class="token operator">&amp;</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>Count<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示二进制字符'1'</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示二进制字符'1'</span>        <span class="token punctuation">}</span>        BinaryNumber <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 移位运算</span>        X <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 数组位置下一个位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示06x08大小的十六进制数字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 显示8位二进制数字 主要作为寄存器数据显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            BinaryNumber - 待显示二进制数字  取值范围 - 0~4294967295</span><span class="token comment" spellcheck="true">//            Count - 二进制显示位数  取值范围 - 1~8</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Hex_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> HexNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Number<span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// 定义局部变量 用于装载数据</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Count<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number <span class="token operator">=</span> HexNumber<span class="token operator">>></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0000000F</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token operator">+</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token operator">+</span><span class="token punctuation">(</span>Number<span class="token number">-10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        X <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 数组位置下一个位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 绘制直线数据</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 该点为8个像素的竖线 并非实际像素点</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            PointData - 直线数据  取值范围 - 0~255</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> PointData<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xB0</span><span class="token operator">+</span>Y<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X <span class="token operator">&amp;</span> <span class="token number">0xF0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>PointData<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 绘制图像 Draw_BMP</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            X_Size - X方向尺寸大小 取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y_Size - Y方向尺寸大小 取值范围 - 0~7</span><span class="token comment" spellcheck="true">//            Image - 图像数据</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">/*功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7*****************/</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Draw_BMP</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> BMP<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Y1<span class="token operator">%</span><span class="token number">8</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> y<span class="token operator">=</span>Y1<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> y<span class="token operator">=</span>Y1<span class="token operator">/</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span>Y0<span class="token punctuation">;</span>y<span class="token operator">&lt;</span>Y1<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X0<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span>X0<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>X1<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                  <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>BMP<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED 指定位置 画点</span><span class="token comment" spellcheck="true">////  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">////  函数说明: </span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: //画点 </span><span class="token comment" spellcheck="true">//              //x:0~127</span><span class="token comment" spellcheck="true">//              //y:0~63</span><span class="token comment" spellcheck="true">//              //t:1 填充 0,清空    </span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_DrawDot</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> T<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> pos<span class="token punctuation">,</span>bx<span class="token punctuation">,</span>temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>X<span class="token operator">></span><span class="token number">127</span><span class="token operator">||</span>Y<span class="token operator">></span><span class="token number">63</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        pos<span class="token operator">=</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>        bx<span class="token operator">=</span>Y<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span>        temp<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>bx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> OLED_GRAM<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token keyword">else</span> OLED_GRAM<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token operator">=</span><span class="token operator">~</span>temp<span class="token punctuation">;</span>        <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED LCD_DrawLine画直线函数</span><span class="token comment" spellcheck="true">////  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">////  函数说明: </span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: unsigned int X1,  直线：俩点坐标(x1,y1  ,(x2,y2)</span><span class="token comment" spellcheck="true">////            unsigned int Y1, </span><span class="token comment" spellcheck="true">////            unsigned int X2,</span><span class="token comment" spellcheck="true">////            unsigned int Y2，</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> X2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> t<span class="token punctuation">;</span>     <span class="token keyword">int</span> xerr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>yerr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>delta_x<span class="token punctuation">,</span>delta_y<span class="token punctuation">,</span>distance<span class="token punctuation">;</span>     <span class="token keyword">int</span> incx<span class="token punctuation">,</span>incy<span class="token punctuation">,</span>uRow<span class="token punctuation">,</span>uCol<span class="token punctuation">;</span>    delta_x<span class="token operator">=</span>X2<span class="token operator">-</span>X1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算坐标增量 </span>    delta_y<span class="token operator">=</span>Y2<span class="token operator">-</span>Y1<span class="token punctuation">;</span>     uRow<span class="token operator">=</span>X1<span class="token punctuation">;</span>     uCol<span class="token operator">=</span>Y1<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>delta_x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    incx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置单步方向 </span>  <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>delta_x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    incx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//垂直线 </span>  <span class="token punctuation">}</span>    <span class="token keyword">else</span>   <span class="token punctuation">{</span>     incx<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     delta_x<span class="token operator">=</span><span class="token operator">-</span>delta_x<span class="token punctuation">;</span>  <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>delta_y<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    incy<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>delta_y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    incy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//水平线 </span>    <span class="token keyword">else</span>  <span class="token punctuation">{</span>    incy<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    delta_y<span class="token operator">=</span><span class="token operator">-</span>delta_y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> delta_x<span class="token operator">></span>delta_y<span class="token punctuation">)</span>    distance<span class="token operator">=</span>delta_x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//选取基本增量坐标轴 </span>    <span class="token keyword">else</span>     distance<span class="token operator">=</span>delta_y<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>distance<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//画线输出 </span>    <span class="token punctuation">{</span>          <span class="token function">OLED_DrawDot</span><span class="token punctuation">(</span>uRow<span class="token punctuation">,</span>uCol<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画点 </span>        xerr<span class="token operator">+</span><span class="token operator">=</span>delta_x <span class="token punctuation">;</span>         yerr<span class="token operator">+</span><span class="token operator">=</span>delta_y <span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>xerr<span class="token operator">></span>distance<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             xerr<span class="token operator">-</span><span class="token operator">=</span>distance<span class="token punctuation">;</span>             uRow<span class="token operator">+</span><span class="token operator">=</span>incx<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>yerr<span class="token operator">></span>distance<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             yerr<span class="token operator">-</span><span class="token operator">=</span>distance<span class="token punctuation">;</span>             uCol<span class="token operator">+</span><span class="token operator">=</span>incy<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">////================================================================================================== </span><span class="token comment" spellcheck="true">/** * @brief  在 oled 显示器上使用 Bresenham 算法画圆 * @param  usX_Center ：在特定扫描方向下圆心的X坐标 * @param  usY_Center ：在特定扫描方向下圆心的Y坐标 * @param  usRadius：圆的半径（单位：像素） * @param  ucFilled ：选择是否填充该圆  *   该参数为以下值之一：  *     @arg 0 :空心圆  *     @arg 1 :实心圆 * @retval 无 */</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_DrawCircle</span><span class="token punctuation">(</span> uint16_t usX_Center<span class="token punctuation">,</span> uint16_t usY_Center<span class="token punctuation">,</span> uint16_t usRadius<span class="token punctuation">,</span> uint8_t ucFilled <span class="token punctuation">)</span><span class="token punctuation">{</span>    int16_t sCurrentX<span class="token punctuation">,</span> sCurrentY<span class="token punctuation">;</span>    int16_t sError<span class="token punctuation">;</span>    sCurrentX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> sCurrentY <span class="token operator">=</span> usRadius<span class="token punctuation">;</span>          sError <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span> usRadius <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//判断下个点位置的标志</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> sCurrentX <span class="token operator">&lt;=</span> sCurrentY <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int16_t sCountY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> ucFilled <span class="token punctuation">)</span>                         <span class="token keyword">for</span> <span class="token punctuation">(</span> sCountY <span class="token operator">=</span> sCurrentX<span class="token punctuation">;</span> sCountY <span class="token operator">&lt;=</span> sCurrentY<span class="token punctuation">;</span> sCountY <span class="token operator">++</span> <span class="token punctuation">)</span>             <span class="token punctuation">{</span>                                      <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCountY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//1，研究对象 </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCountY<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//2       </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCountY<span class="token punctuation">,</span>   usY_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//3</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCountY<span class="token punctuation">,</span>   usY_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//4</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCountY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//5    </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCountY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//6</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCountY<span class="token punctuation">,</span>   usY_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//7     </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCountY<span class="token punctuation">,</span>   usY_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//0                </span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>        <span class="token punctuation">{</span>                          <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCurrentY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//1，研究对象</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCurrentY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//2      </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentY<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//3</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentY<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//4</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCurrentY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//5       </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCurrentY<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//6</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentY<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//7 </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentY<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//0</span>    <span class="token punctuation">}</span>                            sCurrentX <span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> sError <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>             sError <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> sCurrentX <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>              <span class="token keyword">else</span>        <span class="token punctuation">{</span>            sError <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span> sCurrentX <span class="token operator">-</span> sCurrentY <span class="token punctuation">)</span><span class="token punctuation">;</span>               sCurrentY <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>             <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED LCD_DrawRectangle</span><span class="token comment" spellcheck="true">////  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">////  函数说明: </span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: unsigned int X1,  长度 宽度：俩点坐标(x1,y1  ,(x2,y2)</span><span class="token comment" spellcheck="true">////            unsigned int Y1, </span><span class="token comment" spellcheck="true">////            unsigned int X2,</span><span class="token comment" spellcheck="true">////            unsigned int Y2，</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">LCD_DrawRectangle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> X2<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>X1<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span>X2<span class="token punctuation">,</span>Y1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>X1<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span>X1<span class="token punctuation">,</span>Y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>X1<span class="token punctuation">,</span>Y2<span class="token punctuation">,</span>X2<span class="token punctuation">,</span>Y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>X2<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span>X2<span class="token punctuation">,</span>Y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED OLED_Fill_Draw_circle //画圆填充</span><span class="token comment" spellcheck="true">////  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">////  函数说明: </span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: //写画实心圆心(x0,y0),半径r，dot=1填充，dot=0不填充</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_Fill_Draw_circle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> r<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> dot<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">unsigned</span> <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>R <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>x <span class="token operator">=</span> X0<span class="token operator">-</span>r<span class="token punctuation">;</span>x <span class="token operator">&lt;=</span> X0<span class="token operator">+</span>r<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>y <span class="token operator">=</span> Y0<span class="token operator">-</span>r<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> Y0<span class="token operator">+</span>r <span class="token punctuation">;</span>y<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    R <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token operator">-</span>X0<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>Y0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//圆方程  x,y反置        </span>                    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> Y0 <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> Y0 <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">2</span><span class="token operator">*</span>Y0<span class="token operator">-</span>R <span class="token punctuation">)</span><span class="token operator">||</span> dot <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//点限制在 圆方程内    </span>            <span class="token function">OLED_DrawDot</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>dot<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED_RollDisplay</span><span class="token comment" spellcheck="true">////  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">////  函数说明: //水平滚动</span><span class="token comment" spellcheck="true">////  函数完成情况：有问题</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: 无</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_RollDisplay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x2E</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭滚动</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//水平向左或者右滚动 2A/29</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//虚拟字节</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//起始页 0</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//滚动时间间隔</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//终止页 7</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//虚拟字节</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//虚拟字节</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x2F</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启滚动</span><span class="token punctuation">}</span></code></pre><h3 id="oled-h"><a href="#oled-h" class="headerlink" title="oled.h"></a>oled.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __OLED_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __OLED_H                   </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdlib.h"</span>     </span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_MODE 0</span><span class="token macro property">#<span class="token directive keyword">define</span> SIZE 8</span><span class="token macro property">#<span class="token directive keyword">define</span> XLevelL        0x00</span><span class="token macro property">#<span class="token directive keyword">define</span> XLevelH        0x10</span><span class="token macro property">#<span class="token directive keyword">define</span> Max_Column    128</span><span class="token macro property">#<span class="token directive keyword">define</span> Max_Row        64</span><span class="token macro property">#<span class="token directive keyword">define</span>    Brightness    0xFF </span><span class="token macro property">#<span class="token directive keyword">define</span> X_WIDTH     128</span><span class="token macro property">#<span class="token directive keyword">define</span> Y_WIDTH     64       </span><span class="token comment" spellcheck="true">//-----------------OLED IIC端口定义----------------                         </span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_SCLK_Clr() GPIO_ResetBits(GPIOB,GPIO_Pin_9)</span><span class="token comment" spellcheck="true">//SDA IIC接口的时钟信号</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_SCLK_Set() GPIO_SetBits(GPIOB,GPIO_Pin_9)</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_SDIN_Clr() GPIO_ResetBits(GPIOB,GPIO_Pin_10)</span><span class="token comment" spellcheck="true">//SCL IIC接口的数据信号</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_SDIN_Set() GPIO_SetBits(GPIOB,GPIO_Pin_10)</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_CMD  0    </span><span class="token comment" spellcheck="true">//写命令</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_DATA 1    </span><span class="token comment" spellcheck="true">//写数据   </span><span class="token comment" spellcheck="true">//OLED控制用函数</span><span class="token keyword">void</span> <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> dat<span class="token punctuation">,</span><span class="token keyword">unsigned</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">OLED_Display_On</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_Display_Off</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  <span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oled 延迟函数</span><span class="token keyword">void</span> <span class="token function">Delay_50ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Delay_50ms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Delay_1ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Delay_1ms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IIC控制函数</span><span class="token keyword">void</span> <span class="token function">IIC_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IIC_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Command</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Byte<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oled 操作函数</span><span class="token keyword">void</span> <span class="token function">OLED_Fill</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> fill_Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全屏填充</span><span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_AreaClear</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> X_Size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y_Size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED 显示字符、字符串</span><span class="token keyword">void</span> <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowString_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Chinese<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示汉字函数</span><span class="token keyword">void</span> <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//void OLED_ShowChinese_16x16(unsigned char X, unsigned char Y, unsigned char *Chinese);</span><span class="token keyword">void</span> <span class="token function">OLED_ShowString_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED 显示整型数字/浮点型数字/二进制数字/十六进制数字</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_SignedInteger_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_UnsignedInteger_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Float_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">float</span> FloatNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Binary_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> BinaryNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Hex_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> BinaryNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED 绘制直线</span><span class="token keyword">void</span> <span class="token function">OLED_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> PointData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED 绘制图像</span><span class="token keyword">void</span> <span class="token function">OLED_RollDisplay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置水平左右移</span><span class="token keyword">void</span> <span class="token function">Draw_BMP</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> BMP<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_DrawDot</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画点函数</span><span class="token keyword">void</span> <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> X2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画直线函数</span><span class="token keyword">void</span> <span class="token function">OLED_Fill_Draw_circle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> r<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> dot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dot ==1 表示亮显示出来</span><span class="token keyword">void</span> <span class="token function">OLED_DrawCircle</span><span class="token punctuation">(</span> uint16_t usX_Center<span class="token punctuation">,</span> uint16_t usY_Center<span class="token punctuation">,</span> uint16_t usRadius<span class="token punctuation">,</span> uint8_t ucFilled <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ucFilled ==1 表示填充 //画直圆函数</span><span class="token keyword">void</span> <span class="token function">LCD_DrawRectangle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> X2<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//矩形</span><span class="token macro property">#<span class="token directive keyword">endif</span>  </span></code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __OLEDFONT_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __OLEDFONT_H        </span><span class="token comment" spellcheck="true">//常用ASCII表</span><span class="token comment" spellcheck="true">//偏移量32</span><span class="token comment" spellcheck="true">//ASCII字符集</span><span class="token comment" spellcheck="true">//偏移量32</span><span class="token comment" spellcheck="true">//大小:12*6</span><span class="token comment" spellcheck="true">/************************************6*8的点阵************************************/</span><span class="token keyword">const</span> <span class="token keyword">struct</span> struct_OLED_ASCII_06x08                <span class="token comment" spellcheck="true">// 结构体定义</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 编码 ASCII字符由1个字节组成</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Code<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 编码内容</span><span class="token punctuation">}</span> OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token operator">=</span>        <span class="token punctuation">{</span>    <span class="token string">' '</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//  （空格）</span>    <span class="token string">'!'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// !</span>    <span class="token string">'"'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// "</span>    <span class="token string">'#'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x14</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// #</span>    <span class="token string">'$'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0x12</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// $</span>    <span class="token string">'%'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// %</span>    <span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// &amp;</span>   <span class="token string">'\''</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// '</span>    <span class="token string">'('</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// (</span>    <span class="token string">')'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// )</span>    <span class="token string">'*'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x14</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// *</span>    <span class="token string">'+'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// +</span>    <span class="token string">','</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ,</span>    <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// -</span>    <span class="token string">'.'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// .</span>    <span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x02</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// /</span>    <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x3E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 0</span>    <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 1</span>    <span class="token string">'2'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x46</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 2</span>    <span class="token string">'3'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x31</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 3</span>    <span class="token string">'4'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 4</span>    <span class="token string">'5'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x39</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 5</span>    <span class="token string">'6'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 6</span>    <span class="token string">'7'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x03</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 7</span>    <span class="token string">'8'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x36</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 8</span>    <span class="token string">'9'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x1E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 9</span>    <span class="token string">':'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// :</span>    <span class="token string">';'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ;</span>    <span class="token string">'&lt;'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// &lt;</span>    <span class="token string">'='</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// =</span>    <span class="token string">'>'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x08</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ></span>    <span class="token string">'?'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x06</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ?</span>    <span class="token string">'@'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x3E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// @</span>    <span class="token string">'A'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x7C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// A</span>    <span class="token string">'B'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x36</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// B</span>    <span class="token string">'C'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// C</span>    <span class="token string">'D'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x1C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// D</span>    <span class="token string">'E'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x41</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// E</span>    <span class="token string">'F'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x01</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// F</span>    <span class="token string">'G'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x7A</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// G</span>    <span class="token string">'H'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x7F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// H</span>    <span class="token string">'I'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// I</span>    <span class="token string">'J'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x01</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// J</span>    <span class="token string">'K'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x41</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// K</span>    <span class="token string">'L'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// L</span>    <span class="token string">'M'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// M</span>    <span class="token string">'N'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x7F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// N</span>    <span class="token string">'O'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x3E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// O</span>    <span class="token string">'P'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x06</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// P</span>    <span class="token string">'Q'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x5E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// Q</span>    <span class="token string">'R'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x46</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// R</span>    <span class="token string">'S'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x31</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// S</span>    <span class="token string">'T'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// T</span>    <span class="token string">'U'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x3F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// U</span>    <span class="token string">'V'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x1F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// V</span>    <span class="token string">'W'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x3F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// W</span>    <span class="token string">'X'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x63</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// X</span>    <span class="token string">'Y'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x07</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// Y</span>    <span class="token string">'Z'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x43</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// Z</span>    <span class="token string">'['</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// [</span>    <span class="token string">']'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ]</span>    <span class="token string">'^'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x04</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ^</span>    <span class="token string">'_'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// _</span>    <span class="token string">'`'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// `</span>    <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x78</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// a</span>    <span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x38</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// b</span>    <span class="token string">'c'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// c</span>    <span class="token string">'d'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x7F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// d</span>    <span class="token string">'e'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// e</span>    <span class="token string">'f'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// f</span>    <span class="token string">'g'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x7C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// g</span>    <span class="token string">'h'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x78</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// h</span>    <span class="token string">'i'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// i</span>    <span class="token string">'j'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// j</span>    <span class="token string">'k'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// k</span>    <span class="token string">'l'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// l</span>    <span class="token string">'m'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x78</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// m</span>    <span class="token string">'n'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x78</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// n</span>    <span class="token string">'o'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x38</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// o</span>    <span class="token string">'p'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// p</span>    <span class="token string">'q'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xFC</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// q</span>    <span class="token string">'r'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x08</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// r</span>    <span class="token string">'s'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// s</span>    <span class="token string">'t'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// t</span>    <span class="token string">'u'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x7C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// u</span>    <span class="token string">'v'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x1C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// v</span>    <span class="token string">'w'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x3C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// w</span>    <span class="token string">'x'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x44</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// x</span>    <span class="token string">'y'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x7C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// y</span>    <span class="token string">'z'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x44</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// z</span>    <span class="token string">'|'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span> <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// |</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/****************************************8*16的点阵************************************/</span><span class="token keyword">const</span> <span class="token keyword">struct</span> struct_OLED_ASCII_08x16                <span class="token comment" spellcheck="true">// 结构体定义</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 编码 ASCII字符由1个字节组成</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Code<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 编码内容</span><span class="token punctuation">}</span> OLED_ASCII_08x16_FontCode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>      <span class="token punctuation">{</span>  <span class="token string">' '</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//  （空格）</span>    <span class="token string">'!'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// !</span>    <span class="token string">'"'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// "</span>    <span class="token string">'#'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// #</span>    <span class="token string">'$'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// $</span>    <span class="token string">'%'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// %</span>    <span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// &amp;</span>   <span class="token string">'\''</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// '</span>    <span class="token string">'('</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// (</span>    <span class="token string">')'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// )</span>    <span class="token string">'*'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// *</span>    <span class="token string">'+'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// +</span>    <span class="token string">','</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xB0</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ,</span>    <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// -</span>    <span class="token string">'.'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// .</span>    <span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// /</span>    <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 0</span>    <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 1</span>    <span class="token string">'2'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 2</span>    <span class="token string">'3'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 3</span>    <span class="token string">'4'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 4</span>    <span class="token string">'5'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 5</span>    <span class="token string">'6'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 6</span>    <span class="token string">'7'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 7</span>    <span class="token string">'8'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 8</span>    <span class="token string">'9'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 9</span>    <span class="token string">':'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// :</span>    <span class="token string">';'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ;</span>    <span class="token string">'&lt;'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// &lt;</span>    <span class="token string">'='</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// =</span>    <span class="token string">'>'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ></span>    <span class="token string">'?'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ?</span>    <span class="token string">'@'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x0B</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// @</span>    <span class="token string">'A'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// A</span>    <span class="token string">'B'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// B</span>    <span class="token string">'C'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// C</span>    <span class="token string">'D'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// D</span>    <span class="token string">'E'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// E</span>    <span class="token string">'F'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// F</span>    <span class="token string">'G'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// G</span>    <span class="token string">'H'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// H</span>    <span class="token string">'I'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// I</span>    <span class="token string">'J'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// J</span>    <span class="token string">'K'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// K</span>    <span class="token string">'L'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// L</span>    <span class="token string">'M'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// M</span>    <span class="token string">'N'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// N</span>    <span class="token string">'O'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// O</span>    <span class="token string">'P'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// P</span>    <span class="token string">'Q'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Q</span>    <span class="token string">'R'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// R</span>    <span class="token string">'S'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// S</span>    <span class="token string">'T'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// T</span>    <span class="token string">'U'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// U</span>    <span class="token string">'V'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// V</span>    <span class="token string">'W'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// W</span>    <span class="token string">'X'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// X</span>    <span class="token string">'Y'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Y</span>    <span class="token string">'Z'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Z</span>    <span class="token string">'['</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// [</span>    <span class="token string">']'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ]</span>    <span class="token string">'^'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ^</span>    <span class="token string">'_'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// _</span>    <span class="token string">'`'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// `</span>    <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// a</span>    <span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// b</span>    <span class="token string">'c'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// c</span>    <span class="token string">'d'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// d</span>    <span class="token string">'e'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// e</span>    <span class="token string">'f'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// f</span>    <span class="token string">'g'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// g</span>    <span class="token string">'h'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// h</span>    <span class="token string">'i'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// i</span>    <span class="token string">'j'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// j</span>    <span class="token string">'k'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x2D</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// k</span>    <span class="token string">'l'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// l</span>    <span class="token string">'m'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// m</span>    <span class="token string">'n'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// n</span>    <span class="token string">'o'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// o</span>    <span class="token string">'p'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xA1</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// p</span>    <span class="token string">'q'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xA0</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x80</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// q</span>    <span class="token string">'r'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// r</span>    <span class="token string">'s'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// s</span>    <span class="token string">'t'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// t</span>    <span class="token string">'u'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// u</span>    <span class="token string">'v'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// v</span>    <span class="token string">'w'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// w</span>    <span class="token string">'x'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x2E</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// x</span>    <span class="token string">'y'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x81</span><span class="token punctuation">,</span><span class="token number">0x8E</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// y</span>    <span class="token string">'z'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// z</span>    <span class="token string">'{'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// {</span>    <span class="token string">'|'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// |</span>    <span class="token string">'}'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token string">'~'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ~</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span> CHinese<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"中",0*/</span><span class="token punctuation">{</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"景",1*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"园",2*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x9F</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"电",3*/</span><span class="token punctuation">{</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0xE2</span><span class="token punctuation">,</span><span class="token number">0xA2</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"子",4*/</span><span class="token punctuation">{</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0xA3</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0xCC</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"科",5*/</span><span class="token punctuation">{</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x81</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"?",0*/</span><span class="token punctuation">{</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"专",0*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"业",1*/</span><span class="token punctuation">{</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x81</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"技",2*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xD0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0xD0</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"术",3*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0xA2</span><span class="token punctuation">,</span><span class="token number">0x9E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x2F</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"服",4*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x8C</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1A</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"务",5*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0xB4</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0xB4</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"商",6*/</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p><img src="https://img-blog.csdnimg.cn/20201007144525770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="oled 画点 画直线  画圆现象"><br><img src="https://img-blog.csdnimg.cn/20201007144525768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="oled 显示 字符串 整形数字 浮点数 "><br><img src="https://img-blog.csdnimg.cn/20201007144525767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="oled 显示图片"><br><img src="https://img-blog.csdnimg.cn/20201007144525721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="oled 显示 汉字 字符串 字符"><br><img src="https://img-blog.csdnimg.cn/20201007144525708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="oled 显示 汉字 不同大小的字符串 圆 矩形  有符号数字 "></p><h4 id="博客地址https-delehub-vercel-app"><a href="#博客地址https-delehub-vercel-app" class="headerlink" title="博客地址https://delehub.vercel.app/"></a>博客地址<a href="https://delehub.vercel.app/">https://delehub.vercel.app/</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;野火F1开发板STM32案例-MultiButton移植&quot;&gt;&lt;a href=&quot;#野火F1开发板STM32案例-MultiButton移植&quot; class=&quot;headerlink&quot; title=&quot;野火F1开发板STM32案例-MultiButton移植&quot;&gt;&lt;/a&gt;&lt;s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>STM32应用 TFT ILI9328液晶显示</title>
    <link href="https://delehub.vercel.app/2020/10/04/stm32-ying-yong-tft-ili9328-ye-jing-xian-shi/"/>
    <id>https://delehub.vercel.app/2020/10/04/stm32-ying-yong-tft-ili9328-ye-jing-xian-shi/</id>
    <published>2020-10-04T14:04:23.705Z</published>
    <updated>2020-10-04T14:04:33.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STM32F103C8T6-TFTILI9328液晶显示屏使用教程"><a href="#STM32F103C8T6-TFTILI9328液晶显示屏使用教程" class="headerlink" title="STM32F103C8T6 TFTILI9328液晶显示屏使用教程"></a>STM32F103C8T6 TFTILI9328液晶显示屏使用教程</h1><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>STM32F103C8T6 TFTILI9328 ST-LINKV2下载 杜帮线</p><h5 id="STMF103C8T6"><a href="#STMF103C8T6" class="headerlink" title="STMF103C8T6"></a>STMF103C8T6</h5><p><img src="https://img-blog.csdnimg.cn/20200723202459983.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="TFTILI9328液晶显示屏"><a href="#TFTILI9328液晶显示屏" class="headerlink" title="TFTILI9328液晶显示屏"></a>TFTILI9328液晶显示屏</h5><p><img src="https://img-blog.csdnimg.cn/20200723202522373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="硬件连接-按照下面代码连接"><a href="#硬件连接-按照下面代码连接" class="headerlink" title="硬件连接(按照下面代码连接)"></a>硬件连接(按照下面代码连接)</h5><p><img src="https://img-blog.csdnimg.cn/20200723202522298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>TFT.C</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/****************************************************************************************************  文件功能描述：320x240TFT驱动程序，控制TFT实现汉字,字符显示,画点功能。****************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                   </span><span class="token comment" spellcheck="true">//STM32器件寄存器定义头文件，必须包含</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"user_Config.h"</span>                  </span><span class="token comment" spellcheck="true">//用户配置头文件，用于配置硬件连接资源,位于项目文件夹下</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Ascii_8x16.h"</span>                  </span><span class="token comment" spellcheck="true">//8x16大小字符</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Chinese.h"</span>                     </span><span class="token comment" spellcheck="true">//16x16像素大小的汉字</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/**************声明外部函数和变量**************extern unsigned int Device_code;/****************************************************************************************************//    实现功能：    延时//    输入参数：    count 设置延时时间****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>                                                                                    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                                                                           <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">0x640</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>                                                                                     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    写命令//    输入参数：  DH 需要输入16bits命令的高8位//              DL 需要输入16bits命令的低8位****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Write_Cmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DH<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DL<span class="token punctuation">)</span><span class="token punctuation">{</span>    CS_CLR<span class="token punctuation">;</span>    RS_CLR<span class="token punctuation">;</span>    RD_SET<span class="token punctuation">;</span>    RW_CLR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意：当使用8位数据口驱动16位数据模式时，使用74HC573作为IO扩展，程序如下           </span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>DataPort<span class="token punctuation">,</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">(</span>DL <span class="token operator">|</span> <span class="token number">0xff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//送低8位命令给573待锁存</span>    LE_SET<span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">//锁存位</span>    LE_CLR<span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">//断开锁存,位选573的Q7~Q0仍保持           </span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>DataPort<span class="token punctuation">,</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">(</span>DH <span class="token operator">|</span> <span class="token number">0xff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//送高8位命令给TFT</span>    <span class="token comment" spellcheck="true">/*    //如果使用16位数据口驱动16位数据模式，则无需IO扩展，直接将数据送到数据口即可    DataPort_L=DL;     DataPort_H=DH;    */</span>    RW_SET<span class="token punctuation">;</span>    CS_SET<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    写数据(2*8bits)//    输入参数：  DH 需要输入16bits数据的高8位//              DL 需要输入16bits数据的低8位****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Write_Data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DH<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DL<span class="token punctuation">)</span><span class="token punctuation">{</span>    CS_CLR<span class="token punctuation">;</span>    RS_SET<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意：当使用8位数据口驱动16位数据模式时，使用74HC573作为IO扩展，程序如下           </span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>DataPort<span class="token punctuation">,</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">(</span>DL <span class="token operator">|</span> <span class="token number">0xff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//送低8位命令给573待锁存</span>    LE_SET<span class="token punctuation">;</span>                                                           <span class="token comment" spellcheck="true">//锁存位</span>    LE_CLR<span class="token punctuation">;</span>                                                           <span class="token comment" spellcheck="true">//断开锁存,位选573的Q7~Q0仍保持           </span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>DataPort<span class="token punctuation">,</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">(</span>DH <span class="token operator">|</span> <span class="token number">0xff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//送高8位命令给TFT</span>    <span class="token comment" spellcheck="true">/*    //如果使用16位数据口驱动16位数据模式，则无需IO扩展，直接将数据送到数据口即可    DataPort_L=DL;     DataPort_H=DH;    */</span>    RW_CLR<span class="token punctuation">;</span>    RW_SET<span class="token punctuation">;</span>    CS_SET<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    写数据(16位)//    输入参数：  y 需要输入16bits数据****************************************************************************************************/</span><span class="token keyword">void</span>  <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    m<span class="token operator">=</span>y<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">;</span>    n<span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token function">Write_Data</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    向x寄存器写入y数据//    输入参数：  x 需要输入的命令 16位//              y 需要输入的数据 16位****************************************************************************************************/</span><span class="token keyword">void</span>  <span class="token function">Write_Cmd_Data</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    m<span class="token operator">=</span>y<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">;</span>    n<span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token function">Write_Cmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Data</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    设置坐标//  输入参数：  x0，y0 起始坐标//              x1，y1 结束坐标****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span>x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Horizontal GRAM Start Address</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">,</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Horizontal GRAM End Address</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x52</span><span class="token punctuation">,</span>y0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x53</span><span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span>x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// GRAM horizontal Address</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">,</span>y0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// GRAM Vertical Address</span>  <span class="token function">Write_Cmd</span> <span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x0022,Start to Write Data to GRAM </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    TFT清屏//    输入参数：    bColor 清屏所使用的背景色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">CLR_Screen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token comment" spellcheck="true">//320x240，坐标从0开始</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">320</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">240</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>bColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    显示Ascii字符//  输入参数：  x 横坐标//              y 纵坐标//                c 需要显示的字符//                fColor 字符颜色//                bColor 字符背景颜色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>     <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//设置字符显示位置</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>                             <span class="token comment" spellcheck="true">//循环写入16字节，一个字符为16字节</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token operator">=</span>Font8x16<span class="token punctuation">[</span><span class="token punctuation">(</span>c<span class="token number">-0x20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//提取c字符的第i个字节以,c减去0x20是由于Ascii码库中的0~1f被去掉</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//循环写入8位，一个字节为8位</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x80</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//判断最高位是否为1</span>                        <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>fColor<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//最高位为1，写入字符颜色</span>                    <span class="token punctuation">}</span>                <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>bColor<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//最高位为0，写入背景颜色</span>                    <span class="token punctuation">}</span>                m<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//左移1位，准备写下一位</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    显示16x16汉字//  输入参数： x 横坐标//            y 纵坐标//                g 需要显示的字符编码//                fColor 字符颜色//                bColor 字符背景颜色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Put16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> g<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>  x<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//设置汉字显示位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">64</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                                      <span class="token comment" spellcheck="true">//循环64次，查询汉字字模位置</span>    <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>GBK<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>ch16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>GBK<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//判断第k个汉字的编码是否与输入汉字g[2]相等</span>      <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                                   <span class="token comment" spellcheck="true">//如果相等，既已找到待显示字模位置，循环写入32字节</span>        <span class="token punctuation">{</span>          <span class="token keyword">unsigned</span> <span class="token keyword">short</span> m<span class="token operator">=</span>ch16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>hz16<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//读取32字节中的第i字节</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                                      <span class="token comment" spellcheck="true">//循环写入8位数据</span>           <span class="token punctuation">{</span>                                                             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>fColor<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//判断最高位是否为1,最高位为1，写入字符颜色</span>             <span class="token keyword">else</span>              <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>bColor<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//最高位为0，写入背景颜色</span>             m<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//左移1位，准备写下一位</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    显示中英文字符串//  输入参数： x 横坐标//            y 纵坐标//                *s 待显示的字符串,例如LCD_PutString(24,16,"123Eee",White,Blue);即把"123Eee"的第一个字符地址赋给指针变量s.//                bColor 字符背景颜色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//显示屏位置增量</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">*</span>s <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>                                     <span class="token comment" spellcheck="true">//判断s指向的字符串中的某字符的编码值是否小于128,如果小于,即为ASCII字符</span>            <span class="token punctuation">{</span>             <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span>x<span class="token operator">+</span>l<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">,</span>fColor<span class="token punctuation">,</span>bColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//显示该字符</span>             s<span class="token operator">++</span><span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//指针加1,位置加1</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token punctuation">{</span>             <span class="token function">Put16x16</span><span class="token punctuation">(</span>x<span class="token operator">+</span>l<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token punctuation">,</span>fColor<span class="token punctuation">,</span>bColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//显示该汉字</span>             s<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>l<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">//因为汉字为编码为2字节，指针加2,显示16x16所以位置加2</span>            <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    指定位置显示RGB颜色//  输入参数： x0，y0 起始坐标//            x1，y1 结束坐标//                Color  背景颜色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Show_RGB</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//横屏这里要进行坐标变换，如果是竖屏，则直接是x0,x1,y0,y1做参数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span>y0<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>y1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>x0<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>x1<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    TFT初始化****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">TFT_Initial</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          RST_SET<span class="token punctuation">;</span>        <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// Delay 1ms </span>    RST_CLR<span class="token punctuation">;</span>      <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// Delay 10ms            </span>    RST_SET<span class="token punctuation">;</span>      <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// Delay 50 ms  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Device_code<span class="token operator">==</span><span class="token number">0x9320</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/************* Start Initial Sequence **********/</span><span class="token operator">/</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//Set the OSC bit as ‘1’ to start the internal oscillator</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x0100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// set SS and SM bit</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x0700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// set 1 line inversion</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x1030</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//set GRAM Write direction and BGR=1</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// Resize register</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x0202</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// set the back porch and front porch</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// set non-display area refresh cycle ISC[3:0]</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// FMARK function</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// RGB interface setting</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0D</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// Frame marker Position</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// RGB interface polarity</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/*************Power On sequence ****************/</span><span class="token operator">/</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x16b0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// SAP, BT[3:0], AP, DSTB, SLP, STB</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x0007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Write final user’s setting values to VC bit</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x013a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set Internal reference voltage</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x1a00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// VDV[4:0] for VCOM amplitude</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x000c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Set VCM[5:0] for VCOMH</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Delay 50ms</span>    <span class="token comment" spellcheck="true">// ----------- Adjust the Gamma Curve ----------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0030</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0031</span><span class="token punctuation">,</span> <span class="token number">0x0505</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0032</span><span class="token punctuation">,</span> <span class="token number">0x0304</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0035</span><span class="token punctuation">,</span> <span class="token number">0x0006</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0036</span><span class="token punctuation">,</span> <span class="token number">0x0707</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0037</span><span class="token punctuation">,</span> <span class="token number">0x0105</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0038</span><span class="token punctuation">,</span> <span class="token number">0x0002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0039</span><span class="token punctuation">,</span> <span class="token number">0x0707</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003C</span><span class="token punctuation">,</span> <span class="token number">0x0704</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003D</span><span class="token punctuation">,</span> <span class="token number">0x0807</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//------------------ Set GRAM area ---------------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0050</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0051</span><span class="token punctuation">,</span> <span class="token number">0x00EF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM End Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0052</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0053</span><span class="token punctuation">,</span> <span class="token number">0x013F</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0060</span><span class="token punctuation">,</span> <span class="token number">0x2700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Gate Scan Line</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0061</span><span class="token punctuation">,</span> <span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NDL,VLE, REV</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x006A</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set scrolling line</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// GRAM horizontal Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// GRAM Vertical Address</span>    <span class="token comment" spellcheck="true">//-------------- Partial Display Control ---------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0080</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0081</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0082</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0083</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0084</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0085</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//-------------- Panel Control ---------//</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x0010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Panel Interface Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0x0003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Panel Interface Contral 3. </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x95</span><span class="token punctuation">,</span><span class="token number">0x0110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x97</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral.     </span>    <span class="token comment" spellcheck="true">//-------------- Display on ---------//</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x0173</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Device_code<span class="token operator">==</span><span class="token number">0x1505</span> <span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/************* Start Initial Sequence **********/</span><span class="token operator">/</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Set the OSC bit as ‘1’ to start the internal oscillator</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x0100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set SS and SM bit</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x0700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set 1 line inversion</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x1030</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//set GRAM Write direction and BGR=1</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Resize register</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x0202</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set the back porch and front porch</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set non-display area refresh cycle ISC[3:0]</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// FMARK function</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// RGB interface setting</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0D</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Frame marker Position</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// RGB interface polarity</span>  <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/*************Power On sequence ****************/</span><span class="token operator">/</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x16b0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// SAP, BT[3:0], AP, DSTB, SLP, STB</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x0007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Write final user’s setting values to VC bit</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x013a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set Internal reference voltage</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x1a00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// VDV[4:0] for VCOM amplitude</span>  <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x000c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Set VCM[5:0] for VCOMH</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Delay 50ms</span>    <span class="token comment" spellcheck="true">// ----------- Adjust the Gamma Curve ----------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0030</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0031</span><span class="token punctuation">,</span> <span class="token number">0x0505</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0032</span><span class="token punctuation">,</span> <span class="token number">0x0304</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0035</span><span class="token punctuation">,</span> <span class="token number">0x0006</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0036</span><span class="token punctuation">,</span> <span class="token number">0x0707</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0037</span><span class="token punctuation">,</span> <span class="token number">0x0105</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0038</span><span class="token punctuation">,</span> <span class="token number">0x0002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0039</span><span class="token punctuation">,</span> <span class="token number">0x0707</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003C</span><span class="token punctuation">,</span> <span class="token number">0x0704</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003D</span><span class="token punctuation">,</span> <span class="token number">0x0807</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//------------------ Set GRAM area ---------------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0050</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0051</span><span class="token punctuation">,</span> <span class="token number">0x00EF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM End Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0052</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0053</span><span class="token punctuation">,</span> <span class="token number">0x013F</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0060</span><span class="token punctuation">,</span> <span class="token number">0x2700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Gate Scan Line</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0061</span><span class="token punctuation">,</span> <span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NDL,VLE, REV</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x006A</span><span class="token punctuation">,</span> <span class="token number">0x2700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set scrolling line</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// GRAM horizontal Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// GRAM Vertical Address</span>    <span class="token comment" spellcheck="true">//-------------- Partial Display Control ---------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0080</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0081</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0082</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0083</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0084</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0085</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//-------------- Panel Control ---------//</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x0010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Panel Interface Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0x0003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Panel Interface Contral 3. </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x95</span><span class="token punctuation">,</span><span class="token number">0x0110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x97</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral.     </span>    <span class="token comment" spellcheck="true">//-------------- Display on ---------//</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x0173</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Device_code<span class="token operator">==</span><span class="token number">0x9328</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/************* Start Initial Sequence **********/</span><span class="token operator">/</span>     <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">,</span><span class="token number">0x0100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//set SS and SM bit //设置扫描方向  100</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0002</span><span class="token punctuation">,</span><span class="token number">0x0700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//EOR=1 and B/C=1 to set the line inversion  //设置行反转</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0003</span><span class="token punctuation">,</span><span class="token number">0x1030</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//set Entry Mode  //设置进入模式    1030</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0004</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x00A4</span><span class="token punctuation">,</span><span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0008</span><span class="token punctuation">,</span><span class="token number">0x0202</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set the back porch and front porch</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0009</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set non-display area refresh cycle ISC[3:0]</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x000A</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// FMARK function</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x000C</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// RGB interface setting</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x000D</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Frame marker Position</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x000F</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// RGB interface polarity</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/*************Power On sequence ****************/</span><span class="token operator">/</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0010</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SAP, BT[3:0], AP, DSTB, SLP, STB </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0011</span><span class="token punctuation">,</span> <span class="token number">0x0007</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// DC1[2:0], DC0[2:0], VC[2:0]</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0012</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// VREG1OUT voltage</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0013</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// VDV[4:0] for VCOM amplitude </span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0010</span><span class="token punctuation">,</span> <span class="token number">0x1690</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SAP, BT[3:0], AP, DSTB, SLP, STB </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0011</span><span class="token punctuation">,</span> <span class="token number">0x0227</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R11h=0x0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0]</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0012</span><span class="token punctuation">,</span> <span class="token number">0x001C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// External reference voltage= Vci;</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0013</span><span class="token punctuation">,</span> <span class="token number">0x1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R13=1200 when R12=009D;VDV[4:0] for VCOM amplitude</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0029</span><span class="token punctuation">,</span> <span class="token number">0x001C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R29=000C when R12=009D;VCM[5:0] for VCOMH</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x002B</span><span class="token punctuation">,</span> <span class="token number">0x000D</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Frame Rate = 91Hz</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0020</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// GRAM horizontal Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0021</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// GRAM Vertical Address</span><span class="token comment" spellcheck="true">// ----------- Adjust the Gamma Curve ----------//          </span>      <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0030</span><span class="token punctuation">,</span> <span class="token number">0x0007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0031</span><span class="token punctuation">,</span> <span class="token number">0x0302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0032</span><span class="token punctuation">,</span> <span class="token number">0x0105</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0035</span><span class="token punctuation">,</span> <span class="token number">0x0206</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0036</span><span class="token punctuation">,</span> <span class="token number">0x0808</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0037</span><span class="token punctuation">,</span> <span class="token number">0x0206</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0038</span><span class="token punctuation">,</span> <span class="token number">0x0504</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0039</span><span class="token punctuation">,</span> <span class="token number">0x0007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003C</span><span class="token punctuation">,</span> <span class="token number">0x0105</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003D</span><span class="token punctuation">,</span> <span class="token number">0x0808</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//------------------ Set GRAM area ---------------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0050</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0051</span><span class="token punctuation">,</span> <span class="token number">0x00EF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM End Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0052</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>      <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0053</span><span class="token punctuation">,</span> <span class="token number">0x013F</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>      <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0060</span><span class="token punctuation">,</span> <span class="token number">0xA700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Gate Scan Line</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0061</span><span class="token punctuation">,</span> <span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NDL,VLE, REV  </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x006A</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set scrolling line</span><span class="token comment" spellcheck="true">//-------------- Partial Display Control ---------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0080</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0081</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0082</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0083</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0084</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0085</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-------------- Panel Control -------------------//        </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0090</span><span class="token punctuation">,</span> <span class="token number">0x0010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0092</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0093</span><span class="token punctuation">,</span> <span class="token number">0x0003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0095</span><span class="token punctuation">,</span> <span class="token number">0x0110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0097</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0098</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0007</span><span class="token punctuation">,</span> <span class="token number">0x0133</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 262K color and display ON</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    画点//  输入参数： x，y 需要画点坐标//            color 点的颜色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Put_pixel</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//横屏这里要进行坐标变换，如果是竖屏，则直接是x0,x1,y0,y1做参数</span>    <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                      <span class="token comment" spellcheck="true">//在指定点写入颜色数据</span><span class="token punctuation">}</span></code></pre><p>TFT.H</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> uchar</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char </span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> uint</span><span class="token macro property">#<span class="token directive keyword">define</span> uint unsigned int </span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> pic<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_Initial</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show_colour_bar</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_Cmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DH<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_Data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DH<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> tt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show_photo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Show_RGB</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CLR_Screen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">PutGB3232</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_PutString24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_PutChar8x8</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Put16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> g<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Put_pixel</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">address_set</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">,</span><span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">draw_circle</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_PutSingleChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Line</span><span class="token punctuation">(</span>    uchar X0<span class="token punctuation">,</span>            uchar Y0<span class="token punctuation">,</span>            uchar X1<span class="token punctuation">,</span>            uchar Y1<span class="token punctuation">,</span>            <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span> uchar left<span class="token punctuation">,</span>                uchar top<span class="token punctuation">,</span>                uchar right<span class="token punctuation">,</span>                uchar bottom<span class="token punctuation">,</span>                <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Bar</span><span class="token punctuation">(</span>    uchar left<span class="token punctuation">,</span>            uchar top<span class="token punctuation">,</span>            uchar right<span class="token punctuation">,</span>            uchar bottom<span class="token punctuation">,</span>            <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><p>user_Config.h</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*2.8寸TFT触摸屏接口定义*/</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIO_TFT_DATA                   GPIOA                             </span><span class="token comment" spellcheck="true">//数据口PA0~PA7</span><span class="token macro property">#<span class="token directive keyword">define</span> RCC_GPIO_TFT                    RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIO_CTRB                        GPIOB                             </span><span class="token comment" spellcheck="true">//控制口PB8~PB13</span><span class="token macro property">#<span class="token directive keyword">define</span> RCC_GPIO_CTRB                    RCC_APB2Periph_GPIOB</span><span class="token macro property">#<span class="token directive keyword">define</span> RS_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_13)     </span><span class="token comment" spellcheck="true">//RS置低</span><span class="token macro property">#<span class="token directive keyword">define</span> RS_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_13)       </span><span class="token comment" spellcheck="true">//RS置高</span><span class="token macro property">#<span class="token directive keyword">define</span> RW_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_12)     </span><span class="token comment" spellcheck="true">//RW置低</span><span class="token macro property">#<span class="token directive keyword">define</span> RW_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_12)            </span><span class="token comment" spellcheck="true">//RW置高</span><span class="token macro property">#<span class="token directive keyword">define</span> RD_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_11)     </span><span class="token comment" spellcheck="true">//E RD置低</span><span class="token macro property">#<span class="token directive keyword">define</span> RD_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_11)       </span><span class="token comment" spellcheck="true">//E ED置高</span><span class="token macro property">#<span class="token directive keyword">define</span> CS_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_10)     </span><span class="token comment" spellcheck="true">//CS置低</span><span class="token macro property">#<span class="token directive keyword">define</span> CS_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_10)       </span><span class="token comment" spellcheck="true">//CS置高</span><span class="token macro property">#<span class="token directive keyword">define</span> RST_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_9)     </span><span class="token comment" spellcheck="true">//RST置低</span><span class="token macro property">#<span class="token directive keyword">define</span> RST_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_9)       </span><span class="token comment" spellcheck="true">//RST置高</span><span class="token macro property">#<span class="token directive keyword">define</span> LE_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_8)     </span><span class="token comment" spellcheck="true">//LE置低</span><span class="token macro property">#<span class="token directive keyword">define</span> LE_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_8)       </span><span class="token comment" spellcheck="true">//LE置高</span><span class="token macro property">#<span class="token directive keyword">define</span> DataPort        GPIOA                                                     </span><span class="token comment" spellcheck="true">//PA口为数据口</span><span class="token macro property">#<span class="token directive keyword">define</span> D0              GPIO_Pin_0                                                     </span><span class="token comment" spellcheck="true">//D0使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D1              GPIO_Pin_1                                                    </span><span class="token comment" spellcheck="true">//D1使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D2              GPIO_Pin_2                                                  </span><span class="token comment" spellcheck="true">//D2使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D3                GPIO_Pin_3                                                    </span><span class="token comment" spellcheck="true">//D3使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D4                GPIO_Pin_4                                                     </span><span class="token comment" spellcheck="true">//D4使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D5                GPIO_Pin_5                                                    </span><span class="token comment" spellcheck="true">//D5使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D6                GPIO_Pin_6                                                  </span><span class="token comment" spellcheck="true">//D6使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D7                GPIO_Pin_7                                                    </span><span class="token comment" spellcheck="true">//D7使用的GPIO管脚</span><span class="token comment" spellcheck="true">/*全局变量-颜色代码*/</span><span class="token macro property">#<span class="token directive keyword">define</span> White          0xFFFF                                                               </span><span class="token comment" spellcheck="true">//显示颜色代码</span><span class="token macro property">#<span class="token directive keyword">define</span> Black          0x0000</span><span class="token macro property">#<span class="token directive keyword">define</span> Blue           0x001F</span><span class="token macro property">#<span class="token directive keyword">define</span> Blue2          0x051F</span><span class="token macro property">#<span class="token directive keyword">define</span> Red            0xF800</span><span class="token macro property">#<span class="token directive keyword">define</span> Magenta        0xF81F</span><span class="token macro property">#<span class="token directive keyword">define</span> Green          0x07E0</span><span class="token macro property">#<span class="token directive keyword">define</span> Cyan           0x7FFF</span><span class="token macro property">#<span class="token directive keyword">define</span> Yellow         0xFFE0</span><span class="token comment" spellcheck="true">/*函数声明区*/</span><span class="token keyword">void</span> <span class="token function">RCC_Configuration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span>vu32 nCount<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Ascii_8x16.h</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//ASCII码的0x20～0x7f,0x00~0x1f为控制命令，所以被去掉 </span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span>  Font8x16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*--  文字:     ASCII值0x20--*/</span>   <span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  !  ASCII值0x21--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  "  ASCII值0x22--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  #  ASCII值0x23--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  $  ASCII值0x24--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  %  ASCII值0x25--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x1A</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  &amp;  ASCII值0x26--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  '  ASCII值0x27--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  (  ASCII值0x28--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  )  ASCII值0x29--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  *  ASCII值0x2a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xD6</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0xD6</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  +  ASCII值0x2b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ,  ASCII值0x2c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  -  ASCII值0x2d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  .  ASCII值0x2e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  /  ASCII值0x2f--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  0  ASCII值0x30--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  1  ASCII值0x31--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  2  ASCII值0x32--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  3  ASCII值0x33--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  4 ASCII值0x34--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  5  ASCII值0x35--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  6  ASCII值0x36--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  7  ASCII值0x37--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  8  ASCII值0x38--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  9  ASCII值0x39--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x1A</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  :  ASCII值0x3a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ;  ASCII值0x3b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  &lt;  ASCII值0x3c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  =  ASCII值0x3d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  >  ASCII值0x3e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ?  ASCII值0x3f--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  @  ASCII值0x40--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x5A</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xB4</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  A  ASCII值0x41--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  B  ASCII值0x42--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  C  ASCII值0x43--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  D  ASCII值0x44--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  E  ASCII值0x45--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  F  ASCII值0x46--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  G  ASCII值0x47--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x8E</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  H  ASCII值0x48--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  I  ASCII值0x49--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  J  ASCII值0x4a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  K  ASCII值0x4b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  L  ASCII值0x4c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  M  ASCII值0x4d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0xD6</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  N  ASCII值0x4e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC7</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0xE2</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  O  ASCII值0x4f--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  P  ASCII值0x50--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  Q  ASCII值0x51--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0xB2</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  R  ASCII值0x52--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE3</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  S  ASCII值0x53--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  T  ASCII值0x54--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  U  ASCII值0x55--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  V  ASCII值0x56--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  W  ASCII值0x57--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xD6</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  X  ASCII值0x58--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  Y  ASCII值0x59--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  Z  ASCII值0x5a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  [  ASCII值0x5b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  \  ASCII值0x5c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ]  ASCII值0x5d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ^  ASCII值0x5e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  _  ASCII值0x5f--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  `  ASCII值0x60--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  a  ASCII值0x61--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  b  ASCII值0x62--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  c  ASCII值0x63--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  d  ASCII值0x64--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  e  ASCII值0x65--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  f  ASCII值0x66--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  g  ASCII值0x67--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  h  ASCII值0x68--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  i  ASCII值0x69--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  j  ASCII值0x6a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  k  ASCII值0x6b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  l  ASCII值0x6c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  m  ASCII值0x6d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0xED</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  n  ASCII值0x6e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xDC</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  o  ASCII值0x6f--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  p  ASCII值0x70--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xD8</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  q  ASCII值0x71--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  r  ASCII值0x72--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  s  ASCII值0x73--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  t  ASCII值0x74--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  u  ASCII值0x75--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC6</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x3B</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  v  ASCII值0x76--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  w  ASCII值0x77--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xD7</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  x  ASCII值0x78--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  y  ASCII值0x79--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  z  ASCII值0x7a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  {  ASCII值0x7b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  |  ASCII值0x7c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  }  ASCII值0x7d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ~  ASCII值0x7e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:    ASCII值0x7f--*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys11;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>Chinese.h</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/////////////////////////////////////////////////////////////////////////</span><span class="token comment" spellcheck="true">// 汉字取模步骤:1、在文字输入区输入汉字;2、在输入区鼠标右键选择字体，字体选Fixedsys,大小选12号，即16x16，后点确定</span><span class="token comment" spellcheck="true">//              3、键盘输入CTRL+ENTER组合键，4、点击左边菜单"取模方式-》C51格式"，即会在点阵生成区中显示结果。</span><span class="token comment" spellcheck="true">//注意:软件默认为横向取模,如果需要修改取模方式,点击左边菜单"参数设置-》其他选项"即可修改.</span><span class="token comment" spellcheck="true">/////////////////////////////////////////////////////////////////////////</span><span class="token comment" spellcheck="true">// ------------------  汉字字模数据结构体定义 ------------------------ //</span><span class="token keyword">const</span> <span class="token keyword">struct</span>  hz16_tab                 <span class="token comment" spellcheck="true">//结构体名hz16_tab</span><span class="token punctuation">{</span>       <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   GBK<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译器在编译汉字时会编译成GBK码,每个汉字为两字节,例如"北"字内码为0xb1b1.</span>       <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   hz16<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//每个16x16汉字为16x16/8=32字节 </span><span class="token punctuation">}</span> ch16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>                            <span class="token comment" spellcheck="true">//数据表 </span><span class="token punctuation">{</span><span class="token string">"合"</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x2E</span><span class="token punctuation">,</span><span class="token number">0xDF</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  肥  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"肥"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3D</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x3D</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x3D</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x45</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  炜  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"炜"</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  煌  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"煌"</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x2B</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x47</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  电  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"电"</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  子  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"子"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  有  --*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"有"</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  限  --*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"限"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFB</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0xA2</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xA2</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x8E</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  公  --*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"公"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  司  --*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"司"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  面  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"面"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  向  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"向"</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  教  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"教"</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x2B</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  学  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"学"</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x8C</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x8F</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  面  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"面"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  向  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"向"</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  开  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"开"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  发  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"发"</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;STM32F103C8T6-TFTILI9328液晶显示屏使用教程&quot;&gt;&lt;a href=&quot;#STM32F103C8T6-TFTILI9328液晶显示屏使用教程&quot; class=&quot;headerlink&quot; title=&quot;STM32F103C8T6 TFTILI9328液晶
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>野火F1开发板STM32案例-MultiButton移植</title>
    <link href="https://delehub.vercel.app/2020/10/04/ye-huo-f1-kai-fa-ban-stm32-an-li-multibutton-yi-zhi/"/>
    <id>https://delehub.vercel.app/2020/10/04/ye-huo-f1-kai-fa-ban-stm32-an-li-multibutton-yi-zhi/</id>
    <published>2020-10-04T13:30:21.052Z</published>
    <updated>2020-10-04T13:37:41.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="野火F1开发板STM32案例-MultiButton移植"><a href="#野火F1开发板STM32案例-MultiButton移植" class="headerlink" title="野火F1开发板STM32案例-MultiButton移植"></a><strong>野火F1开发板STM32案例-MultiButton移植</strong></h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2></li><li>Keil MDK 5.31</li><li>串口调试助手</li></ol><h2 id="MultiButton"><a href="#MultiButton" class="headerlink" title="MultiButton"></a>MultiButton</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>开源项目 MultiButton，一个小巧简单易用的事件驱动型按键驱动模块，作者 0x1abin。<br>这个项目非常精简，只有两个文件，可无限量扩展按键，按键事件的回调异步处理方式可以简化程序结构，去除冗余的按键处理硬编码，让你的按键业务逻辑更清晰。<br>MultiButton 是一个小巧简单易用的事件驱动型按键驱动模块，可无限量扩展按键，按键事件的回调异步处理方式可以简化你的程序结构，去除冗余的按键处理硬编码，让你的按键业务逻辑更清晰。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1.先申请一个按键结构</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Button button1<span class="token punctuation">;</span></code></pre><p>2.初始化按键对象，绑定按键的GPIO电平读取接口<strong>read_button_pin()</strong> ，后一个参数设置有效触发电平</p><pre class=" language-c"><code class="language-c"><span class="token function">button_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">,</span> read_button_pin<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.注册按键事件</p><pre><code>button_attach(&amp;button1, SINGLE_CLICK, Callback_SINGLE_CLICK_Handler);button_attach(&amp;button1, DOUBLE_CLICK, Callback_DOUBLE_Click_Handler);...</code></pre><p>4.启动按键</p><pre class=" language-c"><code class="language-c"><span class="token function">button_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5.设置一个5ms间隔的定时器循环调用后台处理函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer_ticks <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        timer_ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">button_ticks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>MultiButton 使用C语言实现，基于面向对象方式设计思路，每个按键对象单独用一份数据结构管理：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Button <span class="token punctuation">{</span>    uint16_t ticks<span class="token punctuation">;</span>    uint8_t  repeat<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    uint8_t  event <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    uint8_t  state <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    uint8_t  debounce_cnt <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>     uint8_t  active_level <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    uint8_t  button_level <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">uint8_t</span>  <span class="token punctuation">(</span><span class="token operator">*</span>hal_button_Level<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BtnCallback  cb<span class="token punctuation">[</span>number_of_event<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Button<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这样每个按键使用单向链表相连，依次进入 button_handler(struct Button* handle) 状态机处理，所以每个按键的状态彼此独立。</p><h2 id="按键事件"><a href="#按键事件" class="headerlink" title="按键事件"></a>按键事件</h2><table><thead><tr><th>事件</th><th>说明</th></tr></thead><tbody><tr><td>PRESS_DOWN</td><td>按键按下，每次按下都触发</td></tr><tr><td>PRESS_UP</td><td>按键弹起，每次松开都触发</td></tr><tr><td>PRESS_REPEAT</td><td>重复按下触发，变量repeat计数连击次数</td></tr><tr><td>SINGLE_CLICK</td><td>单击按键事件</td></tr><tr><td>DOUBLE_CLICK</td><td>双击按键事件</td></tr><tr><td>LONG_RRESS_START</td><td>达到长按时间阈值时触发一次</td></tr><tr><td>LONG_PRESS_HOLD</td><td>长按期间一直触发</td></tr></tbody></table><h2 id="官方Examples"><a href="#官方Examples" class="headerlink" title="官方Examples"></a>官方Examples</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"button.h"</span></span><span class="token keyword">struct</span> Button btn1<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read_button1_GPIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">HAL_GPIO_ReadPin</span><span class="token punctuation">(</span>B1_GPIO_Port<span class="token punctuation">,</span> B1_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">button_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> read_button1_GPIO<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> PRESS_DOWN<span class="token punctuation">,</span>       BTN1_PRESS_DOWN_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> PRESS_UP<span class="token punctuation">,</span>         BTN1_PRESS_UP_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> PRESS_REPEAT<span class="token punctuation">,</span>     BTN1_PRESS_REPEAT_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> SINGLE_CLICK<span class="token punctuation">,</span>     BTN1_SINGLE_Click_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> DOUBLE_CLICK<span class="token punctuation">,</span>     BTN1_DOUBLE_Click_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> LONG_RRESS_START<span class="token punctuation">,</span> BTN1_LONG_RRESS_START_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn2<span class="token punctuation">,</span> LONG_PRESS_HOLD<span class="token punctuation">,</span>  BTN1_LONG_PRESS_HOLD_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//make the timer invoking the button_ticks() interval 5ms.</span>    <span class="token comment" spellcheck="true">//This function is implemented by yourself.</span>    <span class="token function">__timer_start</span><span class="token punctuation">(</span>button_ticks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">BTN1_PRESS_DOWN_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> btn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something...</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">BTN1_PRESS_UP_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> btn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something...</span><span class="token punctuation">}</span></code></pre><h2 id="野火F1开发板STM32案例-MultiButton移植-1"><a href="#野火F1开发板STM32案例-MultiButton移植-1" class="headerlink" title="野火F1开发板STM32案例-MultiButton移植"></a>野火F1开发板STM32案例-MultiButton移植</h2><h3 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  ******************************************************************************  * @file    main.c  * 实验平台:野火 F103-霸道 STM32 开发板   ******************************************************************************  * 第三方库文件导入  START THE FILE  ******************************************************************************  */</span> <span class="token comment" spellcheck="true">//基本库</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_SysTick.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token comment" spellcheck="true">//扩展库</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"multi_button.h"</span></span><span class="token comment" spellcheck="true">//按键驱动</span><span class="token comment" spellcheck="true">/********************************************************************************变量定义*********************************************************************************/</span><span class="token keyword">struct</span> Button button1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY1_GPIO_CLK     RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY1_GPIO_PORT    GPIOA               </span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY1_GPIO_PIN         GPIO_Pin_0</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY2_GPIO_CLK     RCC_APB2Periph_GPIOC</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY2_GPIO_PORT    GPIOC           </span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY2_GPIO_PIN         GPIO_Pin_13</span><span class="token comment" spellcheck="true">/********************************************************************************函数部分*********************************************************************************/</span><span class="token keyword">void</span> <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//IO初始化</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*开启按键端口的时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>KEY1_GPIO_CLK<span class="token operator">|</span>KEY2_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选择按键KEY1的引脚 </span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY1_GPIO_PIN<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 设置按键的引脚为浮空输入</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用结构体初始化按键</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY1_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选择按键的引脚</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY2_GPIO_PIN<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设置按键的引脚为浮空输入</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用结构体初始化按键</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY2_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按键状态读取接口  按键输入模式 ReadInputDataBit</span>uint8_t <span class="token function">read_button1_GPIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>KEY1_GPIO_PORT<span class="token punctuation">,</span> KEY1_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按键1按下事件回调函数</span><span class="token keyword">void</span> <span class="token function">btn1_press_down_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> btn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---> key1 press down! &lt;---\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按键1松开事件回调函数</span><span class="token keyword">void</span> <span class="token function">btn1_press_up_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> btn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***> key1 press up! &lt;***\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">button_callback</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>button<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t btn_event_val<span class="token punctuation">;</span>     btn_event_val <span class="token operator">=</span> <span class="token function">get_button_event</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button <span class="token operator">*</span><span class="token punctuation">)</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>btn_event_val<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> PRESS_DOWN<span class="token punctuation">:</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---> key1 press down! &lt;---\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> PRESS_UP<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***> key1 press up! &lt;***\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> PRESS_REPEAT<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---> key1 press repeat! &lt;---\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> SINGLE_CLICK<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---> key1 single click! &lt;---\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> DOUBLE_CLICK<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***> key1 double click! &lt;***\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> LONG_PRESS_START<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---> key1 long press start! &lt;---\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> LONG_PRESS_HOLD<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***> key1 long press hold! &lt;***\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  HardWare_Iint  * @param  无  * @retval 无  */</span> <span class="token keyword">void</span> <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  主函数  * @param  无  * @retval 无  */</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 硬件端口初始化 */</span>    <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MultiButton Test...\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化按键对象</span>    <span class="token function">button_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">,</span> read_button1_GPIO<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//注册按钮事件回调函数</span>      <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">,</span> PRESS_DOWN<span class="token punctuation">,</span>       button_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">,</span> PRESS_UP<span class="token punctuation">,</span>         button_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//启动按键</span>      <span class="token function">button_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token function">button_ticks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="multi-button-c"><a href="#multi-button-c" class="headerlink" title="multi_button.c"></a>multi_button.c</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Copyright (c) 2016 Zibin Zheng &lt;znbin@qq.com> * All rights reserved */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"multi_button.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> EVENT_CB(ev)   if(handle->cb[ev])handle->cb[ev]((Button*)handle)</span><span class="token comment" spellcheck="true">//button handle list head.</span><span class="token keyword">static</span> <span class="token keyword">struct</span> Button<span class="token operator">*</span> head_handle <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  * @brief  Initializes the button struct handle.  * @param  handle: the button handle strcut.  * @param  pin_level: read the HAL GPIO of the connet button level.  * @param  active_level: pressed GPIO level.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">button_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token function">uint8_t</span><span class="token punctuation">(</span><span class="token operator">*</span>pin_level<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uint8_t active_level<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>NONE_PRESS<span class="token punctuation">;</span>    handle<span class="token operator">-></span>hal_button_Level <span class="token operator">=</span> pin_level<span class="token punctuation">;</span>    handle<span class="token operator">-></span>button_level <span class="token operator">=</span> handle<span class="token operator">-></span><span class="token function">hal_button_Level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handle<span class="token operator">-></span>active_level <span class="token operator">=</span> active_level<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  Attach the button event callback function.  * @param  handle: the button handle strcut.  * @param  event: trigger event type.  * @param  cb: callback function.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">,</span> PressEvent event<span class="token punctuation">,</span> BtnCallback cb<span class="token punctuation">)</span><span class="token punctuation">{</span>    handle<span class="token operator">-></span>cb<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> cb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  Inquire the button event happen.  * @param  handle: the button handle strcut.  * @retval button event.  */</span>PressEvent <span class="token function">get_button_event</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>PressEvent<span class="token punctuation">)</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  Button driver core function, driver state machine.  * @param  handle: the button handle strcut.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">button_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t read_gpio_level <span class="token operator">=</span> handle<span class="token operator">-></span><span class="token function">hal_button_Level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ticks counter working..</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>state<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> handle<span class="token operator">-></span>ticks<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*------------button debounce handle---------------*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>read_gpio_level <span class="token operator">!=</span> handle<span class="token operator">-></span>button_level<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//not equal to prev one</span>        <span class="token comment" spellcheck="true">//continue read 3 times same new level change</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>debounce_cnt<span class="token punctuation">)</span> <span class="token operator">>=</span> DEBOUNCE_TICKS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            handle<span class="token operator">-></span>button_level <span class="token operator">=</span> read_gpio_level<span class="token punctuation">;</span>            handle<span class="token operator">-></span>debounce_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//leved not change ,counter reset.</span>        handle<span class="token operator">-></span>debounce_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*-----------------State machine-------------------*/</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>handle<span class="token operator">-></span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>button_level <span class="token operator">==</span> handle<span class="token operator">-></span>active_level<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//start press down</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_DOWN<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>repeat <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>NONE_PRESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>button_level <span class="token operator">!=</span> handle<span class="token operator">-></span>active_level<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//released press up</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_UP<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>ticks <span class="token operator">></span> LONG_TICKS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>LONG_PRESS_START<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>LONG_PRESS_START<span class="token punctuation">)</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>button_level <span class="token operator">==</span> handle<span class="token operator">-></span>active_level<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//press down again</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_DOWN<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>repeat<span class="token operator">++</span><span class="token punctuation">;</span>      handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_REPEAT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_REPEAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// repeat hit</span>            handle<span class="token operator">-></span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>ticks <span class="token operator">></span> SHORT_TICKS<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//released timeout</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>repeat <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>SINGLE_CLICK<span class="token punctuation">;</span>                <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>SINGLE_CLICK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>repeat <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>DOUBLE_CLICK<span class="token punctuation">;</span>                <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>DOUBLE_CLICK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// repeat hit</span>            <span class="token punctuation">}</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>button_level <span class="token operator">!=</span> handle<span class="token operator">-></span>active_level<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//released press up</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_UP<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>ticks <span class="token operator">&lt;</span> SHORT_TICKS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                handle<span class="token operator">-></span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//repeat press</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>button_level <span class="token operator">==</span> handle<span class="token operator">-></span>active_level<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//continue hold trigger</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>LONG_PRESS_HOLD<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>LONG_PRESS_HOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//releasd</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_UP<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//reset</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  Start the button work, add the handle into work list.  * @param  handle: target handle strcut.  * @retval 0: succeed. -1: already exist.  */</span><span class="token keyword">int</span> <span class="token function">button_start</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Button<span class="token operator">*</span> target <span class="token operator">=</span> head_handle<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> handle<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//already exist.</span>        target <span class="token operator">=</span> target<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    handle<span class="token operator">-></span>next <span class="token operator">=</span> head_handle<span class="token punctuation">;</span>    head_handle <span class="token operator">=</span> handle<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  Stop the button work, remove the handle off work list.  * @param  handle: target handle strcut.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">button_stop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Button<span class="token operator">*</span><span class="token operator">*</span> curr<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>curr <span class="token operator">=</span> <span class="token operator">&amp;</span>head_handle<span class="token punctuation">;</span> <span class="token operator">*</span>curr<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">struct</span> Button<span class="token operator">*</span> entry <span class="token operator">=</span> <span class="token operator">*</span>curr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">*</span>curr <span class="token operator">=</span> entry<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            free(entry);</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            curr <span class="token operator">=</span> <span class="token operator">&amp;</span>entry<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  background ticks, timer repeat invoking interval 5ms.  * @param  None.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">button_ticks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Button<span class="token operator">*</span> target<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>target<span class="token operator">=</span>head_handle<span class="token punctuation">;</span> target<span class="token punctuation">;</span> target<span class="token operator">=</span>target<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">button_handler</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="multi-button-h"><a href="#multi-button-h" class="headerlink" title="multi_button.h"></a>multi_button.h</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Copyright (c) 2016 Zibin Zheng &lt;znbin@qq.com> * All rights reserved */</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> _MULTI_BUTTON_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _MULTI_BUTTON_H_</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdint.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">//According to your need to modify the constants.</span><span class="token macro property">#<span class="token directive keyword">define</span> TICKS_INTERVAL    5    </span><span class="token comment" spellcheck="true">//ms</span><span class="token macro property">#<span class="token directive keyword">define</span> DEBOUNCE_TICKS    3    </span><span class="token comment" spellcheck="true">//MAX 8</span><span class="token macro property">#<span class="token directive keyword">define</span> SHORT_TICKS       (300 /TICKS_INTERVAL)</span><span class="token macro property">#<span class="token directive keyword">define</span> LONG_TICKS        (1000 /TICKS_INTERVAL)</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>BtnCallback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>    PRESS_DOWN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    PRESS_UP<span class="token punctuation">,</span>    PRESS_REPEAT<span class="token punctuation">,</span>    SINGLE_CLICK<span class="token punctuation">,</span>    DOUBLE_CLICK<span class="token punctuation">,</span>    LONG_PRESS_START<span class="token punctuation">,</span>    LONG_PRESS_HOLD<span class="token punctuation">,</span>    number_of_event<span class="token punctuation">,</span>    NONE_PRESS<span class="token punctuation">}</span>PressEvent<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Button <span class="token punctuation">{</span>    uint16_t ticks<span class="token punctuation">;</span>    uint8_t  repeat <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    uint8_t  event <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    uint8_t  state <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    uint8_t  debounce_cnt <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    uint8_t  active_level <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    uint8_t  button_level <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">uint8_t</span>  <span class="token punctuation">(</span><span class="token operator">*</span>hal_button_Level<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BtnCallback  cb<span class="token punctuation">[</span>number_of_event<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Button<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>Button<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">button_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token function">uint8_t</span><span class="token punctuation">(</span><span class="token operator">*</span>pin_level<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uint8_t active_level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">,</span> PressEvent event<span class="token punctuation">,</span> BtnCallback cb<span class="token punctuation">)</span><span class="token punctuation">;</span>PressEvent <span class="token function">get_button_event</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">button_start</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">button_stop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">button_ticks</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="bsp-usart-c"><a href="#bsp-usart-c" class="headerlink" title="bsp_usart.c"></a>bsp_usart.c</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  ******************************************************************************  * @file    bsp_usart.c  * @version V1.0  * @date    2013-xx-xx  * @brief   调试用的printf串口，重定向printf到串口  ******************************************************************************  * @attention  *  * 实验平台:野火 F103-霸道 STM32 开发板   * 论坛    :http://www.firebbs.cn  * 淘宝    :https://fire-stm32.taobao.com  *  ******************************************************************************  */</span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"./usart/bsp_usart.h"</span></span> <span class="token comment" spellcheck="true">/**  * @brief  USART GPIO 配置,工作参数配置  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">USART_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打开串口GPIO的时钟</span>    <span class="token function">DEBUG_USART_GPIO_APBxClkCmd</span><span class="token punctuation">(</span>DEBUG_USART_GPIO_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打开串口外设的时钟</span>    <span class="token function">DEBUG_USART_APBxClkCmd</span><span class="token punctuation">(</span>DEBUG_USART_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将USART Tx的GPIO配置为推挽复用模式</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> DEBUG_USART_TX_GPIO_PIN<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>DEBUG_USART_TX_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将USART Rx的GPIO配置为浮空输入模式</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> DEBUG_USART_RX_GPIO_PIN<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>DEBUG_USART_RX_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置串口的工作参数</span>    <span class="token comment" spellcheck="true">// 配置波特率</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> DEBUG_USART_BAUDRATE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置 针数据字长</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置停止位</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置校验位</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置硬件流控制</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置工作模式，收发一起</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 完成串口的初始化配置</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使能串口</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">///重定向c库函数printf到串口，重定向后可使用printf函数</span><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 发送一个字节数据到串口 */</span>        <span class="token function">USART_SendData</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 等待发送完毕 */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">,</span> USART_FLAG_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">///重定向c库函数scanf到串口，重写向后可使用scanf、getchar等函数</span><span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 等待串口输入数据 */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">,</span> USART_FLAG_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-usart-h"><a href="#bsp-usart-h" class="headerlink" title="bsp_usart.h"></a>bsp_usart.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __USART_H</span><span class="token macro property">#<span class="token directive keyword">define</span>    __USART_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">/**   * 串口宏定义，不同的串口挂载的总线和IO不一样，移植时需要修改这几个宏    * 1-修改总线时钟的宏，uart1挂载到apb2总线，其他uart挂载到apb1总线    * 2-修改GPIO的宏  */</span><span class="token comment" spellcheck="true">// 串口1-USART1</span><span class="token macro property">#<span class="token directive keyword">define</span>  DEBUG_USARTx                   USART1</span><span class="token macro property">#<span class="token directive keyword">define</span>  DEBUG_USART_CLK                RCC_APB2Periph_USART1</span><span class="token macro property">#<span class="token directive keyword">define</span>  DEBUG_USART_APBxClkCmd         RCC_APB2PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span>  DEBUG_USART_BAUDRATE           115200</span><span class="token keyword">void</span> <span class="token function">USART_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">/* __USART_H */</span></code></pre><h3 id="串口打印效果"><a href="#串口打印效果" class="headerlink" title="串口打印效果"></a>串口打印效果</h3><p><img src="https://img-blog.csdnimg.cn/20201004212815405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="工程结构"><br><img src="https://img-blog.csdnimg.cn/20201004212815203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="串口打印效果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;野火F1开发板STM32案例-MultiButton移植&quot;&gt;&lt;a href=&quot;#野火F1开发板STM32案例-MultiButton移植&quot; class=&quot;headerlink&quot; title=&quot;野火F1开发板STM32案例-MultiButton移植&quot;&gt;&lt;/a&gt;&lt;s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>野火F1开发板STM32案例-外部中断(按键)使用</title>
    <link href="https://delehub.vercel.app/2020/10/03/ye-huo-f1-kai-fa-ban-stm32-an-li-wai-bu-zhong-duan-an-jian-shi-yong/"/>
    <id>https://delehub.vercel.app/2020/10/03/ye-huo-f1-kai-fa-ban-stm32-an-li-wai-bu-zhong-duan-an-jian-shi-yong/</id>
    <published>2020-10-03T08:31:16.726Z</published>
    <updated>2020-10-03T08:50:46.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="野火F1开发板STM32案例-外部中断-按键-使用"><a href="#野火F1开发板STM32案例-外部中断-按键-使用" class="headerlink" title="野火F1开发板STM32案例-外部中断(按键)使用"></a>野火F1开发板STM32案例-外部中断(按键)使用</h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2></li><li>Keil MDK 5.31</li><li>串口调试助手</li></ol><p>工程下载<a href="https://download.csdn.net/download/weixin_43599390/12910397" target="_blank" rel="noopener">https://download.csdn.net/download/weixin_43599390/12910397</a></p><h2 id="中断相关概念"><a href="#中断相关概念" class="headerlink" title="中断相关概念"></a>中断相关概念</h2><pre class=" language-c"><code class="language-c">中断配置寄存器# 配置中断时，使用ISER、 ICER 和 IP 寄存器，## ISER 是中断使能寄存器## ICER 是中断清除寄存器## IP 是中断优先级寄存器中断优先级<span class="token number">1</span><span class="token punctuation">.</span> 数值越小，优先级越高<span class="token number">2</span><span class="token punctuation">.</span> STM32F103 中只使用<span class="token number">4</span>位，高<span class="token number">4</span>位有效。<span class="token number">3</span><span class="token punctuation">.</span> 用于表达优先级的高 <span class="token number">4</span> 位又被分组成抢占式优先级和响应优先级，称为“亚优先级”或“副优先级”<span class="token number">4</span><span class="token punctuation">.</span> 每个中断源都需要被指定这两种优先级。中断配置步骤<span class="token number">1</span><span class="token punctuation">.</span>使能外设中断<span class="token number">6</span><span class="token punctuation">.</span> 设置中断优先级分组初始化 NVIC_InitTypeDef 结构体，设置抢占优先级和响应优先级，使能中断请求。<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>     uint8_t NVIC_IRQChannel<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断源</span>     uint8_t NVIC_IRQChannelPreemptionPriority<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级</span>     uint8_t NVIC_IRQChannelSubPriority<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应优先级</span>     FunctionalState NVIC_IRQChannelCmd<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断使能或失能</span> <span class="token punctuation">}</span> NVIC_InitTypeDef<span class="token punctuation">;</span>NVIC_IRQChannel 中断源<span class="token punctuation">:</span>中断源的设置，不同的外设中断，中断源不一样NVIC_IRQChannelPreemptionPriority  <span class="token comment" spellcheck="true">//抢占优先级</span>NVIC_IRQChannelSubPriority  <span class="token comment" spellcheck="true">//响应优先级</span>NVIC_IRQChannelCmd <span class="token comment" spellcheck="true">//中断使能或失能:使能配置为 ENABLE，失能配置为 DISABLE。</span></code></pre><pre class=" language-c"><code class="language-c">NVIC_IRQChannel   <span class="token comment" spellcheck="true">//中断源</span><span class="token comment" spellcheck="true">/******  Cortex-M3 Processor Exceptions Numbers ***************************************************/</span>  NonMaskableInt_IRQn         <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; 2 Non Maskable Interrupt                             */</span>  MemoryManagement_IRQn       <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; 4 Cortex-M3 Memory Management Interrupt              */</span>  BusFault_IRQn               <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; 5 Cortex-M3 Bus Fault Interrupt                      */</span>  UsageFault_IRQn             <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; 6 Cortex-M3 Usage Fault Interrupt                    */</span>  SVCall_IRQn                 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; 11 Cortex-M3 SV Call Interrupt                       */</span>  DebugMonitor_IRQn           <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; 12 Cortex-M3 Debug Monitor Interrupt                 */</span>  PendSV_IRQn                 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; 14 Cortex-M3 Pend SV Interrupt                       */</span>  SysTick_IRQn                <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; 15 Cortex-M3 System Tick Interrupt                   */</span><span class="token comment" spellcheck="true">/******  STM32 specific Interrupt Numbers *********************************************************/</span>  WWDG_IRQn                   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; Window WatchDog Interrupt                            */</span>  PVD_IRQn                    <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; PVD through EXTI Line detection Interrupt            */</span>  TAMPER_IRQn                 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; Tamper Interrupt                                     */</span>  RTC_IRQn                    <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; RTC global Interrupt                                 */</span>  FLASH_IRQn                  <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; FLASH global Interrupt                               */</span>  RCC_IRQn                    <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; RCC global Interrupt                                 */</span>  EXTI0_IRQn                  <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; EXTI Line0 Interrupt                                 */</span>  EXTI1_IRQn                  <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; EXTI Line1 Interrupt                                 */</span>  EXTI2_IRQn                  <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; EXTI Line2 Interrupt                                 */</span>  EXTI3_IRQn                  <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; EXTI Line3 Interrupt                                 */</span>  EXTI4_IRQn                  <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; EXTI Line4 Interrupt                                 */</span>  DMA1_Channel1_IRQn          <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 1 global Interrupt                      */</span>  DMA1_Channel2_IRQn          <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 2 global Interrupt                      */</span>  DMA1_Channel3_IRQn          <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 3 global Interrupt                      */</span>  DMA1_Channel4_IRQn          <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 4 global Interrupt                      */</span>  DMA1_Channel5_IRQn          <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 5 global Interrupt                      */</span>  DMA1_Channel6_IRQn          <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 6 global Interrupt                      */</span>  DMA1_Channel7_IRQn          <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 7 global Interrupt                      */</span></code></pre><h3 id="STM32F103-中断向量表"><a href="#STM32F103-中断向量表" class="headerlink" title="STM32F103  中断向量表"></a>STM32F103  中断向量表</h3><p><img src="https://img-blog.csdnimg.cn/2020100315141155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt=" 中断向量表1"><br><img src="https://img-blog.csdnimg.cn/20201003151410982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt=" 中断向量表2"></p><h3 id="EXTI外部中断"><a href="#EXTI外部中断" class="headerlink" title="EXTI外部中断"></a>EXTI外部中断</h3><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> STM32F10x 外部中断<span class="token operator">/</span>事件控制器（EXTI）包含多达 <span class="token number">20</span> 个用于产生事件<span class="token operator">/</span>中断请求的边沿检测器。<span class="token number">2</span><span class="token punctuation">.</span> EXTI 的每根输入线都可单独进行配置，以选择类型（中断或事件）和相应的触发事件（上升沿触发、下降沿触发或边沿触发）还可独立地被屏蔽。<span class="token number">3</span><span class="token punctuation">.</span> EXIT功能<span class="token punctuation">:</span>产生中断<span class="token punctuation">;</span>产生事件<span class="token punctuation">.</span></code></pre><h3 id="STM32-EXIT框架图"><a href="#STM32-EXIT框架图" class="headerlink" title="STM32 EXIT框架图"></a>STM32 EXIT框架图</h3><p><img src="https://img-blog.csdnimg.cn/20201003151626597.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32 EXIT框架图"></p><h2 id="EXTI外部中断步骤"><a href="#EXTI外部中断步骤" class="headerlink" title="EXTI外部中断步骤"></a>EXTI外部中断步骤</h2><ol><li>使能I0口时钟，配置I0口模式为输入</li><li>开启AFIO时钟，设置I0口与中断线的映射关系</li><li>配置中断分组（NVIC），使能中断</li><li>初始化EXTI，选择触发方式</li><li>编写EXTI中断服务函数<h4 id="GPIO引脚配置（本文中和外部中断bsp-exit-h一起进行初始化，可以分开进行配置相关函数）"><a href="#GPIO引脚配置（本文中和外部中断bsp-exit-h一起进行初始化，可以分开进行配置相关函数）" class="headerlink" title="GPIO引脚配置（本文中和外部中断bsp_exit.h一起进行初始化，可以分开进行配置相关函数）"></a>GPIO引脚配置（本文中和外部中断bsp_exit.h一起进行初始化，可以分开进行配置相关函数）</h4>(一般配置过程类似，无论使用什么外设，UART,IIC,SPI,ADC 一般情况都要GPIO初始化)<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//定义GPIO初始化结构体</span><span class="token comment" spellcheck="true">//使能 GPIO时钟 (时钟分频)</span><span class="token comment" spellcheck="true">//设置相关外部设备的对应引脚</span><span class="token comment" spellcheck="true">//设置GPIO端口模式(GPIO输入 GPIO输出)</span><span class="token comment" spellcheck="true">//设置生效(GPIO端口启动生效)</span><span class="token macro property"># GPIO输入模式</span><span class="token keyword">void</span> <span class="token function">initKey</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//定义GPIO初始化结构体</span> <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能 GPIO时钟 (时钟分频)</span> GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY_UP_PIN<span class="token operator">|</span>KEY_DOWN_PIN<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置相关外部设备的对应引脚</span> GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IPU<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//设置上拉输入 //设置GPIO端口模式</span> <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//设置生效(GPIO端口启动生效)</span></code></pre></li></ol><p>}</p><h1 id="GPIO输出模式"><a href="#GPIO输出模式" class="headerlink" title="GPIO输出模式"></a>GPIO输出模式</h1><p>void initLED(void)<br>{<br>    GPIO_InitTypeDef GPIO_InitStructure;                  //定义GPIO初始化结构体<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); //使能GPIO时钟<br>    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;              //设置对应引脚<br>    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;      //设置推挽输出<br>    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;     //工作速度50MHz<br>    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);                //设置生效<br>    GPIO_ResetBits(GPIOB, GPIO_Pin_5);                      //默认低电平，LED不<br>}</p><pre><code>#### 配置嵌套向量中断控制器NVIC步骤1. 定义NVIC结构体        NVIC_InitTypeDef 结构体```ctypedef struct{    uint8_t NVIC_IRQChannel; //中断源    uint8_t NVIC_IRQChannelPreemptionPriority; //抢占优先级    uint8_t NVIC_IRQChannelSubPriority; //响应优先级    FunctionalState NVIC_IRQChannelCmd; //中断使能或失能} NVIC_InitTypeDef;</code></pre><ol start="2"><li>配置NVIC为优先级组<br><img src="https://img-blog.csdnimg.cn/20201003160403277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="优先级组"><pre class=" language-c"><code class="language-c"><span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_1<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li><li>配置中断源<pre class=" language-c"><code class="language-c">NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> KEY1_INT_EXTI_IRQ<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #define KEY1_INT_EXTI_PORTSOURCE   GPIO_PortSourceGPIOA</span><span class="token comment" spellcheck="true">// #define KEY1_INT_EXTI_PINSOURCE    GPIO_PinSource0</span><span class="token comment" spellcheck="true">// #define KEY1_INT_EXTI_LINE         EXTI_Line0</span><span class="token comment" spellcheck="true">// #define KEY1_INT_EXTI_IRQ          EXTI0_IRQn</span></code></pre></li><li>配置抢占优先级<pre class=" language-c"><code class="language-c">NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li>配置子优先级 <pre class=" language-c"><code class="language-c">NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li>使能中断通道<pre class=" language-c"><code class="language-c">NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span></code></pre></li><li>初始化NVIC<pre class=" language-c"><code class="language-c"><span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="配置-EXTI中断口，并设置中断优先级步骤流程"><a href="#配置-EXTI中断口，并设置中断优先级步骤流程" class="headerlink" title="配置 EXTI中断口，并设置中断优先级步骤流程"></a>配置 EXTI中断口，并设置中断优先级步骤流程</h4></li></ol><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> 定义GPIO_InitTypeDef EXTI_InitTypeDef 结构体GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span> EXTI_InitTypeDef EXTI_InitStructure<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  uint16_t GPIO_Pin<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*!&lt; Specifies the GPIO pins to be configured.                                      This parameter can be any value of @ref GPIO_pins_define */</span>  GPIOSpeed_TypeDef GPIO_Speed<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*!&lt; Specifies the speed for the selected pins.                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */</span>  GPIOMode_TypeDef GPIO_Mode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*!&lt; Specifies the operating mode for the selected pins.                                      This parameter can be a value of @ref GPIOMode_TypeDef */</span><span class="token punctuation">}</span>GPIO_InitTypeDef<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  uint32_t EXTI_Line<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/*!&lt; Specifies the EXTI lines to be enabled or disabled.                                         This parameter can be any combination of @ref EXTI_Lines */</span>  EXTIMode_TypeDef EXTI_Mode<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*!&lt; Specifies the mode for the EXTI lines.                                         This parameter can be a value of @ref EXTIMode_TypeDef */</span>  EXTITrigger_TypeDef EXTI_Trigger<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*!&lt; Specifies the trigger signal active edge for the EXTI lines.                                         This parameter can be a value of @ref EXTIMode_TypeDef */</span>  FunctionalState EXTI_LineCmd<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*!&lt; Specifies the new state of the selected EXTI lines.                                         This parameter can be set either to ENABLE or DISABLE */</span> <span class="token punctuation">}</span>EXTI_InitTypeDef<span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201003162222876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="GPIO结构体"><br><img src="https://img-blog.csdnimg.cn/20201003162222867.png#pic_center" alt="中断事件结构体"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*开启按键GPIO口的时钟*/</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>KEY1_INT_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 配置 NVIC 中断*/</span><span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="GPIO引脚配置"><a href="#GPIO引脚配置" class="headerlink" title="GPIO引脚配置"></a>GPIO引脚配置</h5><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*--------------------------KEY1配置-------------------------*/</span><span class="token comment" spellcheck="true">/* 选择按键用到的GPIO */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY1_INT_GPIO_PIN<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置为浮空输入 */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY1_INT_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*------------------------KEY2配置-----------------------------*/</span>  <span class="token comment" spellcheck="true">/* 选择按键用到的GPIO */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY2_INT_GPIO_PIN<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置为浮空输入 */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY2_INT_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="中断配置"><a href="#中断配置" class="headerlink" title="中断配置"></a>中断配置</h5><ol><li>中断信号源 </li><li>EXIT模式</li><li>外部中断触发类型</li><li>使能中断EXIT</li><li>中断初始化<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 选择EXTI的信号源 */</span><span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>KEY1_INT_EXTI_PORTSOURCE<span class="token punctuation">,</span> KEY1_INT_EXTI_PINSOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span> EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line <span class="token operator">=</span> KEY1_INT_EXTI_LINE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* EXTI为中断模式 */</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode <span class="token operator">=</span> EXTI_Mode_Interrupt<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 上升沿中断 */</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger <span class="token operator">=</span> EXTI_Trigger_Rising<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使能中断 */</span>    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span><span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="BSP-EXIT-H"><a href="#BSP-EXIT-H" class="headerlink" title="BSP_EXIT.H"></a>BSP_EXIT.H</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_GPIO_PORT         GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_GPIO_CLK          (RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO)</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_GPIO_PIN          GPIO_Pin_0</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_EXTI_PORTSOURCE   GPIO_PortSourceGPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_EXTI_PINSOURCE    GPIO_PinSource0</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_EXTI_LINE         EXTI_Line0</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_EXTI_IRQ          EXTI0_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_IRQHandler            EXTI0_IRQHandler</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_GPIO_PORT         GPIOC</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_GPIO_CLK          (RCC_APB2Periph_GPIOC|RCC_APB2Periph_AFIO)</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_GPIO_PIN          GPIO_Pin_13</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_EXTI_PORTSOURCE   GPIO_PortSourceGPIOC</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_EXTI_PINSOURCE    GPIO_PinSource13</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_EXTI_LINE         EXTI_Line13</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_EXTI_IRQ          EXTI15_10_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_IRQHandler            EXTI15_10_IRQHandler</span></code></pre><h3 id="BSP-EXIT-C"><a href="#BSP-EXIT-C" class="headerlink" title="BSP_EXIT.C"></a>BSP_EXIT.C</h3><h4 id="配置嵌套向量中断控制器NVIC"><a href="#配置嵌套向量中断控制器NVIC" class="headerlink" title="配置嵌套向量中断控制器NVIC"></a>配置嵌套向量中断控制器NVIC</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> “bsp_exit.h”</span><span class="token comment" spellcheck="true">/**  * @brief  配置嵌套向量中断控制器NVIC  * @param  无  * @retval 无  */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置NVIC为优先级组1 */</span>  <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置中断源：按键1 */</span>  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> KEY1_INT_EXTI_IRQ<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置抢占优先级 */</span>  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置子优先级 */</span>  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 使能中断通道 */</span>  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>  <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置中断源：按键2，其他使用上面相关配置 */</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> KEY2_INT_EXTI_IRQ<span class="token punctuation">;</span>  <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="配置-IO为EXTI中断口，并设置中断优先级"><a href="#配置-IO为EXTI中断口，并设置中断优先级" class="headerlink" title="配置 IO为EXTI中断口，并设置中断优先级"></a>配置 IO为EXTI中断口，并设置中断优先级</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EXTI_Key_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>     EXTI_InitTypeDef EXTI_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*开启按键GPIO口的时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>KEY1_INT_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 配置 NVIC 中断*/</span>    <span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*--------------------------KEY1配置-----------------------------*/</span>    <span class="token comment" spellcheck="true">/* 选择按键用到的GPIO */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY1_INT_GPIO_PIN<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置为浮空输入 */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY1_INT_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 选择EXTI的信号源 */</span>  <span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>KEY1_INT_EXTI_PORTSOURCE<span class="token punctuation">,</span> KEY1_INT_EXTI_PINSOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span>   EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line <span class="token operator">=</span> KEY1_INT_EXTI_LINE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* EXTI为中断模式 */</span>  EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode <span class="token operator">=</span> EXTI_Mode_Interrupt<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 上升沿中断 */</span>  EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger <span class="token operator">=</span> EXTI_Trigger_Rising<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 使能中断 */</span>      EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>  <span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*--------------------------KEY2配置-----------------------------*/</span>    <span class="token comment" spellcheck="true">/* 选择按键用到的GPIO */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY2_INT_GPIO_PIN<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置为浮空输入 */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY2_INT_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 选择EXTI的信号源 */</span>  <span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>KEY2_INT_EXTI_PORTSOURCE<span class="token punctuation">,</span> KEY2_INT_EXTI_PINSOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span>   EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line <span class="token operator">=</span> KEY2_INT_EXTI_LINE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* EXTI为中断模式 */</span>  EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode <span class="token operator">=</span> EXTI_Mode_Interrupt<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 下降沿中断 */</span>  EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger <span class="token operator">=</span> EXTI_Trigger_Falling<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 使能中断 */</span>      EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>  <span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="中断服务函数"><a href="#中断服务函数" class="headerlink" title="中断服务函数"></a>中断服务函数</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x_it.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_test.h"</span></span><span class="token comment" spellcheck="true">/********************************************************************************  * @file    stm32 用户自定义外部中断  * @author  dele  * @version V1.0  * @date    2020-10-03  * @brief   按键测试（中断模式/EXTI模式）  * 实验平台:野火 F103-霸道 STM32 开发板   ******************************************************************************  */</span> <span class="token keyword">void</span> <span class="token function">KEY1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//确保是否产生了EXTI Line中断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EXTI_GetITStatus</span><span class="token punctuation">(</span>KEY1_INT_EXTI_LINE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// LED1 取反        </span>        LED1_TOGGLE<span class="token punctuation">;</span>        <span class="token function">BSP_KEY1_EXIT_LCDTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"KEY1 EXIT www.delehub.top"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//清除中断标志位</span>        <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>KEY1_INT_EXTI_LINE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">KEY2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//确保是否产生了EXTI Line中断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EXTI_GetITStatus</span><span class="token punctuation">(</span>KEY2_INT_EXTI_LINE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// LED2 取反        </span>        LED2_TOGGLE        <span class="token function">BSP_KEY2_EXIT_LCDTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"KEY2 EXIT 2020-10-03 14:50"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//清除中断标志位</span>        <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>KEY2_INT_EXTI_LINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h4 id="按键外部中断测试函数"><a href="#按键外部中断测试函数" class="headerlink" title="按键外部中断测试函数"></a>按键外部中断测试函数</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BSP_KEY1_EXIT_LCDTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">LCD_SetFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetColors</span><span class="token punctuation">(</span>RED<span class="token punctuation">,</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_Clear</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>LCD_X_LENGTH<span class="token punctuation">,</span>LCD_Y_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清屏，显示全黑 */</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"2020-10-03 14:30 BSP_EXIT_TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"KEY1 EXIT TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DrawCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">BSP_KEY2_EXIT_LCDTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">LCD_SetFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetColors</span><span class="token punctuation">(</span>RED<span class="token punctuation">,</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_Clear</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>LCD_X_LENGTH<span class="token punctuation">,</span>LCD_Y_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清屏，显示全黑 */</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"2020-10-03 14:30 DELEHUB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"KEY2 EXIT TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DrawCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/****************************************************************  * @file    main.c  * 实验平台:野火 F103-霸道 STM32 开发板  ***************************************************************** 第三方库文件导入  START THE FILE ***************************************************************/</span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_led.h"</span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_key.h"</span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_beep.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_exit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_ili9341_lcd.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_SysTick.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_test.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"STM32F103xxxx_USART.H"</span>  </span><span class="token comment" spellcheck="true">/******************************************************************************END THE FILE  * 第三方库文件导入*********************************************************/</span> <span class="token keyword">void</span> <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">EXTI_Key_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LED_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Key_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Beep_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM4_Int_Init(9999,7199);</span>  <span class="token function">ILI9341_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  主函数  * @param  无  * @retval 无  */</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 硬件端口初始化 */</span>    <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="串口打印效果"><a href="#串口打印效果" class="headerlink" title="串口打印效果"></a>串口打印效果</h3><p><img src="https://img-blog.csdnimg.cn/20201003153440133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="串口打印效果"></p><h3 id="TFT显示效果"><a href="#TFT显示效果" class="headerlink" title="TFT显示效果"></a>TFT显示效果</h3><p><img src="https://img-blog.csdnimg.cn/20201003153501455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="TFT显示效果key2"><br><img src="https://img-blog.csdnimg.cn/20201003153501430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="TFT显示效果key2"></p><h3 id="博客地址https-delehub-vercel-app"><a href="#博客地址https-delehub-vercel-app" class="headerlink" title="博客地址https://delehub.vercel.app/"></a>博客地址<a href="https://delehub.vercel.app/">https://delehub.vercel.app/</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;野火F1开发板STM32案例-外部中断-按键-使用&quot;&gt;&lt;a href=&quot;#野火F1开发板STM32案例-外部中断-按键-使用&quot; class=&quot;headerlink&quot; title=&quot;野火F1开发板STM32案例-外部中断(按键)使用&quot;&gt;&lt;/a&gt;野火F1开发板STM3
      
    
    </summary>
    
    
      <category term="C" scheme="https://delehub.vercel.app/categories/C/"/>
    
      <category term="嵌入式 STM32" scheme="https://delehub.vercel.app/categories/C/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/"/>
    
      <category term="中断" scheme="https://delehub.vercel.app/categories/C/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/%E4%B8%AD%E6%96%AD/"/>
    
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
      <category term="软件开发" scheme="https://delehub.vercel.app/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="嵌入式STM32" scheme="https://delehub.vercel.app/tags/%E5%B5%8C%E5%85%A5%E5%BC%8FSTM32/"/>
    
      <category term="野火F1开发" scheme="https://delehub.vercel.app/tags/%E9%87%8E%E7%81%ABF1%E5%BC%80%E5%8F%91/"/>
    
      <category term="中断" scheme="https://delehub.vercel.app/tags/%E4%B8%AD%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>野火F1开发板STM32案例-USART使用</title>
    <link href="https://delehub.vercel.app/2020/10/02/ye-huo-f1-kai-fa-ban-stm32-an-li-usart-shi-yong/"/>
    <id>https://delehub.vercel.app/2020/10/02/ye-huo-f1-kai-fa-ban-stm32-an-li-usart-shi-yong/</id>
    <published>2020-10-02T13:09:51.904Z</published>
    <updated>2020-10-03T10:41:14.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="野火F1开发板STM32-USART使用"><a href="#野火F1开发板STM32-USART使用" class="headerlink" title="野火F1开发板STM32-USART使用"></a>野火F1开发板STM32-USART使用</h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1开发板</li><li>STM32蓝色板<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="野火STM32产品"></li></ol><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2><ol><li>Keil MDK 5.31</li><li>串口调试助手<h2 id="串口配置步骤"><a href="#串口配置步骤" class="headerlink" title="串口配置步骤"></a>串口配置步骤</h2></li><li>使能RX和TX引脚GPIO时钟和USART时钟；</li><li>初始化 GPIO，并将GPIO复用到USART.上；</li><li>配置 USART参数；</li><li>配置中断控制器并使能USART接收中断；</li><li>使 能USART；</li><li>在USART接收中断服务函数实现数据接收和发送。<h2 id="工程模板结构"><a href="#工程模板结构" class="headerlink" title="工程模板结构"></a>工程模板结构</h2><img src="https://img-blog.csdnimg.cn/20201002204307734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="工程模板结构"><br>文件夹 STExtend外设扩展文件，USER用户自定义函数库<br>工程文件下载链接<a href="https://download.csdn.net/download/weixin_43599390/12909901" target="_blank" rel="noopener">https://download.csdn.net/download/weixin_43599390/12909901</a><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//bsp_xx.h板载第三方库文件</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_led.h"</span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_key.h"</span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_beep.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_exit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_ili9341_lcd.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_SysTick.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_test.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"STM32F103xxxx_USART.H"</span>  </span></code></pre></li></ol><h2 id="STM32F103ZET6-串口引脚列表"><a href="#STM32F103ZET6-串口引脚列表" class="headerlink" title="STM32F103ZET6 串口引脚列表"></a>STM32F103ZET6 串口引脚列表</h2><p><img src="https://img-blog.csdnimg.cn/20201002205012211.png#pic_center" alt="串口引脚列表"></p><h3 id="STM32F103xxxx-USART-C"><a href="#STM32F103xxxx-USART-C" class="headerlink" title="STM32F103xxxx_USART.C"></a>STM32F103xxxx_USART.C</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//==================================================================================================                                  // 包含全局头文件</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"STM32F103xxxx_USART.H"</span>                     </span><span class="token comment" spellcheck="true">// 包含内设头文件 USART-USART通信总线</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  宏自定义声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  硬件端口定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  引用函数声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token keyword">void</span> <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">USART_ReceiveChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_Float</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">float</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送字节</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 本函数没有考虑发送9位数据可能性</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Byte - 字节  取值范文 - ASCII字符</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>USARTx <span class="token operator">-></span> SR <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 等待上次发送完成   </span>    USARTx <span class="token operator">-></span> DR <span class="token operator">=</span> Char<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 装载本次发送数据    </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 接收字符</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//  输出参量: Char - 待接收字节  取值范围 - ASCII字符</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">USART_ReceiveChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> USARTx<span class="token operator">-></span>DR<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送字符串</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            String - 待发送字符串指针  取值范文 - ASCII字符串</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true">// \0 表示字符串结束标志，通过检测是否字符串末尾</span>    <span class="token punctuation">{</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数组</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Array - 待发送数组的指针  取值范围 - 指针类型</span><span class="token comment" spellcheck="true">//            Count - 待发送数组的数量  取值范围 - 0~255</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> Array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送回车换行</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 换行</span>    <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 回车</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送有符号整型数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送整数  取值范围 - 整型类型 -99999~+99999</span><span class="token comment" spellcheck="true">//            Count - 显示的位数  取值范围 - 1~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 定义局部数组，用于数据存储</span>    <span class="token comment" spellcheck="true">// 判断 整型数字正负</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 负数转整数</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 发送串口数据</span>    <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送无符号整型数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送整数  取值范围 - 整型类型 0~99999</span><span class="token comment" spellcheck="true">//            Count - 显示的位数  取值范围 - 1~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 定义局部数组，用于数据存储</span>    <span class="token comment" spellcheck="true">// 断言检查参数</span>    <span class="token comment" spellcheck="true">// 执行相关操作</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送串口数据</span>    <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数字 浮点类型</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 本函数打印浮点数字与实际输入数字存在偏差</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送浮点型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count1 - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            Count2 - 小数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_Float</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">float</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储整数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储小数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span>  Number_Integer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的整数部分</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span>  Number_Decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的小数部分</span>    <span class="token comment" spellcheck="true">// 判断 浮点数字正负</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number<span class="token punctuation">;</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 限制 发送位数</span>    <span class="token comment" spellcheck="true">// 由于由于float型的有效十进制数值最多为7位，即整数位 + 小数位 数量一定小于等于7</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">+</span> Count2 <span class="token operator">></span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Count1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 分离 整数位与小数位</span>    <span class="token comment" spellcheck="true">// 取整数部分</span>    Number_Integer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 取小数部分 1e5科学计数法表示10000</span>    Number_Decimal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Number <span class="token operator">-</span> Number_Integer <span class="token operator">+</span> <span class="token number">0.000005</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span><span class="token punctuation">,</span> Count1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 显示整数位</span>    <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        Count2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 显示小数位</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数字 二进制数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送有符号长整型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_Binary</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Count<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Number <span class="token operator">&amp;</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>Count<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Number <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 预配置</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: 无</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    USART_InitTypeDef USART_InitStructure_USARTx1<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 配置 USARTx1 功能</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1 == 1)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 参数检查</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx1_BAUD != 600)   \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 1200)  \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 2400)  \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 4800)  \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 9600)  \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 14400) \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 19200) \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 38400) \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 115200))</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx1_BAUD"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx1_BAUD != 600)   \</span>                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">1200</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">2400</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">4800</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">9600</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">14400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">19200</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">38400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx1_PORT_A09A10 + STM32F103xxxx_USARTx1_PORT_B06B07) != 1)</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx1_PORT"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx1_PORT_A09A10 + STM32F103xxxx_USARTx1_PORT_B06B07) != 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO引脚映射功能</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)                </span><span class="token comment" spellcheck="true">// 不映射</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_B06B07 == 1)                </span><span class="token comment" spellcheck="true">// 完全映射</span>        <span class="token punctuation">{</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">GPIO_PinRemapConfig</span><span class="token punctuation">(</span>GPIO_Remap_USART1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_B06B07 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO TXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOA模块时钟</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_9<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_B06B07 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOB模块时钟</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_6<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_B06B07 == 1) </span>        <span class="token comment" spellcheck="true">// 配置GPIO RXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOA模块时钟</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_B06B07 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOB模块时钟</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_7<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_B06B07 == 1) </span>        <span class="token comment" spellcheck="true">// 配置 USARTx1 功能</span>       <span class="token comment" spellcheck="true">// USART_InitTypeDef USART_InitStructure_USARTx1;                                          // 定义结构体变量</span>        <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_USART1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 使能USART1模块时钟</span>        <span class="token function">USART_DeInit</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_BaudRate   <span class="token operator">=</span> STM32F103xxxx_USARTx1_BAUD<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 设置USART波特率</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 设置USART数据位长度 8位数据位</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_StopBits   <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 设置USART停止位长度 1位停止位</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_Parity     <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 设置USART校验位长度 无校验</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置USART硬件数据流控制</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_Mode       <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 设置USART模式 发送模式+接收模式</span>        <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure_USARTx1<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                              <span class="token comment" spellcheck="true">// 使能USART1模块运行</span>        <span class="token comment" spellcheck="true">// 配置 USARTx1 中断操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_ITEN_RXNE == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx1接受中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_ITEN_RXNE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_ITEN_IDLE == 1)              </span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_IDLE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx1空闲中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_ITEN_IDLE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_ITEN_TC == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_TC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启用USARTx1发送完成中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_ITEN_TC == 1)</span>        <span class="token comment" spellcheck="true">// 配置 USARTx1 DMA操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_DMA_TX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_DMAReq_Tx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx1 DMA发送</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_DMA_TX == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_DMA_RX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_DMAReq_Rx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx1 DMA接收</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_DMA_RX == 1)</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1 == 1)</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 配置 USARTx2 功能</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2 == 1)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 参数检查</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx2_BAUD != 600)   \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 1200)  \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 2400)  \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 4800)  \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 9600)  \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 14400) \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 19200) \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 38400) \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 115200))</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx2_BAUD"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx2_BAUD != 600)   \</span>                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">1200</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">2400</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">4800</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">9600</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">14400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">19200</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">38400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx2_PORT_A02A03 + STM32F103C8T6_USARTx2_PORT_D06D07) != 1)</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx2_PORT"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx2_PORT_A02A03 + STM32F103C8T6_USARTx2_PORT_D06D07) != 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO引脚映射功能</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)                </span><span class="token comment" spellcheck="true">// 不映射</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103C8T6_USARTx2_PORT_D06D07 == 1)                </span><span class="token comment" spellcheck="true">// 完全映射</span>        <span class="token punctuation">{</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">GPIO_PinRemapConfig</span><span class="token punctuation">(</span>GPIO_FullRemap_USART2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103C8T6_USARTx2_PORT_D06D07 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO TXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使能GPIOA模块时钟</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_2<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103C8T6_USARTx2_PORT_D06D07 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOD<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使能GPIOD模块时钟</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_6<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103C8T6_USARTx2_PORT_D06D07 == 1) </span>        <span class="token comment" spellcheck="true">// 配置GPIO RXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使能GPIOA模块时钟</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_3<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103C8T6_USARTx2_PORT_D06D07 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOD<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使能GPIOD模块时钟</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_7<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103C8T6_USARTx2_PORT_D06D07 == 1) </span>        <span class="token comment" spellcheck="true">// 配置 USARTx2 功能</span>        USART_InitTypeDef USART_InitStructure_USARTx2<span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">// 定义结构体变量</span>        <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_USART2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 使能USART2模块时钟</span>        <span class="token function">USART_DeInit</span><span class="token punctuation">(</span>USART2<span class="token punctuation">)</span><span class="token punctuation">;</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_BaudRate   <span class="token operator">=</span> STM32F103xxxx_USARTx2_BAUD<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 设置USART波特率</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 设置USART数据位长度 8位数据位</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_StopBits   <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 设置USART停止位长度 1位停止位</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_Parity     <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 设置USART校验位长度 无校验</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置USART硬件数据流控制</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_Mode       <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 设置USART模式 发送模式+接收模式</span>        <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure_USARTx2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                              <span class="token comment" spellcheck="true">// 使能USART2模块运行</span>        <span class="token comment" spellcheck="true">// 配置 USARTx2 中断操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_ITEN_RXNE == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx2接受中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_ITEN_RXNE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_ITEN_IDLE == 1)              </span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_IDLE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx2空闲中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_ITEN_IDLE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_ITEN_TC == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_TC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启用USARTx2发送完成中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_ITEN_TC == 1)</span>        <span class="token comment" spellcheck="true">// 配置 USARTx2 DMA操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_DMA_TX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_DMAReq_Tx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx2 DMA发送</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_DMA_TX == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_DMA_RX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_DMAReq_Rx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx2 DMA接收</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_DMA_RX == 1)</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1 == 1)</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 配置 USARTx3 功能</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3 == 1)  </span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 参数检查</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx3_BAUD != 600)   \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 1200)  \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 2400)  \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 4800)  \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 9600)  \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 14400) \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 19200) \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 38400) \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 115200))</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx3_BAUD"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx3_BAUD != 600)   \</span>                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">1200</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">2400</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">4800</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">9600</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">14400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">19200</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">38400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx3_PORT_B10B11 + STM32F103xxxx_USARTx3_PORT_C10C11 + STM32F103xxxx_USARTx3_PORT_D08D09) != 1)</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx3_PORT"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx3_PORT_B10B11 + STM32F103xxxx_USARTx3_PORT_C10C11 + STM32F103xxxx_USARTx3_PORT_D08D09) != 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO引脚映射功能</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)                </span><span class="token comment" spellcheck="true">// 不映射</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)                </span><span class="token comment" spellcheck="true">// 部分映射</span>        <span class="token punctuation">{</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">GPIO_PinRemapConfig</span><span class="token punctuation">(</span>GPIO_PartialRemap_USART3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)                </span><span class="token comment" spellcheck="true">// 完全映射</span>        <span class="token punctuation">{</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">GPIO_PinRemapConfig</span><span class="token punctuation">(</span>GPIO_FullRemap_USART3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO TXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOB模块时钟</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOC模块时钟</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOD<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOD模块时钟</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_8<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO RXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOB模块时钟</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOC模块时钟</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOD<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOD模块时钟</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_9<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)</span>        <span class="token comment" spellcheck="true">// 配置 USARTx3 功能</span>        USART_InitTypeDef USART_InitStructure_USARTx3<span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">// 定义结构体变量</span>        <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_USART3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 使能USART3模块时钟</span>        <span class="token function">USART_DeInit</span><span class="token punctuation">(</span>USART3<span class="token punctuation">)</span><span class="token punctuation">;</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_BaudRate   <span class="token operator">=</span> STM32F103xxxx_USARTx3_BAUD<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 设置USART波特率</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 设置USART数据位长度 8位数据位</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_StopBits   <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 设置USART停止位长度 1位停止位</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_Parity     <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 设置USART校验位长度 无校验</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置USART硬件数据流控制</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_Mode       <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 设置USART模式 发送模式+接收模式</span>        <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure_USARTx3<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                              <span class="token comment" spellcheck="true">// 使能USART3模块运行</span>        <span class="token comment" spellcheck="true">// 配置 USARTx3 中断操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_ITEN_RXNE == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx3接受中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_ITEN_RXNE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_ITEN_IDLE == 1)              </span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_IT_IDLE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx3空闲中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_ITEN_IDLE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_ITEN_TC == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_IT_TC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启用USARTx3发送完成中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_ITEN_TC == 1)</span>        <span class="token comment" spellcheck="true">// 配置 USARTx3 DMA操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_DMA_TX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_DMAReq_Tx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx3 DMA发送</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_DMA_TX == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_DMA_RX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_DMAReq_Rx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx3 DMA接收</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_DMA_RX == 1)</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3 == 1)</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 配置 UARTx4 功能</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4 == 1)    </span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 参数检查</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_UARTx4_BAUD != 600)   \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 1200)  \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 2400)  \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 4800)  \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 9600)  \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 14400) \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 19200) \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 38400) \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 115200))</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_UARTx4_BAUD"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_UARTx4_BAUD != 600)   \</span>                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">1200</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">2400</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">4800</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">9600</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">14400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">19200</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">38400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_PORT_C10C11 != 1)</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_UARTx4_PORT"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_PORT_C10C11 != 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO引脚映射功能</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)                 </span><span class="token comment" spellcheck="true">// 不映射</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO TXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOC模块时钟</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO RXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOC模块时钟</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)</span>        <span class="token comment" spellcheck="true">// 配置 UARTx4 功能</span>        USART_InitTypeDef USART_InitStructure_UARTx4<span class="token punctuation">;</span>                                           <span class="token comment" spellcheck="true">// 定义结构体变量</span>        <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_UART4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">// 使能UART4模块时钟</span>        <span class="token function">USART_DeInit</span><span class="token punctuation">(</span>UART4<span class="token punctuation">)</span><span class="token punctuation">;</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_BaudRate   <span class="token operator">=</span> STM32F103xxxx_UARTx4_BAUD<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置USART波特率</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 设置USART数据位长度 8位数据位</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_StopBits   <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 设置USART停止位长度 1位停止位</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_Parity     <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 设置USART校验位长度 无校验</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置USART硬件数据流控制</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_Mode       <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置USART模式 发送模式+接收模式</span>        <span class="token function">USART_Init</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure_UARTx4<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                               <span class="token comment" spellcheck="true">// 使能UART4模块运行</span>        <span class="token comment" spellcheck="true">// 配置 UARTx4 中断操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_ITEN_RXNE == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 启用UARTx4接受中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_ITEN_RXNE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_ITEN_IDLE == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_IT_IDLE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 启用UARTx4空闲中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_ITEN_IDLE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_ITEN_TC == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_IT_TC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 启用UARTx4发送完成中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_ITEN_TC == 1)</span>        <span class="token comment" spellcheck="true">// 配置 UARTx4 DMA操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_DMA_TX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_DMAReq_Tx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 启用UARTx4 DMA发送</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_DMA_TX == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_DMA_RX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_DMAReq_Rx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 启用UARTx4 DMA接收</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_DMA_RX == 1)</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4 == 1)</span><span class="token punctuation">}</span></code></pre><h3 id="STM32F103xxxx-USART-H"><a href="#STM32F103xxxx-USART-H" class="headerlink" title="STM32F103xxxx_USART.H"></a>STM32F103xxxx_USART.H</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  文件名称: STM32F103xxxx_USART.H</span><span class="token comment" spellcheck="true">//  文件功能: USART-USART通信总线</span><span class="token comment" spellcheck="true">//  文件说明: 无</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __STM32F103xxxx_USART_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __STM32F103xxxx_USART_H__</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  包含的头文件    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x_usart.h"</span></span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// 宏自定义声明     |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  兼容STM32系列单片机 GPIO端口宏定义</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx1                             USART1</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx2                             USART2</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx3                             USART3</span><span class="token macro property">#<span class="token directive keyword">define</span> UARTx4                              UART4</span><span class="token macro property">#<span class="token directive keyword">define</span> UARTx5                              UART5</span><span class="token comment" spellcheck="true">// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1                       1       </span><span class="token comment" spellcheck="true">// USARTx1 开关开启  取值范围 - 0为禁用 1为启用  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_BAUD                  115200  </span><span class="token comment" spellcheck="true">// USARTx1 波特率  取值范围 - 600/1200/2400/4800/9600/19200/38400/115200</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_PORT_A09A10           1       </span><span class="token comment" spellcheck="true">// USARTx1 引脚设置 PA9 - TxD PA10 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_PORT_B06B07           0       </span><span class="token comment" spellcheck="true">// USARTx1 引脚设置 PB6 - TxD PB7 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_ITEN_RXNE             0       </span><span class="token comment" spellcheck="true">// USARTx1 接受中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_ITEN_IDLE             0       </span><span class="token comment" spellcheck="true">// USARTx1 空闲中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_ITEN_TC               0       </span><span class="token comment" spellcheck="true">// USARTx1 发送完成中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_DMA_TX                0       </span><span class="token comment" spellcheck="true">// USARTx1 DMA发送 开关  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_DMA_RX                0       </span><span class="token comment" spellcheck="true">// USARTx1 DMA接受 开关  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_DMA_TX_CUNT           1024    </span><span class="token comment" spellcheck="true">// USARTx1 DMA发送 字节数量</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_DMA_RX_CUNT           1024    </span><span class="token comment" spellcheck="true">// USARTx1 DMA接受 字节数量</span><span class="token comment" spellcheck="true">// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2                       0       </span><span class="token comment" spellcheck="true">// USARTx2 开关开启  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_BAUD                  9600    </span><span class="token comment" spellcheck="true">// USARTx2 波特率  取值范围 - 600/1200/2400/4800/9600/19200/38400/115200</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_PORT_A02A03           1       </span><span class="token comment" spellcheck="true">// USARTx2 引脚设置 PA2 - TxD PA3 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_PORT_D05D06           0       </span><span class="token comment" spellcheck="true">// USARTx2 引脚设置 PD5 - TxD PD6 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_ITEN_RXNE             0       </span><span class="token comment" spellcheck="true">// USARTx2 接受中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_ITEN_IDLE             0       </span><span class="token comment" spellcheck="true">// USARTx2 空闲中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_ITEN_TC               0       </span><span class="token comment" spellcheck="true">// USARTx2 发送完成中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token comment" spellcheck="true">// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3                       0       </span><span class="token comment" spellcheck="true">// USARTx3 开关开启  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_BAUD                  115200  </span><span class="token comment" spellcheck="true">// USARTx3 波特率  取值范围 - 600/1200/2400/4800/9600/19200/38400/115200</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_PORT_B10B11           1       </span><span class="token comment" spellcheck="true">// USARTx3 引脚设置 PB10 - TxD PB11 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_PORT_C10C11           0       </span><span class="token comment" spellcheck="true">// USARTx3 引脚设置 PC10 - TxD PC11 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_PORT_D08D09           0       </span><span class="token comment" spellcheck="true">// USARTx3 引脚设置 PD8 - TxD PD9 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_ITEN_RXNE             0       </span><span class="token comment" spellcheck="true">// USARTx3 接受中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_ITEN_IDLE             0       </span><span class="token comment" spellcheck="true">// USARTx3 空闲中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_ITEN_TC               0       </span><span class="token comment" spellcheck="true">// USARTx3 发送完成中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_DMA_TX                0       </span><span class="token comment" spellcheck="true">// USARTx3 DMA发送 开关开启  取值范围 - 0为禁用 1为使能</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_DMA_RX                0       </span><span class="token comment" spellcheck="true">// USARTx3 DMA接受 开关开启  取值范围 - 0为禁用 1为使能</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_DMA_TX_COUNT          1024    </span><span class="token comment" spellcheck="true">// USARTx3 DMA发送 字节数量</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_DMA_RX_COUNT          1024    </span><span class="token comment" spellcheck="true">// USARTx3 DMA接受 字节数量</span><span class="token comment" spellcheck="true">// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4                        0       </span><span class="token comment" spellcheck="true">// UARTx4 开关开启  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4_BAUD                   115200  </span><span class="token comment" spellcheck="true">// UARTx4 波特率  取值范围 - 600/1200/2400/4800/9600/19200/38400/115200</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4_PORT_C10C11            1       </span><span class="token comment" spellcheck="true">// UARTx4 引脚设置 PC10 - TxD PC11 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4_ITEN_RXNE              1       </span><span class="token comment" spellcheck="true">// UARTx4 接受中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4_ITEN_IDLE              0       </span><span class="token comment" spellcheck="true">// UARTx4 空闲中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4_ITEN_TC                0       </span><span class="token comment" spellcheck="true">// UARTx4 发送完成中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token comment" spellcheck="true">// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5                        0       </span><span class="token comment" spellcheck="true">// UARTx5 开关开启  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5_BAUD                   115200  </span><span class="token comment" spellcheck="true">// UARTx5 波特率  取值范围 - 600/1200/2400/4800/9600/19200/38400/115200</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5_PORT_C12D02            1       </span><span class="token comment" spellcheck="true">// UARTx5 引脚设置 PC10 - TxD PC11 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5_ITEN_RXNE              1       </span><span class="token comment" spellcheck="true">// UARTx5 接受中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5_ITEN_IDLE              0       </span><span class="token comment" spellcheck="true">// UARTx5 空闲中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5_ITEN_TC                0       </span><span class="token comment" spellcheck="true">// UARTx5 发送完成中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  数据变量定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  函数调用声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  USART 预配置</span><span class="token keyword">void</span> <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送字符、字符串</span><span class="token keyword">void</span> <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 接受字符</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">USART_ReceiveChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送数组 </span><span class="token keyword">void</span> <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送回车换行</span><span class="token keyword">void</span> <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送数字 </span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_Float</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">float</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_Binary</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// #ifndef __STM32F103xxxx_USART_H__</span></code></pre><h3 id="BSP-TEST-C"><a href="#BSP-TEST-C" class="headerlink" title="BSP_TEST.C"></a>BSP_TEST.C</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_test.h"</span></span><span class="token comment" spellcheck="true">/**  * @brief  TFT_LCD_TEST LCD测试函数  * @param  none  * @retval 无 */</span><span class="token keyword">void</span>  <span class="token function">TFT_LCD_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_SetFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetColors</span><span class="token punctuation">(</span>RED<span class="token punctuation">,</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_Clear</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>LCD_X_LENGTH<span class="token punctuation">,</span>LCD_Y_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清屏，显示全黑 */</span>    <span class="token comment" spellcheck="true">/********显示字符串示例*******/</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"dele 3.2 inch LCD:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Image resolution:240x320"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"ILI9341 TFT_LCD_TEST driver "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"www.delehub.top By wangzixuan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"2020-10-02 17:15 TFT_LCD_TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_SetFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 画圆 */</span>  <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清除单行文字 */</span>    <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"TFT_LCD_DrawCir_TEST :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DrawCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DrawCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ILI9341_DrawCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">0xFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_Clear</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span>LCD_X_LENGTH<span class="token punctuation">,</span>LCD_Y_LENGTH<span class="token number">-16</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清屏，显示全黑 */</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Usart_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1 <span class="token punctuation">,</span> <span class="token string">"2020-10-02 18:00 USART1 Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">12445</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendNumber_Float</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">1234.89</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1 <span class="token punctuation">,</span> <span class="token string">"www.delehub.top  By wang zi xuan "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  简单延时函数  * @param  nCount ：延时计数值  * @retval 无  */</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Delay</span> <span class="token punctuation">(</span> __IO uint32_t nCount <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> nCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> nCount <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  ******************************************************************************  * @file    main.c  * 实验平台:野火 F103-霸道 STM32 开发板   ******************************************************************************  * 第三方库文件导入  START THE FILE  ******************************************************************************  */</span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_led.h"</span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_key.h"</span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_beep.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_exit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_ili9341_lcd.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_SysTick.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_test.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"STM32F103xxxx_USART.H"</span>  </span><span class="token comment" spellcheck="true">/******************************************************************************END THE FILE  * 第三方库文件导入*********************************************************/</span> <span class="token keyword">void</span> <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LED_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Key_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Beep_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM4_Int_Init(9999,7199);</span>  <span class="token function">ILI9341_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  主函数  * @param  无  * @retval 无  */</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 硬件端口初始化 */</span>    <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">ILI9341_GramScan</span> <span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_LCD_TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Usart_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="串口助手打印效果"><a href="#串口助手打印效果" class="headerlink" title="串口助手打印效果"></a>串口助手打印效果</h3><p><img src="https://img-blog.csdnimg.cn/20201002210122772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="串口助手打印效果"></p><h3 id="TFT-LCD-测试效果"><a href="#TFT-LCD-测试效果" class="headerlink" title="TFT_LCD 测试效果"></a>TFT_LCD 测试效果</h3><p><img src="https://img-blog.csdnimg.cn/20201002210353427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="TFT_LCD 测试效果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;野火F1开发板STM32-USART使用&quot;&gt;&lt;a href=&quot;#野火F1开发板STM32-USART使用&quot; class=&quot;headerlink&quot; title=&quot;野火F1开发板STM32-USART使用&quot;&gt;&lt;/a&gt;野火F1开发板STM32-USART使用&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="C" scheme="https://delehub.vercel.app/categories/C/"/>
    
      <category term="嵌入式 STM32" scheme="https://delehub.vercel.app/categories/C/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/"/>
    
      <category term="串口通信" scheme="https://delehub.vercel.app/categories/C/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
      <category term="软件开发" scheme="https://delehub.vercel.app/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="嵌入式STM32" scheme="https://delehub.vercel.app/tags/%E5%B5%8C%E5%85%A5%E5%BC%8FSTM32/"/>
    
      <category term="串口通信 USART String" scheme="https://delehub.vercel.app/tags/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-USART-String/"/>
    
      <category term="野火F1开发板" scheme="https://delehub.vercel.app/tags/%E9%87%8E%E7%81%ABF1%E5%BC%80%E5%8F%91%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>C and MicrocontrollersPlan-2</title>
    <link href="https://delehub.vercel.app/2020/09/15/c-and-microcontrollersplan-2/"/>
    <id>https://delehub.vercel.app/2020/09/15/c-and-microcontrollersplan-2/</id>
    <published>2020-09-15T14:06:15.948Z</published>
    <updated>2020-09-19T04:53:10.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><h2 id="1-二进制-字节单位"><a href="#1-二进制-字节单位" class="headerlink" title="1.二进制 字节单位"></a>1.二进制 字节单位</h2><p><strong>二进制</strong>：二进制数只有0和1两个数码，它的每一位都可以用电子元件来实现，且运算规则简单，运算电路也容易实现。</p><p><strong>位</strong>(bit)：位的英文名是用bit来表示。一个变量的位数越大就意味着这个变量的取值范围越大。一个单片机的位数越大，就说明这个单片机一次处理的数据范围就越大，意味着运算和处理速度就越快。</p><p><strong>字节</strong>(Byte)： 什么是字节？字节是计算机很重要的一个基本单位，一个字节有8位。（1B = 8bit）</p><p><strong>字：</strong>16个位(bit)为一个字，它代表计算机处理指令或数据的二进制数位数。</p><p><strong>位是最小的存储单位，每一个位存储一个1位的二进制码，一个字节由8位组成。而字通常为16、32或64个位组成。</strong></p><pre class=" language-markdown"><code class="language-markdown">千，1KB=2的10次方＝bai1024B，du兆，1MB=2的20次方zhi＝dao1024<span class="token italic"><span class="token punctuation">*</span>1024B＝1024KB，吉，1GB=2的30次方＝1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024B=1024MB，太，1TB=2的40次方＝1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024B=1024GB,拍，1PB=2的50次方＝1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024B=1024TB,艾，1EB=2的60次方＝1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024B=1024PB,泽，1ZB=2的70次方＝1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024B=1024EB,尧，1YB=2的80次方＝1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024B=1024ZB</code></pre><p><strong><em>变量取值范围：</em></strong></p><pre class=" language-c"><code class="language-c"> <span class="token keyword">unsigned</span> <span class="token keyword">char</span>的变量占用<span class="token number">1</span>个字节RAM，共<span class="token number">8</span>位，取值范围是从<span class="token number">0</span>到<span class="token number">255</span>。  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>的变量占用<span class="token number">2</span>个字节RAM，共<span class="token number">16</span>位，取值范围是从<span class="token number">0</span>到<span class="token number">65535</span>。 <span class="token comment" spellcheck="true">//对于51内核的单片机，unsigned int的变量是占用2个字节。</span> <span class="token comment" spellcheck="true">//如果是在32位的stm32单片机，unsigned int的变量是占用4个字节的，所以不同的单片机不同的编译器是会有一些差异的。</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span>的变量占用<span class="token number">4</span>个字节RAM，共<span class="token number">32</span>位，根据前面LED灯的例子，取值范围是从<span class="token number">0</span>到<span class="token number">4294967295</span>。 </code></pre><h2 id="2-进制"><a href="#2-进制" class="headerlink" title="2.进制"></a><strong>2.进制</strong></h2><h3 id="数制："><a href="#数制：" class="headerlink" title="数制："></a>数制：</h3><ol><li>进位制：表示数时，仅用一位数码往往不够用，必须用进位计数的方法组成多位数码。多位数码每一位的构成以及从低位到高位的进位规则称为进位计数制，简称进位制。</li><li>基 数：进位制的基数，就是在该进位制中可能用到的数码个数。</li><li>位 权（位的权数）：在某一进位制的数中，每一位的大小都对应着该位上的数码乘上一个固定的数，这个固定的数就是这一位的权数。权数是一个幂。</li></ol><h3 id="二进制：（B）"><a href="#二进制：（B）" class="headerlink" title="二进制：（B）"></a>二进制：（B）</h3><ol><li>数码为：0、1；基数是2。</li><li>运算规律：逢二进一，即：1＋1＝10</li><li>加法规则：0+0=0，0+1=1，1+0=1，1+1=10</li><li>乘法规则：0.0=0， 0.1=0 ，1.0=0，1.1=1</li><li>二进制数只有0和1两个数码，它的每一位都可以用电子元件来实现，且运算规则简单，相应的运算电路也容易实现。</li></ol><h3 id="十进制：-D"><a href="#十进制：-D" class="headerlink" title="十进制：(D)"></a>十进制：(D)</h3><ol><li>数码为：0～9；基数是10。</li><li>运算规律：逢十进一，即：9＋1＝10</li><li>任意一个十进制数都可以表示为各个数位上的数码与其对应的权的乘积之和，称权展开式。</li></ol><h3 id="八进制：-O"><a href="#八进制：-O" class="headerlink" title="八进制：(O)"></a>八进制：(O)</h3><ol><li>数码为：0～7；基数是8。</li><li>运算规律：逢八进一，即：7＋1＝10</li></ol><h3 id="16进制：-H"><a href="#16进制：-H" class="headerlink" title="16进制：(H)"></a>16进制：(H)</h3><ol><li>数码为：0～9、A～F；基数是16。</li><li>运算规律：逢十六进一，即：F＋1＝10</li><li>16进制表示为 0X?? </li><li>16进制转成二进制 0X?? ？对应二进制数</li></ol><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><p><strong>①一般地，N进制需要用到N个数码，基数是N；运算规律为逢N进一。</strong></p><p><strong>②如果一个N进制数M包含ｎ位整数和ｍ位小数, (an-1 an-2 … a1 a0 · a－1 a－2 … a－m)2</strong></p><p><strong>则该数的权展开式为：</strong></p><p><strong>(M)2 ＝ an-1×Nn-1 ＋ an-2 ×Nn-2 ＋  …  ＋a1×N1＋ a0 ×N0＋a－1 ×N-1＋a－2 ×N-2＋… ＋a－m×N-m</strong>                          </p><p><strong>③由权展开式很容易将一个N进制数转换为十进制数</strong></p><p><strong>常见的进制转换</strong></p><p><img src="https://i.loli.net/2020/09/19/GuZlvoYdQxJmhPi.jpg" alt="img"></p><h2 id="3-数制转换"><a href="#3-数制转换" class="headerlink" title="3.数制转换"></a><strong>3.数制转换</strong></h2><h3 id="1-二进制数与八进制数的相互转换"><a href="#1-二进制数与八进制数的相互转换" class="headerlink" title="1.二进制数与八进制数的相互转换"></a><strong>1.二进制数与八进制数的相互转换</strong></h3><p>（1）二进制数转换为八进制数： 将二进制数由小数点开始，整数部分向左，小数部分向右，每3位分成一组，不够3位补零，则每组二进制数便是一位八进制数。</p><p><img src="https://i.loli.net/2020/09/19/Hot9kAlFDuiP76M.jpg" alt="img"></p><p>八进制数转换为二进制数：将每位八进制数用3位二进制数表示。    </p><p><img src="https://i.loli.net/2020/09/19/ALBvMQwYSk8dJl7.jpg" alt="img"></p><h3 id="2-二进制数与十六进制数的相互转换"><a href="#2-二进制数与十六进制数的相互转换" class="headerlink" title="2.二进制数与十六进制数的相互转换"></a><strong>2.二进制数与十六进制数的相互转换</strong></h3><p>1.二进制数与十六进制数的相互转换，按照每4位二进制数对应于一位十六进制数进行转换。</p><p><img src="https://i.loli.net/2020/09/19/OapsivEVWHgkCAU.jpg" alt="img"></p><h3 id="3-十进制数转换为二进制数"><a href="#3-十进制数转换为二进制数" class="headerlink" title="3.十进制数转换为二进制数"></a><strong>3.十进制数转换为二进制数</strong></h3><p>采用的方法 — 基数连除、连乘法</p><p>原理：将整数部分和小数部分分别进行转换。整数部分采用基数连除法，小数部分采用基数连乘法再合并。</p><ol><li>整数部分采用基数连除法，先得到的余数为低位，后得到的余数为高位。</li><li>小数部分采用基数连乘法，先得到的整数为高位，后得到的整数为低位。</li></ol><p><img src="https://i.loli.net/2020/09/19/q7RrQtvUgOcw6Jj.jpg" alt="img"></p><p>采用基数连除、连乘法，可将十进制数转换为任意的N进制数。</p><p><img src="https://i.loli.net/2020/09/19/ealxOqtJTBrA6hD.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/5RcpvmB7n43NETd.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/Fg2xRXKNhPOuJYZ.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/MONsuW4pKq6DPXm.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/BGfv7jkQRD3EuFe.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/WslAwO6dqHpi7gK.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/FVyrZusMk9IeAUj.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/H3Jhfjy8PbgDOMZ.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进制&quot;&gt;&lt;a href=&quot;#进制&quot; class=&quot;headerlink&quot; title=&quot;进制&quot;&gt;&lt;/a&gt;进制&lt;/h1&gt;&lt;h2 id=&quot;1-二进制-字节单位&quot;&gt;&lt;a href=&quot;#1-二进制-字节单位&quot; class=&quot;headerlink&quot; title=&quot;1.二进制
      
    
    </summary>
    
    
      <category term="单片机" scheme="https://delehub.vercel.app/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="C" scheme="https://delehub.vercel.app/categories/%E5%8D%95%E7%89%87%E6%9C%BA/C/"/>
    
    
      <category term="51单片机" scheme="https://delehub.vercel.app/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C and MicrocontrollersPlan-1</title>
    <link href="https://delehub.vercel.app/2020/09/13/c-and-microcontrollersplan-1/"/>
    <id>https://delehub.vercel.app/2020/09/13/c-and-microcontrollersplan-1/</id>
    <published>2020-09-13T15:56:10.518Z</published>
    <updated>2020-09-15T14:13:52.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MicrocontrollersPlan"><a href="#MicrocontrollersPlan" class="headerlink" title="MicrocontrollersPlan"></a>MicrocontrollersPlan</h1><h2 id="C程序设计复习"><a href="#C程序设计复习" class="headerlink" title="C程序设计复习"></a>C程序设计复习</h2><h2 id="单片机复习"><a href="#单片机复习" class="headerlink" title="单片机复习"></a>单片机复习</h2><ol><li>单片机案例实验与仿真 (51单片机100实例源码)</li><li>C51单片机开源项目合集</li><li>单片机编程技巧与分析(手把手教你单片机程序框架 )(从单片机基础到程序框架.pdf)</li><li>项目课程设计</li></ol><h3 id="参考资料-吴坚鸿《从单片机基础到程序框架》"><a href="#参考资料-吴坚鸿《从单片机基础到程序框架》" class="headerlink" title="参考资料 吴坚鸿《从单片机基础到程序框架》"></a>参考资料 吴坚鸿《从单片机基础到程序框架》</h3><p>===================================================================================</p><h2 id="复习1-md-程序模块化设计"><a href="#复习1-md-程序模块化设计" class="headerlink" title="复习1.md 程序模块化设计"></a>复习1.md 程序模块化设计</h2><h3 id="程序模块化设计"><a href="#程序模块化设计" class="headerlink" title="程序模块化设计"></a>程序模块化设计</h3><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"REG52.H"</span>   </span><span class="token comment" spellcheck="true">//进入主程序前的区域：头文件包含</span>sbit beep_dr<span class="token operator">=</span>P3<span class="token operator">^</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进入主程序前的区域：宏定义</span>sbit led_dr<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进入主程序前的区域：宏定义</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进入主程序前的区域：内存分配</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//主程序入口，即将进入初始化区域</span><span class="token punctuation">{</span>    beep_dr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一步：初始化区域：蜂鸣器开始鸣叫。</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6250</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第二步：初始化区域：延时 0.5 秒左右。也就是蜂鸣器鸣叫的持续时间。</span>    beep_dr<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第三步：初始化区域：蜂鸣器停止鸣叫。</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//执行完上面的初始化区域，即将进入循环区域</span>    <span class="token punctuation">{</span>        led_dr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第四步：循环区域：LED 开始点亮。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6250</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第五步：循环区域：延时 0.5 秒左右。也就是 LED 点亮的持续时间。</span>        led_dr<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第六步：循环区域：LED 开始熄灭。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6250</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第七步：循环区域：延时 0.5 秒左右。也就是 LED 熄灭的持续时间。</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//执行完上面第七步后，单片机又马上返回到上面第四步继续往下执行。</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//...进入主程序前的区域</span>main<span class="token punctuation">.</span>c<span class="token comment" spellcheck="true">// 官方库文件导入 </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg51.h></span></span><span class="token comment" spellcheck="true">// 第三方库文件导入(个人)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"led.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"oled.h"</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 模块引脚定义</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模块初始化</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//代码执行部分</span>         <span class="token comment" spellcheck="true">//代码循环部分</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">oled_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">led_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">beep_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dht_11_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//....... </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...初始化区域</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//...循环区域</span>     <span class="token comment" spellcheck="true">// led_on;</span>     <span class="token comment" spellcheck="true">// led_off;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>定义变量的关键字。常用有 3 种容量的变量，每种变量的取值范围不一样。</p><ol><li><p>第一种是”unsigned char”  <strong>0~2^8-1</strong><br>变量，取值范围从 0 到 255，占用 RAM 一个字节，比喻成一房一厅。</p></li><li><p>第二种是”unsigned int”变量，取值  <strong>0~2^16-1</strong><br>范围从 0 到 65535，占用 RAM 两个字节，比喻成两房一厅。</p></li><li><p>第三种是“unsigned long”变量，取值范围从 0<br>到 4294967295，占用 RAM 四个字节，比喻成四房一厅。<strong>0~2^32-1</strong></p></li></ol><p><strong>注意：多说一句，上述的变量范围是针对本教程所用的单片机，当针对不同的单片机时上述变量的范围可能会有一些小差异，比如在 stm32 单片机中，unsigned int 的字节数就不是两个字节，而是四个字节，这些都是由所选的编译器决定.</strong></p><p>定义变量的语法格式</p><ol><li><p>关键字，变量名，分号</p><pre class=" language-C"><code class="language-C">unsigned char a;//其中 unsigned char 就是关键字，a 就是变量名，分号”;”就是一条语句的结束符号</code></pre></li><li><p>关键字标识符一些注意点</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*不合法标识符*/</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> 3a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不合法，第一个字符不能是数字。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token keyword">char</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不合法，char 是编译器已征用的关键字。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不合法，ab 是一个变量名，a 与 b 的中间不能有空格。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法，a 和 b 分别是一个独立的变量名，a 与 b 的中间可以用逗号隔开。</span><span class="token comment" spellcheck="true">/*合法标识符*/</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> abc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> _ab<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> _3ab<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a123<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a12ced<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span></code></pre><p><strong><u>规则：</u></strong></p><ol><li><strong>变量名的第一个字符不能是数字。</strong></li><li><strong>必须是字母或者下划线，字母或者下划线后面可以带数字。</strong></li><li><strong>一个变量名之间的字符不能带空格，两个独立变量名之间也不能用空格隔开（但是两个独立变量</strong><br><strong>名之间可以用逗号隔开）。</strong></li><li><strong>变量名不能跟编译器已征用的关键字重名，不能跟函数名重名。</strong></li></ol></li></ol><h3 id="变量-RAM关系"><a href="#变量-RAM关系" class="headerlink" title="变量 RAM关系"></a>变量 RAM关系</h3><ol><li><p>定义变量与 RAM 的内在关系。<strong>当我们定义一个变量时，相当于向单片机申请了一个 RAM 空间。</strong>C 编译器<br>会<strong>自动为这个变量名分配一个 RAM 空间</strong>，<strong>每个字节的 RAM 空间都有一个固定唯一的地址</strong>。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a 占用一个字节的 RAM 空间，这个空间的地址由 C 编译自动分配。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//b 占用一个字节的 RAM 空间，这个空间的地址由 C 编译自动分配。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c 占用一个字节的 RAM 空间，这个空间的地址由 C 编译自动分配。</span></code></pre></li><li><p>只需要记住这个变量的名称就可以了。<strong>操作某个变量名，就相当于操作某个对应地址的 RAM 空间</strong>。</p></li></ol><h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h3><ol><li><p>赋值：把右边对象的内容复制一份给左边对象。</p></li><li><p>特性：就是覆盖性，左边对象原来的内容会被右边对象复制过来的新内容所覆盖。</p></li><li><p>格式</p><ol><li>赋值语句的格式。赋值语句的语法格式由 4 部分组成：左边对象，关键字，右边对象，分号。</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span></code></pre></li><li><p>其中 a 就是左边对象。</p><ol start="3"><li><strong>其中“=”就是关键字。</strong>写法跟我们平时用的等于号是一样，但是在 C 语言里不是等于的意思，而是代<br>表赋值的意思。</li><li>它是<strong>代表中文含义的“给”</strong>，而<strong>不是用于判断的“等于”</strong>，跟等于号是两码事。</li><li>其中 <strong>b 就是右边对象</strong>。</li><li>其中<strong>分号“;”</strong>代表一条语句的结束符。</li><li>注意C语言程序是    <strong>等于是  ——–》 “ == “</strong></li></ol><h3 id="单片机串口打印部分函数"><a href="#单片机串口打印部分函数" class="headerlink" title="单片机串口打印部分函数"></a>单片机串口打印部分函数</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> u32ViewData<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Su8ViewBuffer<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8_0D_0A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x0d</span><span class="token punctuation">,</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8Start<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"开始..."</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Su8FirstFlag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Su16FirstDelay<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>Su8FirstFlag<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Su8FirstFlag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Su16FirstDelay<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16FirstDelay<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>Su16FirstDelay<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SendString</span><span class="token punctuation">(</span>Cu8Start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SendString</span><span class="token punctuation">(</span>Cu8_0D_0A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SendString</span><span class="token punctuation">(</span>Cu8_0D_0A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">to_BufferData</span><span class="token punctuation">(</span>u32ViewData<span class="token punctuation">,</span>Su8ViewBuffer<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SendString</span><span class="token punctuation">(</span>Su8ViewBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">to_BufferData</span><span class="token punctuation">(</span>u32ViewData<span class="token punctuation">,</span>Su8ViewBuffer<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SendString</span><span class="token punctuation">(</span>Su8ViewBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">to_BufferData</span><span class="token punctuation">(</span>u32ViewData<span class="token punctuation">,</span>Su8ViewBuffer<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SendString</span><span class="token punctuation">(</span>Su8ViewBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">to_BufferData</span><span class="token punctuation">(</span>u32ViewData<span class="token punctuation">,</span>Su8ViewBuffer<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SendString</span><span class="token punctuation">(</span>Su8ViewBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SendString</span><span class="token punctuation">(</span>Cu8_0D_0A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">to_BufferData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> u32Data<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pu8Buffer<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8Type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8Array1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0xB5</span><span class="token punctuation">,</span><span class="token number">0xDA</span><span class="token punctuation">,</span><span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0xB8</span><span class="token punctuation">,</span><span class="token number">0xF6</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span><span class="token number">0xFD</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8Array2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"十进制:"</span><span class="token punctuation">;</span>     code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8Array3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"十六进制:"</span><span class="token punctuation">;</span>   code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8Array4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"二进制:"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Su8SerialNumber<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  Su16BufferCnt<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  Su16TempCnt<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  Su16TempSet<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Su32Temp1<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Su32Temp2<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Su32Temp3<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Su8ViewFlag<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span>u8Type<span class="token punctuation">)</span>   <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Su16BufferCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Cu8Array1<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>         pu8Buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>Su8SerialNumber<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">;</span>         pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x0d</span><span class="token punctuation">;</span>         pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x0a</span><span class="token punctuation">;</span>         pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       Su8SerialNumber<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">==</span>u8Type<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Su16BufferCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>          pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Cu8Array2<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        Su32Temp1<span class="token operator">=</span><span class="token number">1000000000</span><span class="token punctuation">;</span>      Su32Temp2<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>      Su16TempSet<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">==</span>u8Type<span class="token punctuation">)</span>   <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Su16BufferCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>          pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Cu8Array3<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         Su32Temp1<span class="token operator">=</span><span class="token number">0x10000000</span><span class="token punctuation">;</span>       Su32Temp2<span class="token operator">=</span><span class="token number">0x00000010</span><span class="token punctuation">;</span>       Su16TempSet<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>     <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Su16BufferCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>          pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Cu8Array4<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         Su32Temp1<span class="token operator">=</span><span class="token number">0x80000000</span><span class="token punctuation">;</span>       Su32Temp2<span class="token operator">=</span><span class="token number">0x00000002</span><span class="token punctuation">;</span>       Su16TempSet<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    Su8ViewFlag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Su16TempCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16TempCnt<span class="token operator">&lt;</span>Su16TempSet<span class="token punctuation">;</span>Su16TempCnt<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       Su32Temp3<span class="token operator">=</span>u32Data<span class="token operator">/</span>Su32Temp1<span class="token operator">%</span>Su32Temp2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Su32Temp3<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Su32Temp3<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>           pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Su32Temp3<span class="token number">-10</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>u32Data<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>Su8ViewFlag<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token operator">!=</span>pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>               Su8ViewFlag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       Su32Temp1<span class="token operator">=</span>Su32Temp1<span class="token operator">/</span>Su32Temp2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x0d</span><span class="token punctuation">;</span>    pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x0a</span><span class="token punctuation">;</span>    pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SendString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pu8String<span class="token punctuation">)</span>   <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Su16SendCnt<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Su16Delay<span class="token punctuation">;</span>  SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>  TMOD<span class="token operator">=</span><span class="token number">0X21</span><span class="token punctuation">;</span>  TH1<span class="token operator">=</span>TL1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">11059200</span><span class="token operator">/</span><span class="token number">12</span><span class="token operator">/</span><span class="token number">32</span><span class="token operator">/</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TR1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  ES <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   TI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>Su16SendCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16SendCnt<span class="token operator">&lt;</span><span class="token number">43</span><span class="token punctuation">;</span>Su16SendCnt<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>pu8String<span class="token punctuation">[</span>Su16SendCnt<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        SBUF <span class="token operator">=</span>pu8String<span class="token punctuation">[</span>Su16SendCnt<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Su16Delay<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16Delay<span class="token operator">&lt;</span><span class="token number">800</span><span class="token punctuation">;</span>Su16Delay<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      TI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><pre><code>   ### 赋值语句的覆盖性   #### 案例 数字交换   #### demo 1   ```c   //view()功能相当于printf()函数，view()单片机的串口打印功能   void main() //主函数   {       unsigned char a=1; //定义的变量 a 被分配了 1 个字节的 RAM 空间，保存的数据被初始化成 1。       unsigned char b=5; //定义的变量 b 被分配了 1 个字节的 RAM 空间，保存的数据被初始化成 5。       b=a; //第一步：为了交换，先把 a 的数赋值给 b。       a=b; //第二步：为了交换，再把 b 的数赋值给 a。       View(a); //把第 1 个数 a 发送到电脑端的串口助手软件上观察。       View(b); //把第 2 个数 b 发送到电脑端的串口助手软件上观察。       while(1)       {       }   }   //代码分析   //由于b的数据在执行完“第一步”后，b自己原来的数据5被覆盖丢失了变成新的数据1，   //接着执行“第二步”后，此时相当于把 b的新数据1赋值给a，并没有5！所以a和b的数据都是1</code></pre><pre class=" language-c"><code class="language-c">   <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//主函数</span>   <span class="token punctuation">{</span>          <span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义的变量a被分配了1个字节的RAM空间，保存的数据被初始化成1。</span>          <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义的变量b被分配了1个字节的RAM空间，保存的数据被初始化成5。</span>          <span class="token keyword">unsigned</span> <span class="token keyword">char</span> t<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//定义一个第三方变量t，用来临时寄存数值。</span>          t<span class="token operator">=</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一步：为了避免b的数据在赋值后被覆盖丢失，先寄存一份在第三方变量t那里。</span>          b<span class="token operator">=</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第二步：把a的数赋值给b，b原来的数据虽然丢失，但是b在t变量那里有备份。</span>          a<span class="token operator">=</span>t<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第三步：再把b在t变量里的备份赋值给a。注意，这里不能用b，因b原数据已被覆盖。</span>          <span class="token function">View</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把第1个数a发送到电脑端的串口助手软件上观察。</span>           <span class="token function">View</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把第2个数b发送到电脑端的串口助手软件上观察。</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 代码分析</span>   <span class="token comment" spellcheck="true">//中间变量t  b=a; b--> t &lt;--a </span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MicrocontrollersPlan&quot;&gt;&lt;a href=&quot;#MicrocontrollersPlan&quot; class=&quot;headerlink&quot; title=&quot;MicrocontrollersPlan&quot;&gt;&lt;/a&gt;MicrocontrollersPlan&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="单片机" scheme="https://delehub.vercel.app/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="C" scheme="https://delehub.vercel.app/categories/%E5%8D%95%E7%89%87%E6%9C%BA/C/"/>
    
    
      <category term="51单片机" scheme="https://delehub.vercel.app/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Simple Dynamic Strings</title>
    <link href="https://delehub.vercel.app/2020/09/12/c-yu-yan-zi-fu-chuan-han-shu-ku/"/>
    <id>https://delehub.vercel.app/2020/09/12/c-yu-yan-zi-fu-chuan-han-shu-ku/</id>
    <published>2020-09-12T01:00:20.927Z</published>
    <updated>2020-09-12T01:09:11.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Simple-Dynamic-Strings"><a href="#Simple-Dynamic-Strings" class="headerlink" title="Simple Dynamic Strings"></a>Simple Dynamic Strings</h1><p><strong>Notes about version 2</strong>: this is an updated version of SDS in an attempt<br>to finally unify Redis, Disque, Hiredis, and the stand alone SDS versions.<br>This version is <strong>NOT* binary compatible</strong> with SDS verison 1, but the API<br>is 99% compatible so switching to the new lib should be trivial.</p><p>Note that this version of SDS may be a slower with certain workloads, but<br>uses less memory compared to V1 since header size is dynamic and depends to<br>the string to alloc.</p><p>Moreover it includes a few more API functions, notably <code>sdscatfmt</code> which<br>is a faster version of <code>sdscatprintf</code> that can be used for the simpler<br>cases in order to avoid the libc <code>printf</code> family functions performance<br>penalty.</p><h1 id="How-SDS-strings-work"><a href="#How-SDS-strings-work" class="headerlink" title="How SDS strings work"></a>How SDS strings work</h1><p>SDS is a string library for C designed to augment the limited libc string<br>handling functionalities by adding heap allocated strings that are:</p><ul><li>Simpler to use.</li><li>Binary safe.</li><li>Computationally more efficient.</li><li>But yet… Compatible with normal C string functions.</li></ul><p>This is achieved using an alternative design in which instead of using a C<br>structure to represent a string, we use a binary prefix that is stored<br>before the actual pointer to the string that is returned by SDS to the user.</p><pre><code>+--------+-------------------------------+-----------+| Header | Binary safe C alike string... | Null term |+--------+-------------------------------+-----------+         |         `-&gt; Pointer returned to the user.</code></pre><p>Because of meta data stored before the actual returned pointer as a prefix,<br>and because of every SDS string implicitly adding a null term at the end of<br>the string regardless of the actual content of the string, SDS strings work<br>well together with C strings and the user is free to use them interchangeably<br>with other std C string functions that access the string in read-only.</p><p>SDS was a C string I developed in the past for my everyday C programming needs,<br>later it was moved into Redis where it is used extensively and where it was<br>modified in order to be suitable for high performance operations. Now it was<br>extracted from Redis and forked as a stand alone project.</p><p>Because of its many years life inside Redis, SDS provides both higher level<br>functions for easy strings manipulation in C, but also a set of low level<br>functions that make it possible to write high performance code without paying<br>a penalty for using an higher level string library.</p><h1 id="Advantages-and-disadvantages-of-SDS"><a href="#Advantages-and-disadvantages-of-SDS" class="headerlink" title="Advantages and disadvantages of SDS"></a>Advantages and disadvantages of SDS</h1><p>Normally dynamic string libraries for C are implemented using a structure<br>that defines the string. The structure has a pointer field that is managed<br>by the string function, so it looks like this:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> yourAverageStringLibrary <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>    size_t len<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> possibly more fields here <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>SDS strings as already mentioned don’t follow this schema, and are instead<br>a single allocation with a prefix that lives <em>before</em> the address actually<br>returned for the string.</p><p>There are advantages and disadvantages with this approach over the traditional<br>approach:</p><p><strong>Disadvantage #1</strong>: many functions return the new string as value, since sometimes SDS requires to create a new string with more space, so the most SDS API calls look like this:</p><pre class=" language-c"><code class="language-c">s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"Some more data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>As you can see <code>s</code> is used as input for <code>sdscat</code> but is also set to the value<br>returned by the SDS API call, since we are not sure if the call modified the<br>SDS string we passed or allocated a new one. Not remembering to assign back<br>the return value of <code>sdscat</code> or similar functions to the variable holding<br>the SDS string will result in a bug.</p><p><strong>Disadvantage #2</strong>: if an SDS string is shared in different places in your program you have to modify all the references when you modify the string. However most of the times when you need to share SDS strings it is much better to encapsulate them into structures with a <code>reference count</code> otherwise it is too easy to incur into memory leaks.</p><p><strong>Advantage #1</strong>: you can pass SDS strings to functions designed for C functions without accessing a struct member or calling a function, like this:</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> sds_string<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In most other libraries this will be something like:</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> string<span class="token operator">-></span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Or:</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">getStringPointer</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Advantage #2</strong>: accessing individual chars is straightforward. C is a low level language so this is an important operation in many programs. With SDS strings accessing individual chars is very natural:</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c %c\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>With other libraries your best chance is to assign <code>string-&gt;buf</code> (or call the function to get the string pointer) to a <code>char</code> pointer and work with this. However since the other libraries may reallocate the buffer implicitly every time you call a function that may modify the string you have to get a reference to the buffer again.</p><p><strong>Advantage #3</strong>: single allocation has better cache locality. Usually when you access a string created by a string library using a structure, you have two different allocations for the structure representing the string, and the actual buffer holding the string. Over the time the buffer is reallocated, and it is likely that it ends in a totally different part of memory compared to the structure itself. Since modern programs performances are often dominated by cache misses, SDS may perform better in many workloads.</p><h1 id="SDS-basics"><a href="#SDS-basics" class="headerlink" title="SDS basics"></a>SDS basics</h1><p>The type of SDS strings is just the char pointer <code>char *</code>. However SDS defines<br>an <code>sds</code> type as alias of <code>char *</code> in its header file: you should use the<br><code>sds</code> type in order to make sure you remember that a given variable in your<br>program holds an SDS string and not a C string, however this is not mandatory.</p><p>This is the simplest SDS program you can write that does something:</p><pre class=" language-c"><code class="language-c">sds mystring <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> mystring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsfree</span><span class="token punctuation">(</span>mystring<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> Hello World<span class="token operator">!</span></code></pre><p>The above small program already shows a few important things about SDS:</p><ul><li>SDS strings are created, and heap allocated, via the <code>sdsnew()</code> function, or other similar functions that we’ll see in a moment.</li><li>SDS strings can be passed to <code>printf()</code> like any other C string.</li><li>SDS strings require to be freed with <code>sdsfree()</code>, since they are heap allocated.</li></ul><h2 id="Creating-SDS-strings"><a href="#Creating-SDS-strings" class="headerlink" title="Creating SDS strings"></a>Creating SDS strings</h2><pre class=" language-c"><code class="language-c">sds <span class="token function">sdsnewlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>init<span class="token punctuation">,</span> size_t initlen<span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdsdup</span><span class="token punctuation">(</span><span class="token keyword">const</span> sds s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>There are many ways to create SDS strings:</p><ul><li><p>The <code>sdsnew</code> function creates an SDS string starting from a C null terminated string. We already saw how it works in the above example.</p></li><li><p>The <code>sdsnewlen</code> function is similar to <code>sdsnew</code> but instead of creating the string assuming that the input string is null terminated, it gets an additional length parameter. This way you can create a string using binary data:</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  sds mystring<span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>  mystring <span class="token operator">=</span> <span class="token function">sdsnewlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s of len %d\n"</span><span class="token punctuation">,</span> mystring<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>mystring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  output<span class="token operator">></span> ABC of len <span class="token number">3</span></code></pre><p>Note: <code>sdslen</code> return value is casted to <code>int</code> because it returns a <code>size_t</code><br>type. You can use the right <code>printf</code> specifier instead of casting.</p></li><li><p>The <code>sdsempty()</code> function creates an empty zero-length string:</p><pre class=" language-c"><code class="language-c">  sds mystring <span class="token operator">=</span> <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>mystring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  output<span class="token operator">></span> <span class="token number">0</span></code></pre></li><li><p>The <code>sdsdup()</code> function duplicates an already existing SDS string:</p><pre class=" language-c"><code class="language-c">  sds s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>  s1 <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s2 <span class="token operator">=</span> <span class="token function">sdsdup</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  output<span class="token operator">></span> Hello Hello</code></pre></li></ul><h2 id="Obtaining-the-string-length"><a href="#Obtaining-the-string-length" class="headerlink" title="Obtaining the string length"></a>Obtaining the string length</h2><pre class=" language-c"><code class="language-c">size_t <span class="token function">sdslen</span><span class="token punctuation">(</span><span class="token keyword">const</span> sds s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In the examples above we already used the <code>sdslen</code> function in order to get<br>the length of the string. This function works like <code>strlen</code> of the libc<br>except that:</p><ul><li>It runs in constant time since the length is stored in the prefix of SDS strings, so calling <code>sdslen</code> is not expensive even when called with very large strings.</li><li>The function is binary safe like any other SDS string function, so the length is the true length of the string regardless of the content, there is no problem if the string includes null term characters in the middle.</li></ul><p>As an example of the binary safeness of SDS strings, we can run the following<br>code:</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnewlen</span><span class="token punctuation">(</span><span class="token string">"A\0\0B"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token number">4</span></code></pre><p>Note that SDS strings are always null terminated at the end, so even in that<br>case <code>s[4]</code> will be a null term, however printing the string with <code>printf</code><br>would result in just <code>&quot;A&quot;</code> to be printed since libc will treat the SDS string<br>like a normal C string.</p><h2 id="Destroying-strings"><a href="#Destroying-strings" class="headerlink" title="Destroying strings"></a>Destroying strings</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sdsfree</span><span class="token punctuation">(</span>sds s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The destroy an SDS string there is just to call <code>sdsfree</code> with the string<br>pointer. Note that even empty strings created with <code>sdsempty</code> need to be<br>destroyed as well otherwise they’ll result into a memory leak.</p><p>The function <code>sdsfree</code> does not perform any operation if instead of an SDS<br>string pointer, <code>NULL</code> is passed, so you don’t need to check for <code>NULL</code> explicitly before calling it:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token function">sdsfree</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Not needed. */</span><span class="token function">sdsfree</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Same effect but simpler. */</span></code></pre><h2 id="Concatenating-strings"><a href="#Concatenating-strings" class="headerlink" title="Concatenating strings"></a>Concatenating strings</h2><p>Concatenating strings to other strings is likely the operation you will end<br>using the most with a dynamic C string library. SDS provides different<br>functions to concatenate strings to existing strings.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdscatlen</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdscat</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The main string concatenation functions are <code>sdscatlen</code> and <code>sdscat</code> that are<br>identical, the only difference being that <code>sdscat</code> does not have an explicit<br>length argument since it expects a null terminated string.</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> Hello World<span class="token operator">!</span></code></pre><p>Sometimes you want to cat an SDS string to another SDS string, so you don’t<br>need to specify the length, but at the same time the string does not need to<br>be null terminated but can contain any binary data. For this there is a<br>special function:</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdscatsds</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> sds t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Usage is straightforward:</p><pre class=" language-c"><code class="language-c">sds s1 <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sds s2 <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1 <span class="token operator">=</span> <span class="token function">sdscatsds</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsfree</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> aaabbb</code></pre><p>Sometimes you don’t want to append any special data to the string, but you want<br>to make sure that there are at least a given number of bytes composing the<br>whole string.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdsgrowzero</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The <code>sdsgrowzero</code> function will do nothing if the current string length is<br>already <code>len</code> bytes, otherwise it will enlarge the string to <code>len</code> just padding<br>it with zero bytes.</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdsgrowzero</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* We are sure this is safe because of sdsgrowzero() */</span><span class="token function">printf</span><span class="token punctuation">(</span>"<span class="token operator">%</span>s\n'<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> Hello<span class="token operator">!</span></code></pre><h2 id="Formatting-strings"><a href="#Formatting-strings" class="headerlink" title="Formatting strings"></a>Formatting strings</h2><p>There is a special string concatenation function that accepts a <code>printf</code> alike<br>format specifier and cats the formatted string to the specified string.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdscatprintf</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><p>Example:</p><pre class=" language-c"><code class="language-c">sds s<span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"The sum is: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscatprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"%d+%d = %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Often you need to create SDS string directly from <code>printf</code> format specifiers.<br>Because <code>sdscatprintf</code> is actually a function that concatenates strings, all<br>you need is to concatenate your string to an empty string:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>name <span class="token operator">=</span> <span class="token string">"Anna"</span><span class="token punctuation">;</span><span class="token keyword">int</span> loc <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span>sds s<span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscatprintf</span><span class="token punctuation">(</span><span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%s wrote %d lines of LISP\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>You can use <code>sdscatprintf</code> in order to convert numbers into SDS strings:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> some_integer <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>sds num <span class="token operator">=</span> <span class="token function">sdscatprintf</span><span class="token punctuation">(</span><span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> some_integer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>However this is slow and we have a special function to make it efficient.</p><h2 id="Fast-number-to-string-operations"><a href="#Fast-number-to-string-operations" class="headerlink" title="Fast number to string operations"></a>Fast number to string operations</h2><p>Creating an SDS string from an integer may be a common operation in certain<br>kind of programs, and while you may do this with <code>sdscatprintf</code> the performance<br>hit is big, so SDS provides a specialized function.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdsfromlonglong</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Use it like this:</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsfromlonglong</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token number">5</span></code></pre><h2 id="Trimming-strings-and-getting-ranges"><a href="#Trimming-strings-and-getting-ranges" class="headerlink" title="Trimming strings and getting ranges"></a>Trimming strings and getting ranges</h2><p>String trimming is a common operation where a set of characters are<br>removed from the left and the right of the string. Another useful operation<br>regarding strings is the ability to just take a range out of a larger<br>string.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sdstrim</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sdsrange</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>SDS provides both the operations with the <code>sdstrim</code> and <code>sdsrange</code> functions.<br>However note that both functions work differently than most functions modifying<br>SDS strings since the return value is void: basically those functions always<br>destructively modify the passed SDS string, never allocating a new one, because<br>both trimming and ranges will never need more room: the operations can only<br>remove characters from the original string.</p><p>Because of this behavior, both functions are fast and don’t involve reallocation.</p><p>This is an example of string trimming where newlines and spaces are removed<br>from an SDS strings:</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"         my string\n\n  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdstrim</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">" \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-%s-\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token operator">-</span>my string<span class="token operator">-</span></code></pre><p>Basically <code>sdstrim</code> takes the SDS string to trim as first argument, and a<br>null terminated set of characters to remove from left and right of the string.<br>The characters are removed as long as they are not interrupted by a character<br>that is not in the list of characters to trim: this is why the space between<br><code>&quot;my&quot;</code> and <code>&quot;string&quot;</code> was preserved in the above example.</p><p>Taking ranges is similar, but instead to take a set of characters, it takes<br>to indexes, representing the start and the end as specified by zero-based<br>indexes inside the string, to obtain the range that will be retained.</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsrange</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-%s-\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token operator">-</span>ello<span class="token operator">-</span></code></pre><p>Indexes can be negative to specify a position starting from the end of the<br>string, so that <code>-1</code> means the last character, <code>-2</code> the penultimate, and so forth:</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsrange</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-%s-\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsrange</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-%s-\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token operator">-</span>World<span class="token operator">!</span><span class="token operator">-</span>output<span class="token operator">></span> <span class="token operator">-</span>World<span class="token operator">-</span></code></pre><p><code>sdsrange</code> is very useful when implementing networking servers processing<br>a protocol or sending messages. For example the following code is used<br>implementing the write handler of the Redis Cluster message bus between<br>nodes:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clusterWriteHandler</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    clusterLink <span class="token operator">*</span>link <span class="token operator">=</span> <span class="token punctuation">(</span>clusterLink<span class="token operator">*</span><span class="token punctuation">)</span> privdata<span class="token punctuation">;</span>    ssize_t nwritten <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> link<span class="token operator">-></span>sndbuf<span class="token punctuation">,</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>link<span class="token operator">-></span>sndbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nwritten <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Error handling... */</span>    <span class="token punctuation">}</span>    <span class="token function">sdsrange</span><span class="token punctuation">(</span>link<span class="token operator">-></span>sndbuf<span class="token punctuation">,</span>nwritten<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> more code here <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Every time the socket of the node we want to send the message to is writable<br>we attempt to write as much bytes as possible, and we use <code>sdsrange</code> in order<br>to remove from the buffer what was already sent.</p><p>The function to queue new messages to send to some node in the cluster will<br>simply use <code>sdscatlen</code> in order to put more data in the send buffer.</p><p>Note that the Redis Cluster bus implements a binary protocol, but since SDS<br>is binary safe this is not a problem, so the goal of SDS is not just to provide<br>an high level string API for the C programmer but also dynamically allocated<br>buffers that are easy to manage.</p><h2 id="String-copying"><a href="#String-copying" class="headerlink" title="String copying"></a>String copying</h2><p>The most dangerous and infamus function of the standard C library is probably<br><code>strcpy</code>, so perhaps it is funny how in the context of better designed dynamic<br>string libraries the concept of copying strings is almost irrelevant. Usually<br>what you do is to create strings with the content you want, or concatenating<br>more content as needed.</p><p>However SDS features a string copy function that is useful in performance<br>critical code sections, however I guess its practical usefulness is limited<br>as the function never managed to get called in the context of the 50k<br>lines of code composing the Redis code base.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdscpylen</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdscpy</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The string copy function of SDS is called <code>sdscpylen</code> and works like that:</p><pre class=" language-c"><code class="language-c">s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscpylen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"Hello Superman!"</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>As you can see the function receives as input the SDS string <code>s</code>, but also<br>returns an SDS string. This is common to many SDS functions that modify the<br>string: this way the returned SDS string may be the original one modified<br>or a newly allocated one (for example if there was not enough room in the<br>old SDS string).</p><p>The <code>sdscpylen</code> will simply replace what was in the old SDS string with the<br>new data you pass using the pointer and length argument. There is a similar<br>function called <code>sdscpy</code> that does not need a length but expects a null<br>terminated string instead.</p><p>You may wonder why it makes sense to have a string copy function in the<br>SDS library, since you can simply create a new SDS string from scratch<br>with the new value instead of copying the value in an existing SDS string.<br>The reason is efficiency: <code>sdsnewlen</code> will always allocate a new string<br>while <code>sdscpylen</code> will try to reuse the existing string if there is enough<br>room to old the new content specified by the user, and will allocate a new<br>one only if needed.</p><h2 id="Quoting-strings"><a href="#Quoting-strings" class="headerlink" title="Quoting strings"></a>Quoting strings</h2><p>In order to provide consistent output to the program user, or for debugging<br>purposes, it is often important to turn a string that may contain binary<br>data or special characters into a quoted string. Here for quoted string<br>we mean the common format for String literals in programming source code.<br>However today this format is also part of the well known serialization formats<br>like JSON and CSV, so it definitely escaped the simple goal of representing<br>literals strings in the source code of programs.</p><p>An example of quoted string literal is the following:</p><pre class=" language-c"><code class="language-c"><span class="token string">"\x00Hello World\n"</span></code></pre><p>The first byte is a zero byte while the last byte is a newline, so there are<br>two non alphanumerical characters inside the string.</p><p>SDS uses a concatenation function for this goal, that concatenates to an<br>existing string the quoted string representation of the input string.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdscatrepr</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The <code>scscatrepr</code> (where <code>repr</code> means <em>representation</em>) follows the usualy<br>SDS string function rules accepting a char pointer and a length, so you can<br>use it with SDS strings, normal C strings by using strlen() as <code>len</code> argument,<br>or binary data. The following is an example usage:</p><pre class=" language-c"><code class="language-c">sds s1 <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sds s2 <span class="token operator">=</span> <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>s2 <span class="token operator">=</span> <span class="token function">sdscatrepr</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span>s1<span class="token punctuation">,</span><span class="token function">sdslen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token string">"a\x01\x02\n"</span></code></pre><p>This is the rules <code>sdscatrepr</code> uses for conversion:</p><ul><li><code>\</code> and <code>&quot;</code> are quoted with a backslash.</li><li>It quotes special characters <code>&#39;\n&#39;</code>, <code>&#39;\r&#39;</code>, <code>&#39;\t&#39;</code>, <code>&#39;\a&#39;</code> and <code>&#39;\b&#39;</code>.</li><li>All the other non printable characters not passing the <code>isprint</code> test are quoted in <code>\x..</code> form, that is: backslash followed by <code>x</code> followed by two digit hex number representing the character byte value.</li><li>The function always adds initial and final double quotes characters.</li></ul><p>There is an SDS function that is able to perform the reverse conversion and is<br>documented in the <em>Tokenization</em> section below.</p><h2 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h2><p>Tokenization is the process of splitting a larger string into smaller strings.<br>In this specific case, the split is performed specifying another string that<br>acts as separator. For example in the following string there are two substrings<br>that are separated by the <code>|-|</code> separator:</p><pre><code>foo|-|bar|-|zap</code></pre><p>A more common separator that consists of a single character is the comma:</p><pre><code>foo,bar,zap</code></pre><p>In many progrems it is useful to process a line in order to obtain the sub<br>strings it is composed of, so SDS provides a function that returns an<br>array of SDS strings given a string and a separator.</p><pre class=" language-c"><code class="language-c">sds <span class="token operator">*</span><span class="token function">sdssplitlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sep<span class="token punctuation">,</span> <span class="token keyword">int</span> seplen<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sdsfreesplitres</span><span class="token punctuation">(</span>sds <span class="token operator">*</span>tokens<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>As usually the function can work with both SDS strings or normal C strings.<br>The first two arguments <code>s</code> and <code>len</code> specify the string to tokenize, and the<br>other two arguments <code>sep</code> and <code>seplen</code> the separator to use during the<br>tokenization. The final argument <code>count</code> is a pointer to an integer that will<br>be set to the number of tokens (sub strings) returned.</p><p>The return value is a heap allocated array of SDS strings.</p><pre class=" language-c"><code class="language-c">sds <span class="token operator">*</span>tokens<span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> j<span class="token punctuation">;</span>sds line <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tokens <span class="token operator">=</span> <span class="token function">sdssplitlen</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token function">sdslen</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> tokens<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsfreesplitres</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> Hellooutput<span class="token operator">></span> World<span class="token operator">!</span></code></pre><p>The returned array is heap allocated, and the single elements of the array<br>are normal SDS strings. You can free everything calling <code>sdsfreesplitres</code><br>as in the example. Alternativey you are free to release the array yourself<br>using the <code>free</code> function and use and/or free the individual SDS strings<br>as usually.</p><p>A valid approach is to set the array elements you reused in some way to<br><code>NULL</code>, and use <code>sdsfreesplitres</code> to free all the rest.</p><h2 id="Command-line-oriented-tokenization"><a href="#Command-line-oriented-tokenization" class="headerlink" title="Command line oriented tokenization"></a>Command line oriented tokenization</h2><p>Splitting by a separator is a useful operation, but usually it is not enough<br>to perform one of the most common tasks involving some non trivial string<br>manipulation, that is, implementing a <strong>Command Line Interface</strong> for a program.</p><p>This is why SDS also provides an additional function that allows you to split<br>arguments provided by the user via the keyboard in an interactive manner, or<br>via a file, network, or any other mean, into tokens.</p><pre class=" language-c"><code class="language-c">sds <span class="token operator">*</span><span class="token function">sdssplitargs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>line<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>argc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The <code>sdssplitargs</code> function returns an array of SDS strings exactly like<br><code>sdssplitlen</code>. The function to free the result is also identical, and is<br><code>sdsfreesplitres</code>. The difference is in the way the tokenization is performed.</p><p>For example if the input is the following line:</p><pre><code>call &quot;Sabrina&quot;    and &quot;Mark Smith\n&quot;</code></pre><p>The function will return the following tokens:</p><ul><li>“call”</li><li>“Sabrina”</li><li>“and”</li><li>“Mark Smith\n”</li></ul><p>Basically different tokens need to be separated by one or more spaces, and<br>every single token can also be a quoted string in the same format that<br><code>sdscatrepr</code> is able to emit.</p><h2 id="String-joining"><a href="#String-joining" class="headerlink" title="String joining"></a>String joining</h2><p>There are two functions doing the reverse of tokenization by joining strings<br>into a single one.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdsjoin</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>sep<span class="token punctuation">,</span> size_t seplen<span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdsjoinsds</span><span class="token punctuation">(</span>sds <span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sep<span class="token punctuation">,</span> size_t seplen<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The two functions take as input an array of strings of length <code>argc</code> and<br>a separator and its length, and produce as output an SDS string consisting<br>of all the specified strings separated by the specified separator.</p><p>The difference between <code>sdsjoin</code> and <code>sdsjoinsds</code> is that the former accept<br>C null terminated strings as input while the latter requires all the strings<br>in the array to be SDS strings. However because of this only <code>sdsjoinsds</code> is<br>able to deal with binary data.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>tokens<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"foo"</span><span class="token punctuation">,</span><span class="token string">"bar"</span><span class="token punctuation">,</span><span class="token string">"zap"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>sds s <span class="token operator">=</span> <span class="token function">sdsjoin</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"|"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> foo<span class="token operator">|</span>bar<span class="token operator">|</span>zap</code></pre><h2 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h2><p>All the SDS functions that return an SDS pointer may also return <code>NULL</code> on<br>out of memory, this is basically the only check you need to perform.</p><p>However many modern C programs handle out of memory simply aborting the program<br>so you may want to do this as well by wrapping <code>malloc</code> and other related<br>memory allocation calls directly.</p><h1 id="SDS-internals-and-advanced-usage"><a href="#SDS-internals-and-advanced-usage" class="headerlink" title="SDS internals and advanced usage"></a>SDS internals and advanced usage</h1><p>At the very beginning of this documentation it was explained how SDS strings<br>are allocated, however the prefix stored before the pointer returned to the<br>user was classified as an <em>header</em> without further details. For an advanced<br>usage it is better to dig more into the internals of SDS and show the<br>structure implementing it:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> sdshdr <span class="token punctuation">{</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">int</span> free<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>As you can see, the structure may resemble the one of a conventional string<br>library, however the <code>buf</code> field of the structure is different since it is<br>not a pointer but an array without any length declared, so <code>buf</code> actually<br>points at the first byte just after the <code>free</code> integer. So in order to create<br>an SDS string we just allocate a piece of memory that is as large as the<br><code>sdshdr</code> structure plus the length of our string, plus an additional byte<br>for the mandatory null term that every SDS string has.</p><p>The <code>len</code> field of the structure is quite obvious, and is the current length<br>of the SDS string, always computed every time the string is modified via<br>SDS function calls. The <code>free</code> field instead represents the amount of free<br>memory in the current allocation that can be used to store more characters.</p><p>So the actual SDS layout is this one:</p><pre><code>+------------+------------------------+-----------+---------------\| Len | Free | H E L L O W O R L D \n | Null term |  Free space   \+------------+------------------------+-----------+---------------\             |             `-&gt; Pointer returned to the user.</code></pre><p>You may wonder why there is some free space at the end of the string, it<br>looks like a waste. Actually after a new SDS string is created, there is no<br>free space at the end at all: the allocation will be as small as possible to<br>just hold the header, string, and null term. However other access patterns<br>will create extra free space at the end, like in the following program:</p><pre class=" language-c"><code class="language-c">s <span class="token operator">=</span> <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Since SDS tries to be efficient it can’t afford to reallocate the string every<br>time new data is appended, since this would be very inefficient, so it uses<br>the <strong>preallocation of some free space</strong> every time you enlarge the string.</p><p>The preallocation algorithm used is the following: every time the string<br>is reallocated in order to hold more bytes, the actual allocation size performed<br>is two times the minimum required. So for instance if the string currently<br>is holding 30 bytes, and we concatenate 2 more bytes, instead of allocating 32<br>bytes in total SDS will allocate 64 bytes.</p><p>However there is an hard limit to the allocation it can perform ahead, and is<br>defined by <code>SDS_MAX_PREALLOC</code>. SDS will never allocate more than 1MB of<br>additional space (by default, you can change this default).</p><h2 id="Shrinking-strings"><a href="#Shrinking-strings" class="headerlink" title="Shrinking strings"></a>Shrinking strings</h2><pre class=" language-c"><code class="language-c">sds <span class="token function">sdsRemoveFreeSpace</span><span class="token punctuation">(</span>sds s<span class="token punctuation">)</span><span class="token punctuation">;</span>size_t <span class="token function">sdsAllocSize</span><span class="token punctuation">(</span>sds s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Sometimes there are class of programs that require to use very little memory.<br>After strings concatenations, trimming, ranges, the string may end having<br>a non trivial amount of additional space at the end.</p><p>It is possible to resize a string back to its minimal size in order to hold<br>the current content by using the function <code>sdsRemoveFreeSpace</code>.</p><pre class=" language-c"><code class="language-c">s <span class="token operator">=</span> <span class="token function">sdsRemoveFreeSpace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>There is also a function that can be used in order to get the size of the<br>total allocation for a given string, and is called <code>sdsAllocSize</code>.</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Ladies and gentlemen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"... welcome to the C language."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdsAllocSize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdsRemoveFreeSpace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdsAllocSize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token number">109</span>output<span class="token operator">></span> <span class="token number">59</span></code></pre><p>NOTE: SDS Low level API use cammelCase in order to warn you that you are playing with the fire.</p><h2 id="Manual-modifications-of-SDS-strings"><a href="#Manual-modifications-of-SDS-strings" class="headerlink" title="Manual modifications of SDS strings"></a>Manual modifications of SDS strings</h2><pre><code>void sdsupdatelen(sds s);</code></pre><p>Sometimes you may want to hack with an SDS string manually, without using<br>SDS functions. In the following example we implicitly change the length<br>of the string, however we want the logical length to reflect the null terminated<br>C string.</p><p>The function <code>sdsupdatelen</code> does just that, updating the internal length<br>information for the specified string to the length obtained via <code>strlen</code>.</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"foobar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsupdatelen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token number">6</span>output<span class="token operator">></span> <span class="token number">2</span></code></pre><h2 id="Sharing-SDS-strings"><a href="#Sharing-SDS-strings" class="headerlink" title="Sharing SDS strings"></a>Sharing SDS strings</h2><p>If you are writing a program in which it is advantageous to share the same<br>SDS string across different data structures, it is absolutely advised to<br>encapsulate SDS strings into structures that remember the number of references<br>of the string, with functions to increment and decrement the number of references.</p><p>This approach is a memory management technique called <em>reference counting</em> and<br>in the context of SDS has two advantages:</p><ul><li>It is less likely that you’ll create memory leaks or bugs due to non freeing SDS strings or freeing already freed strings.</li><li>You’ll not need to update every reference to an SDS string when you modify it (since the new SDS string may point to a different memory location).</li></ul><p>While this is definitely a very common programming technique I’ll outline<br>the basic ideas here. You create a structure like that:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> mySharedString <span class="token punctuation">{</span>    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span>    sds string<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>When new strings are created, the structure is allocated and returned with<br><code>refcount</code> set to 1. The you have two functions to change the reference count<br>of the shared string:</p><ul><li><code>incrementStringRefCount</code> will simply increment <code>refcount</code> of 1 in the structure. It will be called every time you add a reference to the string on some new data structure, variable, or whatever.</li><li><code>decrementStringRefCount</code> is used when you remove a reference. This function is however special since when the <code>refcount</code> drops to zero, it automatically frees the SDS string, and the <code>mySharedString</code> structure as well.</li></ul><h2 id="Interactions-with-heap-checkers"><a href="#Interactions-with-heap-checkers" class="headerlink" title="Interactions with heap checkers"></a>Interactions with heap checkers</h2><p>Because SDS returns pointers into the middle of memory chunks allocated with<br><code>malloc</code>, heap checkers may have issues, however:</p><ul><li>The popular Valgrind program will detect SDS strings are <em>possibly lost</em> memory and never as <em>definitely lost</em>, so it is easy to tell if there is a leak or not. I used Valgrind with Redis for years and every real leak was consistently detected as “definitely lost”.</li><li>OSX instrumentation tools don’t detect SDS strings as leaks but are able to correctly handle pointers pointing to the middle of memory chunks.</li></ul><h2 id="Zero-copy-append-from-syscalls"><a href="#Zero-copy-append-from-syscalls" class="headerlink" title="Zero copy append from syscalls"></a>Zero copy append from syscalls</h2><p>At this point you should have all the tools to dig more inside the SDS<br>library by reading the source code, however there is an interesting pattern<br>you can mount using the low level API exported, that is used inside Redis<br>in order to improve performances of the networking code.</p><p>Using <code>sdsIncrLen()</code> and <code>sdsMakeRoomFor()</code> it is possible to mount the<br>following schema, to cat bytes coming from the kernel to the end of an<br>sds string without copying into an intermediate buffer:</p><pre class=" language-c"><code class="language-c">oldlen <span class="token operator">=</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdsMakeRoomFor</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> s<span class="token operator">+</span>oldlen<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> check <span class="token keyword">for</span> nread <span class="token operator">&lt;=</span> <span class="token number">0</span> and handle it <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">sdsIncrLen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> nread<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>sdsIncrLen</code> is documented inside the source code of <code>sds.c</code>.</p><h1 id="Embedding-SDS-into-your-project"><a href="#Embedding-SDS-into-your-project" class="headerlink" title="Embedding SDS into your project"></a>Embedding SDS into your project</h1><p>This is as simple as copying the following files inside your<br>project:</p><ul><li>sds.c</li><li>sds.h</li><li>sdsalloc.h</li></ul><p>The source code is small and every C99 compiler should deal with<br>it without issues.</p><h1 id="Using-a-different-allocator-for-SDS"><a href="#Using-a-different-allocator-for-SDS" class="headerlink" title="Using a different allocator for SDS"></a>Using a different allocator for SDS</h1><p>Internally sds.c uses the allocator defined into <code>sdsalloc.h</code>. This header<br>file just defines macros for malloc, realloc and free, and by default libc<br><code>malloc()</code>, <code>realloc()</code> and <code>free()</code> are used. Just edit this file in order<br>to change the name of the allocation functions.</p><p>The program using SDS can call the SDS allocator in order to manipulate<br>SDS pointers (usually not needed but sometimes the program may want to<br>do advanced things) by using the API exported by SDS in order to call the<br>allocator used. This is especially useful when the program linked to SDS<br>is using a different allocator compared to what SDS is using.</p><p>The API to access the allocator used by SDS is composed of three functions: <code>sds_malloc()</code>, <code>sds_realloc()</code> and <code>sds_free()</code>.</p><h1 id="Credits-and-license"><a href="#Credits-and-license" class="headerlink" title="Credits and license"></a>Credits and license</h1><p>SDS was created by Salvatore Sanfilippo and is released under the BDS two clause license. See the LICENSE file in this source distribution for more information.</p><p>Oran Agra improved SDS version 2 by adding dynamic sized headers in order to<br>save memory for small strings and allow strings greater than 4GB.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Simple-Dynamic-Strings&quot;&gt;&lt;a href=&quot;#Simple-Dynamic-Strings&quot; class=&quot;headerlink&quot; title=&quot;Simple Dynamic Strings&quot;&gt;&lt;/a&gt;Simple Dynamic Strin
      
    
    </summary>
    
    
      <category term="C" scheme="https://delehub.vercel.app/categories/C/"/>
    
      <category term="Strings" scheme="https://delehub.vercel.app/categories/C/Strings/"/>
    
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
      <category term="Simple Dynamic Strings" scheme="https://delehub.vercel.app/tags/Simple-Dynamic-Strings/"/>
    
  </entry>
  
  <entry>
    <title>Plan</title>
    <link href="https://delehub.vercel.app/2020/09/04/plan/"/>
    <id>https://delehub.vercel.app/2020/09/04/plan/</id>
    <published>2020-09-04T14:37:47.175Z</published>
    <updated>2020-09-04T14:48:40.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习内容："><a href="#学习内容：" class="headerlink" title="学习内容："></a>学习内容：</h1><pre><code>(√)传感器及检测技术(√)数字信号处理(√)FPGA原理(√)微波技术(电磁场与电磁波)(√)电子测量技术(√)嵌入式系统及应用(√)RFID原理及应用</code></pre><p><img src="https://img-blog.csdnimg.cn/2020090422343299.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h1><h1 id="电子专业安排"><a href="#电子专业安排" class="headerlink" title="电子专业安排"></a>电子专业安排</h1><ol><li>软件安排<ol><li>以C为核心复习</li><li>嵌入式系统开发，STM32 51微控制器学习 </li><li>QT学习 Linux基本操作</li><li>以Python为核心安排 Python基础，Python数据分析与爬虫技术</li></ol></li><li>硬件安排<ol><li>以STM32单片机为核心安排，嵌入式32位系统学习,完成几个开源项目</li><li>硬件电路设计</li><li>PCB绘图软件学习Kicad</li><li>AD增加运用熟练度</li></ol></li><li>掌握基本电路设计电路<br> 复习模电知识<br> ADI新概念模拟电路 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;学习内容：&quot;&gt;&lt;a href=&quot;#学习内容：&quot; class=&quot;headerlink&quot; title=&quot;学习内容：&quot;&gt;&lt;/a&gt;学习内容：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;(√)传感器及检测技术
(√)数字信号处理
(√)FPGA原理
(√)微波技术(电磁场与电磁波)
(
      
    
    </summary>
    
    
      <category term="嵌入式" scheme="https://delehub.vercel.app/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="嵌入式" scheme="https://delehub.vercel.app/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="电子" scheme="https://delehub.vercel.app/tags/%E7%94%B5%E5%AD%90/"/>
    
      <category term="传感器" scheme="https://delehub.vercel.app/tags/%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    
      <category term="FPGA" scheme="https://delehub.vercel.app/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>单片机简答题</title>
    <link href="https://delehub.vercel.app/2020/08/18/dan-pian-ji-jian-da-ti/"/>
    <id>https://delehub.vercel.app/2020/08/18/dan-pian-ji-jian-da-ti/</id>
    <published>2020-08-18T02:05:37.190Z</published>
    <updated>2020-08-18T02:06:11.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="80C51单片机简答题"><a href="#80C51单片机简答题" class="headerlink" title="80C51单片机简答题"></a>80C51单片机简答题</h1><h3 id="80C51基本型单片机的存储器地址空间如何划分？各空间的地址范围和容量如何？"><a href="#80C51基本型单片机的存储器地址空间如何划分？各空间的地址范围和容量如何？" class="headerlink" title="80C51基本型单片机的存储器地址空间如何划分？各空间的地址范围和容量如何？"></a>80C51基本型单片机的存储器地址空间如何划分？各空间的地址范围和容量如何？</h3><pre class=" language-bash"><code class="language-bash">分为四个空间。 内部程序存储器地址范围0000H-0FFFH 共4KB <span class="token punctuation">;</span>外部程序存储器0FFFH-0FFFFH 共64KB <span class="token punctuation">;</span>内部数据存储器00H-FFH 共256 个字节<span class="token punctuation">(</span>其中包括低128 字节和特殊功能寄存器SFR 128 个字节<span class="token punctuation">)</span>外部数据存储器可扩展至64KB 。 CPU 访问片内外程序存储器ROM 指令用MOVC ,访问片外数据存储器RAM 指令用MOVX , 访问片内RAM 用MOV 。</code></pre><h3 id="80C51单片机复位后的状态如何-常用的复位方式有哪些"><a href="#80C51单片机复位后的状态如何-常用的复位方式有哪些" class="headerlink" title="80C51单片机复位后的状态如何?常用的复位方式有哪些"></a>80C51单片机复位后的状态如何?常用的复位方式有哪些</h3><pre class=" language-bash"><code class="language-bash">上电复位,按钮复位 <span class="token punctuation">(</span> PC<span class="token punctuation">)</span><span class="token operator">=</span>0000H :程序的初始入口地址为 0000H <span class="token punctuation">(</span>PSW<span class="token punctuation">)</span> <span class="token operator">=</span>00H:</code></pre><h3 id="80C51寄存器及其在存储器中的映射情况如何"><a href="#80C51寄存器及其在存储器中的映射情况如何" class="headerlink" title="80C51寄存器及其在存储器中的映射情况如何?"></a>80C51寄存器及其在存储器中的映射情况如何?</h3><pre class=" language-bash"><code class="language-bash">80C51，有四组工作寄存器，每组八个。位于片内存储器的00~1FH中。80C51，有21个特殊功能寄存器。位于片内80~FFH中，只可直接寻址。</code></pre><h3 id="80C51单片机的PSW寄存器各位标志的意义如何？"><a href="#80C51单片机的PSW寄存器各位标志的意义如何？" class="headerlink" title="80C51单片机的PSW寄存器各位标志的意义如何？"></a>80C51单片机的PSW寄存器各位标志的意义如何？</h3><pre class=" language-bash"><code class="language-bash">CY：进位、借位标志。有进位、借位时CY<span class="token operator">=</span>1，否则CY<span class="token operator">=</span>0；AC：辅助进位、借位标志（高半字节与低半字节间的进位或借位）；F0：用户标志位，由用户自己定义；RS1、RS0：当前工作寄存器组选择位；OV：溢出标志位。有溢出时OV<span class="token operator">=</span>1，否则OV<span class="token operator">=</span>0；P：奇偶标志位。存于ACC中的运算结果有奇数个1时P<span class="token operator">=</span>1，否则P<span class="token operator">=</span>0。</code></pre><p>……….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;80C51单片机简答题&quot;&gt;&lt;a href=&quot;#80C51单片机简答题&quot; class=&quot;headerlink&quot; title=&quot;80C51单片机简答题&quot;&gt;&lt;/a&gt;80C51单片机简答题&lt;/h1&gt;&lt;h3 id=&quot;80C51基本型单片机的存储器地址空间如何划分？各空间的地
      
    
    </summary>
    
    
      <category term="单片机" scheme="https://delehub.vercel.app/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
      <category term="51单片机" scheme="https://delehub.vercel.app/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="简答题" scheme="https://delehub.vercel.app/tags/%E7%AE%80%E7%AD%94%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV example 素描</title>
    <link href="https://delehub.vercel.app/2020/08/16/ji-yu-python-opencv-de-ren-lian-shi-bie/"/>
    <id>https://delehub.vercel.app/2020/08/16/ji-yu-python-opencv-de-ren-lian-shi-bie/</id>
    <published>2020-08-16T04:01:24.000Z</published>
    <updated>2020-08-16T05:29:44.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于Python–opencv的人脸识别"><a href="#基于Python–opencv的人脸识别" class="headerlink" title="基于Python–opencv的人脸识别"></a>基于Python–opencv的人脸识别</h1><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li><p>安装python3.7 配置pip 下载环境</p></li><li><p>安装第三方包</p><ol><li>opencv -python的安装，输入：<pre><code>pip install opencv-python</code></pre><ol start="2"><li>pillow的安装，输入： <pre><code>pip install pillow</code></pre></li></ol></li><li>contrib的安装<pre><code>pip install opencv-contrib-python</code></pre></li></ol></li><li><p>建立一个文件夹，保存一些东西</p></li><li><p>需要保存 haarcascade_frontalface_default.xml</p></li><li><p>需要保存 haarcascade_eye.xml  （这两个文件很重要）<br><img src="https://img-blog.csdnimg.cn/20200410082912256.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ol><h2 id="软件代码分析"><a href="#软件代码分析" class="headerlink" title="软件代码分析"></a>软件代码分析</h2><h3 id="FaceDetection-人脸检测"><a href="#FaceDetection-人脸检测" class="headerlink" title="FaceDetection 人脸检测"></a>FaceDetection 人脸检测</h3><pre><code>import numpy as npimport cv2# 人脸识别分类器 //填入的路径为你建立的新的文件夹的路径faceCascade = cv2.CascadeClassifier(r&#39;E:\cv\face\haarcascade_frontalface_default.xml&#39;)# 识别眼睛的分类器eyeCascade = cv2.CascadeClassifier(r&#39;E:\cv\face\haarcascade_eye.xml&#39;)# 开启摄像头cap = cv2.VideoCapture(0)ok = Truewhile ok:    # 读取摄像头中的图像，ok为是否读取成功的判断参数    ok, img = cap.read()    # 转换成灰度图像    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    # 人脸检测    faces = faceCascade.detectMultiScale(        gray,             scaleFactor=1.2,        minNeighbors=5,             minSize=(32, 32)    )    # 在检测人脸的基础上检测眼睛    for (x, y, w, h) in faces:        fac_gray = gray[y: (y+h), x: (x+w)]        result = []        eyes = eyeCascade.detectMultiScale(fac_gray, 1.3, 2)        # 眼睛坐标的换算，将相对位置换成绝对位置        for (ex, ey, ew, eh) in eyes:            result.append((x+ex, y+ey, ew, eh))    # 画矩形    for (x, y, w, h) in faces:        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)    for (ex, ey, ew, eh) in result:        cv2.rectangle(img, (ex, ey), (ex+ew, ey+eh), (0, 255, 0), 2)    cv2.imshow(&#39;video&#39;, img)    k = cv2.waitKey(1)    if k == 27:    # press &#39;ESC&#39; to quit        breakcap.release()cv2.destroyAllWindows()</code></pre><h3 id="FaceDataCollect-人脸数据收集"><a href="#FaceDataCollect-人脸数据收集" class="headerlink" title="FaceDataCollect 人脸数据收集"></a>FaceDataCollect 人脸数据收集</h3><pre><code>import cv2import os# 调用笔记本内置摄像头，所以参数为0，如果有其他的摄像头可以调整参数为1，2cap = cv2.VideoCapture(0)face_detector = cv2.CascadeClassifier(&#39;haarcascade_frontalface_default.xml&#39;)face_id = input(&#39;\n enter user id:&#39;)print(&#39;\n Initializing face capture. Look at the camera and wait ...&#39;)count = 0while True:    # 从摄像头读取图片    sucess, img = cap.read()    # 转为灰度图片    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    # 检测人脸    faces = face_detector.detectMultiScale(gray, 1.3, 5)    for (x, y, w, h) in faces:        cv2.rectangle(img, (x, y), (x+w, y+w), (255, 0, 0))        count += 1        # 保存图像        cv2.imwrite(&quot;Facedata/User.&quot; + str(face_id) + &#39;.&#39; + str(count) + &#39;.jpg&#39;, gray[y: y + h, x: x + w])        cv2.imshow(&#39;image&#39;, img)    # 保持画面的持续。    k = cv2.waitKey(1)    if k == 27:   # 通过esc键退出摄像        break    elif count &gt;= 1000:  # 得到1000个样本后退出摄像        break# 关闭摄像头cap.release()cv2.destroyAllWindows()</code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://img-blog.csdnimg.cn/20200410083235380.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol><li>请先创建一个Facedata文件夹并和你的程序放在一个文件夹下。</li><li>请将程序和文件打包放在一个叫人脸识别的文件夹下。可以把分类器也放入其中。</li><li>程序运行过程中，会提示你输入id，请从0开始输入，即第一个人的脸的数据id为0，第二个人的脸的数据id为1，运行一次可收集一张人脸的数据。</li><li>程序运行时间可能会比较长，可能会有几分钟，如果嫌长，可以将     #得到1000个样本后退出摄像      这个注释前的1000，改为100。</li><li>如果实在等不及，可按esc退出，但可能会导致数据不够模型精度下降。</li></ol><h3 id="face-training-人脸数据训练"><a href="#face-training-人脸数据训练" class="headerlink" title="face_training 人脸数据训练"></a>face_training 人脸数据训练</h3><pre><code>import numpy as npfrom PIL import Imageimport osimport cv2# 人脸数据路径path = &#39;Facedata&#39;recognizer = cv2.face.LBPHFaceRecognizer_create()detector = cv2.CascadeClassifier(&quot;haarcascade_frontalface_default.xml&quot;)def getImagesAndLabels(path):    imagePaths = [os.path.join(path, f) for f in os.listdir(path)]  # join函数的作用？    faceSamples = []    ids = []    for imagePath in imagePaths:        PIL_img = Image.open(imagePath).convert(&#39;L&#39;)   # convert it to grayscale        img_numpy = np.array(PIL_img, &#39;uint8&#39;)        id = int(os.path.split(imagePath)[-1].split(&quot;.&quot;)[1])        faces = detector.detectMultiScale(img_numpy)        for (x, y, w, h) in faces:            faceSamples.append(img_numpy[y:y + h, x: x + w])            ids.append(id)    return faceSamples, idsprint(&#39;Training faces. It will take a few seconds. Wait ...&#39;)faces, ids = getImagesAndLabels(path)recognizer.train(faces, np.array(ids))recognizer.write(r&#39;face_trainer\trainer.yml&#39;)print(&quot;{0} faces trained. Exiting Program&quot;.format(len(np.unique(ids))))</code></pre><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><img src="https://img-blog.csdnimg.cn/20200410083333132.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="face-recognition-人脸检测"><a href="#face-recognition-人脸检测" class="headerlink" title="face_recognition 人脸检测"></a>face_recognition 人脸检测</h3><pre><code>import cv2recognizer = cv2.face.LBPHFaceRecognizer_create()recognizer.read(&#39;face_trainer/trainer.yml&#39;)cascadePath = &quot;haarcascade_frontalface_default.xml&quot;faceCascade = cv2.CascadeClassifier(cascadePath)font = cv2.FONT_HERSHEY_SIMPLEXidnum = 0names = [&#39;wanzixuan&#39;, &#39;Bob&#39;]cam = cv2.VideoCapture(0)minW = 0.1*cam.get(3)minH = 0.1*cam.get(4)while True:    ret, img = cam.read()    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    faces = faceCascade.detectMultiScale(        gray,        scaleFactor=1.2,        minNeighbors=5,        minSize=(int(minW), int(minH))    )    for (x, y, w, h) in faces:        cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)        idnum, confidence = recognizer.predict(gray[y:y+h, x:x+w])        if confidence &lt; 100:            idnum = names[idnum]            confidence = &quot;{0}%&quot;.format(round(100 - confidence))        else:            idnum = &quot;unknown&quot;            confidence = &quot;{0}%&quot;.format(round(100 - confidence))        cv2.putText(img, str(idnum), (x+5, y-5), font, 1, (0, 0, 255), 1)        cv2.putText(img, str(confidence), (x+5, y+h-5), font, 1, (0, 0, 0), 1)    cv2.imshow(&#39;camera&#39;, img)    k = cv2.waitKey(10)    if k == 27:        breakcam.release()cv2.destroyAllWindows()</code></pre><h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20200410083632262.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="注：四个python代码具体分析，以后更新"><a href="#注：四个python代码具体分析，以后更新" class="headerlink" title="注：四个python代码具体分析，以后更新"></a>注：四个python代码具体分析，以后更新</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>基于Python3.7和opencv的人脸识别（含数据收集，模型训练） <a href="https://www.cnblogs.com/xp12345/p/9818435.html" target="_blank" rel="noopener">https://www.cnblogs.com/xp12345/p/9818435.html</a></li><li>opencv 官网<a href="https://opencv.org/" target="_blank" rel="noopener">https://opencv.org/</a> </li><li>基于Opencv快速实现人脸识别（完整版）<a href="https://blog.csdn.net/beyond9305/article/details/93724948" target="_blank" rel="noopener">https://blog.csdn.net/beyond9305/article/details/93724948</a></li><li>OpenCV计算机视觉实战<a href="https://www.bilibili.com/video/BV1b741117vN?p=21" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1b741117vN?p=21</a></li><li>CSDN博客<a href="https://blog.csdn.net/weixin_43599390/article/details/105425237" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390/article/details/105425237</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于Python–opencv的人脸识别&quot;&gt;&lt;a href=&quot;#基于Python–opencv的人脸识别&quot; class=&quot;headerlink&quot; title=&quot;基于Python–opencv的人脸识别&quot;&gt;&lt;/a&gt;基于Python–opencv的人脸识别&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://delehub.vercel.app/categories/Python/"/>
    
      <category term="OpenCV" scheme="https://delehub.vercel.app/categories/Python/OpenCV/"/>
    
      <category term="人脸识别" scheme="https://delehub.vercel.app/categories/Python/OpenCV/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
    
      <category term="Python" scheme="https://delehub.vercel.app/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://delehub.vercel.app/tags/OpenCV/"/>
    
      <category term="人脸识别" scheme="https://delehub.vercel.app/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV example</title>
    <link href="https://delehub.vercel.app/2020/08/07/opencv-example/"/>
    <id>https://delehub.vercel.app/2020/08/07/opencv-example/</id>
    <published>2020-08-07T05:59:55.408Z</published>
    <updated>2020-08-17T08:52:50.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV-Example"><a href="#OpenCV-Example" class="headerlink" title="OpenCV Example"></a>OpenCV Example</h1><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">Vscode + Anconda + Python3.6pip <span class="token function">install</span> opencv-pythonpip <span class="token function">install</span> numpy</code></pre><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>将须处理图片或视频放入该文件夹</li><li>重命名为 tey.jpg(mp4)</li><li>运行生成代码将逐帧生成图片</li><li>后运行合成视频将逐帧图片生成视频</li></ol><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haS1zdHVkaW8tc3RhdGljLW9ubGluZS5jZG4uYmNlYm9zLmNvbS9mNGVkY2YyMzE5YjI0YjczOTQ0MTc1YWMyOGEzOWY0MzBjN2M4M2I2ZTdiYzQ5ODA4ZGQ4NDE4Yjk1ZDJkZTdi?x-oss-process=image/format,png" alt=""></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haS1zdHVkaW8tc3RhdGljLW9ubGluZS5jZG4uYmNlYm9zLmNvbS81MjUyMzJmNTkzYmQ0Nzg2OTc1MWRjZDhjZDdhYmM5ZmViMjFmNmY1MmU4NjRhMjI5ZWQ4ZWUxMGI5NjE3Y2Jj?x-oss-process=image/format,png" alt=""></h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token comment" spellcheck="true"># 查看当前挂载的数据集目录, 该目录下的变更重启环境后会自动还原</span><span class="token comment" spellcheck="true"># View dataset directory. This directory will be recovered automatically after resetting environment. </span>get_ipython<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls /home/aistudio/data'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token comment" spellcheck="true"># 查看工作区文件, 该目录下的变更将会持久保存. 请及时清理不必要的文件, 避免加载过慢.</span><span class="token comment" spellcheck="true"># View personal work directory. All changes under this directory will be kept even after reset. Please clean unnecessary files in time to speed up environment loading.</span>get_ipython<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls /home/aistudio/work'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token comment" spellcheck="true"># 如果需要进行持久化安装, 需要使用持久化路径, 如下方代码示例:</span><span class="token comment" spellcheck="true"># If a persistence installation is required, you need to use the persistence path as the following:</span>get_ipython<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir /home/aistudio/external-libraries'</span><span class="token punctuation">)</span>get_ipython<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'pip install beautifulsoup4 -t /home/aistudio/external-libraries'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token comment" spellcheck="true"># 同时添加如下代码, 这样每次环境(kernel)启动的时候只要运行下方代码即可:</span><span class="token comment" spellcheck="true"># Also add the following code, so that every time the environment (kernel) starts, just run the following code:</span><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'/home/aistudio/external-libraries'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 请点击[此处](https://ai.baidu.com/docs#/AIStudio_Project_Notebook/a38e5576)查看本环境基本用法.  &lt;br></span><span class="token comment" spellcheck="true"># Please click [here ](https://ai.baidu.com/docs#/AIStudio_Project_Notebook/a38e5576) for more detailed instructions. </span><span class="token comment" spellcheck="true"># In[1]:</span><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/8/2 8:24</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : video.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token string">"data/tey.mp4"</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span><span class="token punctuation">(</span>cap<span class="token punctuation">.</span>isOpened<span class="token punctuation">)</span><span class="token punctuation">:</span>    ret<span class="token punctuation">,</span>img <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    imgsize <span class="token operator">=</span> img<span class="token punctuation">.</span>shape    height <span class="token operator">=</span> imgsize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    width <span class="token operator">=</span> imgsize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    inv <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span>width<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            gar <span class="token operator">=</span> gray<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span>            inv<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> gar    blur <span class="token operator">=</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>inv<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>gray<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span>blur<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    a<span class="token punctuation">,</span>dst1<span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>dst<span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            gar1 <span class="token operator">=</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span>            dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> gar1            <span class="token keyword">if</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">:</span>                dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">240</span>            <span class="token keyword">if</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span>    dst1<span class="token operator">=</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>dst1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"%d.jpg"</span><span class="token operator">%</span>i<span class="token punctuation">,</span>dst1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d帧"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>    i<span class="token operator">+=</span><span class="token number">1</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token keyword">import</span> cv2fps <span class="token operator">=</span> <span class="token number">30</span><span class="token comment" spellcheck="true">#填写原视频帧率</span>fourcc <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter_fourcc<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'J'</span><span class="token punctuation">,</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">)</span>videoWriter <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter<span class="token punctuation">(</span><span class="token string">'dst.avi'</span><span class="token punctuation">,</span> fourcc<span class="token punctuation">,</span> fps<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1920</span><span class="token punctuation">,</span><span class="token number">1080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#(640,360)为原视频宽高</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1249</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    img<span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'%d.jpg'</span><span class="token operator">%</span>i<span class="token punctuation">)</span>    videoWriter<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span>videoWriter<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/8/2 8:21</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : demo1.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npimg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"data/tey.jpg"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>imgsize <span class="token operator">=</span> img<span class="token punctuation">.</span>shapeheight <span class="token operator">=</span> imgsize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>width <span class="token operator">=</span> imgsize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>inv <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span>width<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        gar <span class="token operator">=</span> gray<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span>        inv<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> garblur <span class="token operator">=</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>inv<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>gray<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span>blur<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span>dst1<span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>dst<span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        gar1 <span class="token operator">=</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span>        dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> gar1        <span class="token keyword">if</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">:</span>            dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">240</span>        <span class="token keyword">if</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span>dst1<span class="token operator">=</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>dst1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">,</span>gray<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"inv"</span><span class="token punctuation">,</span>inv<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"blur"</span><span class="token punctuation">,</span>blur<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"dst"</span><span class="token punctuation">,</span>dst<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"dst1"</span><span class="token punctuation">,</span>dst1<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"dst.jpg"</span><span class="token punctuation">,</span>dst1<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OpenCV-Example&quot;&gt;&lt;a href=&quot;#OpenCV-Example&quot; class=&quot;headerlink&quot; title=&quot;OpenCV Example&quot;&gt;&lt;/a&gt;OpenCV Example&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://delehub.vercel.app/categories/Python/"/>
    
    
      <category term="Python" scheme="https://delehub.vercel.app/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://delehub.vercel.app/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>野火STM32F1开发板 IIC 0.96OLED 波形显示</title>
    <link href="https://delehub.vercel.app/2020/07/28/ye-huo-stm32f1-kai-fa-ban-iic-0.96oled-bo-xing-xian-shi/"/>
    <id>https://delehub.vercel.app/2020/07/28/ye-huo-stm32f1-kai-fa-ban-iic-0.96oled-bo-xing-xian-shi/</id>
    <published>2020-07-28T06:58:39.050Z</published>
    <updated>2020-08-17T08:51:55.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="野火STM32F1开发板-IIC-0-96OLED-ADC模拟-波形显示"><a href="#野火STM32F1开发板-IIC-0-96OLED-ADC模拟-波形显示" class="headerlink" title="野火STM32F1开发板 IIC 0.96OLED ADC模拟 波形显示"></a>野火STM32F1开发板 IIC 0.96OLED ADC模拟 波形显示</h1><a id="more"></a><h1 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h1><p><img src="https://img-blog.csdnimg.cn/20200728101746954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="软件代码"><a href="#软件代码" class="headerlink" title="软件代码"></a>软件代码</h1><h3 id="bsp-adc-c"><a href="#bsp-adc-c" class="headerlink" title="bsp_adc.c"></a>bsp_adc.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_adc.h"</span></span>uint16_t ConvData<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ADCx_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStruct<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*开时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>ADCx_PORT_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*配置参数*/</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>ADCx_PIN<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_AIN<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*模拟输入模式*/</span>    <span class="token comment" spellcheck="true">/*写入寄存器*/</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>ADCx_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ADCx_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ADC_InitTypeDef ADC_InitStruct<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*打开ADC时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>ADCx_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*配置参数*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_Mode<span class="token operator">=</span>ADC_Mode_Independent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*独立模式*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_ContinuousConvMode<span class="token operator">=</span>ENABLE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*连续转换*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_DataAlign<span class="token operator">=</span>ADC_DataAlign_Right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*数据右对齐*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_ExternalTrigConv<span class="token operator">=</span>ADC_ExternalTrigConv_None<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不使用外部硬件触发*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_NbrOfChannel<span class="token operator">=</span>ADCx_CHx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*ADC是哪个通道*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_ScanConvMode<span class="token operator">=</span>DISABLE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不使用连续扫描*/</span>    <span class="token comment" spellcheck="true">/*将参数写入寄存器*/</span>    <span class="token function">ADC_Init</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ADC_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*设置ADC_CLK*/</span>    <span class="token function">RCC_ADCCLKConfig</span><span class="token punctuation">(</span>RCC_PCLK2_Div6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*规则通道设置，通道，采样顺序，采样时间*/</span>    <span class="token function">ADC_RegularChannelConfig</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">,</span> ADCx_CHx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> ADC_SampleTime_1Cycles5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*ADC使能*/</span>    <span class="token function">ADC_Cmd</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*校验ADC*/</span>    <span class="token function">ADC_StartCalibration</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">ADC_GetCalibrationStatus</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">)</span><span class="token operator">==</span>RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*DMA设置*/</span>    <span class="token function">ADC_DMACmd</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*ADC软件触发，开始转换*/</span>    <span class="token function">ADC_SoftwareStartConvCmd</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ADCx_DMA_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    DMA_InitTypeDef DMA_InitStruct<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*打开DMA时钟*/</span>  <span class="token function">RCC_AHBPeriphClockCmd</span><span class="token punctuation">(</span>RCC_AHBPeriph_DMA1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*配置DMA参数*/</span>    DMA_InitStruct<span class="token punctuation">.</span>DMA_PeripheralBaseAddr<span class="token operator">=</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>ADC_x<span class="token operator">-></span>DR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*ADC的数据寄存器*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_MemoryBaseAddr<span class="token operator">=</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ConvData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*存储器地址*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_DIR<span class="token operator">=</span>DMA_DIR_PeripheralSRC<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*外设为源*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_BufferSize<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*数据的个数为1*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_PeripheralInc<span class="token operator">=</span>DMA_PeripheralInc_Disable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*外设地址不增加*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_MemoryInc<span class="token operator">=</span>DMA_MemoryInc_Disable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*存储器地址不增加*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_PeripheralDataSize<span class="token operator">=</span>DMA_PeripheralDataSize_HalfWord<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*16位数据，所以是半字*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_MemoryDataSize<span class="token operator">=</span>DMA_MemoryDataSize_HalfWord<span class="token punctuation">;</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_Mode<span class="token operator">=</span>DMA_Mode_Circular<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*这里是指数据循环不停地发送*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_Priority<span class="token operator">=</span>DMA_Priority_High<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*DMA优先级设为高*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_M2M<span class="token operator">=</span>DMA_M2M_Disable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不使能存储器到存储器*/</span>    <span class="token comment" spellcheck="true">/*将参数写入寄存器*/</span>  <span class="token function">DMA_Init</span><span class="token punctuation">(</span>ADCx_DMA_CHx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>DMA_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*使能DMA*/</span>  <span class="token function">DMA_Cmd</span><span class="token punctuation">(</span>ADCx_DMA_CHx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ADCx_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ADCx_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADCx_DMA_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADCx_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-adc-h"><a href="#bsp-adc-h" class="headerlink" title="bsp_adc.h"></a>bsp_adc.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _BSP_ADC_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _BSP_ADC_H_</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">/*GPIO*/</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_PORT_CLK          RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_PIN                  GPIO_Pin_7</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_PORT                    GPIOA</span><span class="token comment" spellcheck="true">/*ADC*/</span><span class="token macro property">#<span class="token directive keyword">define</span> ADC_x                            ADC1</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_CLK              RCC_APB2Periph_ADC1</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_CHx                 ADC_Channel_7</span><span class="token comment" spellcheck="true">/*DMA*/</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_DMA_CLK          RCC_AHBPeriph_DMA1</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_DMA_CHx           DMA1_Channel1</span><span class="token keyword">void</span> <span class="token function">ADCx_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//_BSP_ADC_H_</span></code></pre><h3 id="bsp-advanced-timer-c"><a href="#bsp-advanced-timer-c" class="headerlink" title="bsp_advanced_timer.c"></a>bsp_advanced_timer.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_advanced_timer.h"</span></span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AdvancedTim_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStruct<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*开时钟*/</span>    <span class="token function">TIMx_CH1_GPIO_CLK_CMD</span><span class="token punctuation">(</span>TIMx_CH1_GPIO_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIMx_CH1N_GPIO_CLK_CMD</span><span class="token punctuation">(</span>TIMx_CH1N_GPIO_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIMx_BKIN_GPIO_CLK_CMD</span><span class="token punctuation">(</span>TIMx_BKIN_GPIO_CLK <span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*设置参数1*/</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_AF_PP<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>TIMx_CH1_GPIO_PIN<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Speed<span class="token operator">=</span>GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*写参数*/</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>TIMx_CH1_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*设置参数2*/</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>TIMx_CH1N_GPIO_PIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*写参数*/</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>TIMx_CH1N_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*设置参数3*/</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_AF_PP<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>TIMx_BKIN_GPIO_PIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*写参数*/</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>TIMx_BKIN_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AdvancedTim_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct<span class="token punctuation">;</span>    TIM_OCInitTypeDef TIM_OCInitStruct<span class="token punctuation">;</span>    TIM_BDTRInitTypeDef TIM_BDTRInitStruct<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*开时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>ADVANCED_TIM_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*配置时基参数*/</span>    TIM_TimeBaseInitStruct<span class="token punctuation">.</span>TIM_Prescaler<span class="token operator">=</span>ADVANCED_TIM_PSC<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*预分频因子*/</span>    TIM_TimeBaseInitStruct<span class="token punctuation">.</span>TIM_CounterMode<span class="token operator">=</span>TIM_CounterMode_Up<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*向上计数*/</span>    TIM_TimeBaseInitStruct<span class="token punctuation">.</span>TIM_Period<span class="token operator">=</span>ADVANCED_TIM_ARR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*周期*/</span>    TIM_TimeBaseInitStruct<span class="token punctuation">.</span>TIM_ClockDivision<span class="token operator">=</span>TIM_CKD_DIV1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Tdts:这里会与死区时间有关*/</span>    TIM_TimeBaseInitStruct<span class="token punctuation">.</span>TIM_RepetitionCounter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不使用重复计数器*/</span>    <span class="token comment" spellcheck="true">/*写参数*/</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseInitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*配置输出比较的参数*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OCMode<span class="token operator">=</span>TIM_OCMode_PWM1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*PWM模式一*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OutputState<span class="token operator">=</span>TIM_OutputState_Enable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*主通道使能*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OutputNState<span class="token operator">=</span>TIM_OutputNState_Enable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*互补通道使能*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_Pulse<span class="token operator">=</span>ADVANCED_TIM_CCR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*占空比*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OCPolarity<span class="token operator">=</span>TIM_OCPolarity_High<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*主通道高电平为有效*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OCNPolarity<span class="token operator">=</span>TIM_OCNPolarity_High<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*互补通道高电平为有效*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OCIdleState<span class="token operator">=</span>TIM_OCIdleState_Reset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*刹车后的输出状态*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OCNIdleState<span class="token operator">=</span>TIM_OCNIdleState_Reset<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*写参数*/</span>    <span class="token function">TIM_OC1Init</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_OC1PreloadConfig</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> TIM_OCPreload_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*配置死区刹车寄存器*/</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_OSSRState<span class="token operator">=</span>TIM_OSSRState_Enable<span class="token punctuation">;</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_OSSIState<span class="token operator">=</span>TIM_OSSIState_Enable<span class="token punctuation">;</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_LOCKLevel<span class="token operator">=</span>TIM_LOCKLevel_OFF<span class="token punctuation">;</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_DeadTime<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*死区时间97ns*/</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_Break<span class="token operator">=</span>TIM_Break_Enable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*使能刹车功能*/</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_BreakPolarity<span class="token operator">=</span>TIM_BreakPolarity_High<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*当刹车通道为高电平时停止输出*/</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_AutomaticOutput<span class="token operator">=</span>TIM_AutomaticOutput_Enable<span class="token punctuation">;</span>    <span class="token function">TIM_BDTRConfig</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_BDTRInitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_CtrlPWMOutputs</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">AdvancedTim_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">AdvancedTim_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">AdvancedTim_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-advanced-timer-h"><a href="#bsp-advanced-timer-h" class="headerlink" title="bsp_advanced_timer.h"></a>bsp_advanced_timer.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _BSP_ADVANCED_TIMER_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _BSP_ADVANCED_TIMER_H_</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">/*GPIO*/</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1_GPIO_PORT                 GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1_GPIO_PIN                 GPIO_Pin_8</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1_GPIO_CLK             RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1_GPIO_CLK_CMD         RCC_APB2PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1N_GPIO_PORT             GPIOB</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1N_GPIO_PIN                 GPIO_Pin_13</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1N_GPIO_CLK             RCC_APB2Periph_GPIOB</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1N_GPIO_CLK_CMD         RCC_APB2PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_BKIN_GPIO_PORT             GPIOB</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_BKIN_GPIO_PIN                 GPIO_Pin_12</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_BKIN_GPIO_CLK             RCC_APB2Periph_GPIOB</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_BKIN_GPIO_CLK_CMD         RCC_APB2PeriphClockCmd</span><span class="token comment" spellcheck="true">/*Advanced Timer*/</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM                             TIM1</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_CLK                    RCC_APB2Periph_TIM1</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_PSC_SET             36</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_PSC                     (ADVANCED_TIM_PSC_SET-1)</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_ARR_SET             65536</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_ARR                     (ADVANCED_TIM_ARR_SET-1)</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_CCR_SET             12000</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_CCR                    (ADVANCED_TIM_CCR_SET)</span><span class="token keyword">void</span> <span class="token function">AdvancedTim_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">//_BSP_ADVANCED_TIMER_H_</span></code></pre><h3 id="bsp-i2c-gpio-c"><a href="#bsp-i2c-gpio-c" class="headerlink" title="bsp_i2c_gpio.c"></a>bsp_i2c_gpio.c</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  ******************************************************************************  * @file    bsp_i2c_gpio.c  * @version V1.0  * @date    2013-xx-xx  * @brief   用gpio模拟i2c总线, 适用于STM32系列CPU。该模块不包括应用层命令帧，仅包括I2C总线基本操作函数。  ******************************************************************************  * @attention  *  * 实验平台:野火 F103-MINI STM32 开发板   * 论坛    :http://www.firebbs.cn  * 淘宝    :https://fire-stm32.taobao.com  *  ******************************************************************************  */</span> <span class="token comment" spellcheck="true">/*    应用说明：    在访问I2C设备前，请先调用 i2c_CheckDevice() 检测I2C设备是否正常*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_i2c_gpio.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_Delay*    功能说明: I2C总线位延迟，最快400KHz*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//uint8_t i;</span>    <span class="token comment" spellcheck="true">/*　         下面的时间是通过逻辑分析仪测试得到的。    工作条件：CPU主频72MHz ，MDK编译环境，1级优化        循环次数为10时，SCL频率 = 205KHz         循环次数为7时，SCL频率 = 347KHz， SCL高电平时间1.5us，SCL低电平时间2.87us          循环次数为5时，SCL频率 = 421KHz， SCL高电平时间1.25us，SCL低电平时间2.375us     */</span>    <span class="token comment" spellcheck="true">//for (i = 0; i &lt; 10; i++);</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_Start*    功能说明: CPU发起I2C总线启动信号*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 当SCL高电平时，SDA出现一个下跳沿表示I2C总线启动信号 */</span>    <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_Start*    功能说明: CPU发起I2C总线停止信号*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 当SCL高电平时，SDA出现一个上跳沿表示I2C总线停止信号 */</span>    <span class="token function">OLED_I2C_SDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_SendByte*    功能说明: CPU向I2C总线设备发送8bit数据*    形    参：_ucByte ： 等待发送的字节*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>uint8_t _ucByte<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 先发送字节的高位bit7 */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>_ucByte <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_I2C_SDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>             <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放总线</span>        <span class="token punctuation">}</span>        _ucByte <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 左移一个bit */</span>        <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_ReadByte*    功能说明: CPU从I2C总线设备读取8bit数据*    形    参：无*    返 回 值: 读到的数据**********************************************************************************************************/</span>uint8_t <span class="token function">i2c_ReadByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t i<span class="token punctuation">;</span>    uint8_t value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 读到第1个bit为数据的bit7 */</span>    value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        value <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">OLED_I2C_SDA_READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            value<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_WaitAck*    功能说明: CPU产生一个时钟，并读取器件的ACK应答信号*    形    参：无*    返 回 值: 返回0表示正确应答，1表示无器件响应**********************************************************************************************************/</span> uint8_t <span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t re<span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU释放SDA总线 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU驱动SCL = 1, 此时器件会返回ACK应答 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">OLED_I2C_SDA_READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* CPU读取SDA口线状态 */</span>    <span class="token punctuation">{</span>        re <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        re <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> re<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_Ack*    功能说明: CPU产生一个ACK信号*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_I2C_SDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU驱动SDA = 0 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU产生1个时钟 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU释放SDA总线 */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_NAck*    功能说明: CPU产生1个NACK信号*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_NAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU驱动SDA = 1 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU产生1个时钟 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_CfgGpio*    功能说明: 配置I2C总线的GPIO，采用模拟IO的方式实现*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_CfgGpio</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>OLED_RCC_I2C_PORT<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 打开GPIO时钟 */</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> OLED_I2C_SCL_PIN <span class="token operator">|</span> OLED_I2C_SDA_PIN<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_OD<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 开漏输出 */</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>OLED_GPIO_PORT_I2C<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 给一个停止信号, 复位I2C总线上的所有设备到待机模式 */</span>    <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-i2c-gpio-h"><a href="#bsp-i2c-gpio-h" class="headerlink" title="bsp_i2c_gpio.h"></a>bsp_i2c_gpio.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _BSP_I2C_GPIO_H</span><span class="token macro property">#<span class="token directive keyword">define</span> _BSP_I2C_GPIO_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_WR    0        </span><span class="token comment" spellcheck="true">/* 写控制bit */</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_RD    1        </span><span class="token comment" spellcheck="true">/* 读控制bit */</span><span class="token comment" spellcheck="true">/* 定义I2C总线连接的GPIO端口, 用户只需要修改下面4行代码即可任意改变SCL和SDA的引脚 */</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_GPIO_PORT_I2C    GPIOB            </span><span class="token comment" spellcheck="true">/* GPIO端口 */</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_RCC_I2C_PORT     RCC_APB2Periph_GPIOB        </span><span class="token comment" spellcheck="true">/* GPIO端口时钟 */</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SCL_PIN        GPIO_Pin_6            </span><span class="token comment" spellcheck="true">/* 连接到SCL时钟线的GPIO */</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_PIN        GPIO_Pin_7            </span><span class="token comment" spellcheck="true">/* 连接到SDA数据线的GPIO */</span><span class="token comment" spellcheck="true">/* 定义读写SCL和SDA的宏，已增加代码的可移植性和可阅读性 */</span><span class="token macro property">#<span class="token directive keyword">if</span> 0    </span><span class="token comment" spellcheck="true">/* 条件编译： 1 选择GPIO的库函数实现IO读写 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SCL_1()  GPIO_SetBits(OLED_GPIO_PORT_I2C, OLED_I2C_SCL_PIN)        </span><span class="token comment" spellcheck="true">/* SCL = 1 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SCL_0()  GPIO_ResetBits(OLED_GPIO_PORT_I2C, OLED_I2C_SCL_PIN)        </span><span class="token comment" spellcheck="true">/* SCL = 0 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_1()  GPIO_SetBits(OLED_GPIO_PORT_I2C, OLED_I2C_SDA_PIN)        </span><span class="token comment" spellcheck="true">/* SDA = 1 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_0()  GPIO_ResetBits(OLED_GPIO_PORT_I2C, OLED_I2C_SDA_PIN)        </span><span class="token comment" spellcheck="true">/* SDA = 0 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_READ()  GPIO_ReadInputDataBit(OLED_GPIO_PORT_I2C, OLED_I2C_SDA_PIN)    </span><span class="token comment" spellcheck="true">/* 读SDA口线状态 */</span><span class="token macro property">#<span class="token directive keyword">else</span>    </span><span class="token comment" spellcheck="true">/* 这个分支选择直接寄存器操作实现IO读写 */</span>    <span class="token comment" spellcheck="true">/*　注意：如下写法，在IAR最高级别优化时，会被编译器错误优化 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SCL_1()  OLED_GPIO_PORT_I2C->BSRR = OLED_I2C_SCL_PIN                </span><span class="token comment" spellcheck="true">/* SCL = 1 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SCL_0()  OLED_GPIO_PORT_I2C->BRR = OLED_I2C_SCL_PIN                </span><span class="token comment" spellcheck="true">/* SCL = 0 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_1()  OLED_GPIO_PORT_I2C->BSRR = OLED_I2C_SDA_PIN                </span><span class="token comment" spellcheck="true">/* SDA = 1 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_0()  OLED_GPIO_PORT_I2C->BRR = OLED_I2C_SDA_PIN                </span><span class="token comment" spellcheck="true">/* SDA = 0 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_READ()  ((OLED_GPIO_PORT_I2C->IDR &amp; OLED_I2C_SDA_PIN) != 0)    </span><span class="token comment" spellcheck="true">/* 读SDA口线状态 */</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">i2c_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>uint8_t _ucByte<span class="token punctuation">)</span><span class="token punctuation">;</span>uint8_t <span class="token function">i2c_ReadByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uint8_t <span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_NAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_CfgGpio</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="OLED-I2C-c"><a href="#OLED-I2C-c" class="headerlink" title="OLED_I2C.c"></a>OLED_I2C.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"OLED_I2C.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_i2c_gpio.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_systick.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"codetab.h"</span></span>uint8_t DataBuffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>uint8_t Bef<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存前一个数据的几个参数1.要写在第几页2.0x01要移动几位3.写什么数据</span>uint8_t Cur<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前前一个数据1.要写在第几页2.0x01要移动几位3.写什么数据</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_CheckDevice*    功能说明: 检测I2C总线设备，CPU向发送设备地址，然后读取设备应答来判断该设备是否存在*    形    参：_Address：设备的I2C总线地址*    返 回 值: 返回值 0 表示正确， 返回1表示未探测到**********************************************************************************************************/</span>uint8_t <span class="token function">OLED_CheckDevice</span><span class="token punctuation">(</span>uint8_t _Address<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t ucAck<span class="token punctuation">;</span>    <span class="token function">i2c_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 发送启动信号 */</span>    <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>_Address<span class="token operator">|</span>OLED_I2C_WR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 发送设备地址 */</span>    ucAck <span class="token operator">=</span> <span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 检测设备的ACK应答 */</span>    <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 发送停止信号 */</span>    <span class="token keyword">return</span> ucAck<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  I2C_WriteByte，向OLED寄存器地址写一个byte的数据  * @param  addr：寄存器地址    *                    data：要写入的数据  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>uint8_t addr<span class="token punctuation">,</span>uint8_t data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">i2c_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启I2C总线</span>    <span class="token comment" spellcheck="true">/* 发送设备地址+读写控制bit（0 = w， 1 = r) bit7 先传 */</span>    <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>OLED_ADDRESS<span class="token operator">|</span>OLED_I2C_WR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*等待ACK */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">goto</span> cmd_fail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* OLED器件无应答 */</span>    <span class="token punctuation">}</span>    <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送寄存器地址</span>    <span class="token comment" spellcheck="true">/*等待ACK */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">goto</span> cmd_fail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* OLED器件无应答 */</span>    <span class="token punctuation">}</span>    <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送数据</span>    <span class="token comment" spellcheck="true">/*等待ACK */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">goto</span> cmd_fail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* OLED器件无应答 */</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 发送I2C总线停止信号 */</span>    <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmd_fail<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/* 命令执行失败后，切记发送停止信号，避免影响I2C总线上其他设备 */</span>    <span class="token comment" spellcheck="true">/* 发送I2C总线停止信号 */</span>    <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  WriteCmd，向OLED写入命令  * @param  I2C_Command：命令代码  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> I2C_Command<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写命令</span><span class="token punctuation">{</span>    <span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> I2C_Command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  WriteDat，向OLED写入数据  * @param  I2C_Data：数据  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> I2C_Data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写数据</span><span class="token punctuation">{</span>    <span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> I2C_Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_Init，初始化OLED  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">i2c_CfgGpio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/*I2C总线的GPIO初始化*/</span>    <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1s,这里的延时很重要,上电后延时，没有错误的冗余设计</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xAE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//display off</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Set Memory Addressing Mode    </span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Set Page Start Address for Page Addressing Mode,0-7</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Set COM Output Scan Direction</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//---set low column address</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//---set high column address</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set start line address</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set contrast control register</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//亮度调节 0x00~0xff</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set segment re-map 0 to 127</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set normal display</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set multiplex ratio(1 to 64)</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x3F</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0xa4,Output follows RAM content;0xa5,Output ignores RAM content</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-set display offset</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-not offset</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set display clock divide ratio/oscillator frequency</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set divide ratio</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set pre-charge period</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xda</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set com pins hardware configuration</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xdb</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set vcomh</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0x20,0.77xVcc</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x8d</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set DC-DC enable</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xaf</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--turn on oled panel</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_SetPos，设置光标  * @param  x,第几页    *                    y,第几列  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置起始点坐标</span><span class="token punctuation">{</span>     <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LOW</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HIGHT</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_Fill，填充整个屏幕  * @param  fill_Data:要填充的数据    * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_Fill</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//全屏填充</span><span class="token punctuation">{</span>    uint8_t i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DataBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xff</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">Write_DataBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_CLS，清屏  * @param  无    * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_CLS</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//清屏</span><span class="token punctuation">{</span>    uint8_t i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DataBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">Write_DataBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_ON，将OLED从休眠中唤醒  * @param  无    * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0X8D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置电荷泵</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0X14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开启电荷泵</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0XAF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//OLED唤醒</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_OFF，让OLED休眠 -- 休眠模式下,OLED功耗不到10uA  * @param  无    * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0X8D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置电荷泵</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0X10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//关闭电荷泵</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0XAE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//OLED休眠</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_ShowStr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> TextSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Parameters     : x,y -- 起始点坐标(x:0~127, y:0~7); ch[] -- 要显示的字符串; TextSize -- 字符大小(1:6*8 ; 2:8*16)</span>    <span class="token comment" spellcheck="true">// Description    : 显示codetab.h中的ASCII字符,有6*8和8*16可选择</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>TextSize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                c <span class="token operator">=</span> ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">126</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    y<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//OLED_SetPos(x,y);</span>                <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token function">WriteDat</span><span class="token punctuation">(</span>F6x8<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                c <span class="token operator">=</span> ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">120</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    y<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//OLED_SetPos(x,y);</span>                <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token function">WriteDat</span><span class="token punctuation">(</span>F8X16<span class="token punctuation">[</span>c<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//OLED_SetPos(x,y+1);</span>                <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token function">WriteDat</span><span class="token punctuation">(</span>F8X16<span class="token punctuation">[</span>c<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_ShowCN</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> N<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Parameters     : x,y -- 起始点坐标(x:0~127, y:0~7); N:汉字在codetab.h中的索引</span>    <span class="token comment" spellcheck="true">// Description    : 显示codetab.h中的汉字,16*16点阵</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> wm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  adder<span class="token operator">=</span><span class="token number">32</span><span class="token operator">*</span>N<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//OLED_SetPos(x , y);</span>    <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>wm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>wm <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>wm<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span>F16x16<span class="token punctuation">[</span>adder<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adder <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//OLED_SetPos(x,y + 1);</span>    <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>wm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>wm <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>wm<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span>F16x16<span class="token punctuation">[</span>adder<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adder <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_DrawBMP</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> BMP<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Parameters     : x0,y0 -- 起始点坐标(x0:0~127, y0:0~7); x1,y1 -- 起点对角线(结束点)的坐标(x1:1~128,y1:1~8)</span>    <span class="token comment" spellcheck="true">// Description    : 显示BMP位图</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y1<span class="token operator">%</span><span class="token number">8</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> y1<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>        y <span class="token operator">=</span> y1<span class="token operator">/</span><span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span>y0<span class="token punctuation">;</span>y<span class="token operator">&lt;</span>y1<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//OLED_SetPos(x0,y);</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span>x0<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>x1<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span>BMP<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Before_State_Update</span><span class="token punctuation">(</span>uint8_t y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据y的值，求出前一个数据的有关参数</span><span class="token punctuation">{</span>    Bef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>    Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span>    Bef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Current_State_Update</span><span class="token punctuation">(</span>uint8_t y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据Y值，求出当前数据的有关参数</span><span class="token punctuation">{</span>    Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据写在第几页</span>    Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x01要移动的位数</span>    Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要写什么数据</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*0&lt;=x&lt;=127,0&lt;=y&lt;=63屏幕看作一个坐标轴，左下角是原点*/</span><span class="token keyword">void</span> <span class="token function">OLED_DrawPoint</span><span class="token punctuation">(</span>uint8_t x<span class="token punctuation">,</span>uint8_t y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*这里x是横坐标，y是纵坐标，在（x,y）处画一个点*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">127</span><span class="token operator">||</span>y<span class="token operator">></span><span class="token number">63</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    uint8_t page<span class="token punctuation">,</span>move<span class="token punctuation">,</span>data<span class="token punctuation">;</span>    page<span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据写在第几页</span>    move<span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x01要移动的位数</span>    data<span class="token operator">=</span><span class="token number">0x01</span><span class="token operator">&lt;&lt;</span>move<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要写什么数据</span>    <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteDat</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_DrawWave</span><span class="token punctuation">(</span>uint8_t x<span class="token punctuation">,</span>uint8_t y<span class="token punctuation">)</span><span class="token punctuation">{</span>    int8_t page_sub<span class="token punctuation">;</span>    uint8_t page_buff<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">Current_State_Update</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据Y值，求出当前数据的有关参数</span>    page_sub<span class="token operator">=</span>Bef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前值与前一个值的页数相比较</span>    <span class="token comment" spellcheck="true">//确定当前列，每一页应该写什么数据</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>page_sub<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        page_buff<span class="token operator">=</span>Bef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span>Bef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        page_buff<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>page_sub<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            page_buff<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token operator">&lt;&lt;</span>Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>page_sub<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>Bef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span>Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span>Bef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>page_sub<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        page_buff<span class="token operator">=</span>Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        page_buff<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">-</span>page_sub<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            page_buff<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Before_State_Update</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把下一列，每一页的数据清除掉</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: OLED检测测试*    功能说明: 检测I2C总线设备，实际是对OLED_CheckDevice()的封装*    形    参：*    返 回 值: 返回值 0 表示没有检测到OLED，返回1表示检测到OLED**********************************************************************************************************/</span> uint8_t <span class="token function">OLED_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">OLED_CheckDevice</span><span class="token punctuation">(</span>OLED_ADDRESS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*写 缓存数据*/</span><span class="token keyword">void</span> <span class="token function">Write_DataBuffer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这个是将DataBuffer数组里面的值，全部写进屏里去</span><span class="token punctuation">{</span>        uint8_t i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置起始点坐标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span>DataBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写数据</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="OLED-I2C-h"><a href="#OLED-I2C-h" class="headerlink" title="OLED_I2C.h"></a>OLED_I2C.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __OLED_I2C_H</span><span class="token macro property">#<span class="token directive keyword">define</span>    __OLED_I2C_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUFF_SIZE 10</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_ADDRESS    0x78 </span><span class="token comment" spellcheck="true">//通过调整0R电阻,屏可以0x78和0x7A两个地址 -- 默认0x78</span>uint8_t <span class="token function">OLED_CheckDevice</span><span class="token punctuation">(</span>uint8_t _Address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检测I2C总线设备OLED</span><span class="token keyword">void</span> <span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>uint8_t addr<span class="token punctuation">,</span>uint8_t data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> I2C_Command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> I2C_Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_Fill</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_CLS</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowStr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> TextSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowCN</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_DrawBMP</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> BMP<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uint8_t <span class="token function">OLED_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OLED检测测试</span><span class="token keyword">void</span> <span class="token function">Write_DataBuffer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_DrawWave</span><span class="token punctuation">(</span>uint8_t x<span class="token punctuation">,</span>uint8_t y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_DrawPoint</span><span class="token punctuation">(</span>uint8_t x<span class="token punctuation">,</span>uint8_t y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Before_State_Update</span><span class="token punctuation">(</span>uint8_t y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="bsp-systick-c"><a href="#bsp-systick-c" class="headerlink" title="bsp_systick.c"></a>bsp_systick.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_systick.h"</span></span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span><span class="token keyword">static</span> __INLINE uint32_t <span class="token function">SysTick_Config</span><span class="token punctuation">(</span>uint32_t ticks<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ticks <span class="token operator">></span> SysTick_LOAD_RELOAD_Msk<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Reload value impossible */</span>  SysTick<span class="token operator">-></span>LOAD  <span class="token operator">=</span> <span class="token punctuation">(</span>ticks <span class="token operator">&amp;</span> SysTick_LOAD_RELOAD_Msk<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* set reload register */</span>  <span class="token function">NVIC_SetPriority</span> <span class="token punctuation">(</span>SysTick_IRQn<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>__NVIC_PRIO_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* set Priority for Cortex-M0 System Interrupts */</span>  SysTick<span class="token operator">-></span>VAL   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">/* Load the SysTick Counter Value */</span>  SysTick<span class="token operator">-></span>CTRL  <span class="token operator">=</span> SysTick_CTRL_CLKSOURCE_Msk <span class="token operator">|</span>                    SysTick_CTRL_TICKINT_Msk   <span class="token operator">|</span>                    SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* Enable SysTick IRQ and SysTick Timer */</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  <span class="token comment" spellcheck="true">/* Function successful */</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">Delay_ms</span><span class="token punctuation">(</span>uint32_t ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t i<span class="token punctuation">;</span>    <span class="token function">SysTick_Config</span><span class="token punctuation">(</span><span class="token number">72000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">/*配置为1ms中断一次*/</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ms<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>SysTick<span class="token operator">-></span>CTRL <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*检测标志位（最高位）*/</span>    <span class="token punctuation">}</span>    SysTick<span class="token operator">-></span>CTRL<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token operator">~</span>SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*关闭SysTick*/</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Delay_us</span><span class="token punctuation">(</span>uint32_t us<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t i<span class="token punctuation">;</span>    <span class="token function">SysTick_Config</span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>us<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>SysTick<span class="token operator">-></span>CTRL <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    SysTick<span class="token operator">-></span>CTRL<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token operator">~</span>SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-systick-h"><a href="#bsp-systick-h" class="headerlink" title="bsp_systick.h"></a>bsp_systick.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _BSP_SYSTICK_H</span><span class="token macro property">#<span class="token directive keyword">define</span> _BSP_SYSTICK_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"core_cm3.h"</span></span><span class="token keyword">void</span> <span class="token function">Delay_ms</span><span class="token punctuation">(</span>uint32_t ms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Delay_us</span><span class="token punctuation">(</span>uint32_t us<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//_BSP_SYSTICK_H</span></code></pre><h3 id="bsp-usart-c"><a href="#bsp-usart-c" class="headerlink" title="bsp_usart.c"></a>bsp_usart.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_usart.h"</span></span><span class="token keyword">void</span> <span class="token function">USARTx_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStruct<span class="token punctuation">;</span>    <span class="token function">USART_Rx_GPIO_CLK_CMD</span><span class="token punctuation">(</span>USART_Rx_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_Tx_GPIO_CLK_CMD</span><span class="token punctuation">(</span>USART_Tx_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>USART_Rx_GPIO_PIN<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>USART_Rx_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>USART_Tx_GPIO_PIN<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_AF_PP<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Speed<span class="token operator">=</span>GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>USART_Tx_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">USARTx_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    USART_InitTypeDef USART_InitStruct<span class="token punctuation">;</span>    <span class="token function">USARTx_CLK_CMD</span><span class="token punctuation">(</span>USARTx_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化串口相关数据</span>    USART_InitStruct<span class="token punctuation">.</span>USART_BaudRate<span class="token operator">=</span>USARTx_BAUD_RATE<span class="token punctuation">;</span>    USART_InitStruct<span class="token punctuation">.</span>USART_WordLength<span class="token operator">=</span>USART_WordLength_8b<span class="token punctuation">;</span>    USART_InitStruct<span class="token punctuation">.</span>USART_StopBits<span class="token operator">=</span>USART_StopBits_1<span class="token punctuation">;</span>    USART_InitStruct<span class="token punctuation">.</span>USART_Parity<span class="token operator">=</span>USART_Parity_No<span class="token punctuation">;</span>    USART_InitStruct<span class="token punctuation">.</span>USART_Mode<span class="token operator">=</span>USART_Mode_Rx<span class="token operator">|</span>USART_Mode_Tx<span class="token punctuation">;</span>    USART_InitStruct<span class="token punctuation">.</span>USART_HardwareFlowControl<span class="token operator">=</span>USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使能串口</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使能串口中断</span>    <span class="token comment" spellcheck="true">//USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE);</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">USARTx_NVIC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      NVIC_InitTypeDef NVIC_InitStruct<span class="token punctuation">;</span>      <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>      NVIC_InitStruct<span class="token punctuation">.</span>NVIC_IRQChannel<span class="token operator">=</span>USARTx_IRQCHANNEL<span class="token punctuation">;</span>      NVIC_InitStruct<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      NVIC_InitStruct<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      NVIC_InitStruct<span class="token punctuation">.</span>NVIC_IRQChannelCmd<span class="token operator">=</span>ENABLE<span class="token punctuation">;</span>      <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">USARTx_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//USARTx_NVIC_Config();</span>    <span class="token function">USARTx_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USARTx_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span>FILE<span class="token operator">*</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">USART_SendData</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> USART_FLAG_TXE<span class="token punctuation">)</span><span class="token operator">==</span>RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> USART_FLAG_RXNE<span class="token punctuation">)</span><span class="token operator">==</span>RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-usart-h"><a href="#bsp-usart-h" class="headerlink" title="bsp_usart.h"></a>bsp_usart.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _BSP_USART_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _BSP_USART_H_</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx USART1</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx_BAUD_RATE 115200</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx_CLK  RCC_APB2Periph_USART1</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx_CLK_CMD  RCC_APB2PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx_IRQCHANNEL USART1_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx_IRQHANDLER USART1_IRQHandler</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Rx_GPIO_PORT  GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Rx_GPIO_PIN   GPIO_Pin_10</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Rx_GPIO_CLK   RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Rx_GPIO_CLK_CMD  RCC_APB2PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Tx_GPIO_PORT GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Tx_GPIO_PIN  GPIO_Pin_9</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Tx_GPIO_CLK  RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Tx_GPIO_CLK_CMD  RCC_APB2PeriphClockCmd</span><span class="token keyword">void</span> <span class="token function">USARTx_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USARTx_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USARTx_NVIC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USARTx_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//_BSP_USART_H_</span></code></pre><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://img-blog.csdnimg.cn/20200728102357299.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200728102357286.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200728102357282.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;野火STM32F1开发板-IIC-0-96OLED-ADC模拟-波形显示&quot;&gt;&lt;a href=&quot;#野火STM32F1开发板-IIC-0-96OLED-ADC模拟-波形显示&quot; class=&quot;headerlink&quot; title=&quot;野火STM32F1开发板 IIC 0.96OLED ADC模拟 波形显示&quot;&gt;&lt;/a&gt;野火STM32F1开发板 IIC 0.96OLED ADC模拟 波形显示&lt;/h1&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://delehub.vercel.app/categories/C/"/>
    
      <category term="软件开发" scheme="https://delehub.vercel.app/categories/C/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="IIC" scheme="https://delehub.vercel.app/categories/C/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/IIC/"/>
    
      <category term="嵌入式" scheme="https://delehub.vercel.app/categories/C/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/IIC/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="STM32 ARM" scheme="https://delehub.vercel.app/categories/C/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/IIC/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32-ARM/"/>
    
      <category term="ADC" scheme="https://delehub.vercel.app/categories/C/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/IIC/%E5%B5%8C%E5%85%A5%E5%BC%8F/STM32-ARM/ADC/"/>
    
    
      <category term="嵌入式" scheme="https://delehub.vercel.app/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="C" scheme="https://delehub.vercel.app/tags/C/"/>
    
      <category term="OLED" scheme="https://delehub.vercel.app/tags/OLED/"/>
    
      <category term="软件开发" scheme="https://delehub.vercel.app/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="IIC" scheme="https://delehub.vercel.app/tags/IIC/"/>
    
      <category term="STM32 ARM" scheme="https://delehub.vercel.app/tags/STM32-ARM/"/>
    
      <category term="ADC" scheme="https://delehub.vercel.app/tags/ADC/"/>
    
      <category term="野火、" scheme="https://delehub.vercel.app/tags/%E9%87%8E%E7%81%AB%E3%80%81/"/>
    
  </entry>
  
</feed>
