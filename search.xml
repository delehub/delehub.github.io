<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>无接触智能安防物联网控制系统</title>
      <link href="/2021/06/19/wu-jie-hong-zhi-neng-an-fang-wu-lian-wang-kong-zhi-xi-tong/"/>
      <url>/2021/06/19/wu-jie-hong-zhi-neng-an-fang-wu-lian-wang-kong-zhi-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="无接触智能安防物联网控制系统设计"><a href="#无接触智能安防物联网控制系统设计" class="headerlink" title="无接触智能安防物联网控制系统设计"></a>无接触智能安防物联网控制系统设计</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><h4 id="本设计以STM32为核心，组成以识别模块、联网模块、控制模块、红外测温模块的无接触安防系统。结合人脸识别K210模块、语音识别模块以及MQ系列气体检测模块等等，实现用户非配合状态下的快速身份识别技术-快速确认人员身份。检测多个相关性传感器来采集系统内的温度数值以及各项气体达标数值，通过机智云APP平台实时反馈数据。本设计增设了控制模块，RGB灯来表达出开灯或者关灯，运用RGB灯进行模拟开门与关门，这样可以简捷的演示实现功能。实现在疫情下远距离社交，蜗居在家保证家庭生活环境安全，实现了节省成本，多位一体的无接触安防系统。"><a href="#本设计以STM32为核心，组成以识别模块、联网模块、控制模块、红外测温模块的无接触安防系统。结合人脸识别K210模块、语音识别模块以及MQ系列气体检测模块等等，实现用户非配合状态下的快速身份识别技术-快速确认人员身份。检测多个相关性传感器来采集系统内的温度数值以及各项气体达标数值，通过机智云APP平台实时反馈数据。本设计增设了控制模块，RGB灯来表达出开灯或者关灯，运用RGB灯进行模拟开门与关门，这样可以简捷的演示实现功能。实现在疫情下远距离社交，蜗居在家保证家庭生活环境安全，实现了节省成本，多位一体的无接触安防系统。" class="headerlink" title="本设计以STM32为核心，组成以识别模块、联网模块、控制模块、红外测温模块的无接触安防系统。结合人脸识别K210模块、语音识别模块以及MQ系列气体检测模块等等，实现用户非配合状态下的快速身份识别技术,快速确认人员身份。检测多个相关性传感器来采集系统内的温度数值以及各项气体达标数值，通过机智云APP平台实时反馈数据。本设计增设了控制模块，RGB灯来表达出开灯或者关灯，运用RGB灯进行模拟开门与关门，这样可以简捷的演示实现功能。实现在疫情下远距离社交，蜗居在家保证家庭生活环境安全，实现了节省成本，多位一体的无接触安防系统。"></a>本设计以STM32为核心，组成以识别模块、联网模块、控制模块、红外测温模块的无接触安防系统。结合人脸识别K210模块、语音识别模块以及MQ系列气体检测模块等等，实现用户非配合状态下的快速身份识别技术,快速确认人员身份。检测多个相关性传感器来采集系统内的温度数值以及各项气体达标数值，通过机智云APP平台实时反馈数据。本设计增设了控制模块，RGB灯来表达出开灯或者关灯，运用RGB灯进行模拟开门与关门，这样可以简捷的演示实现功能。实现在疫情下远距离社交，蜗居在家保证家庭生活环境安全，实现了节省成本，多位一体的无接触安防系统。</h4><h2 id="系统框图"><a href="#系统框图" class="headerlink" title="系统框图"></a>系统框图</h2><p><img src="https://img-blog.csdnimg.cn/20201202102522505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="系统框图"></p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol><li><p>STM32基本外设库移植</p></li><li><p>传感器部分代码驱动移植</p></li><li><p>显示模块 语音播报模块代码移植</p></li><li><p>ESP8266 WIFI模块 机智云协议移植</p></li><li><p>手势识别 语音识别 人脸识别与口罩检测部分功能实现</p></li><li><p>机智云APP部分修改优化</p></li><li><p>综合实验</p><h3 id="STM32基本外设库移植"><a href="#STM32基本外设库移植" class="headerlink" title="STM32基本外设库移植"></a>STM32基本外设库移植</h3></li><li><p>串口移植(关键部分之一)</p></li><li><p>串口分布情况 </p><ol><li><p>USART1 PA9 PA10 串口打印调试功能</p><pre class=" language-C"><code class="language-C"> #if EN_USART1_RX   //如果使能了接收 //串口1中断服务程序//注意,读取USARTx->SR能避免莫名其妙的错误        u8 USART_RX_BUF[USART_REC_LEN];     //接收缓冲,最大USART_REC_LEN个字节.//接收状态 //bit15，    接收完成标志//bit14，    接收到0x0d //bit13~0，    接收到的有效字节数目 u16 USART_RX_STA=0;       //接收状态标记     //初始化IO 串口1 //bound:波特率 void uart_init(u32 bound){    //GPIO端口设置 GPIO_InitTypeDef GPIO_InitStructure;     USART_InitTypeDef USART_InitStructure;     NVIC_InitTypeDef NVIC_InitStructure;     RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); //使能GPIOA时钟     RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//使能USART1时钟     //串口1对应引脚复用映射     GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); //GPIOA9复用为USART1     GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); //GPIOA10复用为USART1     //USART1端口配置     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;    //速度50MHz     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉     GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA9，PA10    //USART1 初始化设置     USART_InitStructure.USART_BaudRate = bound;//波特率设置     USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式     USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位     USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位     USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;    //收发模式     USART_Init(USART1, &USART_InitStructure); //初始化串口1     USART_Cmd(USART1, ENABLE);  //使能串口1      //USART_ClearFlag(USART1, USART_FLAG_TC); #if EN_USART1_RX         USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启相关中断     //Usart1 NVIC 配置     NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=1;//抢占优先级3     NVIC_InitStructure.NVIC_IRQChannelSubPriority =1;        //子优先级3     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //IRQ通道使能     NVIC_Init(&NVIC_InitStructure);    //根据指定的参数初始化VIC寄存器、 #endif } void USART1_IRQHandler(void)                    //串口1中断服务程序 {     u8 Res; #if SYSTEM_SUPPORT_OS         //如果SYSTEM_SUPPORT_OS为真，则需要支持OS.     OSIntEnter();     #endif     if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)     {         Res =USART_ReceiveData(USART1);//(USART1->DR);    //读取接收到的数据         if((USART_RX_STA&0x8000)==0)//接收未完成         {             if(USART_RX_STA&0x4000)//接收到了0x0d         {                 if(Res!=0x0a)USART_RX_STA=0;//接收错误,重新开始             else USART_RX_STA|=0x8000;    //接收完成了              }             else //还没收到0X0D             {                 if(Res==0x0d)USART_RX_STA|=0x4000;                 else                 {                     USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;                     USART_RX_STA++;                     if(USART_RX_STA>(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收                       }                      }         }               }  #if SYSTEM_SUPPORT_OS     //如果SYSTEM_SUPPORT_OS为真，则需要支持OS.     OSIntExit();                                                #endif }  #endif    //初始化IO 串口1  //bound:波特率 void uart_init(u32 bound) {    //GPIO端口设置     GPIO_InitTypeDef GPIO_InitStructure;     USART_InitTypeDef USART_InitStructure;     NVIC_InitTypeDef NVIC_InitStructure;     RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); //使能GPIOA时钟     RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//使能USART1时钟     //串口1对应引脚复用映射     GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); //GPIOA9复用为USART1     GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); //GPIOA10复用为USART1     //USART1端口配置     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;    //速度50MHz     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉     GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA9，PA10    //USART1 初始化设置     USART_InitStructure.USART_BaudRate = bound;//波特率设置     USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式     USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位     USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位     USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;    //收发模式     USART_Init(USART1, &USART_InitStructure); //初始化串口1     USART_Cmd(USART1, ENABLE);  //使能串口1      //USART_ClearFlag(USART1, USART_FLAG_TC); #if EN_USART1_RX         USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启相关中断     //Usart1 NVIC 配置     NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=1;//抢占优先级3     NVIC_InitStructure.NVIC_IRQChannelSubPriority =1;        //子优先级3     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //IRQ通道使能     NVIC_Init(&NVIC_InitStructure);    //根据指定的参数初始化VIC寄存器、 #endif }</code></pre></li></ol></li></ol><pre><code>    void USART1_IRQHandler(void)                    //串口1中断服务程序    {        u8 Res;    #if SYSTEM_SUPPORT_OS         //如果SYSTEM_SUPPORT_OS为真，则需要支持OS.        OSIntEnter();        #endif        if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)        {            Res =USART_ReceiveData(USART1);//(USART1-&gt;DR);    //读取接收到的数据            if((USART_RX_STA&amp;0x8000)==0)//接收未完成            {                if(USART_RX_STA&amp;0x4000)//接收到了0x0d                {                    if(Res!=0x0a)USART_RX_STA=0;//接收错误,重新开始                    else USART_RX_STA|=0x8000;    //接收完成了                 }                else //还没收到0X0D                {                        if(Res==0x0d)USART_RX_STA|=0x4000;                    else                    {                        USART_RX_BUF[USART_RX_STA&amp;0X3FFF]=Res ;                        USART_RX_STA++;                        if(USART_RX_STA&gt;(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收                          }                         }            }                  }     #if SYSTEM_SUPPORT_OS     //如果SYSTEM_SUPPORT_OS为真，则需要支持OS.        OSIntExit();                                                   #endif    }     #endif        ```2. USART2 初始化    ```C    //串口2中断服务函数             void USART2_IRQHandler(void)    {        u8 res;                if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)//接收到数据        {                 res =USART_ReceiveData(USART2);                }    }                                             //初始化IO 串口2    //bound:波特率          void USART2_Init(u32 bound)    {          NVIC_InitTypeDef NVIC_InitStructure;        GPIO_InitTypeDef GPIO_InitStructure;        USART_InitTypeDef USART_InitStructure;        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);      //使能GPIOB时钟        RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);     //使能USART3时钟         USART_DeInit(USART2);                                     //复位串口3        GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);  //GPIOB11复用为USART3        GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);  //GPIOB10复用为USART3            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;    //GPIOB11和GPIOB10初始化        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;              //复用功能        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;          //速度50MHz        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;            //推挽复用输出        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;              //上拉        GPIO_Init(GPIOA,&amp;GPIO_InitStructure);                     //初始化GPIOB11，和GPIOB10        USART_InitStructure.USART_BaudRate = bound;                                    //波特率         USART_InitStructure.USART_WordLength = USART_WordLength_8b;                    //字长为8位数据格式        USART_InitStructure.USART_StopBits = USART_StopBits_1;                         //一个停止位        USART_InitStructure.USART_Parity = USART_Parity_No;                            //无奇偶校验位        USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制        USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;                  //收发模式        USART_Init(USART2, &amp;USART_InitStructure);                                      //初始化串口3        USART_Cmd(USART2, ENABLE);                                                     //使能串口         USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);            //开启中断           NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=2 ;//抢占优先级2        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;        //子优先级3        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //IRQ通道使能        NVIC_Init(&amp;NVIC_InitStructure);                            //根据指定的参数初始化VIC寄存器    }    ```3. USART3 ESP8266 WIFI模块通信```C//初始化IO 串口3//bound:波特率      void usart3_init(u32 bound){      NVIC_InitTypeDef NVIC_InitStructure;    GPIO_InitTypeDef GPIO_InitStructure;    USART_InitTypeDef USART_InitStructure;    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);      //使能GPIOB时钟    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE);     //使能USART3时钟     USART_DeInit(USART3);                                     //复位串口3    GPIO_PinAFConfig(GPIOB,GPIO_PinSource11,GPIO_AF_USART3);  //GPIOB11复用为USART3    GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_USART3);  //GPIOB10复用为USART3        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_10;    //GPIOB11和GPIOB10初始化    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;              //复用功能    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;          //速度50MHz    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;            //推挽复用输出    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;              //上拉    GPIO_Init(GPIOB,&amp;GPIO_InitStructure);                     //初始化GPIOB11，和GPIOB10    USART_InitStructure.USART_BaudRate = bound;                                    //波特率     USART_InitStructure.USART_WordLength = USART_WordLength_8b;                    //字长为8位数据格式    USART_InitStructure.USART_StopBits = USART_StopBits_1;                         //一个停止位    USART_InitStructure.USART_Parity = USART_Parity_No;                            //无奇偶校验位    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;                  //收发模式    USART_Init(USART3, &amp;USART_InitStructure);                                      //初始化串口3    USART_Cmd(USART3, ENABLE);                                                     //使能串口     USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);            //开启中断       NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=2 ;//抢占优先级2    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;        //子优先级3    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //IRQ通道使能    NVIC_Init(&amp;NVIC_InitStructure);                            //根据指定的参数初始化VIC寄存器}//串口3中断服务函数         void USART3_IRQHandler(void){    u8 res;            if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)//接收到数据    {                 res =USART_ReceiveData(USART3);                   gizPutData(&amp;res, 1);//数据写入到缓冲区            }}        ```4. SYN6288语音播报模块 串口4    ```C    //初始化IO 串口4    //bound:波特率          void UART4_Init(u32 bound)    {          NVIC_InitTypeDef NVIC_InitStructure;        GPIO_InitTypeDef GPIO_InitStructure;        USART_InitTypeDef USART_InitStructure;        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);      //使能GPIOB时钟        RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4,ENABLE);     //使能USART3时钟         USART_DeInit(UART4);                                     //复位串口3        GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_UART4);  //GPIOB11复用为USART3        GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_UART4);  //GPIOB10复用为USART3            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;    //GPIOB11和GPIOB10初始化        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;              //复用功能        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;          //速度50MHz        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;            //推挽复用输出        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;              //上拉        GPIO_Init(GPIOC,&amp;GPIO_InitStructure);                     //初始化GPIOB11，和GPIOB10        USART_InitStructure.USART_BaudRate = bound;                                    //波特率         USART_InitStructure.USART_WordLength = USART_WordLength_8b;                    //字长为8位数据格式        USART_InitStructure.USART_StopBits = USART_StopBits_1;                         //一个停止位        USART_InitStructure.USART_Parity = USART_Parity_No;                            //无奇偶校验位        USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制        USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;                  //收发模式        USART_Init(UART4, &amp;USART_InitStructure);                                      //初始化串口3        USART_Cmd(UART4, ENABLE);                                                     //使能串口         USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);            //开启中断           NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=2 ;//抢占优先级2        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;        //子优先级3        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;            //IRQ通道使能        NVIC_Init(&amp;NVIC_InitStructure);                            //根据指定的参数初始化VIC寄存器    }    //串口4中断服务函数             void UART4_IRQHandler(void)    {        u8 res;                if(USART_GetITStatus(UART4, USART_IT_RXNE) != RESET)//接收到数据        {                 res =USART_ReceiveData(UART4);                if(res==&#39;3&#39;)            {                face_mask = 1;//切换一下                switch_count = 0;            }            else if(res==&#39;2&#39;)            {                LED_door = 1;                face_mask = 0;//切换一下                switch_count = 0;                            SYN_FrameInfo(0,&quot;请进&quot;);                delay_ms(200);                delay_ms(300);                delay_ms(300);                delay_ms(300);                LED_door = 0;            }        }    }        ```5. 串口发送函数    ```C    ////发送函数    void USART_SendChar(USART_TypeDef* USARTx, unsigned char Char)    {        while((USARTx-&gt;SR &amp; USART_SR_TC) == 0);         // 等待上次发送完成               USARTx-&gt;DR = Char;                              // 装载本次发送数据        }    //接收函数    unsigned char USART_ReceiveChar(USART_TypeDef* USARTx)    {        return USARTx-&gt;DR;    }    //  函数功能: USART 发送字符串    void USART_SendString(USART_TypeDef* USARTx, uint8_t *String)    {        while(*String != &#39;\0&#39;)                          // \0 表示字符串结束标志，通过检测是否字符串末尾        {            USART_SendChar(USARTx, *String);            String++;        }      }    //发送数组    void USART_SendArray(USART_TypeDef* USARTx, uint8_t *Array, uint16_t Count)    {        uint8_t i = 0;                            // 定义局部变量 用于函数循环        for(i=0; i&lt;Count; i++)        {            USART_SendChar(USARTx, Array[i]);            }    }    ```</code></pre><ol start="3"><li><p>SYN6288语音播报模块</p><ol><li><p>实物图片</p><p><img src="https://i.loli.net/2020/12/03/3AqrNbTm5C6cLOX.png" alt=""></p><p><img src="https://i.loli.net/2020/12/03/QhxKrfUSsOmlzj9.png" alt=""></p></li></ol></li><li><p>SYN6288.C</p><pre class=" language-C"><code class="language-C"> #include "syn6288.h" #include "USART.H"                     // 包含内设头文件 USART-USART通信总线 #include "main.h" void USART_SendString2(USART_TypeDef* USARTx,u8 *DAT,u8 len) {     u8 i;     for(i=0;i<len;i++)     {                 USART_SendChar(USART2,*DAT++);     }     } //Music:选择背景音乐。0:无背景音乐，1~15：选择背景音乐 void SYN_FrameInfo(u8 Music, u8 *HZdata) {   /****************需要发送的文本**********************************/     unsigned  char  Frame_Info[50];     unsigned  char  HZ_Length;     unsigned  char  ecc  = 0;              //定义校验字节     unsigned  int i = 0;       HZ_Length = strlen(HZdata);             //需要发送文本的长度   /*****************帧固定配置信息**************************************/   Frame_Info[0] = 0xFD ;             //构造帧头FD   Frame_Info[1] = 0x00 ;             //构造数据区长度的高字节   Frame_Info[2] = HZ_Length + 3;         //构造数据区长度的低字节   Frame_Info[3] = 0x01 ;             //构造命令字：合成播放命令   Frame_Info[4] = 0x01 | Music << 4 ; //构造命令参数：背景音乐设定   /*******************校验码计算***************************************/   for(i = 0; i < 5; i++)                   //依次发送构造好的5个帧头字节   {     ecc = ecc ^ (Frame_Info[i]);        //对发送的字节进行异或校验   }   for(i = 0; i < HZ_Length; i++)           //依次发送待合成的文本数据   {     ecc = ecc ^ (HZdata[i]);                 //对发送的字节进行异或校验   }   /*******************发送帧信息***************************************/     memcpy(&Frame_Info[5], HZdata, HZ_Length);     Frame_Info[5 + HZ_Length] = ecc;     USART_SendString2(USART2,Frame_Info, 5 + HZ_Length + 1); }</code></pre></li></ol><pre><code>/************************************************************ 名    称： YS_SYN_Set(u8 *Info_data)* 功    能： 主函数    程序入口* 入口参数： *Info_data:固定的配置信息变量* 出口参数：* 说    明：本函数用于配置，停止合成、暂停合成等设置 ，默认波特率9600bps。* 调用方法：通过调用已经定义的相关数组进行配置。**********************************************************/void YS_SYN_Set(u8 *Info_data){    u8 Com_Len;    Com_Len = strlen(Info_data);    //USART_SendString2(USART3,Info_data, Com_Len);    USART_SendString2(UART4,Info_data, Com_Len);}```</code></pre><ol start="3"><li><p>SYN6288.H</p><pre class=" language-C"><code class="language-C"> #ifndef __SYN6288_H #define __SYN6288_H #include "sys.h" void SYN_FrameInfo(u8 Music, u8 *HZdata); void YS_SYN_Set(u8 *Info_data); #endif</code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STM32的GPIO的8种工作模式</title>
      <link href="/2021/01/05/stm32-de-gpio-de-8-chong-gong-zuo-mo-shi/"/>
      <url>/2021/01/05/stm32-de-gpio-de-8-chong-gong-zuo-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>STM32F103ZET6一共有7组IO口，即GPIOA,GPIOB,GPIOC到GPIOG。每组IO口有16个IO，所以一共有112个IO。STM32的大部分引脚除了当GPIO使用外，还可以复用为外设功能引脚（比如串口）。<br> 下图为I/O端口位的基本结构<br> <img src="https://img-blog.csdnimg.cn/20200813162402414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <hr> <p>最近在看数据手册的时候，发现在Cortex-M3里，对于GPIO的配置种类有8种之多：<br> （1）GPIO_Mode_AIN 模拟输入<br> （2）GPIO_Mode_IN_FLOATING 浮空输入<br> （3）GPIO_Mode_IPD 下拉输入<br> （4）GPIO_Mode_IPU 上拉输入<br> （5）GPIO_Mode_Out_OD 开漏输出<br> （6）GPIO_Mode_Out_PP 推挽输出<br> （7）GPIO_Mode_AF_OD 复用开漏输出<br> （8）GPIO_Mode_AF_PP 复用推挽输出</p> <p>对于刚入门的新手，我想这几个概念是必须得搞清楚的，平时接触的最多的也就是推挽输出、开漏输出、上拉输入这三种，但一直未曾对这些做过归纳。因此，在这里做一个总结：</p> <h1><a name="t1"></a><a name="t1"></a><a id="1__18"></a>1. 推挽输出</h1> <p>推挽输出:可以输出强高,低电平,连接数字器件; 推挽结构一般是指两个三极管分别受两互补信号的控制,总是在一个三极管导通的时候另一个截止。高低电平由IC的电源低定。<br> <img src="https://img-blog.csdnimg.cn/20200813162625821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <p>推挽电路是两个参数相同的三极管或MOSFET,以推挽方式存在于电路中,各负责正负半周的波形放大任务,电路工作时，两只对称的功率开关管每次只有一个导通，所以导通损耗小、效率高。输出既可以向负载灌电流，也可以从负载抽取电流。推拉式输出级既提高电路的负载能力，又提高开关速度。<br> <img src="https://img-blog.csdnimg.cn/20200813154318408.png#pic_center" alt="在这里插入图片描述"><br> 如图所示，推挽放大器的输出级有两个“臂”（两组放大元件），一个“臂”的电流增加时，另一个“臂”的电流则减小，二者的状态轮流转换。对负载而言，好像是一个“臂”在推，一个“臂”在拉，共同完成电流输出任务。当输出高电平时，也就是下级负载门输入高电平时，输出端的电流将是下级门从本级电源经VT3拉出。这样一来，输出高低电平时，VT3 一路和 VT5 一路将交替工作，从而减低了功耗，提高了每个管的承受能力。又由于不论走哪一路，管子导通电阻都很小，使RC常数很小，转变速度很快。因此，推拉式输出级既提高电路的负载能力，又提高开关速度。</p> <h1><a name="t2"></a><a name="t2"></a><a id="2__26"></a>2. 开漏输出</h1> <p>开漏输出:只可以输出强低电平，高电平得靠外部电阻拉高。输出端相当于三极管的集电极。要得到高电平状态需要上拉电阻才行。适合于做电流型的驱动，其吸收电流的能力相对强(一般20mA以内)。<br> <img src="https://img-blog.csdnimg.cn/20200813162541291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <p>开漏形式的电路有以下几个特点：</p> <ol><li> <p>利用外部电路的驱动能力，减少IC内部的驱动。当IC内部MOSFET导通时，驱动电流是从外部的VCC流经R pull-up ，MOSFET到GND。IC内部仅需很下的栅极驱动电流。</p> </li><li> <p>一般来说，开漏是用来连接不同电平的器件，匹配电平用的，因为开漏引脚不连接外部的上拉电阻时，只能输出低电平，如果需要同时具备输出高电平的功能，则需要接上拉电阻，很好的一个优点是通过改变上拉电源的电压，便可以改变传输电平。比如加上上拉电阻就可以提供TTL/CMOS电平输出等。（上拉电阻的阻值决定了逻辑电平转换的沿的速度 。阻值越大，速度越低功耗越小，所以负载电阻的选择要兼顾功耗和速度。）</p> </li><li> <p>OPEN-DRAIN提供了灵活的输出方式，但是也有其弱点，就是带来上升沿的延时。因为上升沿是通过外接上拉无源电阻对负载充电，所以当电阻选择小时延时就小，但功耗大；反之延时大功耗小。所以如果对延时有要求，则建议用下降沿输出。</p> </li><li> <p>可以将多个开漏输出的Pin，连接到一条线上。通过一只上拉电阻，在不增加任何器件的情况下，形成“与逻辑”关系。这也是I2C，SMBus等总线判断总线占用状态的原理。补充：什么是“线与”？：</p> </li></ol> <p>在一个结点(线)上, 连接一个上拉电阻到电源 VCC 或 VDD 和 n 个 NPN 或 NMOS 晶体管的集电极 C 或漏极 D, 这些晶体管的发射极 E 或源极 S 都接到地线上, 只要有一个晶体管饱和, 这个结点(线)就被拉到地线电平上. 因为这些晶体管的基极注入电流(NPN)或栅极加上高电平(NMOS), 晶体管就会饱和, 所以这些基极或栅极对这个结点(线)的关系是或非 NOR 逻辑. 如果这个结点后面加一个反相器, 就是或 OR 逻辑.</p> <p>其实可以简单的理解为：在所有引脚连在一起时，外接一上拉电阻，如果有一个引脚输出为逻辑0，相当于接地，与之并联的回路“相当于被一根导线短路”，所以外电路逻辑电平便为0，只有都为高电平时，与的结果才为逻辑1。</p> <p>关于推挽输出和开漏输出，最后用一幅最简单的图形来概括：<br> <img src="https://img-blog.csdnimg.cn/20200813154507233.png#pic_center" alt="在这里插入图片描述"><br> 该图中左边的便是推挽输出模式，其中比较器输出高电平时下面的PNP三极管截止，而上面NPN三极管导通，输出电平VS+；当比较器输出低电平时则恰恰相反，PNP三极管导通，输出和地相连，为低电平。右边的则可以理解为开漏输出形式，需要接上拉。</p> <h1><a name="t3"></a><a name="t3"></a><a id="3__48"></a>3. 浮空输入</h1> <p>浮空输入：浮空（floating）就是逻辑器件的输入引脚即不接高电平，也不接低电平。由于逻辑器件的内部结构，当它输入引脚悬空时，相当于该引脚接了高电平。一般实际运用时，引脚不建议悬空，易受干扰。 通俗讲就是让管脚什么都不接，浮空着。<br> <img src="https://img-blog.csdnimg.cn/2020081316243415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <p><img src="https://img-blog.csdnimg.cn/20200813154535882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 由于浮空输入一般多用于外部按键输入，结合图上的输入部分电路，我理解为浮空输入状态下，IO的电平状态是不确定的，完全由外部输入决定，如果在该引脚悬空的情况下，读取该端口的电平是不确定的。</p> <h1><a name="t4"></a><a name="t4"></a><a id="4__55"></a>4. 上拉输入</h1> <p>上拉输入：上拉就是把电位拉高，比如拉到Vcc。上拉就是将不确定的信号通过一个电阻嵌位在高电平！电阻同时起限流作用！强弱只是上拉电阻的阻值不同，没有什么严格区分。<br> <img src="https://img-blog.csdnimg.cn/20200813162451641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <h1><a name="t5"></a><a name="t5"></a><a id="5__59"></a>5. 下拉输入</h1> <p>下拉输入：就是把电压拉低，拉到GND。与上拉原理相似。<br> <img src="https://img-blog.csdnimg.cn/20200813162501388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <h1><a name="t6"></a><a name="t6"></a><a id="6__63"></a>6. 模拟输入</h1> <p>模拟输入：模拟输入是指传统方式的输入。数字输入是输入PCM数字信号，即0，1的二进制数字信号，通过数模转换，转换成模拟信号，经前级放大进入功率放大器，功率放大器还是模拟的。<br> <img src="https://img-blog.csdnimg.cn/20200813162510670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <h1><a name="t7"></a><a name="t7"></a><a id="7__68"></a>7. 复用开漏输出、复用推挽输出</h1> <p>复用开漏输出、复用推挽输出：可以理解为GPIO口被用作第二功能时的配置情况（即并非作为通用IO口使用）。端口必须配置成复用功能输出模式(推挽或开漏)。<br> 复用开漏输出如下图所示：<br> <img src="https://img-blog.csdnimg.cn/20200813162609644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 复用推挽输出如下图所示：<br> <img src="https://img-blog.csdnimg.cn/20200813162648365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21haG9vbjQxMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p> <h1><a name="t8"></a><a name="t8"></a><a id="8_1_77"></a>8. 总结1：</h1> <p>（1） 浮空输入_IN_FLOATING ——浮空输入，可以做KEY识别，RX1<br> （2）带上拉输入_IPU——IO内部上拉电阻输入<br> （3）带下拉输入_IPD—— IO内部下拉电阻输入<br> （4） 模拟输入_AIN ——应用ADC模拟输入，或者低功耗下省电<br> （5）开漏输出_OUT_OD ——IO输出0接GND，IO输出1，悬空，需要外接上拉电阻，才能实现输出高电平。当输出为1时，IO口的状态由上拉电阻拉高电平，但由于是开漏输出模式，这样IO口也就可以由外部电路改变为低电平或不变。可以读IO输入电平变化，实现C51的IO双向功能<br> （6）推挽输出_OUT_PP ——IO输出0-接GND， IO输出1 -接VCC，读输入值是未知的<br> （7）复用功能的推挽输出_AF_PP ——片内外设功能（I2C的SCL,SDA）<br> （8）复用功能的开漏输出_AF_OD——片内外设功能（TX1,MOSI,MISO.SCK.SS）</p> <h1><a name="t9"></a><a name="t9"></a><a id="9_2_87"></a>9. 总结2</h1> <p>通常有5种方式使用某个引脚功能，它们的配置方式如下：</p> <ol><li>作为普通GPIO输入：根据需要配置该引脚为浮空输入、带弱上拉输入或带弱下拉输入，同时不要使能该引脚对应的所有复用功能模块。</li><li>作为普通GPIO输出：根据需要配置该引脚为推挽输出或开漏输出，同时不要使能该引脚对应的所有复用功能模块。</li><li>作为普通模拟输入：配置该引脚为模拟输入模式，同时不要使能该引脚对应的所有复用功能模块。</li><li>作为内置外设的输入：根据需要配置该引脚为浮空输入、带弱上拉输入或带弱下拉输入，同时使能该引脚对应的某个复用功能模块。</li><li>作为内置外设的输出：根据需要配置该引脚为复用推挽输出或复用开漏输出，同时使能该引脚对应的所有复用功能模块。</li></ol> <h1><a name="t10"></a><a name="t10"></a><a id="10__95"></a>10. 注意</h1> <ol><li>注意如果有多个复用功能模块对应同一个引脚，只能使能其中之一，其它模块保持非使能状态。</li><li>stm32 复位后,IO 端口处于输入浮空状态.</li><li>JTAG 引脚复位以后,处于上拉或者下拉状态</li><li>所有 IO 端口都具有外部中断能力,端口必须配置成输入模式,才能使用外部中断功能</li><li>对于复用功能输入,端口可以配置成任意输入模式或者复用功能输出模式.</li><li>对于复用功能输出,端口必须配置成复用功能输出</li><li>对于双向复用功能,端口必须配置成复用功能输出</li><li>stm32 的部分 IO 端口的复用功能可以重新映射成另外的复用功能.</li><li>stm32 具有GPIO 锁定机制,即锁定 GPIO 配置,下次复位前不能再修改.</li><li>当 LSE 振荡器关闭时,OSC32_IN 和 OSC32_OUT可以用作通用 IO PC14 和 PC15.</li><li>当进入待机模式或者备份域由 Vbat 供电,PC14,PC15 功能丢失,该两个 IO口线设置为模拟输入功能.</li><li>OSC_IN 和 OSC_OUT 可以重新映射为 GPIO PD0,PD1.</li><li>注意 PD0,PD1用于输出地时候仅能用于 50MHz 输出模式.</li><li>注意:PC13,PC14,PC15 只能用于 2MHz 的输出模式,最多只能带30pf 的负载,并且同时只能使用一个引脚</li></ol> <h1><a name="t11"></a><a name="t11"></a><a id="11_STM32_111"></a>11. STM32设置实例</h1> <ol><li> <p>模拟I2C使用开漏输出_OUT_OD，接上拉电阻，能够正确输出0和1；读值时先GPIO_SetBits(GPIOB, GPIO_Pin_0)；拉高，然后可以读IO的值；使用GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0)；</p> </li><li> <p>如果是接上拉电阻，IO默认是高电平；需要读取IO的值，可以使用带上拉输入_IPU和浮空输入_IN_FLOATING和开漏输出_OUT_OD；</p> </li></ol> <h1><a name="t12"></a><a name="t12"></a><a id="12_GPIO_116"></a>12. 补充：GPIO相关配置寄存器</h1> <p>STM32F103ZET6一共有7组IO口，每组IO口有16个IO，每组IO口包含7个寄存器，一共可以控制一组GPIO的16个IO口。</p> <ul><li>GPIOx_CRL :端口配置低寄存器</li><li>GPIOx_CRH:端口配置高寄存器</li><li>GPIOx_IDR:端口输入寄存器</li><li>GPIOx_ODR:端口输出寄存器</li><li>GPIOx_BSRR:端口位设置/清除寄存器</li><li>GPIOx_BRR :端口位清除寄存器</li><li>GPIOx_LCKR:端口配置锁存寄存器</li></ul> <p>每个I/O端口位可以自由编程，然而I/O端口寄存器必须按32位字被访问(不允许半字或字节访问)</p> <h1><a name="t13"></a><a name="t13"></a><a id="13__128"></a>13. 补充：端口复用功能</h1> <p>STM32的大部分端口都具有复用功能。<br> 所谓复用，就是一些端口不仅仅可以做为通用IO口，还可以复用为一<br> 些外设引脚，比如PA9,PA10可以复用为STM32的串口1引脚。<br> 作用：最大限度的利用端口资源</p> <h1><a name="t14"></a><a name="t14"></a><a id="14__133"></a>14. 端口重映射功能</h1> <p>就是可以把某些功能引脚映射到其他引脚。<br> 比如串口1默认引脚是PA9,PA10可以通过配置重映射映<br> 射到PB6,PB7<br> 作用：方便布线</p>                </div><div data-report-view="{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/mahoon411/article/details/107981244&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}"><div></div></div>                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-10218d227c.css" rel="stylesheet">                <link href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-6aa8c38f9a.css" rel="stylesheet">        </div>    </article>]]></content>
      
      
      <categories>
          
          <category> STM32单片机 </category>
          
          <category> C </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> C </tag>
            
            <tag> STM32单片机 </tag>
            
            <tag> GPIO工作模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BearPi-HM Nano HarmonyOS 环境搭建</title>
      <link href="/2021/01/05/bearpi-hm-nano-harmonyos-huan-jing-da-jian/"/>
      <url>/2021/01/05/bearpi-hm-nano-harmonyos-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="BearPi-HM-Nano-HarmonyOS-环境搭建"><a href="#BearPi-HM-Nano-HarmonyOS-环境搭建" class="headerlink" title="BearPi-HM Nano HarmonyOS 环境搭建"></a>BearPi-HM Nano HarmonyOS 环境搭建</h1><h1 id="BearPi-HM-Nano-介绍"><a href="#BearPi-HM-Nano-介绍" class="headerlink" title="BearPi-HM_Nano 介绍"></a>BearPi-HM_Nano 介绍</h1><p>BearPi-HM_Nano开发板是一块专门为鸿蒙OS设计的鸿蒙OS开发板，板载高度集成的2.4GHz WLAN SoC芯片Hi3861，并板载NFC电路及标准的E53接口，标准的E53接口可扩展智能加湿器、智能台灯、智能安防、智能烟感等案例。</p><h3 id="视频教程地址-点击观看"><a href="#视频教程地址-点击观看" class="headerlink" title="视频教程地址 点击观看"></a>视频教程地址 <a href="https://space.bilibili.com/470797387/channel/detail?cid=161760" target="_blank" rel="noopener">点击观看</a></h3><p><img src="https://img-blog.csdnimg.cn/img_convert/9b376b80cf57cdeea119bd2047ca7fa1.png" alt="BearPi-HM_Nano"></p><h1 id="BearPi-HM-Nano-快速上手"><a href="#BearPi-HM-Nano-快速上手" class="headerlink" title="BearPi-HM_Nano 快速上手"></a>BearPi-HM_Nano 快速上手</h1><ul><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/BearPi-HM_Nano开发板快速入门.md">BearPi-HM_Nano 开发板快速入门</a><ul><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/BearPi-HM_Nano开发板介绍.md">BearPi-HM_Nano 开发板介绍</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/BearPi-HM_Nano开发搭建环境.md">BearPi-HM_Nano 开发搭建环境</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/源码获取.md">BearPi-HM_Nano 开发板源码获取</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/BearPi-HM_Nano开发板如何烧录程序.md">BearPi-HM_Nano 开发板如何烧录程序</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/BearPi-HM_Nano开发板第一个示例程序.md">BearPi-HM_Nano 开发第一个示例程序</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/sample/README.md">BearPi-HM_Nano 案例开发</a></li><li><a href="/applications/BearPi/BearPi-HM_Nano/docs/quick-start/常见问题.md">常见问题</a></li></ul></li></ul><h1 id="BearPi-HM-Nano-案例开发"><a href="#BearPi-HM-Nano-案例开发" class="headerlink" title="BearPi-HM_Nano 案例开发"></a>BearPi-HM_Nano 案例开发</h1><p>BearPi-HM_Nano 提供的例程多达 24个，每个例程都有非常详细的注释，代码风格统一，按照基本例程到高级例程的方式编排，方便初学者由浅入深逐步学习。开发者拿到工程后经过简单的编译和下载即可看到实验现象。</p><p>这些例程包括四个类别：内核类、基本外设类、驱动类、物联网类。不仅包括了硬件资源的应用，更是提供了丰富的物联网领域的应用示例，帮助物联网开发者更好更快地进行开发。</p><p>例程列表如下所示：</p><table><thead><tr><th>编号</th><th>类别</th><th>例程名</th><th>说明</th></tr></thead><tbody><tr><td>A1</td><td>内核</td><td>thread</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A1_kernal_thread/README.md">任务交替打印</a></td></tr><tr><td>A2</td><td>内核</td><td>timer</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A2_kernel_timer/README.md">定时器  </a></td></tr><tr><td>A3</td><td>内核</td><td>event</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A3_kernel_event/README.md">事件</a></td></tr><tr><td>A4</td><td>内核</td><td>mutex</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A4_kernel_mutex/README.md">互斥锁</a></td></tr><tr><td>A5</td><td>内核</td><td>semp</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A5_kernel_semaphore/README.md">信号量</a></td></tr><tr><td>A6</td><td>内核</td><td>message</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/A6_kernel_message/README.md">消息队列</a></td></tr><tr><td>B1</td><td>基础</td><td>led_blink</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B1_basic_led_blink/README.md">红色 LED 不间断烁</a></td></tr><tr><td>B2</td><td>基础</td><td>button</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B2_basic_button/README.md">按键控制LED灯亮灭</a></td></tr><tr><td>B3</td><td>基础</td><td>pwm_led</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B3_basic_pwm_led/README.md">红色 LED 呼吸灯</a></td></tr><tr><td>B4</td><td>基础</td><td>adc_mq2</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B4_basic_adc/README.md">ADC读取电压</a></td></tr><tr><td>B5</td><td>基础</td><td>i2c_bh1750</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B5_basic_i2c_nfc/README.md">I2C读取NFC标签</a></td></tr><tr><td>B6</td><td>基础</td><td>basic_uart</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/B6_basic_uart/README.md">UART自发自收</a></td></tr><tr><td>C1</td><td>E53传感器</td><td>e53_sf1_example</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/C1_e53_sf1_mq2/README.md">驱动烟雾传感器 MQ2</a></td></tr><tr><td>C2</td><td>E53传感器</td><td>e53_ia1_example</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/C2_e53_ia1_temp_humi_pls/README.md">驱动温湿度传感器 SHT30</a></td></tr><tr><td>C3</td><td>E53传感器</td><td>e53_sc1_example</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/C3_e53_sc1_pls/README.md">驱动光强传感器 BH1750</a></td></tr><tr><td>C4</td><td>E53传感器</td><td>e53_sc2_example</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/C4_e53_sc2_axis/README.md">驱动 6 轴陀螺仪 MPU6050</a></td></tr><tr><td>C5</td><td>E53传感器</td><td>e53_is1_example</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/C5_e53_is1_infrared/README.md">驱动人体红外传感器</a></td></tr><tr><td>D1</td><td>物联网</td><td>iot_wifi_sta</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D1_iot_wifi_sta/README.md">Wifi扫描热点</a></td></tr><tr><td>D2</td><td>物联网</td><td>iot_wifi_sta_connect</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D2_iot_wifi_sta_connect/README.md">Wifi联网</a></td></tr><tr><td>D3</td><td>物联网</td><td>udp_client</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D3_iot_udp_client/README.md">使用 Socket 实现 UDP 客户端</a></td></tr><tr><td>D4</td><td>物联网</td><td>tcp_server</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D4_iot_tcp_server/README.md">使用 Socket 实现 TCP 服务端</a></td></tr><tr><td>D5</td><td>物联网</td><td>iot_mqtt</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D5_iot_mqtt/README.md">使用 Paho-MQTT 软件包实现 MQTT 协议通信</a></td></tr><tr><td>D6</td><td>物联网</td><td>iot_cloud_oc_sample</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D6_iot_cloud_oc/README.md">接入华为IoT 云平台</a></td></tr><tr><td>D7</td><td>物联网</td><td>iot_cloud_onenet_sample</td><td><a href="/applications/BearPi/BearPi-HM_Nano/sample/D7_iot_cloud_onenet/README.md">接入中国移动 OneNET 云平台</a></td></tr><tr><td>## 环境搭建</td><td></td><td></td><td></td></tr><tr><td>### Ubuntu 18.04 阿里云服务器 SSH登录</td><td></td><td></td><td></td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20201214131506462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></td><td></td><td></td><td></td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20201214131518869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></td><td></td><td></td><td></td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20201214131518647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></td><td></td><td></td><td></td></tr><tr><td>### 更新源</td><td></td><td></td><td></td></tr></tbody></table><pre class=" language-bash"><code class="language-bash">更新源<span class="token function">sudo</span> <span class="token function">apt-get</span> update</code></pre><h3 id="修改bash"><a href="#修改bash" class="headerlink" title="修改bash"></a>修改bash</h3><pre class=" language-bash"><code class="language-bash">将Linux shell改为bash<span class="token function">ls</span> -l /bin/sh<span class="token function">sudo</span> dpkg-reconfigure dash</code></pre><h3 id="Python环境配置"><a href="#Python环境配置" class="headerlink" title="Python环境配置"></a>Python环境配置</h3><p>按照视频一步一步的修改</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3.8<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip<span class="token function">sudo</span> pip3 <span class="token function">install</span> setuptools<span class="token function">sudo</span> pip3 <span class="token function">install</span> kconfiglib<span class="token function">sudo</span> pip3 <span class="token function">install</span> pycryptodome<span class="token function">sudo</span> pip3 <span class="token function">install</span> six --upgrade --ignore-installed six<span class="token function">sudo</span> pip3 <span class="token function">install</span> ecdsa修改python2 python3 修改为3.8<span class="token function">rm</span> /usr/bin/python<span class="token function">ln</span> -s python3.8 /usr/bin/python<span class="token function">rm</span> /usr/bin/python3<span class="token function">ln</span> -s python3.8 /usr/bin/python3</code></pre><p>查看python版本<br><img src="https://img-blog.csdnimg.cn/20201214131814483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="编译工具链安装"><a href="#编译工具链安装" class="headerlink" title="编译工具链安装"></a>编译工具链安装</h3><p>（有时间在写，最近考试）</p>]]></content>
      
      
      <categories>
          
          <category> 物联网 </category>
          
          <category> C </category>
          
          <category> 嵌入式 </category>
          
          <category> 鸿蒙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> C </tag>
            
            <tag> 物联网 </tag>
            
            <tag> 鸿蒙 </tag>
            
            <tag> Bearpi </tag>
            
            <tag> 云服务器 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32F1案例 串口USART库使用</title>
      <link href="/2020/11/11/stm32f1-an-li-chuan-kou-usart-ku-shi-yong/"/>
      <url>/2020/11/11/stm32f1-an-li-chuan-kou-usart-ku-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32F1案例-串口USART使用"><a href="#STM32F1案例-串口USART使用" class="headerlink" title="STM32F1案例 串口USART使用"></a>STM32F1案例 串口USART使用</h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板</li><li>STM32F103ZET6核心板</li><li>ST7735 TFT液晶显示屏<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><br><img src="https://img-blog.csdnimg.cn/20201105223425237.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2><ol><li>Keil MDK 5.31</li><li>串口调试助手</li></ol><h2 id="STM32F103ZET6-串口"><a href="#STM32F103ZET6-串口" class="headerlink" title="STM32F103ZET6 串口"></a>STM32F103ZET6 串口</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="https://img-blog.csdnimg.cn/2020111115592397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="USART 功能框图"></p><h3 id="串口引脚分布与解释"><a href="#串口引脚分布与解释" class="headerlink" title="串口引脚分布与解释"></a>串口引脚分布与解释</h3><ol><li>TX：发送数据输出引脚。</li><li>RX：接收数据输入引脚。</li><li>SW_RX：数据接收引脚，只用于单线和智能卡模式，属于内部引脚，没有具体外部引脚。</li><li>nRTS：请求以发送(Request To Send)，n 表示低电平有效。如果使能 RTS 流控制，当USART 接收器准备好接收新数据时就会将 nRTS 变成低电平；当接收寄存器已满时，nRTS将被设置为高电平。该引脚只适用于硬件流控制。</li><li>nCTS：清除以发送(Clear To Send)，n 表示低电平有效。如果使能 CTS 流控制，发送器在发送下一帧数据之前会检测 nCTS 引脚，如果为低电平，表示可以发送数据，如果为高电平则在发送完当前数据帧之后停止发送。该引脚只适用于硬件流控制。</li><li>SCLK：发送器时钟输出引脚。这个引脚仅适用于同步模式。<br><img src="https://img-blog.csdnimg.cn/20201111155054300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32F103VET6 芯片的 USART 引脚"></li></ol><h3 id="串口配置步骤"><a href="#串口配置步骤" class="headerlink" title="串口配置步骤"></a>串口配置步骤</h3><ol><li>使能RX和TX引脚GPIO时钟和USART时钟；</li><li>初始化 GPIO，并将GPIO复用到USART.上；</li><li>配置 USART参数；</li><li>配置中断控制器并使能USART接收中断；</li><li>使 能USART；</li><li>在USART接收中断服务函数实现数据接收和发送。</li></ol><h3 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  包含的系统外设头文件    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"USART.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QDTFT_demo.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Picture.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"oled.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"beep.h"</span></span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//unsigned char num;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time1 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag1 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time2 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag2 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time3 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag3 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time4 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag4 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Basictime <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> BasictimeCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Basictimeflag <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  硬件端口定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  引用函数声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Usart_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">oled_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Basic_GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USart_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 硬件初始化配置</span><span class="token comment" spellcheck="true">//  函数说明: Hareware_Iint</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//中断优先级分组 分2组</span>    <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器配置</span>    <span class="token function">USart_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//板载LED配置</span>    <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//板载独立按键测试</span>    <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// IIC 0.96 oled</span>    <span class="token function">Lcd_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//ST7735 LCD配置</span>    LCD_LED_SET<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置背光</span>    <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span>    <span class="token function">BEEP_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蜂鸣器配置</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LED测试函数</span><span class="token comment" spellcheck="true">//  函数说明: PB5 LED0  PE5 LED1</span><span class="token comment" spellcheck="true">//  函数备注: 板载LED 正常 </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      LED0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT_ShowTEST测试函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: ST7735 TFTLCD 测试正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span>  <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">Redraw_Mainmenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Num_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Font_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Color_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowImage</span><span class="token punctuation">(</span>gImage_qq<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span>      <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"By delehub"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_Float_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">123.56</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"By 2020-11-5"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"stm32 tft test "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: TIM2,3,4,5</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">USart_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UART4_Configuration</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口4配置</span>    <span class="token function">USART1_Configuration</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口1配置</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Usart_Test测试函数</span><span class="token comment" spellcheck="true">//  函数说明: 串口配置测试函数  STM32F103ZET6 5个串口</span><span class="token comment" spellcheck="true">//  函数备注: USART1  USART2 USART3 UART4 UART5 </span><span class="token comment" spellcheck="true">//   TX端口   PA9     PA2    PB10   PC10  PC12</span><span class="token comment" spellcheck="true">//   RX端口   PA10    PA3    PB11   PC11  PD2</span><span class="token comment" spellcheck="true">//  串口1~5 测试正常 打印效果正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">Usart_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">UART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"usart1 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"usart1 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">UART_SendString</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span><span class="token string">"usart2 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"usart2 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">UART_SendString</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span><span class="token string">"usart3 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"usart3 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">UART_SendString</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span><span class="token string">"uart4 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token string">"uart4 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0 </span>  <span class="token function">UART_SendString</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span><span class="token string">"uart5 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token string">"uart5 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 1</span>  <span class="token function">UART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendNumber_Float</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">123.56</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendNumber_Binary</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: oled_test测试函数</span><span class="token comment" spellcheck="true">//  函数说明: 采用软件IIC 进行配置   SDA PB9  SCL PB10 </span><span class="token comment" spellcheck="true">//  函数备注:  测试正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">oled_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_SignedInteger_06x08</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_UnsignedInteger_06x08</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_Float_06x08</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">123.46</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowString_06x08</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"oled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED_Clear();</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Key_Test 按键测试函数</span><span class="token comment" spellcheck="true">//  函数说明: KEY0 PE4 KEY1 PE3 KEY_WK_UP PA0</span><span class="token comment" spellcheck="true">//  函数备注: KEY0_PRES 1  KEY1_PRES 1  WKUP_PRES 3 </span><span class="token comment" spellcheck="true">//----------------------------------------- ---------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">Key_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"KEY:"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      key_value<span class="token operator">=</span><span class="token function">KEY_Scan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//USART_SendString(USART1,"key_value:3 \r\n");</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//USART_SendString(USART1,"key_value:2 \r\n");</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//USART_SendString(USART1,"key_value:1 \r\n");</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器配置</span><span class="token comment" spellcheck="true">//  函数说明: TIM2,3,4,5</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*定时器配置*/</span>    <span class="token function">BASIC_TIM_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM3_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM2_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM4_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 通用定时器定时器测试</span><span class="token comment" spellcheck="true">//  函数说明: TIM2,3,4,5</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// TIM5</span>    <span class="token punctuation">{</span>      timeflag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount1<span class="token operator">++</span><span class="token punctuation">;</span>                 LED1<span class="token operator">=</span><span class="token operator">!</span>LED1<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount1 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span>timeCount1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//TIM3     </span>    <span class="token punctuation">{</span>      timeflag2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount2<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount2 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>timeCount2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//TIM2  </span>    <span class="token punctuation">{</span>      timeflag3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount3<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount3 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span>timeCount3<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Green<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag4 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//TIM4   </span>    <span class="token punctuation">{</span>      timeflag4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount4<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount4 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span>timeCount4<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Green<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 基本定时器定时器测试</span><span class="token comment" spellcheck="true">//  函数说明: TIM6,7</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> Basictime <span class="token operator">==</span> <span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 1000 * 1 ms = 1s 时间到 */</span>          <span class="token punctuation">{</span>      Basictime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      BasictimeCount<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>BasictimeCount <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        BasictimeCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span>BasictimeCount<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Black<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器定时 1s 测试</span><span class="token comment" spellcheck="true">//  函数说明:  </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">Basic_GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通用定时器定时器测试</span>  <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本定时器定时器测试</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"stm32 timertest"</span><span class="token punctuation">,</span>Magenta<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"timeCount1 "</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"timeCount2 "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"timeCount3 "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token string">"timeCount4"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token string">"Basictime"</span><span class="token punctuation">,</span>Magenta<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 主函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>        <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//硬件初始化配置</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Usart_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="USART-C"><a href="#USART-C" class="headerlink" title="USART.C"></a>USART.C</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"USART.H"</span></span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART1_Configuration串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: USART1初始化函数</span><span class="token comment" spellcheck="true">//  函数备注: bound:波特率</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token comment" spellcheck="true">//#if EN_USART1_RX   //如果使能了接收  </span><span class="token comment" spellcheck="true">// 使用串口中断时 解除注释 #if EN_USART1_RX </span><span class="token comment" spellcheck="true">//注意,读取USARTx->SR能避免莫名其妙的错误       </span>u8 USART_RX_BUF<span class="token punctuation">[</span>USART_REC_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//接收缓冲,最大USART_REC_LEN个字节.</span><span class="token comment" spellcheck="true">//接收状态</span><span class="token comment" spellcheck="true">//bit15，    接收完成标志</span><span class="token comment" spellcheck="true">//bit14，    接收到0x0d</span><span class="token comment" spellcheck="true">//bit13~0，    接收到的有效字节数目</span>u16 USART_RX_STA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//接收状态标记      </span><span class="token keyword">void</span> <span class="token function">USART1_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//GPIO端口设置</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_USART1<span class="token operator">|</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使能USART1，GPIOA时钟</span>    <span class="token comment" spellcheck="true">//USART1_TX   GPIOA.9</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PA.9</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//复用推挽输出</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化GPIOA.9</span>    <span class="token comment" spellcheck="true">//USART1_RX      GPIOA.10初始化</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PA10</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浮空输入</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化GPIOA.10  </span>    <span class="token comment" spellcheck="true">//Usart1 NVIC 配置</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> USART1_IRQn<span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抢占优先级3</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//子优先级3</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//IRQ通道使能</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据指定的参数初始化VIC寄存器</span>    <span class="token comment" spellcheck="true">//USART 初始化设置</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口波特率</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字长为8位数据格式</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个停止位</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无奇偶校验位</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无硬件数据流控制</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收发模式</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化串口1</span>    <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启串口接受中断</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//使能串口1 </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART1_IRQHandler串口中断服务函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">USART1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//串口1中断服务程序</span><span class="token punctuation">{</span>    u8 r<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收中断</span>    <span class="token punctuation">{</span>        r <span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(USART1->DR);    //读取接收到的数据</span>        <span class="token function">USART_SendData</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span> <span class="token operator">!=</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//#endif</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART2_Configuration串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: USART2初始化函数</span><span class="token comment" spellcheck="true">//  函数备注: bound:波特率</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token comment" spellcheck="true">//#if EN_USART2_RX   //如果使能了接收</span><span class="token keyword">void</span> <span class="token function">USART2_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_USART2<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//USART2 TX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//复用推挽输出；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口A；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//USART2 RX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//浮空输入；</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口A；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//波特率；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据位8位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//停止位1位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无校验位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无硬件流控；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收发模式；</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置串口参数；</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置中断组，4位抢占优先级，4位响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> USART2_IRQn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断号；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能串口；</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART2_IRQHandler串口中断服务函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">USART2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中断处理函数；</span><span class="token punctuation">{</span>   u8 r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收中断</span>  <span class="token punctuation">{</span>    r <span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>USART2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(USART1->DR);    //读取接收到的数据</span>    <span class="token function">USART_SendData</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span> <span class="token operator">!=</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//#endif</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART3_Configuration串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: USART3初始化函数</span><span class="token comment" spellcheck="true">//  函数备注: bound:波特率</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token comment" spellcheck="true">//#if EN_USART3_RX   //如果使能了接收</span><span class="token keyword">void</span> <span class="token function">USART3_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_USART3<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//USART3 TX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//复用推挽输出；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口B；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//USART3 RX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//浮空输入；</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口B；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//波特率；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据位8位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//停止位1位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无校验位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无硬件流控；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收发模式；</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置串口参数；</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置中断组，4位抢占优先级，4位响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> USART3_IRQn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断号；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能串口；</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: USART3_IRQHandler串口中断服务函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">USART3_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中断处理函数；</span><span class="token punctuation">{</span>  u8 r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收中断</span>  <span class="token punctuation">{</span>    r <span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>USART3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(USART1->DR);    //读取接收到的数据</span>    <span class="token function">USART_SendData</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span> <span class="token operator">!=</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//#endif</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: UART4_Configuration串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: UART4初始化函数</span><span class="token comment" spellcheck="true">//  函数备注: bound:波特率</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token comment" spellcheck="true">//#if EN_USART4_RX</span><span class="token keyword">void</span> <span class="token function">UART4_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_UART4<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//UART4 TX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//复用推挽输出；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口C；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//UART4 RX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//浮空输入；</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口C；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//波特率；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据位8位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//停止位1位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无校验位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无硬件流控；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收发模式；</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置串口参数；</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置中断组，4位抢占优先级，4位响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> UART4_IRQn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断号；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能串口；</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: UART4_IRQHandler串口中断服务函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">UART4_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中断处理函数；</span><span class="token punctuation">{</span>  u8 r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收中断</span>  <span class="token punctuation">{</span>    r <span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>UART4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(USART1->DR);    //读取接收到的数据</span>    <span class="token function">USART_SendData</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span> <span class="token operator">!=</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//#endif</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: UART5_Configuration串口配置配置</span><span class="token comment" spellcheck="true">//  函数说明: UART5初始化函数</span><span class="token comment" spellcheck="true">//  函数备注: bound:波特率</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token comment" spellcheck="true">//#if EN_USART5_RX</span><span class="token keyword">void</span> <span class="token function">UART5_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token operator">|</span>RCC_APB2Periph_GPIOD<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_UART5<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_12<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//UART5 TX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//复用推挽输出；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口C；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//UART5 RX；</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//浮空输入；</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//端口D；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> bound<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//波特率；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据位8位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//停止位1位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无校验位；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无硬件流控；</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//收发模式；</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置串口参数；</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置中断组，4位抢占优先级，4位响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> UART5_IRQn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断号；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应优先级；</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能串口；</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: UART5_IRQHandler串口中断服务函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">UART5_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中断处理函数；</span><span class="token punctuation">{</span>  u8 r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">USART_GetITStatus</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收中断</span>  <span class="token punctuation">{</span>    r <span class="token operator">=</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>UART5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(USART1->DR);    //读取接收到的数据</span>    <span class="token function">USART_SendData</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span> <span class="token operator">!=</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token function">USART_ClearFlag</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span>USART_FLAG_TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//#endif</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送字节</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 本函数没有考虑发送9位数据可能性</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Byte - 字节  取值范文 - ASCII字符</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>USARTx <span class="token operator">-></span> SR <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 等待上次发送完成   </span>    USARTx <span class="token operator">-></span> DR <span class="token operator">=</span> Char<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 装载本次发送数据  </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 接收字符</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//  输出参量: Char - 待接收字节  取值范围 - ASCII字符</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">UART_ReceiveChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> USARTx<span class="token operator">-></span>DR<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送字符串</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            String - 待发送字符串指针  取值范文 - ASCII字符串</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendString</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true">// \0 表示字符串结束标志，通过检测是否字符串末尾</span>    <span class="token punctuation">{</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数组</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Array - 待发送数组的指针  取值范围 - 指针类型</span><span class="token comment" spellcheck="true">//            Count - 待发送数组的数量  取值范围 - 0~255</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> Array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送回车换行</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 换行</span>    <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 回车</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送有符号整型数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送整数  取值范围 - 整型类型 -99999~+99999</span><span class="token comment" spellcheck="true">//            Count - 显示的位数  取值范围 - 1~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 定义局部数组，用于数据存储</span>    <span class="token comment" spellcheck="true">// 判断 整型数字正负</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 负数转整数</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 发送串口数据</span>    <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送无符号整型数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送整数  取值范围 - 整型类型 0~99999</span><span class="token comment" spellcheck="true">//            Count - 显示的位数  取值范围 - 1~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 定义局部数组，用于数据存储</span>    <span class="token comment" spellcheck="true">// 断言检查参数</span>    <span class="token comment" spellcheck="true">// 执行相关操作</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送串口数据</span>    <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数字 浮点类型</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 本函数打印浮点数字与实际输入数字存在偏差</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送浮点型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count1 - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            Count2 - 小数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_Float</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">float</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储整数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储小数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span>  Number_Integer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的整数部分</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span>  Number_Decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的小数部分</span>    <span class="token comment" spellcheck="true">// 判断 浮点数字正负</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number<span class="token punctuation">;</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 限制 发送位数</span>    <span class="token comment" spellcheck="true">// 由于由于float型的有效十进制数值最多为7位，即整数位 + 小数位 数量一定小于等于7</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">+</span> Count2 <span class="token operator">></span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Count1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 分离 整数位与小数位</span>    <span class="token comment" spellcheck="true">// 取整数部分</span>    Number_Integer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 取小数部分 1e5科学计数法表示10000</span>    Number_Decimal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Number <span class="token operator">-</span> Number_Integer <span class="token operator">+</span> <span class="token number">0.000005</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span><span class="token punctuation">,</span> Count1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 显示整数位</span>    <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        Count2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 显示小数位</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数字 二进制数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送有符号长整型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_Binary</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Count<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Number <span class="token operator">&amp;</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>Count<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Number <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="USART-H"><a href="#USART-H" class="headerlink" title="USART.H"></a>USART.H</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __USART_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __USART_H__</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token comment" spellcheck="true">/*******************************************************************************// STM32C串口1 中断测试*******************************************************************************/</span> <span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  宏自定义声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_REC_LEN              200      </span><span class="token comment" spellcheck="true">//定义最大接收字节数 200</span><span class="token macro property">#<span class="token directive keyword">define</span> EN_USART1_RX             1        </span><span class="token comment" spellcheck="true">//使能（1）/禁止（0）串口1接收</span><span class="token macro property">#<span class="token directive keyword">define</span> EN_USART2_RX             1        </span><span class="token comment" spellcheck="true">//使能（1）/禁止（0）串口1接收      </span><span class="token macro property">#<span class="token directive keyword">define</span> EN_USART3_RX             1        </span><span class="token comment" spellcheck="true">//使能（1）/禁止（0）串口1接收 </span><span class="token macro property">#<span class="token directive keyword">define</span> EN_USART4_RX             1        </span><span class="token comment" spellcheck="true">//使能（1）/禁止（0）串口1接收      </span><span class="token macro property">#<span class="token directive keyword">define</span> EN_USART5_RX             1        </span><span class="token comment" spellcheck="true">//使能（1）/禁止（0）串口1接收 </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//如果想串口中断接收，请不要注释以下宏定义</span><span class="token keyword">extern</span> u8  USART_RX_BUF<span class="token punctuation">[</span>USART_REC_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接收缓冲,最大USART_REC_LEN个字节.末字节为换行符 </span><span class="token keyword">extern</span> u16 USART_RX_STA<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//接收状态标记    </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 串口配置函数</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">USART1_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART2_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART3_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART4_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART5_Configuration</span><span class="token punctuation">(</span>u32 bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 串口发送函数</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">UART_SendChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART_SendString</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">UART_ReceiveChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送数组 </span><span class="token keyword">void</span> <span class="token function">UART_SendArray</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送回车换行</span><span class="token keyword">void</span> <span class="token function">UART_SendLine</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送数字 </span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_Float</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">float</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">UART_SendNumber_Binary</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="串口打印效果"><a href="#串口打印效果" class="headerlink" title="串口打印效果"></a>串口打印效果</h3><p><img src="https://img-blog.csdnimg.cn/20201111155436387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="串口发送函数"><br><img src="https://img-blog.csdnimg.cn/20201111155436252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="串口1 串口4测试"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> 嵌入式 STM32 </category>
          
          <category> 串口通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> USART 串口通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32F1案例 基本定时器(TIM6_7)与通用定时器(TIM2_3_4_5)使用</title>
      <link href="/2020/11/09/stm32f1-an-li-ji-ben-ding-shi-qi-tim6-7-yu-tong-yong-ding-shi-qi-tim2-3-4-5-shi-yong/"/>
      <url>/2020/11/09/stm32f1-an-li-ji-ben-ding-shi-qi-tim6-7-yu-tong-yong-ding-shi-qi-tim2-3-4-5-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32F1案例-ST7735-TFT液晶显示屏综合库使用"><a href="#STM32F1案例-ST7735-TFT液晶显示屏综合库使用" class="headerlink" title="STM32F1案例 ST7735 TFT液晶显示屏综合库使用"></a>STM32F1案例 ST7735 TFT液晶显示屏综合库使用</h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板</li><li>STM32F103ZET6核心板</li><li>ST7735 TFT液晶显示屏<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><br><img src="https://img-blog.csdnimg.cn/20201105223425237.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2><ol><li><p>Keil MDK 5.31</p></li><li><p>串口调试助手</p><h2 id="STM32F103ZET6-定时器"><a href="#STM32F103ZET6-定时器" class="headerlink" title="STM32F103ZET6 定时器"></a>STM32F103ZET6 定时器</h2><h4 id="STM32F1系列中，除了互联型的产品，共有-8-个定时器。"><a href="#STM32F1系列中，除了互联型的产品，共有-8-个定时器。" class="headerlink" title="STM32F1系列中，除了互联型的产品，共有 8 个定时器。"></a>STM32F1系列中，除了互联型的产品，共有 8 个定时器。</h4></li><li><p>基本定时器<br>TIM6和 TIM7是一个 16 位的只能向上计数的定时器，<br>功能：只能定时，没有外部 IO。</p></li><li><p>通用定时器<br>TIM2/3/4/5 是一个 16 位的可以向上/下计数的定时器，<br>功能：可以定时，可以输出比较，可以输入捕捉，每个定时器有四个外部 IO。</p></li><li><p>高级定时器<br>TIM1/8是一个 16 位的可以向上/下计数的定时器，<br>功能：可以定时，可以输出比较，可以输入捕捉，还可以有三相电机互补输出信号，每个定时器有 8 个外部 IO。<br><img src="https://img-blog.csdnimg.cn/20201109233843761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="定时器分布情况"></p><h4 id="TIM-TimeBaseInitTypeDef-结构体内部成员"><a href="#TIM-TimeBaseInitTypeDef-结构体内部成员" class="headerlink" title="TIM_TimeBaseInitTypeDef 结构体内部成员"></a>TIM_TimeBaseInitTypeDef 结构体内部成员</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>uint16_t TIM_Prescaler<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定时器预分频器  </span>uint16_t TIM_CounterMode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计数模式</span>uint16_t TIM_Period<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定时器周期    </span>uint16_t TIM_ClockDivision<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 时钟分频 7200</span>uint8_t TIM_RepetitionCounter<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 高级定时器 重复计数器</span></code></pre></li></ol><p>} TIM_TimeBaseInitTypeDef;       </p><pre><code>#### 定时器中断服务函数```cvoid TIMx_IRQHandler(void)   //TIMx中断{     if (TIM_GetITStatus(TIMx, TIM_IT_Update) != RESET)  //检查TIMx更新中断发生与否    {        //do somethings         TIM_ClearITPendingBit(TIMx, TIM_IT_Update  );  //清除TIMx更新中断标志    }}</code></pre><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><h3 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  包含的头文件    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"UART.H"</span></span><span class="token comment" spellcheck="true">//#include "USART.H"</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QDTFT_demo.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Picture.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"oled.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"beep.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  宏自定义声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//unsigned char num;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time1 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag1 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time2 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag2 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time3 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag3 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time4 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeCount4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag4 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Basictime <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> BasictimeCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Basictimeflag <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  硬件端口定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  引用函数声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Usart_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">oled_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Basic_GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 硬件初始化配置</span><span class="token comment" spellcheck="true">//  函数说明: Hareware_Iint</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口配置</span>    <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器配置</span>    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//板载LED配置</span>    <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//板载独立按键测试</span>    <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// IIC 0.96 oled</span>    <span class="token function">Lcd_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//ST7735 LCD配置</span>    LCD_LED_SET<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置背光</span>    <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span>    <span class="token function">BEEP_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蜂鸣器配置</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LED测试函数</span><span class="token comment" spellcheck="true">//  函数说明: PB5 LED0  PE5 LED1</span><span class="token comment" spellcheck="true">//  函数备注: 板载LED 正常 </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      LED0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT_ShowTEST测试函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: ST7735 TFTLCD 测试正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span>  <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">Redraw_Mainmenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Num_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Font_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Color_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowImage</span><span class="token punctuation">(</span>gImage_qq<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span>      <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"By delehub"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_Float_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">123.56</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"By 2020-11-5"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"stm32 tft test "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Usart_Test测试函数</span><span class="token comment" spellcheck="true">//  函数说明: 串口配置测试函数  STM32F103ZET6 5个串口</span><span class="token comment" spellcheck="true">//  函数备注: USART1  USART2 USART3 UART4 UART5 </span><span class="token comment" spellcheck="true">//   TX端口   PA9     PA2    PB10   PC10  PC12</span><span class="token comment" spellcheck="true">//   RX端口   PA10    PA3    PB11   PC11  PD2</span><span class="token comment" spellcheck="true">//  串口1~5 测试正常 打印效果正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">Usart_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"usart1 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"usart1 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span><span class="token string">"usart2 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"usart2 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span><span class="token string">"usart3 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"usart3 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span><span class="token string">"uart4 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token string">"uart4 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>UART5<span class="token punctuation">,</span><span class="token string">"uart5 test \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token string">"uart5 test"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: oled_test测试函数</span><span class="token comment" spellcheck="true">//  函数说明: 采用软件IIC 进行配置   SDA PB9  SCL PB10 </span><span class="token comment" spellcheck="true">//  函数备注:  测试正常</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">oled_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_SignedInteger_06x08</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_UnsignedInteger_06x08</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowNumber_Float_06x08</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">123.46</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowString_06x08</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"oled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED_Clear();</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Key_Test 按键测试函数</span><span class="token comment" spellcheck="true">//  函数说明: KEY0 PE4 KEY1 PE3 KEY_WK_UP PA0</span><span class="token comment" spellcheck="true">//  函数备注: KEY0_PRES 1  KEY1_PRES 1  WKUP_PRES 3 </span><span class="token comment" spellcheck="true">//----------------------------------------- ---------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">Key_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"KEY:"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      key_value<span class="token operator">=</span><span class="token function">KEY_Scan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"key_value:3 \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"key_value:2 \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>key_value<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>key_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"key_value:1 \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*定时器配置*/</span>    <span class="token function">BASIC_TIM_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM5_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM3_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM2_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM4_Int_Init</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 通用定时器定时器测试</span><span class="token comment" spellcheck="true">//  函数说明: TIM2,3,4,5</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// TIM5</span>    <span class="token punctuation">{</span>      timeflag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount1<span class="token operator">++</span><span class="token punctuation">;</span>                 LED1<span class="token operator">=</span><span class="token operator">!</span>LED1<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount1 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span>timeCount1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//TIM3     </span>    <span class="token punctuation">{</span>      timeflag2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount2<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount2 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>timeCount2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//TIM2  </span>    <span class="token punctuation">{</span>      timeflag3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount3<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount3 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span>timeCount3<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Green<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> timeflag4 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//TIM4   </span>    <span class="token punctuation">{</span>      timeflag4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      timeCount4<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeCount4 <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        timeCount4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span>timeCount4<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Green<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 基本定时器定时器测试</span><span class="token comment" spellcheck="true">//  函数说明: TIM6,7</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> Basictime <span class="token operator">==</span> <span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 1000 * 1 ms = 1s 时间到 */</span>          <span class="token punctuation">{</span>      Basictime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      BasictimeCount<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>BasictimeCount <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        BasictimeCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span>BasictimeCount<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Black<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器定时 1s 测试</span><span class="token comment" spellcheck="true">//  函数说明:  </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">void</span> <span class="token function">Basic_GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通用定时器定时器测试</span>  <span class="token function">Basic_Timer_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本定时器定时器测试</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 主函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>        <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"stm32 timertest"</span><span class="token punctuation">,</span>Magenta<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"timeCount1 "</span><span class="token punctuation">,</span>Blue1<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"timeCount2 "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"timeCount3 "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token string">"timeCount4"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token string">"Basictime"</span><span class="token punctuation">,</span>Magenta<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token function">Basic_GeneralTimer_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="timer-c"><a href="#timer-c" class="headerlink" title="timer.c"></a>timer.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器1 初始化函数</span><span class="token comment" spellcheck="true">//  函数说明: 高级定时器 TIM1 TIM8</span><span class="token comment" spellcheck="true">//  函数备注: 定时，输出比较，输入捕捉，有三相电机互补输出信号，每个定时器有8个外部IO。</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">TIM1_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span> u16 psc<span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_TIM1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> psc<span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_RepetitionCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM1_UP_IRQn<span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TIM2_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span> u16 psc<span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//时钟使能</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置在下一个更新事件装入活动的自动重装载寄存器周期的值     计数到5000为500ms</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span>psc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置用来作为TIMx时钟频率除数的预分频值  10Khz的计数频率</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置时钟分割:TDTS = Tck_tim</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能指定的TIM3中断,允许更新中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM2_IRQn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM3中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先占优先级0级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从优先级3级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IRQ通道被使能</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使能TIMx</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//=================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器3 初始化函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">TIM3_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span> u16 psc<span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    TIM_OCInitTypeDef TIM_OCInitStructure;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//时钟使能</span>    <span class="token comment" spellcheck="true">//RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);</span>    <span class="token comment" spellcheck="true">//定时器TIM3初始化</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置在下一个更新事件装入活动的自动重装载寄存器周期的值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> psc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置用来作为TIMx时钟频率除数的预分频值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置时钟分割:TDTS = Tck_tim</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据指定的参数初始化TIMx的时间基数单位</span><span class="token comment" spellcheck="true">//    //pwm 初始化</span><span class="token comment" spellcheck="true">//    TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;</span><span class="token comment" spellcheck="true">//    TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Enable;</span><span class="token comment" spellcheck="true">//    TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_Low;</span><span class="token comment" spellcheck="true">//    TIM_OC3Init(TIM3,&amp;TIM_OCInitStructure);</span><span class="token comment" spellcheck="true">//    TIM_OC3PreloadConfig(TIM3,TIM_OCPreload_Enable);</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span>     NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM3_IRQn<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//TIM3中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先占优先级0级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//从优先级3级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//IRQ通道被使能</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器4 初始化函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">TIM4_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span> u16 psc<span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//时钟使能</span>    <span class="token comment" spellcheck="true">//定时器TIM4初始化</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置在下一个更新事件装入活动的自动重装载寄存器周期的值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> psc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置用来作为TIMx时钟频率除数的预分频值</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置时钟分割:TDTS = Tck_tim</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据指定的参数初始化TIMx的时间基数单位</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能指定的TIM4中断,允许更新中断</span>    <span class="token comment" spellcheck="true">//中断优先级NVIC设置</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM4_IRQn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM4中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先占优先级0级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从优先级3级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IRQ通道被使能</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化NVIC寄存器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能定时器4</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器5 初始化函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">TIM5_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM5<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//时钟使能</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置在下一个更新事件装入活动的自动重装载寄存器周期的值     计数到5000为500ms</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span>psc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置用来作为TIMx时钟频率除数的预分频值  10Khz的计数频率</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置时钟分割:TDTS = Tck_tim</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM向上计数模式</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM5<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM5<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能指定的TIM3中断,允许更新中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM5_IRQn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM3中断</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先占优先级0级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从优先级3级</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IRQ通道被使能</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM5<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使能TIMx</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: TIME6,7 基本定时器</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: 无</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">// 中断优先级配置</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BASIC_TIM_NVIC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 设置中断组为0</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_0<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置中断来源</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> BASIC_TIM_IRQ <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置主优先级为 0</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 设置抢占优先级为3</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * 注意：TIM_TimeBaseInitTypeDef结构体里面有5个成员，TIM6和TIM7的寄存器里面只有 * TIM_Prescaler和TIM_Period，所以使用TIM6和TIM7的时候只需初始化这两个成员即可， * 另外三个成员是通用定时器和高级定时器才有. *----------------------------------------------------------------------------- *typedef struct *{ TIM_Prescaler            都有 *    TIM_CounterMode                 TIMx,x[6,7]没有，其他都有 *  TIM_Period               都有 *  TIM_ClockDivision        TIMx,x[6,7]没有，其他都有 *  TIM_RepetitionCounter    TIMx,x[1,8,15,16,17]才有 *}TIM_TimeBaseInitTypeDef;  *----------------------------------------------------------------------------- */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BASIC_TIM_Mode_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启定时器时钟,即内部时钟CK_INT=72M</span>    <span class="token function">BASIC_TIM_APBxClock_FUN</span><span class="token punctuation">(</span>BASIC_TIM_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自动重装载寄存器的值，累计TIM_Period+1个频率后产生一个更新或者中断</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> BASIC_TIM_Period<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 时钟预分频数为</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler<span class="token operator">=</span> BASIC_TIM_Prescaler<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 时钟分频因子 ，基本定时器没有，不用管</span>    <span class="token comment" spellcheck="true">//TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;</span>        <span class="token comment" spellcheck="true">// 计数器计数模式，基本定时器只能向上计数，没有计数模式的设置</span>    <span class="token comment" spellcheck="true">//TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up; </span>        <span class="token comment" spellcheck="true">// 重复计数器的值，基本定时器没有，不用管</span>        <span class="token comment" spellcheck="true">//TIM_TimeBaseStructure.TIM_RepetitionCounter=0;</span>      <span class="token comment" spellcheck="true">// 初始化定时器</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 清除计数器中断标志位</span>    <span class="token function">TIM_ClearFlag</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span> TIM_FLAG_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启计数器中断</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使能计数器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">BASIC_TIM_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">BASIC_TIM_NVIC_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BASIC_TIM_Mode_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器1 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">TIM1_UP_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">TIM_ClearFlag</span><span class="token punctuation">(</span>TIM1<span class="token punctuation">,</span> TIM_IT_Update <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器1 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time3<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag3<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_FLAG_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>              time3<span class="token operator">++</span><span class="token punctuation">;</span>       timeflag3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器3 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time2<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag2<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM3_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//TIM3中断</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//检查指定的TIM中断发生与否:TIM 中断源 </span>     <span class="token punctuation">{</span>       <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_IT_Update  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//清除TIMx的中断待处理位:TIM 中断源 </span>       time2<span class="token operator">++</span><span class="token punctuation">;</span>       timeflag2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器4 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time4<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag4<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">TIM4_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//TIM4中断</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//检查TIM4更新中断发生与否</span>    <span class="token punctuation">{</span>      <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM4<span class="token punctuation">,</span> TIM_IT_Update  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//清除TIM4更新中断标志</span>       time4<span class="token operator">++</span><span class="token punctuation">;</span>       timeflag4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器5 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time1<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeflag1<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM5_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//TIM3中断</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span>TIM5<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//检查指定的TIM中断发生与否:TIM 中断源</span>    <span class="token punctuation">{</span>      <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>TIM5<span class="token punctuation">,</span> TIM_IT_Update  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//清除TIMx的中断待处理位:TIM 中断源</span>       time1<span class="token operator">++</span><span class="token punctuation">;</span>       timeflag1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 定时器6,7 中断服务函数函数</span><span class="token comment" spellcheck="true">//  函数说明:  基本定时器6，7 </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//================================================================================================== </span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Basictime<span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">BASIC_TIM_IRQHandler</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span> BASIC_TIM<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET <span class="token punctuation">)</span>     <span class="token punctuation">{</span>            <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>BASIC_TIM <span class="token punctuation">,</span> TIM_FLAG_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>    Basictime<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>             <span class="token punctuation">}</span></code></pre><h3 id="timer-h"><a href="#timer-h" class="headerlink" title="timer.h"></a>timer.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __TIMER_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __TIMER_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token comment" spellcheck="true">/********************基本定时器TIM参数定义，只限TIM6、7************/</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM6 </span><span class="token comment" spellcheck="true">// 如果使用TIM7，注释掉这个宏即可</span><span class="token macro property">#<span class="token directive keyword">ifdef</span>  BASIC_TIM6 </span><span class="token comment" spellcheck="true">// 使用基本定时器TIM6</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM                   TIM6</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_APBxClock_FUN     RCC_APB1PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_CLK               RCC_APB1Periph_TIM6</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_Period            (1000-1)</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_Prescaler         71</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_IRQ               TIM6_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_IRQHandler        TIM6_IRQHandler</span><span class="token macro property">#<span class="token directive keyword">else</span>  </span><span class="token comment" spellcheck="true">// 使用基本定时器TIM7</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM                   TIM7</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_APBxClock_FUN     RCC_APB1PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_CLK               RCC_APB1Periph_TIM7</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_Period            1000-1</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_Prescaler         71</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_IRQ               TIM7_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span>            BASIC_TIM_IRQHandler        TIM7_IRQHandler</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">TIM1_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM2_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM3_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM4_Int_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TIM5_Init</span><span class="token punctuation">(</span>u16 arr<span class="token punctuation">,</span>u16 psc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BASIC_TIM_Mode_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">BASIC_TIM_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="简单效果图片"><a href="#简单效果图片" class="headerlink" title="简单效果图片"></a>简单效果图片</h3><p><img src="https://img-blog.csdnimg.cn/20201109234248875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="定时器1s效果图片"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> 嵌入式 STM32 </category>
          
          <category> 定时器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> 嵌入式STM32 </tag>
            
            <tag> 野火F1系列开发板 </tag>
            
            <tag> TFT液晶显示屏 </tag>
            
            <tag> 基本定时器 通用定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32F1案例 ST7735 TFT液晶显示屏综合库使用</title>
      <link href="/2020/11/05/stm32f1-an-li-st7735-tft-ye-jing-xian-shi-ping-zong-he-ku-shi-yong/"/>
      <url>/2020/11/05/stm32f1-an-li-st7735-tft-ye-jing-xian-shi-ping-zong-he-ku-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32F1案例-ST7735-TFT液晶显示屏综合库使用"><a href="#STM32F1案例-ST7735-TFT液晶显示屏综合库使用" class="headerlink" title="STM32F1案例 ST7735 TFT液晶显示屏综合库使用"></a>STM32F1案例 ST7735 TFT液晶显示屏综合库使用</h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板</li><li>STM32F103ZET6核心板</li><li>ST7735 TFT液晶显示屏<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><br><img src="https://img-blog.csdnimg.cn/20201105223425237.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2><ol><li>Keil MDK 5.31</li><li>串口调试助手</li></ol><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><h3 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  包含的头文件    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD.H"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QDTFT_demo.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Picture.h"</span></span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  宏自定义声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  硬件端口定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  引用函数声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 硬件初始化配置</span><span class="token comment" spellcheck="true">//  函数说明: Hareware_Iint</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LCD_LED_SET<span class="token punctuation">;</span>    <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LED测试函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span> <span class="token function">LED_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      LED0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LED1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT_ShowTEST测试函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">void</span>  <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">Redraw_Mainmenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Num_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Font_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Color_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowImage</span><span class="token punctuation">(</span>gImage_qq<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏 </span>      <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"By delehub"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowNumber_Float_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">123.56</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"By 2020-11-5"</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"stm32 tft test "</span><span class="token punctuation">,</span>Red<span class="token punctuation">,</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: 主函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>        <span class="token function">Hareware_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">TFT_ShowTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="LCD-C"><a href="#LCD-C" class="headerlink" title="LCD.C"></a>LCD.C</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  包含的头文件    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"font.h"</span></span><span class="token comment" spellcheck="true">//#include "Picture.h"</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  宏自定义声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//初始化PB5和PE5为输出口</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  硬件端口定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  引用函数声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LCD_GPIO_Init</span><span class="token comment" spellcheck="true">//  函数说明: //液晶IO初始化配置</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">LCD_GPIO_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span> RCC_APB2Periph_GPIOB <span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0<span class="token operator">|</span> GPIO_Pin_10<span class="token operator">|</span> GPIO_Pin_1<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span> RCC_APB2Periph_GPIOA <span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_4<span class="token operator">|</span> GPIO_Pin_5<span class="token operator">|</span> GPIO_Pin_7<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: SPI_WriteData</span><span class="token comment" spellcheck="true">//  函数说明: 向SPI总线传输一个8位数据</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span>  <span class="token function">SPI_WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span>                LCD_SDA_SET<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出数据</span>            <span class="token keyword">else</span> LCD_SDA_CLR<span class="token punctuation">;</span>      LCD_SCL_CLR<span class="token punctuation">;</span>             LCD_SCL_SET<span class="token punctuation">;</span>      Data<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Lcd_WriteIndex</span><span class="token comment" spellcheck="true">//  函数说明: 向液晶屏写一个8位指令</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Index<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//SPI 写命令时序开始</span>   LCD_CS_CLR<span class="token punctuation">;</span>   LCD_RS_CLR<span class="token punctuation">;</span>     <span class="token function">SPI_WriteData</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>   LCD_CS_SET<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Lcd_WriteData</span><span class="token comment" spellcheck="true">//  函数说明: 向液晶屏写一个8位数据</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>   LCD_CS_CLR<span class="token punctuation">;</span>   LCD_RS_SET<span class="token punctuation">;</span>   <span class="token function">SPI_WriteData</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>   LCD_CS_SET<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LCD_WriteData_16Bit</span><span class="token comment" spellcheck="true">//  函数说明: 向液晶屏写一个16位数据</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//向液晶屏写一个16位数据</span><span class="token keyword">void</span> <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>   LCD_CS_CLR<span class="token punctuation">;</span>   LCD_RS_SET<span class="token punctuation">;</span>     <span class="token function">SPI_WriteData</span><span class="token punctuation">(</span>Data<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//写入高8位数据</span>     <span class="token function">SPI_WriteData</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//写入低8位数据</span>   LCD_CS_SET<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Lcd_WriteReg</span><span class="token comment" spellcheck="true">//  函数说明: 写寄存器内容函数</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteReg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Index<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Lcd_Reset</span><span class="token comment" spellcheck="true">//  函数说明: LCD复位</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Lcd_Reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    LCD_RST_CLR<span class="token punctuation">;</span>    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LCD_RST_SET<span class="token punctuation">;</span>    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Lcd_Init</span><span class="token comment" spellcheck="true">//  函数说明: LCD硬件初始化</span><span class="token comment" spellcheck="true">//  函数备注: //LCD Init For 1.44Inch LCD Panel with ST7735R.</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Lcd_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">LCD_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Reset before LCD Init.</span>    <span class="token comment" spellcheck="true">//LCD Init For 1.44Inch LCD Panel with ST7735R.</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Sleep exit </span>    <span class="token function">delay_ms</span> <span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ST7735R Frame Rate</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xB1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xB2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xB3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xB4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Column inversion </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//ST7735R Power Sequence</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0xA2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x84</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0xC5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x8A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x8A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0xEE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xC5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//VCOM </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//MX, MY, RGB mode </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//ST7735R Gamma Sequence</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x1b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x2e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x7f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x9f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xF0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Enable test command  </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0xF6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Disable ram power save mode </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x3A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//65k mode </span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Display on     </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************函数名：LCD_Set_Region功能：设置lcd显示区域，在此区域写点数据自动换行入口参数：xy起点和终点返回值：无*************************************************/</span><span class="token keyword">void</span> <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x_start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y_start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x_end<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y_end<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>x_start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Lcd_WriteData(x_start+2);</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>x_end<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>y_start<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>y_end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************函数名：LCD_Set_XY功能：设置lcd显示起始点入口参数：xy坐标返回值：无*************************************************/</span><span class="token keyword">void</span> <span class="token function">Lcd_SetXY</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************函数名：LCD_DrawPoint功能：画一个点入口参数：无返回值：无*************************************************/</span><span class="token keyword">void</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***************************************** 函数功能：读TFT某一点的颜色                           出口参数：color  点颜色值                                 ******************************************/</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">Lcd_ReadPoint</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Data<span class="token punctuation">;</span>  <span class="token function">Lcd_SetXY</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************函数名：Lcd_Clear功能：全屏清屏函数入口参数：填充颜色COLOR返回值：无*************************************************/</span><span class="token keyword">void</span> <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Color<span class="token punctuation">)</span>               <span class="token punctuation">{</span>       <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>m<span class="token punctuation">;</span>   <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>X_MAX_PIXEL<span class="token number">-1</span><span class="token punctuation">,</span>Y_MAX_PIXEL<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>X_MAX_PIXEL<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>Y_MAX_PIXEL<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>              <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: LCD_BGR2RGB</span><span class="token comment" spellcheck="true">//  函数说明: </span>  <span class="token comment" spellcheck="true">//读出的数据为GBR格式，而我们写入的时候为RGB格式。</span>  <span class="token comment" spellcheck="true">//通过该函数转换</span>  <span class="token comment" spellcheck="true">//c:GBR格式的颜色值</span>  <span class="token comment" spellcheck="true">//返回值：RGB格式的颜色值</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token function">LCD_BGR2RGB</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">,</span>rgb<span class="token punctuation">;</span>     b<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token operator">>></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x1f</span><span class="token punctuation">;</span>  g<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x3f</span><span class="token punctuation">;</span>  r<span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token operator">>></span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x1f</span><span class="token punctuation">;</span>       rgb<span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token operator">&lt;&lt;</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>g<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span><span class="token punctuation">(</span>rgb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_Circle</span><span class="token comment" spellcheck="true">//  函数说明: 画圆函数</span><span class="token comment" spellcheck="true">//  函数备注: Bresenham算法 </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_Circle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> R<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>     <span class="token keyword">int</span> c<span class="token punctuation">;</span>     a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     b<span class="token operator">=</span>R<span class="token punctuation">;</span>     c<span class="token operator">=</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>R<span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>a<span class="token punctuation">,</span>Y<span class="token operator">+</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        7 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>a<span class="token punctuation">,</span>Y<span class="token operator">+</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        6 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>a<span class="token punctuation">,</span>Y<span class="token operator">-</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        2 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>a<span class="token punctuation">,</span>Y<span class="token operator">-</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        3 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>b<span class="token punctuation">,</span>Y<span class="token operator">+</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        8 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>b<span class="token punctuation">,</span>Y<span class="token operator">+</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        5 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>b<span class="token punctuation">,</span>Y<span class="token operator">-</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        1 </span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>b<span class="token punctuation">,</span>Y<span class="token operator">-</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//        4 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> c<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>a<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             c<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>             b<span class="token operator">-</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        a<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>a<span class="token punctuation">,</span>Y<span class="token operator">+</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>a<span class="token punctuation">,</span>Y<span class="token operator">+</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>a<span class="token punctuation">,</span>Y<span class="token operator">-</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>a<span class="token punctuation">,</span>Y<span class="token operator">-</span>b<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>b<span class="token punctuation">,</span>Y<span class="token operator">+</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>b<span class="token punctuation">,</span>Y<span class="token operator">+</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">+</span>b<span class="token punctuation">,</span>Y<span class="token operator">-</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>X<span class="token operator">-</span>b<span class="token punctuation">,</span>Y<span class="token operator">-</span>a<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_DrawLine</span><span class="token comment" spellcheck="true">//  函数说明: 画线函数</span><span class="token comment" spellcheck="true">//  函数备注: 画线函数，使用Bresenham 画线算法</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x0<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Color<span class="token punctuation">)</span>   <span class="token punctuation">{</span>  <span class="token keyword">int</span> dx<span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">// difference in x's</span>      dy<span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">// difference in y's</span>      dx2<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// dx,dy * 2</span>      dy2<span class="token punctuation">,</span>       x_inc<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// amount in pixel space to move during drawing</span>      y_inc<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// amount in pixel space to move during drawing</span>      error<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// the discriminant i.e. error i.e. decision variable</span>      index<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// used for looping    </span>      <span class="token function">Lcd_SetXY</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">)</span><span class="token punctuation">;</span>      dx <span class="token operator">=</span> x1<span class="token operator">-</span>x0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算x距离</span>      dy <span class="token operator">=</span> y1<span class="token operator">-</span>y0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算y距离</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        x_inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        x_inc <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        dx    <span class="token operator">=</span> <span class="token operator">-</span>dx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>dy<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        y_inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">else</span>      <span class="token punctuation">{</span>        y_inc <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        dy    <span class="token operator">=</span> <span class="token operator">-</span>dy<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       dx2 <span class="token operator">=</span> dx <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>      dy2 <span class="token operator">=</span> dy <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dx <span class="token operator">></span> dy<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//x距离大于y距离，那么每个x轴上只有一个点，每个y轴上有若干个点</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//且线的点数等于x距离，以x轴递增画点</span>      <span class="token comment" spellcheck="true">// initialize error term</span>      error <span class="token operator">=</span> dy2 <span class="token operator">-</span> dx<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// draw the line</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> dx<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//要画的点数不会超过x距离</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//画点</span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// test if error has overflowed</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//是否需要增加y坐标值</span>        <span class="token punctuation">{</span>          error<span class="token operator">-</span><span class="token operator">=</span>dx2<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// move to next line</span>          y0<span class="token operator">+</span><span class="token operator">=</span>y_inc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加y坐标值</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end if error overflowed</span>        <span class="token comment" spellcheck="true">// adjust the error term</span>        error<span class="token operator">+</span><span class="token operator">=</span>dy2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// move to the next pixel</span>        x0<span class="token operator">+</span><span class="token operator">=</span>x_inc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x坐标值每次画点后都递增1</span>      <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end for</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end if |slope| &lt;= 1</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//y轴大于x轴，则每个y轴上只有一个点，x轴若干个点</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//以y轴为递增画点</span>      <span class="token comment" spellcheck="true">// initialize error term</span>      error <span class="token operator">=</span> dx2 <span class="token operator">-</span> dy<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// draw the line</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> dy<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// set the pixel</span>        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// test if error overflowed</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          error<span class="token operator">-</span><span class="token operator">=</span>dy2<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// move to next line</span>          x0<span class="token operator">+</span><span class="token operator">=</span>x_inc<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end if error overflowed</span>        <span class="token comment" spellcheck="true">// adjust the error term</span>        error<span class="token operator">+</span><span class="token operator">=</span>dx2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// move to the next pixel</span>        y0<span class="token operator">+</span><span class="token operator">=</span>y_inc<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end for</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end else |slope| > 1</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_box</span><span class="token comment" spellcheck="true">//  函数说明: 画矩形函数</span><span class="token comment" spellcheck="true">//  函数备注: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_box</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> w<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> h<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>w<span class="token number">-2</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>h<span class="token number">-2</span><span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Gui_box2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> w<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> h<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> mode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xEF7D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0x2965</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">,</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************************************************************功能描述: 在屏幕显示一凸起的按钮框输    入: unsigned short x1,y1,x2,y2 按钮框左上角和右下角坐标输    出: 无**************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">DisplayButtonDown</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>  x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span> GRAY2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> GRAY1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>  x1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> GRAY2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//V</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y2<span class="token punctuation">,</span> GRAY1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//V</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y2<span class="token punctuation">,</span>  x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>  x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//V</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************************************************************功能描述: 在屏幕显示一凹下的按钮框输    入: unsigned short x1,y1,x2,y2 按钮框左上角和右下角坐标输    出: 无**************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">DisplayButtonUp</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>  x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y1<span class="token punctuation">,</span>  x1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//V</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y2<span class="token number">-1</span><span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token number">-1</span><span class="token punctuation">,</span> GRAY1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>  y2<span class="token punctuation">,</span>  x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> GRAY2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//H</span>    <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x2<span class="token number">-1</span><span class="token punctuation">,</span>y1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token number">-1</span><span class="token punctuation">,</span>y2<span class="token punctuation">,</span> GRAY1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//V</span>  <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span>x2  <span class="token punctuation">,</span>y1  <span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span> GRAY2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//V</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_DrawFont_GBK16</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: fc:font Color  bc :background Color</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_GBK16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> k<span class="token punctuation">,</span>x0<span class="token punctuation">;</span>    x0<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span>     <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            k<span class="token operator">=</span><span class="token operator">*</span>s<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                x<span class="token operator">=</span>x0<span class="token punctuation">;</span>                y<span class="token operator">+</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">32</span><span class="token punctuation">)</span> k<span class="token operator">-</span><span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span> <span class="token keyword">else</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>asc16<span class="token punctuation">[</span>k<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span>                         <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>hz16_num<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hz16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>hz16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Index<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>hz16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Msk<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>hz16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Msk<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                 <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            s<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_DrawFont_GBK24</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: fc:font Color  bc :background Color</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_GBK24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">*</span>s <span class="token operator">&lt;</span> <span class="token number">0x80</span> <span class="token punctuation">)</span>         <span class="token punctuation">{</span>            k<span class="token operator">=</span><span class="token operator">*</span>s<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">32</span><span class="token punctuation">)</span> k<span class="token operator">-</span><span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span> <span class="token keyword">else</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>asc16<span class="token punctuation">[</span>k<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                     <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            s<span class="token operator">++</span><span class="token punctuation">;</span>x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>hz24_num<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hz24<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>hz24<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Index<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">24</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>hz24<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Msk<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                 <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>hz24<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Msk<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>hz24<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Msk<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                 <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            s<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: Gui_DrawFont_Num32</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//  函数备注: fc:font Color  bc :background Color</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_Num32</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            c<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>sz32<span class="token operator">+</span>num<span class="token operator">*</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">>></span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>k<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>fc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>        <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">!=</span>bc<span class="token punctuation">)</span>             <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span>x<span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>k<span class="token punctuation">,</span>y<span class="token operator">+</span>i<span class="token punctuation">,</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 定位光标</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X_Start - X起始坐标  取值范围 - 0~239</span><span class="token comment" spellcheck="true">//            Y_Start - Y起始坐标  取值范围 - 0~239</span><span class="token comment" spellcheck="true">//            X_End - X终止坐标  取值范围 - 0~239</span><span class="token comment" spellcheck="true">//            Y_End - Y终止坐标  取值范围 - 0~239</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_SetArea</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X_Start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y_Start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X_End<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y_End<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行相应操作</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (TFT_FUNCTION_SCREEEN_VH == 0)      </span><span class="token comment" spellcheck="true">// 竖屏</span>    <span class="token punctuation">{</span>        <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>X_Start<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>X_End<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Y_Start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Y_End<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (TFT_FUNCTION_SCREEEN_VH == 0)</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (TFT_FUNCTION_SCREEEN_VH == 1)      </span><span class="token comment" spellcheck="true">// 横屏 待调整</span>    <span class="token punctuation">{</span>        <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>X_Start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>X_End<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Y_Start<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span>Y_End<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (TFT_FUNCTION_SCREEEN_VH == 1)</span>    <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token number">0x2C</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示ASCII字符 08x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            ASCII - 待显示ASCII字符  取值范围 - ASCII字符</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> ASCII<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 定义局部变量 用于循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 定义局部变量 用于临时存储</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数</span>    FontCount <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_ASCII_08x16_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_ASCII_08x16_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 开始字库内容匹配                             </span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ASCII <span class="token operator">==</span> TFT_ASCII_08x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">TFT_SetArea</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> X<span class="token operator">+</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> Y<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置显示位置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 循环写入16字节 一个字符信息包含16字节</span>            <span class="token punctuation">{</span>                Data <span class="token operator">=</span> TFT_ASCII_08x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x80</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 判断最高位是否为1</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>FontColor<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 最高位为1 写入字符颜色</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 最高位为0 写入背景颜色</span>                    <span class="token punctuation">}</span>                    Data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 结束字库内容匹配                              </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示中文 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//            3. 1个汉字等同2个字节组成</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            Chinese - 待显示汉字  取值范围 - 单个汉字组成的字符串</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowChinese_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Chinese<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 定义局部变量 用于循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 定义局部变量 用于临时存储</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数    </span>    FontCount <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_CHINESE_16x16_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_CHINESE_16x16_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 开始字库内容匹配                             </span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>Chinese     <span class="token operator">==</span> TFT_CHINESE_16x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>Chinese<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> TFT_CHINESE_16x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">TFT_SetArea</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> X<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> Y<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置显示位置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 循环写入32字节 一个汉字信息包含32字节</span>            <span class="token punctuation">{</span>                Data <span class="token operator">=</span> TFT_CHINESE_16x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x80</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 判断最高位是否为1</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>FontColor<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 最高位为1 写入字符颜色</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 最高位为0 写入背景颜色</span>                    <span class="token punctuation">}</span>                    Data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 结束字库内容匹配                              </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示字符串 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            String - 待显示字符串  取值范围 - 字母/数字/符号/汉字混合组成的字符串</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 定义局部变量 用于标记字符串位置</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断字符串中的某字符的编码值是否小于0x80</span>        <span class="token comment" spellcheck="true">// 如果小于0x80 即为ASCII字符</span>        <span class="token comment" spellcheck="true">// 如果大于0x80 即为汉字字符串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>String <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示ASCII字符</span>            <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span>Position<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token operator">++</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>            Position<span class="token operator">++</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 字符串位置下一个位置</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示汉字</span>            <span class="token function">TFT_ShowChinese_16x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span>Position<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>String<span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>            Position<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 字符串位置下一个位置</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示中文 24x24像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//            3. 1个汉字等同2个字节组成</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            Chinese - 待显示汉字  取值范围 - 单个汉字组成的字符串</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowChinese_24x24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Chinese<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 定义局部变量 用于循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 定义局部变量 用于临时存储</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数    </span>    FontCount <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_CHINESE_24x24_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TFT_CHINESE_24x24_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 开始字库内容匹配                             </span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>Chinese     <span class="token operator">==</span> TFT_CHINESE_24x24_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>Chinese<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> TFT_CHINESE_24x24_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">TFT_SetArea</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> X<span class="token operator">+</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> Y<span class="token operator">+</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置显示位置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">72</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 循环写入32字节 一个汉字信息包含32字节</span>            <span class="token punctuation">{</span>                Data <span class="token operator">=</span> TFT_CHINESE_24x24_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x80</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 判断最高位是否为1</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>FontColor<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 最高位为1 写入字符颜色</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 最高位为0 写入背景颜色</span>                    <span class="token punctuation">}</span>                    Data <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 结束字库内容匹配                              </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示字符串 24x24像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            String - 待显示字符串  取值范围 - 字母/数字/符号/汉字混合组成的字符串</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowString_24x24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 定义局部变量 用于标记字符串位置</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断字符串中的某字符的编码值是否小于0x80</span>        <span class="token comment" spellcheck="true">// 如果小于0x80 即为ASCII字符</span>        <span class="token comment" spellcheck="true">// 如果大于0x80 即为汉字字符串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>String <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示ASCII字符</span>            <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span>Position<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token operator">++</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>            Position<span class="token operator">++</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 字符串位置下一个位置</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示汉字</span>            <span class="token function">TFT_ShowChinese_24x24</span><span class="token punctuation">(</span>X<span class="token operator">+</span>Position<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>String<span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>            Position<span class="token operator">+</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 字符串位置下一个位置</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示有符号整形数字 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成数字显示不完全</span><span class="token comment" spellcheck="true">//            2. 注意输入数字的取值范围</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            IntegerNumber - 待显示整型数字  取值范围 - -32767~+32768</span><span class="token comment" spellcheck="true">//            Count - 待显示整型数字长度      取值范围 - 1~5</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义局部数据 用于装载显示数据</span>    <span class="token comment" spellcheck="true">// 判断数字正负型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>IntegerNumber <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        IntegerNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">-</span>IntegerNumber<span class="token punctuation">;</span>        <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 限制显示字符数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 装载显示字符</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行显示操作</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示无符号整形数字 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成数字显示不完全</span><span class="token comment" spellcheck="true">//            2. 注意输入数字的取值范围</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            IntegerNumber - 待显示整型数字  取值范围 - -32767~+32768</span><span class="token comment" spellcheck="true">//            Count - 待显示整型数字长度      取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_UnsignedInteger_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义局部数据 用于装载显示数据</span>    <span class="token comment" spellcheck="true">// 限制 显示字符数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 装载显示字符</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行显示操作</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示浮点数字 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成数字显示不完全</span><span class="token comment" spellcheck="true">//            2. float型数据的有效数字7位 double型数据的有效数字16位</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            FloatNumber - 待显示浮点型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count1 - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            Count2 - 小数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_Float_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span> <span class="token keyword">float</span> FloatNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储整数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储小数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> Number_Integer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的 整数部分</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> Number_Decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的 小数部分</span>    <span class="token comment" spellcheck="true">// 判断数字正负型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>FloatNumber <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        FloatNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">-</span>FloatNumber<span class="token punctuation">;</span>        <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 限制 显示字符数</span>    <span class="token comment" spellcheck="true">// 由于由于float型的有效十进制数值最多为7位，即整数位 + 小数位 数量一定小于等于7</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">+</span> Count2 <span class="token operator">></span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Count1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算浮点数字的整数部分与小数部分</span>    Number_Integer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>FloatNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">// 取整数部分</span>    Number_Decimal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FloatNumber <span class="token operator">-</span> Number_Integer <span class="token operator">+</span> <span class="token number">0.000005</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 取小数部分，1e5科学计数法</span>    <span class="token comment" spellcheck="true">// 装载显示字符</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span><span class="token number">10000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 计算整数部分</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span><span class="token number">10000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 计算小数部分</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span>Count2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行显示操作</span>    <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>            Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span> X<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>Count1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span>                             FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>                                               <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span>Count1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: TFT 指定位置 显示二进制数字 16x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 注意输入数字的取值范围</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_X</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 详情见宏定义TFT_SHOWSIZE_Y</span><span class="token comment" spellcheck="true">//            BinaryNumber - 待显示二进制数字  取值范围 - 0~65535</span><span class="token comment" spellcheck="true">//            Count - 二进制显示位数  取值范围 - 1~16</span><span class="token comment" spellcheck="true">//            FontColor - 字体颜色  取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//            BackgroundColor - 背景颜色 取值范围 - 详情见枚举类型enumTFT_Color</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_Binary_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> BinaryNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量，用于函数循环计数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Count<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>BinaryNumber <span class="token operator">&amp;</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>Count<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 显示二进制字符'1'</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> FontColor<span class="token punctuation">,</span> BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 显示二进制字符'1'</span>        <span class="token punctuation">}</span>        BinaryNumber <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 移位运算</span>        X <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 数组位置下一个位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//取模方式 水平扫描 从左到右 低位在前</span><span class="token keyword">void</span> <span class="token function">TFT_ShowImage</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> picH<span class="token punctuation">,</span>picL<span class="token punctuation">;</span>    <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏  </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>           <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token operator">*</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token operator">*</span>k<span class="token punctuation">,</span><span class="token number">40</span><span class="token operator">*</span>j<span class="token operator">+</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//坐标设置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">40</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                     picL<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据低位在前</span>                picH<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span>picH<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span>picL<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token punctuation">}</span>             <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="LCD-H"><a href="#LCD-H" class="headerlink" title="LCD.H"></a>LCD.H</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __LCD_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __LCD_H     </span><span class="token comment" spellcheck="true">//////////////////////////////////////////////////////////////////////////////////     </span><span class="token comment" spellcheck="true">//本程序只供学习使用，未经作者许可，不得用于其它任何用途</span><span class="token comment" spellcheck="true">//  功能描述   : 1.8寸LCD 4接口演示例程(STM32系列)</span><span class="token comment" spellcheck="true">/******************************************************************************//本程序适用与STM32F103C8//              GND   电源地//              VCC   接5V或3.3v电源//              SCL   接PA5（SCL）//              SDA   接PA7（SDA）//              RES   接PB0//              DC    接PB1//              CS    接PA4 //                            BL        接PB10*******************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">define</span> X_MAX_PIXEL            128</span><span class="token macro property">#<span class="token directive keyword">define</span> Y_MAX_PIXEL            160</span><span class="token comment" spellcheck="true">//  TFT 功能选项</span><span class="token macro property">#<span class="token directive keyword">define</span> TFT_FUNCTION_SCREEEN_VH     0            </span><span class="token comment" spellcheck="true">// TFT功能选项 屏幕横竖 取值范围 - 0为默认竖屏 1为横屏</span><span class="token macro property">#<span class="token directive keyword">define</span> RED        0xf800</span><span class="token macro property">#<span class="token directive keyword">define</span> GREEN      0x07e0</span><span class="token macro property">#<span class="token directive keyword">define</span> BLUE       0x001f</span><span class="token macro property">#<span class="token directive keyword">define</span> WHITE      0xffff</span><span class="token macro property">#<span class="token directive keyword">define</span> BLACK      0x0000</span><span class="token macro property">#<span class="token directive keyword">define</span> YELLOW  0xFFE0</span><span class="token macro property">#<span class="token directive keyword">define</span> GRAY0   0xEF7D           </span><span class="token comment" spellcheck="true">//灰色0 3165 00110 001011 00101</span><span class="token macro property">#<span class="token directive keyword">define</span> GRAY1   0x8410          </span><span class="token comment" spellcheck="true">//灰色1      00000 000000 00000</span><span class="token macro property">#<span class="token directive keyword">define</span> GRAY2   0x4208          </span><span class="token comment" spellcheck="true">//灰色2  1111111111011111</span><span class="token comment" spellcheck="true">//  TFT 显示颜色 枚举</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> enumTFT_Color<span class="token punctuation">{</span>    White   <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 白色</span>    Black   <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 黑色</span>    Blue1   <span class="token operator">=</span> <span class="token number">0x001F</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 浅蓝色</span>    Blue2   <span class="token operator">=</span> <span class="token number">0x051F</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 深蓝色</span>    Red     <span class="token operator">=</span> <span class="token number">0xF800</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 红色</span>    Magenta <span class="token operator">=</span> <span class="token number">0xF81F</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 品红色</span>    Green   <span class="token operator">=</span> <span class="token number">0x07E0</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 绿色</span>    Cyan    <span class="token operator">=</span> <span class="token number">0x7FFF</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 青色</span>    Yellow  <span class="token operator">=</span> <span class="token number">0xFFE0</span><span class="token punctuation">,</span>                               <span class="token comment" spellcheck="true">// 黄色</span><span class="token punctuation">}</span>enumTFT_Color<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_CTRLA             GPIOA        </span><span class="token comment" spellcheck="true">//定义TFT数据端口</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_CTRLB             GPIOB        </span><span class="token comment" spellcheck="true">//定义TFT数据端口</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_SCL            GPIO_Pin_5    </span><span class="token comment" spellcheck="true">//PB13--->>TFT --SCL/SCK</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_SDA            GPIO_Pin_7    </span><span class="token comment" spellcheck="true">//PB15 MOSI--->>TFT --SDA/DIN</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_CS            GPIO_Pin_4  </span><span class="token comment" spellcheck="true">//MCU_PB11--->>TFT --CS/CE</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_LED            GPIO_Pin_10  </span><span class="token comment" spellcheck="true">//MCU_PB9--->>TFT --BL</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_RS             GPIO_Pin_1    </span><span class="token comment" spellcheck="true">//PB11--->>TFT --RS/DC</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_RST           GPIO_Pin_0    </span><span class="token comment" spellcheck="true">//PB10--->>TFT --RST</span><span class="token comment" spellcheck="true">//液晶控制口置1操作语句宏定义</span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_SCL_SET      LCD_CTRLA->BSRR=LCD_SCL    </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_SDA_SET      LCD_CTRLA->BSRR=LCD_SDA   </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_CS_SET      LCD_CTRLA->BSRR=LCD_CS  </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_LED_SET      LCD_CTRLB->BSRR=LCD_LED   </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_RS_SET      LCD_CTRLB->BSRR=LCD_RS </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_RST_SET      LCD_CTRLB->BSRR=LCD_RST </span><span class="token comment" spellcheck="true">//液晶控制口置0操作语句宏定义</span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_SCL_CLR      LCD_CTRLA->BRR=LCD_SCL  </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_SDA_CLR      LCD_CTRLA->BRR=LCD_SDA </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_CS_CLR      LCD_CTRLA->BRR=LCD_CS </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_LED_CLR      LCD_CTRLB->BRR=LCD_LED </span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_RST_CLR      LCD_CTRLB->BRR=LCD_RST</span><span class="token macro property">#<span class="token directive keyword">define</span>    LCD_RS_CLR      LCD_CTRLB->BRR=LCD_RS </span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_DATAOUT(x) LCD_DATA->ODR=x; </span><span class="token comment" spellcheck="true">//数据输出</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_DATAIN     LCD_DATA->IDR;   </span><span class="token comment" spellcheck="true">//数据输入</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_WR_DATA(data){\LCD_RS_SET;\LCD_CS_CLR;\LCD_DATAOUT(data);\LCD_WR_CLR;\LCD_WR_SET;\LCD_CS_SET;\} </span><span class="token keyword">void</span> <span class="token function">LCD_GPIO_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteIndex</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_WriteReg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Index<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token function">Lcd_ReadReg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> LCD_Reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_Reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_Clear</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_SetXY</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_DrawPoint</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">Lcd_ReadPoint</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Lcd_SetRegion</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x_start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y_start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x_end<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y_end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_WriteData_16Bit</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token function">LCD_BGR2RGB</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_Circle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> R<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">Gui_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x0<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Color<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">Gui_box</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> w<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> h<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_box2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> w<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> h<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DisplayButtonDown</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DisplayButtonUp</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_GBK16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_GBK24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Gui_DrawFont_Num32</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> fc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> num<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_SetArea</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X_Start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y_Start<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X_End<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y_End<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowImage</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  TFT 显示字符/汉字/字符串</span><span class="token keyword">void</span> <span class="token function">TFT_ShowASCII_08x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> ASCII<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowChinese_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Chinese<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowString_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowChinese_24x24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Chinese<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  TFT 显示有符号整型/无符号整型/浮点型数字</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_SignedInteger_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_UnsignedInteger_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_Float_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">float</span> FloatNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_ShowNumber_Binary_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> BinaryNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">,</span> enumTFT_Color FontColor<span class="token punctuation">,</span> enumTFT_Color BackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h4 id="工程下载地址"><a href="#工程下载地址" class="headerlink" title="工程下载地址"></a>工程下载地址</h4><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20201105224710603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="汉字 数字"><br><img src="https://img-blog.csdnimg.cn/20201105224710613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="字符串 数字 字符 浮点数"><br><img src="https://img-blog.csdnimg.cn/20201105224710572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="数码管字体"><br><img src="https://img-blog.csdnimg.cn/20201105224710563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="框架 汉字显示"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> 嵌入式 STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> 嵌入式STM32 </tag>
            
            <tag> 野火F1系列开发板 </tag>
            
            <tag> TFT液晶显示屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020电子设计竞赛F题</title>
      <link href="/2020/10/16/2020-dian-zi-she-ji-jing-sai-f-ti/"/>
      <url>/2020/10/16/2020-dian-zi-she-ji-jing-sai-f-ti/</url>
      
        <content type="html"><![CDATA[<video id="video" controls="" preload="none" width="800px" height="500px" poster="https://res.nuedc-training.com.cn/s/png/2019/01/26/bbs_201901266708.png"><source id="mp4" src="https://player.bilibili.com/player.html?aid=244995234&bvid=BV1Bv411k7ZV&cid=245900724&page=1" type="video/mp4"></video>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>野火F1开发板STM32案例 0.96 oled综合库使用</title>
      <link href="/2020/10/07/ye-huo-f1-kai-fa-ban-stm32-an-li-0.96-oled-zong-he-ku-shi-yong/"/>
      <url>/2020/10/07/ye-huo-f1-kai-fa-ban-stm32-an-li-0.96-oled-zong-he-ku-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="野火F1开发板STM32案例-MultiButton移植"><a href="#野火F1开发板STM32案例-MultiButton移植" class="headerlink" title="野火F1开发板STM32案例-MultiButton移植"></a><strong>野火F1开发板STM32案例-MultiButton移植</strong></h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板</li><li>0.96 IIC  oled模块<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2></li><li>Keil MDK 5.31</li><li>串口调试助手</li></ol><h2 id="IIC总线"><a href="#IIC总线" class="headerlink" title="IIC总线"></a>IIC总线</h2><p>处理器和芯片间的通信可以形象的比喻成两个人讲话：1、你说的别人得能听懂：双方约定信号的协议。2、你的语速别人得能接受：双方满足时序要求。 <br> 一、IIC总线的信号类型 <br> <img src="https://img-blog.csdn.net/20160331152600089" alt="开始和停止信号" title=""> <br> 1、开始信号：处理器让SCL时钟保持高电平，然后让SDA数据信号由高变低就表示一个开始信号。同时IIC总线上的设备检测到这个开始信号它就知道处理器要发送数据了。</p> </p><p>2、停止信号：处理器让SCL时钟保持高电平，然后让SDA数据信号由低变高就表示一个停止信号。同时IIC总线上的设备检测到这个停止信号它就知道处理器已经结束了数据传输，我们就可以各忙各个的了，如休眠等。 <br> 二、IIC数据传输过程 <br> 、<img src="https://img-blog.csdn.net/20160331153143263" alt="IIC数据传输" title=""> <br> 1、在数据传输时，SDA的数据在SCL为高电平时，必须保持稳定，SCL高电平器件完成数据的传输。在SCL低电平器件，可以任意改变SDA的数据。数据写入过程是从最好为开始，高位在前，低位在后，即MSB。 <br> 2、响应信号（ACK）：接收器在接收到8位数据后，在第9个时钟周期，拉低SDA电平。即接收数据的IC在接收到8bit数据后，向发送数据的IC发出特定的低电平脉冲，表示已收到数据。CPU向受控单元发出一个信号后，等待受控单元发出一个应答信号，CPU接收到应答信号后，根据实际情况作出是否继续传递信号的判断。若未收到应答信号，由判断为受控单元出现故障。 <br> 3、数据写入的过程 <br> <img src="https://img-blog.csdn.net/20160331153850250" alt="写入数据过程" title=""> <br> 首先发送一个开始信号，接着发送从机地址，OLED的从机地址前7位为地址，最后一位表示读(1)或者写(0)。应答ACK信号表示有这个从设备存在。在接收到应答信号后，发送控制位，来区分之后所发送的数据是控制命令还是显示相关的数据。在发送控制位后，等待应答信号。然后发送相应的控制命令或者数据。最后发送停止信号，表示数据传输完成。</p> <h2 id="bsp-oled-c"><a href="#bsp-oled-c" class="headerlink" title="bsp_oled.c"></a>bsp_oled.c</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//  功能描述   : 0.96寸OLED 接口演示例程(STM32F103ZE系列IIC)</span><span class="token comment" spellcheck="true">//              说明: </span><span class="token comment" spellcheck="true">//              ----------------------------------------------------------------</span><span class="token comment" spellcheck="true">//              GND   电源地</span><span class="token comment" spellcheck="true">//              VCC   接5V或3.3v电源</span><span class="token comment" spellcheck="true">//              SCL   接PD6（SCL）</span><span class="token comment" spellcheck="true">//              SDA   接PD7（SDA）            </span><span class="token comment" spellcheck="true">//              --------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"oled.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdlib.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"oledfont.h"</span>       </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"math.h"</span></span><span class="token comment" spellcheck="true">//OLED的显存</span><span class="token comment" spellcheck="true">//存放格式如下.</span><span class="token comment" spellcheck="true">//[0]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[1]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[2]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[3]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[4]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[5]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[6]0 1 2 3 ... 127    </span><span class="token comment" spellcheck="true">//[7]0 1 2 3 ... 127             </span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> OLED_GRAM<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> OLED_GRAM_TEMP<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**********************************************//IIC Start**********************************************/</span><span class="token keyword">void</span> <span class="token function">IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_SCLK_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token function">OLED_SDIN_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_SDIN_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_SCLK_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********************************************//IIC Stop**********************************************/</span><span class="token keyword">void</span> <span class="token function">IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">OLED_SCLK_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token function">OLED_SDIN_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_SDIN_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_SCLK_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token function">OLED_SCLK_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********************************************// IIC Write byte**********************************************/</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Byte<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> message<span class="token punctuation">,</span>dat<span class="token punctuation">;</span>    dat<span class="token operator">=</span>IIC_Byte<span class="token punctuation">;</span>    <span class="token function">OLED_SCLK_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>      message<span class="token operator">=</span>dat<span class="token punctuation">;</span>      message<span class="token operator">=</span>message<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>message<span class="token operator">==</span><span class="token number">0x80</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">OLED_SDIN_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        <span class="token function">OLED_SDIN_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          dat<span class="token operator">=</span>dat<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">OLED_SCLK_Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">OLED_SCLK_Clr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********************************************// IIC Write Command**********************************************/</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Command</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Command<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Slave address,SA0=0</span>     <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//write command</span>     <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span>IIC_Command<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********************************************// IIC Write Data**********************************************/</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Data<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">IIC_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//D/C#=0; R/W#=0</span>     <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//write data</span>     <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span>IIC_Data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">IIC_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//OLED_WR_Byte(写数据，写命令)</span><span class="token comment" spellcheck="true">// OLED_WR_Byte-->Write_IIC_Data</span><span class="token comment" spellcheck="true">// OLED_WR_Byte-->Write_IIC_Command</span><span class="token comment" spellcheck="true">/*#define OLED_CMD  0    //写命令#define OLED_DATA 1    //写数据 */</span><span class="token keyword">void</span> <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> dat<span class="token punctuation">,</span><span class="token keyword">unsigned</span> cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token function">Write_IIC_Data</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>   <span class="token punctuation">{</span>    <span class="token function">Write_IIC_Command</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/********************************************// fill_Picture********************************************/</span><span class="token keyword">void</span> <span class="token function">fill_picture</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> fill_Data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>m<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//page0-page1</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//low column start address</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//high column start address</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>fill_Data<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************Delay****************************************/</span><span class="token keyword">void</span> <span class="token function">Delay_50ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Delay_50ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>Delay_50ms<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>Delay_50ms<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">6245</span><span class="token punctuation">;</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Delay_1ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Delay_1ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> count<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Delay_1ms<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">123</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化SSD1306                        </span><span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          GPIO_InitTypeDef  GPIO_InitStructure<span class="token punctuation">;</span>     <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使能PC,D,G端口时钟</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_9<span class="token operator">|</span>GPIO_Pin_10<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//PD3,PD6推挽输出  </span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//推挽输出</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//速度50MHz</span>     <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//初始化GPIOD3,6</span>     <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>GPIO_Pin_9<span class="token operator">|</span>GPIO_Pin_10<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//PD3,PD6 输出高</span>  <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xAE</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--display off</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//---set low column address</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//---set high column address</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--set start line address  </span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xB0</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--set page address</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// contract control</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--128   </span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xA1</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set segment remap </span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xA6</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--normal / reverse</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xA8</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--set multiplex ratio(1 to 64)</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x3F</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--1/32 duty</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xC8</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Com scan direction</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xD3</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-set display offset</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xD5</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set osc division</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xD8</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set area color mode off</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x05</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xD9</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Set Pre-Charge Period</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xF1</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xDA</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set com pin configuartion</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xDB</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set Vcomh</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x8D</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set charge pump enable</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xAF</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--turn on oled panel</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//更新显存到LCD         </span><span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    u8 i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>i<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置页地址（0~7）</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置―列低地址</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置―列高地址   </span>        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>OLED_GRAM<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: OLED 外设驱动函数部分</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: 无</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//-------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//开启OLED显示    </span><span class="token keyword">void</span> <span class="token function">OLED_Display_On</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0X8D</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//SET DCDC命令</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0X14</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DCDC ON</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0XAF</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DISPLAY ON</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关闭OLED显示     </span><span class="token keyword">void</span> <span class="token function">OLED_Display_Off</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0X8D</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//SET DCDC命令</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0X10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DCDC OFF</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0XAE</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DISPLAY OFF</span><span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!      </span><span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      uint8_t count<span class="token punctuation">,</span>num<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>count<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置页地址（0~7）</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置—列低地址</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置—列高地址</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>num<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//更新显示</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_On</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      uint8_t count<span class="token punctuation">,</span>num<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>count<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置页地址（0~7）</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置—列低地址</span>        <span class="token function">OLED_WR_Byte</span> <span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置显示位置—列高地址</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>num<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//更新显示</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_Fill，填充整个屏幕  * @param  fill_Data:要填充的数据    * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_Fill</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> fill_Data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//全屏填充</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>m<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//page0-page1</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//low column start address</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//high column start address</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>fill_Data<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//显示汉字</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 显示汉字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            Chinese - 待显示汉字  取值范围 - 单个汉字组成的字符串</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Chinese<span class="token punctuation">)</span><span class="token punctuation">{</span>                          <span class="token keyword">unsigned</span> <span class="token keyword">char</span> count<span class="token punctuation">,</span>adder<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>CHinese<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>Chinese<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>    adder<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>CHinese<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>Chinese<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>    adder<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED_Set_Pos 定位光标</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>Y<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token operator">&amp;</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token operator">&amp;</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 清除屏幕区域内容</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            X_Size - X方向尺寸  取值范围 - 1~127</span><span class="token comment" spellcheck="true">//            Y_Size - Y方向尺寸  取值范围 - 1~  7</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_AreaClear</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> X_Size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y_Size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token punctuation">(</span>Y_Size<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 遍历每一行</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 设置显示坐标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>X_Size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">// 遍历每一列</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示字符 06x08像素</span><span class="token comment" spellcheck="true">//  函数标记: 应用函数 已完成 </span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            Char - 待写字符   取值范围 - ASCII字符</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数</span>    FontCount<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 遍历每一字库</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Char <span class="token operator">==</span> OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 设置显示坐标</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 遍历每一列</span>            <span class="token punctuation">{</span>                <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示字符串 06x08像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//            3. 06x08像素不能显示汉字 只能显示ASCII字符</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            String - 待显示字符串  取值范围 - ASCII字符串</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowString_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span>                                  <span class="token comment" spellcheck="true">// 判断字符串是否为空 </span>    <span class="token punctuation">{</span>        <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 指定位置显示字符</span>        String<span class="token operator">++</span><span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>        X<span class="token operator">+</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// X坐标移动下一个位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示字符 08x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 应用函数 已完成 </span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            Char - 待显示字符  取值范围 - ASCII字符</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数</span>    FontCount<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_08x16_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_08x16_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 循环查询字符字模位置</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Char <span class="token operator">==</span> OLED_ASCII_08x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 设置显示坐标 用于显示字符</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>OLED_ASCII_08x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置显示坐标 用于显示字符</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>OLED_ASCII_08x16_FontCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED 指定位置 显示中文 16x16像素</span><span class="token comment" spellcheck="true">////  函数标记: 应用函数 已完成 </span><span class="token comment" spellcheck="true">////  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">////            2. 如果字库不存在该文字则不显示</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">////            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">////            Chinese - 待显示汉字  取值范围 - 单个汉字组成的字符串</span><span class="token comment" spellcheck="true">////  输出参量: 无</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">//void OLED_ShowChinese_16x16(unsigned char X, unsigned char Y, unsigned char *Chinese)</span><span class="token comment" spellcheck="true">//{</span><span class="token comment" spellcheck="true">//    unsigned char i;                                // 定义局部变量 用于函数循环计数</span><span class="token comment" spellcheck="true">//    unsigned char j;                                // 定义局部变量 用于函数循环计数</span><span class="token comment" spellcheck="true">//    unsigned char FontCount;                        // 定义局部变量 用于记录字符字库个数</span><span class="token comment" spellcheck="true">//    // 断言检查参数</span><span class="token comment" spellcheck="true">//    </span><span class="token comment" spellcheck="true">//    FontCount=sizeof(OLED_CHINESE_16x16_FontCode)/sizeof(OLED_CHINESE_16x16_FontCode[0]);</span><span class="token comment" spellcheck="true">//    for(i=0; i&lt;FontCount; i++)                      // 循环查询字符字模位置</span><span class="token comment" spellcheck="true">//    {</span><span class="token comment" spellcheck="true">//        if ((*Chinese     == OLED_CHINESE_16x16_FontCode[i].Char[0])</span><span class="token comment" spellcheck="true">//        &amp;&amp;  (*(Chinese+1) == OLED_CHINESE_16x16_FontCode[i].Char[1]))</span><span class="token comment" spellcheck="true">//        {</span><span class="token comment" spellcheck="true">//            OLED_SetArea(X,Y);                      // 设置显示坐标 用于显示字符</span><span class="token comment" spellcheck="true">//            for(j=0; j&lt;16; j++)</span><span class="token comment" spellcheck="true">//            {</span><span class="token comment" spellcheck="true">//                OLED_WR_Byte(OLED_CHINESE_16x16_FontCode[i].Code[j],OLED_DATA);</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            OLED_SetArea(X,Y+1);                    // 设置显示坐标 用于显示字符</span><span class="token comment" spellcheck="true">//            for(j=16; j&lt;32; j++)</span><span class="token comment" spellcheck="true">//            {</span><span class="token comment" spellcheck="true">//                OLED_WR_Byte(OLED_CHINESE_16x16_FontCode[i].Code[j],OLED_DATA);</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            break;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示中英文混合字符串 08x16像素</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 目前能显示英文和汉字混合字符串</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            String - 待显示字符串  取值范围 - ASCII和汉字混合字符串</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowString_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 定义局部变量 用于标记字符串位置</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断字符串中的某字符的编码值是否小于0x80</span>        <span class="token comment" spellcheck="true">// 如果小于0x80 即为ASCII字符</span>        <span class="token comment" spellcheck="true">// 如果大于0x80 即为汉字字符串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>String <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示ASCII字符</span>            <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span>X<span class="token operator">+</span>Position<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token operator">++</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// 字符串指针移动下一个字节</span>            Position<span class="token operator">++</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 字符串位置下一个位置</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            // 显示汉字</span><span class="token comment" spellcheck="true">//            OLED_ShowChinese_16x16(X+Position*8, Y, (unsigned char*)String);</span><span class="token comment" spellcheck="true">//            String+=2;                              // 字符串指针移动下一个字节</span><span class="token comment" spellcheck="true">//            Position+=2;                            // 字符串位置下一个位置</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> k<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> FontCount<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 定义局部变量 用于记录字符字库个数</span>    FontCount<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>FontCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">// 循环查询字符字模位置</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>Array <span class="token operator">==</span> OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Char<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 设置显示坐标 用于显示字符</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Array<span class="token operator">++</span><span class="token punctuation">;</span>        X <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 数组位置下一个位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示有符号整形数字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1.最大显示5位数字 位置选取不恰当 可能造成数字显示不完全</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            IntegerNumber - 待显示整型数字 取值范围 - -32767~+32768</span><span class="token comment" spellcheck="true">//            Count - 待显示整型数字长度     取值范围 - 0~5；</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_SignedInteger_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 定义局部数组 用于数组数据存储</span>    <span class="token comment" spellcheck="true">// 判断 整型数字正负</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>IntegerNumber <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        IntegerNumber<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">-</span> IntegerNumber<span class="token punctuation">;</span>        <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行显示操作</span>    <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示无符号整形数字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1.最大显示5位数字 位置选取不恰当 可能造成数字显示不完全</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            IntegerNumber - 待显示整型数字 取值范围 - -32767~+32768</span><span class="token comment" spellcheck="true">//            Count - 待显示整型数字长度     取值范围 - 0~5；</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_UnsignedInteger_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 定义局部数组 用于数组数据存储</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行显示操作</span>    <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>IntegerNumber_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示06x08大小的浮点数字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: float型数据有效数字显示7位 double型数据有效数字16位</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            FloatNumber - 待显示浮点型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count1 - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            Count2 - 小数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Float_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">float</span> FloatNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储整数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储小数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Number_Integer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的 整数部分</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Number_Decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的 小数部分</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>FloatNumber <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        FloatNumber<span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> FloatNumber<span class="token punctuation">;</span>        <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 限制 显示字符数</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 由于由于float型的有效十进制数值最多为7位 即整数位 + 小数位 数量一定小于等于7</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">+</span> Count2 <span class="token operator">></span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Count1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Number_Integer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>FloatNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">// 取整数部分</span>    Number_Decimal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FloatNumber <span class="token operator">-</span> Number_Integer <span class="token operator">+</span> <span class="token number">0.000005</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取小数部分 1e5科学计数法</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span><span class="token number">10000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 计算整数部分</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span><span class="token number">10000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 计算小数部分</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">,</span>            Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span><span class="token punctuation">,</span> Count1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 显示整数位</span>    <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span> X<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>Count1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// 显示小数点</span>    <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span>Count1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        Count2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 显示小数位</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示06x08大小的二进制数字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 显示8位二进制数字 主要作为寄存器数据显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            BinaryNumber - 待显示二进制数字  取值范围 - 0~4294967295</span><span class="token comment" spellcheck="true">//            Count - 二进制显示位数  取值范围 - 1~16</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Binary_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> BinaryNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Count<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>BinaryNumber <span class="token operator">&amp;</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>Count<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示二进制字符'1'</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 显示二进制字符'1'</span>        <span class="token punctuation">}</span>        BinaryNumber <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 移位运算</span>        X <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 数组位置下一个位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 显示06x08大小的十六进制数字</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 1. 位置选取不恰当 可能造成字符串显示不完全</span><span class="token comment" spellcheck="true">//            2. 显示8位二进制数字 主要作为寄存器数据显示</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            BinaryNumber - 待显示二进制数字  取值范围 - 0~4294967295</span><span class="token comment" spellcheck="true">//            Count - 二进制显示位数  取值范围 - 1~8</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Hex_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> HexNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环计数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Number<span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// 定义局部变量 用于装载数据</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Count<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number <span class="token operator">=</span> HexNumber<span class="token operator">>></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0000000F</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token operator">+</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token operator">+</span><span class="token punctuation">(</span>Number<span class="token number">-10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        X <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 数组位置下一个位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 绘制直线数据</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 该点为8个像素的竖线 并非实际像素点</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            PointData - 直线数据  取值范围 - 0~255</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> PointData<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xB0</span><span class="token operator">+</span>Y<span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X <span class="token operator">&amp;</span> <span class="token number">0xF0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x10</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> <span class="token number">0x0F</span><span class="token punctuation">)</span>     <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>PointData<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  实现功能: OLED 指定位置 绘制图像 Draw_BMP</span><span class="token comment" spellcheck="true">//  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: X - X方向坐标  取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y - Y方向坐标  取值范围 - 0~  7</span><span class="token comment" spellcheck="true">//            X_Size - X方向尺寸大小 取值范围 - 0~127</span><span class="token comment" spellcheck="true">//            Y_Size - Y方向尺寸大小 取值范围 - 0~7</span><span class="token comment" spellcheck="true">//            Image - 图像数据</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">/*功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7*****************/</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">Draw_BMP</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> BMP<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Y1<span class="token operator">%</span><span class="token number">8</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> y<span class="token operator">=</span>Y1<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> y<span class="token operator">=</span>Y1<span class="token operator">/</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span>Y0<span class="token punctuation">;</span>y<span class="token operator">&lt;</span>Y1<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span>X0<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span>X0<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>X1<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                  <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span>BMP<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED 指定位置 画点</span><span class="token comment" spellcheck="true">////  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">////  函数说明: </span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: //画点 </span><span class="token comment" spellcheck="true">//              //x:0~127</span><span class="token comment" spellcheck="true">//              //y:0~63</span><span class="token comment" spellcheck="true">//              //t:1 填充 0,清空    </span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_DrawDot</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> T<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> pos<span class="token punctuation">,</span>bx<span class="token punctuation">,</span>temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>X<span class="token operator">></span><span class="token number">127</span><span class="token operator">||</span>Y<span class="token operator">></span><span class="token number">63</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        pos<span class="token operator">=</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>        bx<span class="token operator">=</span>Y<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span>        temp<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>bx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> OLED_GRAM<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token keyword">else</span> OLED_GRAM<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token operator">=</span><span class="token operator">~</span>temp<span class="token punctuation">;</span>        <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED LCD_DrawLine画直线函数</span><span class="token comment" spellcheck="true">////  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">////  函数说明: </span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: unsigned int X1,  直线：俩点坐标(x1,y1  ,(x2,y2)</span><span class="token comment" spellcheck="true">////            unsigned int Y1, </span><span class="token comment" spellcheck="true">////            unsigned int X2,</span><span class="token comment" spellcheck="true">////            unsigned int Y2，</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> X2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> t<span class="token punctuation">;</span>     <span class="token keyword">int</span> xerr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>yerr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>delta_x<span class="token punctuation">,</span>delta_y<span class="token punctuation">,</span>distance<span class="token punctuation">;</span>     <span class="token keyword">int</span> incx<span class="token punctuation">,</span>incy<span class="token punctuation">,</span>uRow<span class="token punctuation">,</span>uCol<span class="token punctuation">;</span>    delta_x<span class="token operator">=</span>X2<span class="token operator">-</span>X1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算坐标增量 </span>    delta_y<span class="token operator">=</span>Y2<span class="token operator">-</span>Y1<span class="token punctuation">;</span>     uRow<span class="token operator">=</span>X1<span class="token punctuation">;</span>     uCol<span class="token operator">=</span>Y1<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>delta_x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    incx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置单步方向 </span>  <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>delta_x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    incx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//垂直线 </span>  <span class="token punctuation">}</span>    <span class="token keyword">else</span>   <span class="token punctuation">{</span>     incx<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     delta_x<span class="token operator">=</span><span class="token operator">-</span>delta_x<span class="token punctuation">;</span>  <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>delta_y<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    incy<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>delta_y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    incy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//水平线 </span>    <span class="token keyword">else</span>  <span class="token punctuation">{</span>    incy<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    delta_y<span class="token operator">=</span><span class="token operator">-</span>delta_y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> delta_x<span class="token operator">></span>delta_y<span class="token punctuation">)</span>    distance<span class="token operator">=</span>delta_x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//选取基本增量坐标轴 </span>    <span class="token keyword">else</span>     distance<span class="token operator">=</span>delta_y<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>distance<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//画线输出 </span>    <span class="token punctuation">{</span>          <span class="token function">OLED_DrawDot</span><span class="token punctuation">(</span>uRow<span class="token punctuation">,</span>uCol<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画点 </span>        xerr<span class="token operator">+</span><span class="token operator">=</span>delta_x <span class="token punctuation">;</span>         yerr<span class="token operator">+</span><span class="token operator">=</span>delta_y <span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>xerr<span class="token operator">></span>distance<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             xerr<span class="token operator">-</span><span class="token operator">=</span>distance<span class="token punctuation">;</span>             uRow<span class="token operator">+</span><span class="token operator">=</span>incx<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>yerr<span class="token operator">></span>distance<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             yerr<span class="token operator">-</span><span class="token operator">=</span>distance<span class="token punctuation">;</span>             uCol<span class="token operator">+</span><span class="token operator">=</span>incy<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">////================================================================================================== </span><span class="token comment" spellcheck="true">/** * @brief  在 oled 显示器上使用 Bresenham 算法画圆 * @param  usX_Center ：在特定扫描方向下圆心的X坐标 * @param  usY_Center ：在特定扫描方向下圆心的Y坐标 * @param  usRadius：圆的半径（单位：像素） * @param  ucFilled ：选择是否填充该圆  *   该参数为以下值之一：  *     @arg 0 :空心圆  *     @arg 1 :实心圆 * @retval 无 */</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_DrawCircle</span><span class="token punctuation">(</span> uint16_t usX_Center<span class="token punctuation">,</span> uint16_t usY_Center<span class="token punctuation">,</span> uint16_t usRadius<span class="token punctuation">,</span> uint8_t ucFilled <span class="token punctuation">)</span><span class="token punctuation">{</span>    int16_t sCurrentX<span class="token punctuation">,</span> sCurrentY<span class="token punctuation">;</span>    int16_t sError<span class="token punctuation">;</span>    sCurrentX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> sCurrentY <span class="token operator">=</span> usRadius<span class="token punctuation">;</span>          sError <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span> usRadius <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//判断下个点位置的标志</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> sCurrentX <span class="token operator">&lt;=</span> sCurrentY <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int16_t sCountY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> ucFilled <span class="token punctuation">)</span>                         <span class="token keyword">for</span> <span class="token punctuation">(</span> sCountY <span class="token operator">=</span> sCurrentX<span class="token punctuation">;</span> sCountY <span class="token operator">&lt;=</span> sCurrentY<span class="token punctuation">;</span> sCountY <span class="token operator">++</span> <span class="token punctuation">)</span>             <span class="token punctuation">{</span>                                      <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCountY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//1，研究对象 </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCountY<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//2       </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCountY<span class="token punctuation">,</span>   usY_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//3</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCountY<span class="token punctuation">,</span>   usY_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//4</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCountY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//5    </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCountY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//6</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCountY<span class="token punctuation">,</span>   usY_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//7     </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCountY<span class="token punctuation">,</span>   usY_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//0                </span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>        <span class="token punctuation">{</span>                          <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCurrentY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//1，研究对象</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCurrentY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//2      </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentY<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//3</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentY<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//4</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCurrentY<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//5       </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCurrentY<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//6</span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentY<span class="token punctuation">,</span> usY_Center <span class="token operator">-</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//7 </span>                <span class="token function">OLED_DrawDot</span> <span class="token punctuation">(</span> usX_Center <span class="token operator">+</span> sCurrentY<span class="token punctuation">,</span> usY_Center <span class="token operator">+</span> sCurrentX<span class="token punctuation">,</span>OLED_DATA <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//0</span>    <span class="token punctuation">}</span>                            sCurrentX <span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> sError <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>             sError <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> sCurrentX <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>              <span class="token keyword">else</span>        <span class="token punctuation">{</span>            sError <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span> sCurrentX <span class="token operator">-</span> sCurrentY <span class="token punctuation">)</span><span class="token punctuation">;</span>               sCurrentY <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>             <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED LCD_DrawRectangle</span><span class="token comment" spellcheck="true">////  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">////  函数说明: </span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: unsigned int X1,  长度 宽度：俩点坐标(x1,y1  ,(x2,y2)</span><span class="token comment" spellcheck="true">////            unsigned int Y1, </span><span class="token comment" spellcheck="true">////            unsigned int X2,</span><span class="token comment" spellcheck="true">////            unsigned int Y2，</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">LCD_DrawRectangle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> X2<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>X1<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span>X2<span class="token punctuation">,</span>Y1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>X1<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span>X1<span class="token punctuation">,</span>Y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>X1<span class="token punctuation">,</span>Y2<span class="token punctuation">,</span>X2<span class="token punctuation">,</span>Y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span>X2<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span>X2<span class="token punctuation">,</span>Y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED OLED_Fill_Draw_circle //画圆填充</span><span class="token comment" spellcheck="true">////  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">////  函数说明: </span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: //写画实心圆心(x0,y0),半径r，dot=1填充，dot=0不填充</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_Fill_Draw_circle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> r<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> dot<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">unsigned</span> <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>R <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>x <span class="token operator">=</span> X0<span class="token operator">-</span>r<span class="token punctuation">;</span>x <span class="token operator">&lt;=</span> X0<span class="token operator">+</span>r<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>y <span class="token operator">=</span> Y0<span class="token operator">-</span>r<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> Y0<span class="token operator">+</span>r <span class="token punctuation">;</span>y<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>                    R <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token operator">-</span>X0<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>Y0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//圆方程  x,y反置        </span>                    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> Y0 <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> Y0 <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">2</span><span class="token operator">*</span>Y0<span class="token operator">-</span>R <span class="token punctuation">)</span><span class="token operator">||</span> dot <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//点限制在 圆方程内    </span>            <span class="token function">OLED_DrawDot</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>dot<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token comment" spellcheck="true">////  实现功能: OLED_RollDisplay</span><span class="token comment" spellcheck="true">////  函数标记: 外设驱动函数</span><span class="token comment" spellcheck="true">////  函数说明: //水平滚动</span><span class="token comment" spellcheck="true">////  函数完成情况：有问题</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  输入参量: 无</span><span class="token comment" spellcheck="true">////--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">////  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">////==================================================================================================</span><span class="token keyword">void</span> <span class="token function">OLED_RollDisplay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x2E</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭滚动</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//水平向左或者右滚动 2A/29</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//虚拟字节</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//起始页 0</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//滚动时间间隔</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//终止页 7</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//虚拟字节</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//虚拟字节</span>        <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token number">0x2F</span><span class="token punctuation">,</span>OLED_CMD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启滚动</span><span class="token punctuation">}</span></code></pre><h3 id="oled-h"><a href="#oled-h" class="headerlink" title="oled.h"></a>oled.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __OLED_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __OLED_H                   </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdlib.h"</span>     </span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_MODE 0</span><span class="token macro property">#<span class="token directive keyword">define</span> SIZE 8</span><span class="token macro property">#<span class="token directive keyword">define</span> XLevelL        0x00</span><span class="token macro property">#<span class="token directive keyword">define</span> XLevelH        0x10</span><span class="token macro property">#<span class="token directive keyword">define</span> Max_Column    128</span><span class="token macro property">#<span class="token directive keyword">define</span> Max_Row        64</span><span class="token macro property">#<span class="token directive keyword">define</span>    Brightness    0xFF </span><span class="token macro property">#<span class="token directive keyword">define</span> X_WIDTH     128</span><span class="token macro property">#<span class="token directive keyword">define</span> Y_WIDTH     64       </span><span class="token comment" spellcheck="true">//-----------------OLED IIC端口定义----------------                         </span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_SCLK_Clr() GPIO_ResetBits(GPIOB,GPIO_Pin_9)</span><span class="token comment" spellcheck="true">//SDA IIC接口的时钟信号</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_SCLK_Set() GPIO_SetBits(GPIOB,GPIO_Pin_9)</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_SDIN_Clr() GPIO_ResetBits(GPIOB,GPIO_Pin_10)</span><span class="token comment" spellcheck="true">//SCL IIC接口的数据信号</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_SDIN_Set() GPIO_SetBits(GPIOB,GPIO_Pin_10)</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_CMD  0    </span><span class="token comment" spellcheck="true">//写命令</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_DATA 1    </span><span class="token comment" spellcheck="true">//写数据   </span><span class="token comment" spellcheck="true">//OLED控制用函数</span><span class="token keyword">void</span> <span class="token function">OLED_WR_Byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> dat<span class="token punctuation">,</span><span class="token keyword">unsigned</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">OLED_Display_On</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_Display_Off</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  <span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_Clear</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oled 延迟函数</span><span class="token keyword">void</span> <span class="token function">Delay_50ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Delay_50ms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Delay_1ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Delay_1ms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IIC控制函数</span><span class="token keyword">void</span> <span class="token function">IIC_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IIC_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Command</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_IIC_Byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> IIC_Byte<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IIC_Wait_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oled 操作函数</span><span class="token keyword">void</span> <span class="token function">OLED_Fill</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> fill_Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全屏填充</span><span class="token keyword">void</span> <span class="token function">OLED_Refresh_Gram</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_Set_Pos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_AreaClear</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> X_Size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y_Size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED 显示字符、字符串</span><span class="token keyword">void</span> <span class="token function">OLED_ShowChar_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowString_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowCHinese</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Chinese<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示汉字函数</span><span class="token keyword">void</span> <span class="token function">OLED_ShowChar_08x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//void OLED_ShowChinese_16x16(unsigned char X, unsigned char Y, unsigned char *Chinese);</span><span class="token keyword">void</span> <span class="token function">OLED_ShowString_16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowArray_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED 显示整型数字/浮点型数字/二进制数字/十六进制数字</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_SignedInteger_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_UnsignedInteger_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> IntegerNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Float_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">float</span> FloatNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Binary_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> BinaryNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowNumber_Hex_06x08</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> BinaryNumber<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED 绘制直线</span><span class="token keyword">void</span> <span class="token function">OLED_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> PointData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  OLED 绘制图像</span><span class="token keyword">void</span> <span class="token function">OLED_RollDisplay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置水平左右移</span><span class="token keyword">void</span> <span class="token function">Draw_BMP</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> BMP<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_DrawDot</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画点函数</span><span class="token keyword">void</span> <span class="token function">LCD_DrawLine</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> X2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//画直线函数</span><span class="token keyword">void</span> <span class="token function">OLED_Fill_Draw_circle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> r<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> dot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dot ==1 表示亮显示出来</span><span class="token keyword">void</span> <span class="token function">OLED_DrawCircle</span><span class="token punctuation">(</span> uint16_t usX_Center<span class="token punctuation">,</span> uint16_t usY_Center<span class="token punctuation">,</span> uint16_t usRadius<span class="token punctuation">,</span> uint8_t ucFilled <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ucFilled ==1 表示填充 //画直圆函数</span><span class="token keyword">void</span> <span class="token function">LCD_DrawRectangle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> X1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> X2<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> Y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//矩形</span><span class="token macro property">#<span class="token directive keyword">endif</span>  </span></code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __OLEDFONT_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __OLEDFONT_H        </span><span class="token comment" spellcheck="true">//常用ASCII表</span><span class="token comment" spellcheck="true">//偏移量32</span><span class="token comment" spellcheck="true">//ASCII字符集</span><span class="token comment" spellcheck="true">//偏移量32</span><span class="token comment" spellcheck="true">//大小:12*6</span><span class="token comment" spellcheck="true">/************************************6*8的点阵************************************/</span><span class="token keyword">const</span> <span class="token keyword">struct</span> struct_OLED_ASCII_06x08                <span class="token comment" spellcheck="true">// 结构体定义</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 编码 ASCII字符由1个字节组成</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Code<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 编码内容</span><span class="token punctuation">}</span> OLED_ASCII_06x08_FontCode<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token operator">=</span>        <span class="token punctuation">{</span>    <span class="token string">' '</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//  （空格）</span>    <span class="token string">'!'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// !</span>    <span class="token string">'"'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// "</span>    <span class="token string">'#'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x14</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// #</span>    <span class="token string">'$'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0x12</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// $</span>    <span class="token string">'%'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// %</span>    <span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// &amp;</span>   <span class="token string">'\''</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// '</span>    <span class="token string">'('</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// (</span>    <span class="token string">')'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// )</span>    <span class="token string">'*'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x14</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// *</span>    <span class="token string">'+'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// +</span>    <span class="token string">','</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ,</span>    <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// -</span>    <span class="token string">'.'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// .</span>    <span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x02</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// /</span>    <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x3E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 0</span>    <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 1</span>    <span class="token string">'2'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x46</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 2</span>    <span class="token string">'3'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x31</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 3</span>    <span class="token string">'4'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 4</span>    <span class="token string">'5'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x39</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 5</span>    <span class="token string">'6'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 6</span>    <span class="token string">'7'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x03</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 7</span>    <span class="token string">'8'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x36</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 8</span>    <span class="token string">'9'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x1E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 9</span>    <span class="token string">':'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// :</span>    <span class="token string">';'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ;</span>    <span class="token string">'&lt;'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// &lt;</span>    <span class="token string">'='</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// =</span>    <span class="token string">'>'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x08</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ></span>    <span class="token string">'?'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x06</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ?</span>    <span class="token string">'@'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x3E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// @</span>    <span class="token string">'A'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x7C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// A</span>    <span class="token string">'B'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x36</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// B</span>    <span class="token string">'C'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// C</span>    <span class="token string">'D'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x1C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// D</span>    <span class="token string">'E'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x41</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// E</span>    <span class="token string">'F'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x01</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// F</span>    <span class="token string">'G'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x7A</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// G</span>    <span class="token string">'H'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x7F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// H</span>    <span class="token string">'I'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// I</span>    <span class="token string">'J'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x01</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// J</span>    <span class="token string">'K'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x41</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// K</span>    <span class="token string">'L'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// L</span>    <span class="token string">'M'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// M</span>    <span class="token string">'N'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x7F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// N</span>    <span class="token string">'O'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x3E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// O</span>    <span class="token string">'P'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x06</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// P</span>    <span class="token string">'Q'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x5E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// Q</span>    <span class="token string">'R'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x46</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// R</span>    <span class="token string">'S'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x31</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// S</span>    <span class="token string">'T'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// T</span>    <span class="token string">'U'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x3F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// U</span>    <span class="token string">'V'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x1F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// V</span>    <span class="token string">'W'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x3F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// W</span>    <span class="token string">'X'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x63</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// X</span>    <span class="token string">'Y'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x07</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// Y</span>    <span class="token string">'Z'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x43</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// Z</span>    <span class="token string">'['</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// [</span>    <span class="token string">']'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ]</span>    <span class="token string">'^'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x04</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// ^</span>    <span class="token string">'_'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// _</span>    <span class="token string">'`'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// `</span>    <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x78</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// a</span>    <span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x38</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// b</span>    <span class="token string">'c'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// c</span>    <span class="token string">'d'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x7F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// d</span>    <span class="token string">'e'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// e</span>    <span class="token string">'f'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// f</span>    <span class="token string">'g'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x7C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// g</span>    <span class="token string">'h'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x78</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// h</span>    <span class="token string">'i'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// i</span>    <span class="token string">'j'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// j</span>    <span class="token string">'k'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// k</span>    <span class="token string">'l'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// l</span>    <span class="token string">'m'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x78</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// m</span>    <span class="token string">'n'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x78</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// n</span>    <span class="token string">'o'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x38</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// o</span>    <span class="token string">'p'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// p</span>    <span class="token string">'q'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xFC</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// q</span>    <span class="token string">'r'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x08</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// r</span>    <span class="token string">'s'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// s</span>    <span class="token string">'t'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// t</span>    <span class="token string">'u'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x7C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// u</span>    <span class="token string">'v'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x1C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// v</span>    <span class="token string">'w'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x3C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// w</span>    <span class="token string">'x'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x44</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// x</span>    <span class="token string">'y'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x7C</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// y</span>    <span class="token string">'z'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x44</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// z</span>    <span class="token string">'|'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x14</span> <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// |</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/****************************************8*16的点阵************************************/</span><span class="token keyword">const</span> <span class="token keyword">struct</span> struct_OLED_ASCII_08x16                <span class="token comment" spellcheck="true">// 结构体定义</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 编码 ASCII字符由1个字节组成</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Code<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 编码内容</span><span class="token punctuation">}</span> OLED_ASCII_08x16_FontCode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>      <span class="token punctuation">{</span>  <span class="token string">' '</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//  （空格）</span>    <span class="token string">'!'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// !</span>    <span class="token string">'"'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// "</span>    <span class="token string">'#'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// #</span>    <span class="token string">'$'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// $</span>    <span class="token string">'%'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// %</span>    <span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// &amp;</span>   <span class="token string">'\''</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// '</span>    <span class="token string">'('</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// (</span>    <span class="token string">')'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// )</span>    <span class="token string">'*'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// *</span>    <span class="token string">'+'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// +</span>    <span class="token string">','</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xB0</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ,</span>    <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// -</span>    <span class="token string">'.'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// .</span>    <span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// /</span>    <span class="token string">'0'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 0</span>    <span class="token string">'1'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 1</span>    <span class="token string">'2'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 2</span>    <span class="token string">'3'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 3</span>    <span class="token string">'4'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 4</span>    <span class="token string">'5'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 5</span>    <span class="token string">'6'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 6</span>    <span class="token string">'7'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 7</span>    <span class="token string">'8'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 8</span>    <span class="token string">'9'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 9</span>    <span class="token string">':'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// :</span>    <span class="token string">';'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ;</span>    <span class="token string">'&lt;'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// &lt;</span>    <span class="token string">'='</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// =</span>    <span class="token string">'>'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ></span>    <span class="token string">'?'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ?</span>    <span class="token string">'@'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x0B</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// @</span>    <span class="token string">'A'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// A</span>    <span class="token string">'B'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// B</span>    <span class="token string">'C'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// C</span>    <span class="token string">'D'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// D</span>    <span class="token string">'E'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// E</span>    <span class="token string">'F'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// F</span>    <span class="token string">'G'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// G</span>    <span class="token string">'H'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// H</span>    <span class="token string">'I'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// I</span>    <span class="token string">'J'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// J</span>    <span class="token string">'K'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// K</span>    <span class="token string">'L'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// L</span>    <span class="token string">'M'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// M</span>    <span class="token string">'N'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// N</span>    <span class="token string">'O'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// O</span>    <span class="token string">'P'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// P</span>    <span class="token string">'Q'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Q</span>    <span class="token string">'R'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// R</span>    <span class="token string">'S'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// S</span>    <span class="token string">'T'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// T</span>    <span class="token string">'U'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// U</span>    <span class="token string">'V'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// V</span>    <span class="token string">'W'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// W</span>    <span class="token string">'X'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// X</span>    <span class="token string">'Y'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Y</span>    <span class="token string">'Z'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Z</span>    <span class="token string">'['</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// [</span>    <span class="token string">']'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ]</span>    <span class="token string">'^'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ^</span>    <span class="token string">'_'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// _</span>    <span class="token string">'`'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// `</span>    <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// a</span>    <span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// b</span>    <span class="token string">'c'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// c</span>    <span class="token string">'d'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// d</span>    <span class="token string">'e'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// e</span>    <span class="token string">'f'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// f</span>    <span class="token string">'g'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// g</span>    <span class="token string">'h'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// h</span>    <span class="token string">'i'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// i</span>    <span class="token string">'j'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// j</span>    <span class="token string">'k'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x2D</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// k</span>    <span class="token string">'l'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// l</span>    <span class="token string">'m'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// m</span>    <span class="token string">'n'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// n</span>    <span class="token string">'o'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// o</span>    <span class="token string">'p'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xA1</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// p</span>    <span class="token string">'q'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xA0</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x80</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// q</span>    <span class="token string">'r'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// r</span>    <span class="token string">'s'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// s</span>    <span class="token string">'t'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// t</span>    <span class="token string">'u'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// u</span>    <span class="token string">'v'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// v</span>    <span class="token string">'w'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// w</span>    <span class="token string">'x'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x2E</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// x</span>    <span class="token string">'y'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x81</span><span class="token punctuation">,</span><span class="token number">0x8E</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// y</span>    <span class="token string">'z'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// z</span>    <span class="token string">'{'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// {</span>    <span class="token string">'|'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// |</span>    <span class="token string">'}'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token string">'~'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ~</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span> CHinese<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"中",0*/</span><span class="token punctuation">{</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"景",1*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"园",2*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x9F</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"电",3*/</span><span class="token punctuation">{</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0xE2</span><span class="token punctuation">,</span><span class="token number">0xA2</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"子",4*/</span><span class="token punctuation">{</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0xA3</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0xCC</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"科",5*/</span><span class="token punctuation">{</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x81</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"?",0*/</span><span class="token punctuation">{</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"专",0*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"业",1*/</span><span class="token punctuation">{</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x81</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"技",2*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xD0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0xD0</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"术",3*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0xA2</span><span class="token punctuation">,</span><span class="token number">0x9E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x2F</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"服",4*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x8C</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1A</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"务",5*/</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0xB4</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0xB4</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*"商",6*/</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p><img src="https://img-blog.csdnimg.cn/20201007144525770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="oled 画点 画直线  画圆现象"><br><img src="https://img-blog.csdnimg.cn/20201007144525768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="oled 显示 字符串 整形数字 浮点数 "><br><img src="https://img-blog.csdnimg.cn/20201007144525767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="oled 显示图片"><br><img src="https://img-blog.csdnimg.cn/20201007144525721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="oled 显示 汉字 字符串 字符"><br><img src="https://img-blog.csdnimg.cn/20201007144525708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="oled 显示 汉字 不同大小的字符串 圆 矩形  有符号数字 "></p><h4 id="博客地址https-delehub-vercel-app"><a href="#博客地址https-delehub-vercel-app" class="headerlink" title="博客地址https://delehub.vercel.app/"></a>博客地址<a href="https://delehub.vercel.app/">https://delehub.vercel.app/</a></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STM32应用 TFT ILI9328液晶显示</title>
      <link href="/2020/10/04/stm32-ying-yong-tft-ili9328-ye-jing-xian-shi/"/>
      <url>/2020/10/04/stm32-ying-yong-tft-ili9328-ye-jing-xian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32F103C8T6-TFTILI9328液晶显示屏使用教程"><a href="#STM32F103C8T6-TFTILI9328液晶显示屏使用教程" class="headerlink" title="STM32F103C8T6 TFTILI9328液晶显示屏使用教程"></a>STM32F103C8T6 TFTILI9328液晶显示屏使用教程</h1><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>STM32F103C8T6 TFTILI9328 ST-LINKV2下载 杜帮线</p><h5 id="STMF103C8T6"><a href="#STMF103C8T6" class="headerlink" title="STMF103C8T6"></a>STMF103C8T6</h5><p><img src="https://img-blog.csdnimg.cn/20200723202459983.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="TFTILI9328液晶显示屏"><a href="#TFTILI9328液晶显示屏" class="headerlink" title="TFTILI9328液晶显示屏"></a>TFTILI9328液晶显示屏</h5><p><img src="https://img-blog.csdnimg.cn/20200723202522373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="硬件连接-按照下面代码连接"><a href="#硬件连接-按照下面代码连接" class="headerlink" title="硬件连接(按照下面代码连接)"></a>硬件连接(按照下面代码连接)</h5><p><img src="https://img-blog.csdnimg.cn/20200723202522298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>TFT.C</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/****************************************************************************************************  文件功能描述：320x240TFT驱动程序，控制TFT实现汉字,字符显示,画点功能。****************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>                   </span><span class="token comment" spellcheck="true">//STM32器件寄存器定义头文件，必须包含</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"user_Config.h"</span>                  </span><span class="token comment" spellcheck="true">//用户配置头文件，用于配置硬件连接资源,位于项目文件夹下</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Ascii_8x16.h"</span>                  </span><span class="token comment" spellcheck="true">//8x16大小字符</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Chinese.h"</span>                     </span><span class="token comment" spellcheck="true">//16x16像素大小的汉字</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/**************声明外部函数和变量**************extern unsigned int Device_code;/****************************************************************************************************//    实现功能：    延时//    输入参数：    count 设置延时时间****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>                                                                                    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                                                                           <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">0x640</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>                                                                                     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    写命令//    输入参数：  DH 需要输入16bits命令的高8位//              DL 需要输入16bits命令的低8位****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Write_Cmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DH<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DL<span class="token punctuation">)</span><span class="token punctuation">{</span>    CS_CLR<span class="token punctuation">;</span>    RS_CLR<span class="token punctuation">;</span>    RD_SET<span class="token punctuation">;</span>    RW_CLR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意：当使用8位数据口驱动16位数据模式时，使用74HC573作为IO扩展，程序如下           </span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>DataPort<span class="token punctuation">,</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">(</span>DL <span class="token operator">|</span> <span class="token number">0xff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//送低8位命令给573待锁存</span>    LE_SET<span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">//锁存位</span>    LE_CLR<span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">//断开锁存,位选573的Q7~Q0仍保持           </span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>DataPort<span class="token punctuation">,</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">(</span>DH <span class="token operator">|</span> <span class="token number">0xff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//送高8位命令给TFT</span>    <span class="token comment" spellcheck="true">/*    //如果使用16位数据口驱动16位数据模式，则无需IO扩展，直接将数据送到数据口即可    DataPort_L=DL;     DataPort_H=DH;    */</span>    RW_SET<span class="token punctuation">;</span>    CS_SET<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    写数据(2*8bits)//    输入参数：  DH 需要输入16bits数据的高8位//              DL 需要输入16bits数据的低8位****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Write_Data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DH<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DL<span class="token punctuation">)</span><span class="token punctuation">{</span>    CS_CLR<span class="token punctuation">;</span>    RS_SET<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意：当使用8位数据口驱动16位数据模式时，使用74HC573作为IO扩展，程序如下           </span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>DataPort<span class="token punctuation">,</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">(</span>DL <span class="token operator">|</span> <span class="token number">0xff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//送低8位命令给573待锁存</span>    LE_SET<span class="token punctuation">;</span>                                                           <span class="token comment" spellcheck="true">//锁存位</span>    LE_CLR<span class="token punctuation">;</span>                                                           <span class="token comment" spellcheck="true">//断开锁存,位选573的Q7~Q0仍保持           </span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>DataPort<span class="token punctuation">,</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">(</span>DH <span class="token operator">|</span> <span class="token number">0xff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//送高8位命令给TFT</span>    <span class="token comment" spellcheck="true">/*    //如果使用16位数据口驱动16位数据模式，则无需IO扩展，直接将数据送到数据口即可    DataPort_L=DL;     DataPort_H=DH;    */</span>    RW_CLR<span class="token punctuation">;</span>    RW_SET<span class="token punctuation">;</span>    CS_SET<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    写数据(16位)//    输入参数：  y 需要输入16bits数据****************************************************************************************************/</span><span class="token keyword">void</span>  <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    m<span class="token operator">=</span>y<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">;</span>    n<span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token function">Write_Data</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    向x寄存器写入y数据//    输入参数：  x 需要输入的命令 16位//              y 需要输入的数据 16位****************************************************************************************************/</span><span class="token keyword">void</span>  <span class="token function">Write_Cmd_Data</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    m<span class="token operator">=</span>y<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">;</span>    n<span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token function">Write_Cmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Data</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    设置坐标//  输入参数：  x0，y0 起始坐标//              x1，y1 结束坐标****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span>x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Horizontal GRAM Start Address</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">,</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Horizontal GRAM End Address</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x52</span><span class="token punctuation">,</span>y0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x53</span><span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span>x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// GRAM horizontal Address</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">,</span>y0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// GRAM Vertical Address</span>  <span class="token function">Write_Cmd</span> <span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x0022,Start to Write Data to GRAM </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    TFT清屏//    输入参数：    bColor 清屏所使用的背景色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">CLR_Screen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token comment" spellcheck="true">//320x240，坐标从0开始</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">320</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">240</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>bColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    显示Ascii字符//  输入参数：  x 横坐标//              y 纵坐标//                c 需要显示的字符//                fColor 字符颜色//                bColor 字符背景颜色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>     <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//设置字符显示位置</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>                             <span class="token comment" spellcheck="true">//循环写入16字节，一个字符为16字节</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m<span class="token operator">=</span>Font8x16<span class="token punctuation">[</span><span class="token punctuation">(</span>c<span class="token number">-0x20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//提取c字符的第i个字节以,c减去0x20是由于Ascii码库中的0~1f被去掉</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//循环写入8位，一个字节为8位</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x80</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//判断最高位是否为1</span>                        <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>fColor<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//最高位为1，写入字符颜色</span>                    <span class="token punctuation">}</span>                <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>bColor<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//最高位为0，写入背景颜色</span>                    <span class="token punctuation">}</span>                m<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//左移1位，准备写下一位</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    显示16x16汉字//  输入参数： x 横坐标//            y 纵坐标//                g 需要显示的字符编码//                fColor 字符颜色//                bColor 字符背景颜色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Put16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> g<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>  x<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//设置汉字显示位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">64</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                                      <span class="token comment" spellcheck="true">//循环64次，查询汉字字模位置</span>    <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>GBK<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>ch16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>GBK<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//判断第k个汉字的编码是否与输入汉字g[2]相等</span>      <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                                   <span class="token comment" spellcheck="true">//如果相等，既已找到待显示字模位置，循环写入32字节</span>        <span class="token punctuation">{</span>          <span class="token keyword">unsigned</span> <span class="token keyword">short</span> m<span class="token operator">=</span>ch16<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>hz16<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//读取32字节中的第i字节</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                                      <span class="token comment" spellcheck="true">//循环写入8位数据</span>           <span class="token punctuation">{</span>                                                             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>fColor<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//判断最高位是否为1,最高位为1，写入字符颜色</span>             <span class="token keyword">else</span>              <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>bColor<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//最高位为0，写入背景颜色</span>             m<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                                             <span class="token comment" spellcheck="true">//左移1位，准备写下一位</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    显示中英文字符串//  输入参数： x 横坐标//            y 纵坐标//                *s 待显示的字符串,例如LCD_PutString(24,16,"123Eee",White,Blue);即把"123Eee"的第一个字符地址赋给指针变量s.//                bColor 字符背景颜色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//显示屏位置增量</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">*</span>s <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>                                     <span class="token comment" spellcheck="true">//判断s指向的字符串中的某字符的编码值是否小于128,如果小于,即为ASCII字符</span>            <span class="token punctuation">{</span>             <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span>x<span class="token operator">+</span>l<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">,</span>fColor<span class="token punctuation">,</span>bColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//显示该字符</span>             s<span class="token operator">++</span><span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//指针加1,位置加1</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token punctuation">{</span>             <span class="token function">Put16x16</span><span class="token punctuation">(</span>x<span class="token operator">+</span>l<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token punctuation">,</span>fColor<span class="token punctuation">,</span>bColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//显示该汉字</span>             s<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>l<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">//因为汉字为编码为2字节，指针加2,显示16x16所以位置加2</span>            <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    指定位置显示RGB颜色//  输入参数： x0，y0 起始坐标//            x1，y1 结束坐标//                Color  背景颜色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Show_RGB</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//横屏这里要进行坐标变换，如果是竖屏，则直接是x0,x1,y0,y1做参数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span>y0<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>y1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>x0<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>x1<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    TFT初始化****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">TFT_Initial</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          RST_SET<span class="token punctuation">;</span>        <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// Delay 1ms </span>    RST_CLR<span class="token punctuation">;</span>      <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// Delay 10ms            </span>    RST_SET<span class="token punctuation">;</span>      <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">// Delay 50 ms  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Device_code<span class="token operator">==</span><span class="token number">0x9320</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/************* Start Initial Sequence **********/</span><span class="token operator">/</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//Set the OSC bit as ‘1’ to start the internal oscillator</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x0100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// set SS and SM bit</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x0700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// set 1 line inversion</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x1030</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//set GRAM Write direction and BGR=1</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// Resize register</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x0202</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// set the back porch and front porch</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// set non-display area refresh cycle ISC[3:0]</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// FMARK function</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// RGB interface setting</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0D</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// Frame marker Position</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// RGB interface polarity</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/*************Power On sequence ****************/</span><span class="token operator">/</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x16b0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// SAP, BT[3:0], AP, DSTB, SLP, STB</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x0007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Write final user’s setting values to VC bit</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x013a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set Internal reference voltage</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x1a00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// VDV[4:0] for VCOM amplitude</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x000c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Set VCM[5:0] for VCOMH</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Delay 50ms</span>    <span class="token comment" spellcheck="true">// ----------- Adjust the Gamma Curve ----------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0030</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0031</span><span class="token punctuation">,</span> <span class="token number">0x0505</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0032</span><span class="token punctuation">,</span> <span class="token number">0x0304</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0035</span><span class="token punctuation">,</span> <span class="token number">0x0006</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0036</span><span class="token punctuation">,</span> <span class="token number">0x0707</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0037</span><span class="token punctuation">,</span> <span class="token number">0x0105</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0038</span><span class="token punctuation">,</span> <span class="token number">0x0002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0039</span><span class="token punctuation">,</span> <span class="token number">0x0707</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003C</span><span class="token punctuation">,</span> <span class="token number">0x0704</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003D</span><span class="token punctuation">,</span> <span class="token number">0x0807</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//------------------ Set GRAM area ---------------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0050</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0051</span><span class="token punctuation">,</span> <span class="token number">0x00EF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM End Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0052</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0053</span><span class="token punctuation">,</span> <span class="token number">0x013F</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0060</span><span class="token punctuation">,</span> <span class="token number">0x2700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Gate Scan Line</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0061</span><span class="token punctuation">,</span> <span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NDL,VLE, REV</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x006A</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set scrolling line</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// GRAM horizontal Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// GRAM Vertical Address</span>    <span class="token comment" spellcheck="true">//-------------- Partial Display Control ---------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0080</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0081</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0082</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0083</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0084</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0085</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//-------------- Panel Control ---------//</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x0010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Panel Interface Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0x0003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Panel Interface Contral 3. </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x95</span><span class="token punctuation">,</span><span class="token number">0x0110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x97</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral.     </span>    <span class="token comment" spellcheck="true">//-------------- Display on ---------//</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x0173</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Device_code<span class="token operator">==</span><span class="token number">0x1505</span> <span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/************* Start Initial Sequence **********/</span><span class="token operator">/</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Set the OSC bit as ‘1’ to start the internal oscillator</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x0100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set SS and SM bit</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x0700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set 1 line inversion</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x1030</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//set GRAM Write direction and BGR=1</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Resize register</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x0202</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set the back porch and front porch</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set non-display area refresh cycle ISC[3:0]</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// FMARK function</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// RGB interface setting</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0D</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Frame marker Position</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// RGB interface polarity</span>  <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/*************Power On sequence ****************/</span><span class="token operator">/</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x16b0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// SAP, BT[3:0], AP, DSTB, SLP, STB</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x0007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Write final user’s setting values to VC bit</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x013a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// set Internal reference voltage</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x1a00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// VDV[4:0] for VCOM amplitude</span>  <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x000c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Set VCM[5:0] for VCOMH</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Delay 50ms</span>    <span class="token comment" spellcheck="true">// ----------- Adjust the Gamma Curve ----------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0030</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0031</span><span class="token punctuation">,</span> <span class="token number">0x0505</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0032</span><span class="token punctuation">,</span> <span class="token number">0x0304</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0035</span><span class="token punctuation">,</span> <span class="token number">0x0006</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0036</span><span class="token punctuation">,</span> <span class="token number">0x0707</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0037</span><span class="token punctuation">,</span> <span class="token number">0x0105</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0038</span><span class="token punctuation">,</span> <span class="token number">0x0002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0039</span><span class="token punctuation">,</span> <span class="token number">0x0707</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003C</span><span class="token punctuation">,</span> <span class="token number">0x0704</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003D</span><span class="token punctuation">,</span> <span class="token number">0x0807</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//------------------ Set GRAM area ---------------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0050</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0051</span><span class="token punctuation">,</span> <span class="token number">0x00EF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM End Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0052</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0053</span><span class="token punctuation">,</span> <span class="token number">0x013F</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0060</span><span class="token punctuation">,</span> <span class="token number">0x2700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Gate Scan Line</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0061</span><span class="token punctuation">,</span> <span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NDL,VLE, REV</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x006A</span><span class="token punctuation">,</span> <span class="token number">0x2700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set scrolling line</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// GRAM horizontal Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// GRAM Vertical Address</span>    <span class="token comment" spellcheck="true">//-------------- Partial Display Control ---------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0080</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0081</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0082</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0083</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0084</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0085</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//-------------- Panel Control ---------//</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x0010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Panel Interface Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0x0003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Panel Interface Contral 3. </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x95</span><span class="token punctuation">,</span><span class="token number">0x0110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x97</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Frame Cycle Contral.     </span>    <span class="token comment" spellcheck="true">//-------------- Display on ---------//</span>  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x0173</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Device_code<span class="token operator">==</span><span class="token number">0x9328</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token operator">/</span><span class="token comment" spellcheck="true">/************* Start Initial Sequence **********/</span><span class="token operator">/</span>     <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">,</span><span class="token number">0x0100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//set SS and SM bit //设置扫描方向  100</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0002</span><span class="token punctuation">,</span><span class="token number">0x0700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//EOR=1 and B/C=1 to set the line inversion  //设置行反转</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0003</span><span class="token punctuation">,</span><span class="token number">0x1030</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//set Entry Mode  //设置进入模式    1030</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0004</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x00A4</span><span class="token punctuation">,</span><span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0008</span><span class="token punctuation">,</span><span class="token number">0x0202</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set the back porch and front porch</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0009</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set non-display area refresh cycle ISC[3:0]</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x000A</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// FMARK function</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x000C</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// RGB interface setting</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x000D</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Frame marker Position</span>   <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x000F</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// RGB interface polarity</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/*************Power On sequence ****************/</span><span class="token operator">/</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0010</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SAP, BT[3:0], AP, DSTB, SLP, STB </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0011</span><span class="token punctuation">,</span> <span class="token number">0x0007</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// DC1[2:0], DC0[2:0], VC[2:0]</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0012</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// VREG1OUT voltage</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0013</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// VDV[4:0] for VCOM amplitude </span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0010</span><span class="token punctuation">,</span> <span class="token number">0x1690</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SAP, BT[3:0], AP, DSTB, SLP, STB </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0011</span><span class="token punctuation">,</span> <span class="token number">0x0227</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R11h=0x0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0]</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0012</span><span class="token punctuation">,</span> <span class="token number">0x001C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// External reference voltage= Vci;</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0013</span><span class="token punctuation">,</span> <span class="token number">0x1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R13=1200 when R12=009D;VDV[4:0] for VCOM amplitude</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0029</span><span class="token punctuation">,</span> <span class="token number">0x001C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R29=000C when R12=009D;VCM[5:0] for VCOMH</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x002B</span><span class="token punctuation">,</span> <span class="token number">0x000D</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Frame Rate = 91Hz</span>    <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0020</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// GRAM horizontal Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0021</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// GRAM Vertical Address</span><span class="token comment" spellcheck="true">// ----------- Adjust the Gamma Curve ----------//          </span>      <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0030</span><span class="token punctuation">,</span> <span class="token number">0x0007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0031</span><span class="token punctuation">,</span> <span class="token number">0x0302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0032</span><span class="token punctuation">,</span> <span class="token number">0x0105</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0035</span><span class="token punctuation">,</span> <span class="token number">0x0206</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0036</span><span class="token punctuation">,</span> <span class="token number">0x0808</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0037</span><span class="token punctuation">,</span> <span class="token number">0x0206</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0038</span><span class="token punctuation">,</span> <span class="token number">0x0504</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0039</span><span class="token punctuation">,</span> <span class="token number">0x0007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003C</span><span class="token punctuation">,</span> <span class="token number">0x0105</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x003D</span><span class="token punctuation">,</span> <span class="token number">0x0808</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//------------------ Set GRAM area ---------------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0050</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM Start Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0051</span><span class="token punctuation">,</span> <span class="token number">0x00EF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Horizontal GRAM End Address</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0052</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>      <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0053</span><span class="token punctuation">,</span> <span class="token number">0x013F</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vertical GRAM Start Address</span>      <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0060</span><span class="token punctuation">,</span> <span class="token number">0xA700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Gate Scan Line</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0061</span><span class="token punctuation">,</span> <span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NDL,VLE, REV  </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x006A</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set scrolling line</span><span class="token comment" spellcheck="true">//-------------- Partial Display Control ---------//</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0080</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0081</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0082</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0083</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0084</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0085</span><span class="token punctuation">,</span><span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-------------- Panel Control -------------------//        </span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0090</span><span class="token punctuation">,</span> <span class="token number">0x0010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0092</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0093</span><span class="token punctuation">,</span> <span class="token number">0x0003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0095</span><span class="token punctuation">,</span> <span class="token number">0x0110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0097</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0098</span><span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token number">0x0007</span><span class="token punctuation">,</span> <span class="token number">0x0133</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 262K color and display ON</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************************//    实现功能：    画点//  输入参数： x，y 需要画点坐标//            color 点的颜色****************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Put_pixel</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment" spellcheck="true">//横屏这里要进行坐标变换，如果是竖屏，则直接是x0,x1,y0,y1做参数</span>    <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                      <span class="token comment" spellcheck="true">//在指定点写入颜色数据</span><span class="token punctuation">}</span></code></pre><p>TFT.H</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> uchar</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char </span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> uint</span><span class="token macro property">#<span class="token directive keyword">define</span> uint unsigned int </span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> pic<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TFT_Initial</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show_colour_bar</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_Cmd_Data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_Cmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DH<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Write_Data</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DH<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> DL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delayms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> tt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show_photo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Show_RGB</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">Write_Data_U16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CLR_Screen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">PutGB3232</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_PutChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_PutString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_PutString24</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_PutChar8x8</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Put16x16</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> g<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Put_pixel</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">address_set</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_SetPos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">,</span><span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">draw_circle</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_PutSingleChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fColor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Line</span><span class="token punctuation">(</span>    uchar X0<span class="token punctuation">,</span>            uchar Y0<span class="token punctuation">,</span>            uchar X1<span class="token punctuation">,</span>            uchar Y1<span class="token punctuation">,</span>            <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span> uchar left<span class="token punctuation">,</span>                uchar top<span class="token punctuation">,</span>                uchar right<span class="token punctuation">,</span>                uchar bottom<span class="token punctuation">,</span>                <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Bar</span><span class="token punctuation">(</span>    uchar left<span class="token punctuation">,</span>            uchar top<span class="token punctuation">,</span>            uchar right<span class="token punctuation">,</span>            uchar bottom<span class="token punctuation">,</span>            <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><p>user_Config.h</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*2.8寸TFT触摸屏接口定义*/</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIO_TFT_DATA                   GPIOA                             </span><span class="token comment" spellcheck="true">//数据口PA0~PA7</span><span class="token macro property">#<span class="token directive keyword">define</span> RCC_GPIO_TFT                    RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIO_CTRB                        GPIOB                             </span><span class="token comment" spellcheck="true">//控制口PB8~PB13</span><span class="token macro property">#<span class="token directive keyword">define</span> RCC_GPIO_CTRB                    RCC_APB2Periph_GPIOB</span><span class="token macro property">#<span class="token directive keyword">define</span> RS_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_13)     </span><span class="token comment" spellcheck="true">//RS置低</span><span class="token macro property">#<span class="token directive keyword">define</span> RS_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_13)       </span><span class="token comment" spellcheck="true">//RS置高</span><span class="token macro property">#<span class="token directive keyword">define</span> RW_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_12)     </span><span class="token comment" spellcheck="true">//RW置低</span><span class="token macro property">#<span class="token directive keyword">define</span> RW_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_12)            </span><span class="token comment" spellcheck="true">//RW置高</span><span class="token macro property">#<span class="token directive keyword">define</span> RD_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_11)     </span><span class="token comment" spellcheck="true">//E RD置低</span><span class="token macro property">#<span class="token directive keyword">define</span> RD_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_11)       </span><span class="token comment" spellcheck="true">//E ED置高</span><span class="token macro property">#<span class="token directive keyword">define</span> CS_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_10)     </span><span class="token comment" spellcheck="true">//CS置低</span><span class="token macro property">#<span class="token directive keyword">define</span> CS_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_10)       </span><span class="token comment" spellcheck="true">//CS置高</span><span class="token macro property">#<span class="token directive keyword">define</span> RST_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_9)     </span><span class="token comment" spellcheck="true">//RST置低</span><span class="token macro property">#<span class="token directive keyword">define</span> RST_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_9)       </span><span class="token comment" spellcheck="true">//RST置高</span><span class="token macro property">#<span class="token directive keyword">define</span> LE_CLR            GPIO_ResetBits(GPIO_CTRB, GPIO_Pin_8)     </span><span class="token comment" spellcheck="true">//LE置低</span><span class="token macro property">#<span class="token directive keyword">define</span> LE_SET            GPIO_SetBits(GPIO_CTRB, GPIO_Pin_8)       </span><span class="token comment" spellcheck="true">//LE置高</span><span class="token macro property">#<span class="token directive keyword">define</span> DataPort        GPIOA                                                     </span><span class="token comment" spellcheck="true">//PA口为数据口</span><span class="token macro property">#<span class="token directive keyword">define</span> D0              GPIO_Pin_0                                                     </span><span class="token comment" spellcheck="true">//D0使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D1              GPIO_Pin_1                                                    </span><span class="token comment" spellcheck="true">//D1使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D2              GPIO_Pin_2                                                  </span><span class="token comment" spellcheck="true">//D2使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D3                GPIO_Pin_3                                                    </span><span class="token comment" spellcheck="true">//D3使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D4                GPIO_Pin_4                                                     </span><span class="token comment" spellcheck="true">//D4使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D5                GPIO_Pin_5                                                    </span><span class="token comment" spellcheck="true">//D5使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D6                GPIO_Pin_6                                                  </span><span class="token comment" spellcheck="true">//D6使用的GPIO管脚</span><span class="token macro property">#<span class="token directive keyword">define</span> D7                GPIO_Pin_7                                                    </span><span class="token comment" spellcheck="true">//D7使用的GPIO管脚</span><span class="token comment" spellcheck="true">/*全局变量-颜色代码*/</span><span class="token macro property">#<span class="token directive keyword">define</span> White          0xFFFF                                                               </span><span class="token comment" spellcheck="true">//显示颜色代码</span><span class="token macro property">#<span class="token directive keyword">define</span> Black          0x0000</span><span class="token macro property">#<span class="token directive keyword">define</span> Blue           0x001F</span><span class="token macro property">#<span class="token directive keyword">define</span> Blue2          0x051F</span><span class="token macro property">#<span class="token directive keyword">define</span> Red            0xF800</span><span class="token macro property">#<span class="token directive keyword">define</span> Magenta        0xF81F</span><span class="token macro property">#<span class="token directive keyword">define</span> Green          0x07E0</span><span class="token macro property">#<span class="token directive keyword">define</span> Cyan           0x7FFF</span><span class="token macro property">#<span class="token directive keyword">define</span> Yellow         0xFFE0</span><span class="token comment" spellcheck="true">/*函数声明区*/</span><span class="token keyword">void</span> <span class="token function">RCC_Configuration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span>vu32 nCount<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Ascii_8x16.h</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//ASCII码的0x20～0x7f,0x00~0x1f为控制命令，所以被去掉 </span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span>  Font8x16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*--  文字:     ASCII值0x20--*/</span>   <span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  !  ASCII值0x21--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  "  ASCII值0x22--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  #  ASCII值0x23--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  $  ASCII值0x24--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  %  ASCII值0x25--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x1A</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  &amp;  ASCII值0x26--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  '  ASCII值0x27--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  (  ASCII值0x28--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  )  ASCII值0x29--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  *  ASCII值0x2a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xD6</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0xD6</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  +  ASCII值0x2b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ,  ASCII值0x2c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  -  ASCII值0x2d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  .  ASCII值0x2e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  /  ASCII值0x2f--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  0  ASCII值0x30--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  1  ASCII值0x31--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  2  ASCII值0x32--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  3  ASCII值0x33--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  4 ASCII值0x34--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  5  ASCII值0x35--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  6  ASCII值0x36--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  7  ASCII值0x37--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  8  ASCII值0x38--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  9  ASCII值0x39--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x1A</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  :  ASCII值0x3a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ;  ASCII值0x3b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  &lt;  ASCII值0x3c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  =  ASCII值0x3d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  >  ASCII值0x3e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ?  ASCII值0x3f--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  @  ASCII值0x40--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x5A</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xB4</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  A  ASCII值0x41--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  B  ASCII值0x42--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  C  ASCII值0x43--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  D  ASCII值0x44--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  E  ASCII值0x45--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  F  ASCII值0x46--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  G  ASCII值0x47--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x8E</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  H  ASCII值0x48--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  I  ASCII值0x49--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  J  ASCII值0x4a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  K  ASCII值0x4b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  L  ASCII值0x4c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  M  ASCII值0x4d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0xD6</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  N  ASCII值0x4e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC7</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0xE2</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  O  ASCII值0x4f--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  P  ASCII值0x50--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  Q  ASCII值0x51--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0xB2</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  R  ASCII值0x52--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE3</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  S  ASCII值0x53--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  T  ASCII值0x54--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  U  ASCII值0x55--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  V  ASCII值0x56--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  W  ASCII值0x57--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xD6</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  X  ASCII值0x58--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  Y  ASCII值0x59--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  Z  ASCII值0x5a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  [  ASCII值0x5b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  \  ASCII值0x5c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ]  ASCII值0x5d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ^  ASCII值0x5e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  _  ASCII值0x5f--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  `  ASCII值0x60--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  a  ASCII值0x61--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  b  ASCII值0x62--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  c  ASCII值0x63--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  d  ASCII值0x64--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  e  ASCII值0x65--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  f  ASCII值0x66--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  g  ASCII值0x67--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  h  ASCII值0x68--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  i  ASCII值0x69--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  j  ASCII值0x6a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  k  ASCII值0x6b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  l  ASCII值0x6c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  m  ASCII值0x6d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0xED</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  n  ASCII值0x6e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xDC</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  o  ASCII值0x6f--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  p  ASCII值0x70--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xD8</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  q  ASCII值0x71--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  r  ASCII值0x72--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  s  ASCII值0x73--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  t  ASCII值0x74--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  u  ASCII值0x75--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xC6</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x3B</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  v  ASCII值0x76--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  w  ASCII值0x77--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xD7</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  x  ASCII值0x78--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  y  ASCII值0x79--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  z  ASCII值0x7a--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  {  ASCII值0x7b--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  |  ASCII值0x7c--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  }  ASCII值0x7d--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  ~  ASCII值0x7e--*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:    ASCII值0x7f--*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys11;  此字体下对应的点阵为：宽x高=8x16   --*/</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>Chinese.h</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/////////////////////////////////////////////////////////////////////////</span><span class="token comment" spellcheck="true">// 汉字取模步骤:1、在文字输入区输入汉字;2、在输入区鼠标右键选择字体，字体选Fixedsys,大小选12号，即16x16，后点确定</span><span class="token comment" spellcheck="true">//              3、键盘输入CTRL+ENTER组合键，4、点击左边菜单"取模方式-》C51格式"，即会在点阵生成区中显示结果。</span><span class="token comment" spellcheck="true">//注意:软件默认为横向取模,如果需要修改取模方式,点击左边菜单"参数设置-》其他选项"即可修改.</span><span class="token comment" spellcheck="true">/////////////////////////////////////////////////////////////////////////</span><span class="token comment" spellcheck="true">// ------------------  汉字字模数据结构体定义 ------------------------ //</span><span class="token keyword">const</span> <span class="token keyword">struct</span>  hz16_tab                 <span class="token comment" spellcheck="true">//结构体名hz16_tab</span><span class="token punctuation">{</span>       <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   GBK<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译器在编译汉字时会编译成GBK码,每个汉字为两字节,例如"北"字内码为0xb1b1.</span>       <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   hz16<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//每个16x16汉字为16x16/8=32字节 </span><span class="token punctuation">}</span> ch16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>                            <span class="token comment" spellcheck="true">//数据表 </span><span class="token punctuation">{</span><span class="token string">"合"</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x2E</span><span class="token punctuation">,</span><span class="token number">0xDF</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  肥  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"肥"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3D</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x3D</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x3D</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x45</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  炜  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"炜"</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  煌  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"煌"</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x2B</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x47</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  电  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"电"</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  子  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"子"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  有  --*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"有"</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  限  --*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"限"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFB</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0xA2</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xA2</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x8E</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  公  --*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"公"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  司  --*/</span><span class="token comment" spellcheck="true">/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"司"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  面  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"面"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  向  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"向"</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  教  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"教"</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x2B</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  学  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"学"</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x8C</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x8F</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  面  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"面"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  向  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"向"</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0xFC</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  开  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"开"</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*--  文字:  发  --*/</span><span class="token comment" spellcheck="true">/*--  Fixedsys12;  此字体下对应的点阵为：宽x高=16x16   --*/</span><span class="token string">"发"</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>野火F1开发板STM32案例-MultiButton移植</title>
      <link href="/2020/10/04/ye-huo-f1-kai-fa-ban-stm32-an-li-multibutton-yi-zhi/"/>
      <url>/2020/10/04/ye-huo-f1-kai-fa-ban-stm32-an-li-multibutton-yi-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="野火F1开发板STM32案例-MultiButton移植"><a href="#野火F1开发板STM32案例-MultiButton移植" class="headerlink" title="野火F1开发板STM32案例-MultiButton移植"></a><strong>野火F1开发板STM32案例-MultiButton移植</strong></h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2></li><li>Keil MDK 5.31</li><li>串口调试助手</li></ol><h2 id="MultiButton"><a href="#MultiButton" class="headerlink" title="MultiButton"></a>MultiButton</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>开源项目 MultiButton，一个小巧简单易用的事件驱动型按键驱动模块，作者 0x1abin。<br>这个项目非常精简，只有两个文件，可无限量扩展按键，按键事件的回调异步处理方式可以简化程序结构，去除冗余的按键处理硬编码，让你的按键业务逻辑更清晰。<br>MultiButton 是一个小巧简单易用的事件驱动型按键驱动模块，可无限量扩展按键，按键事件的回调异步处理方式可以简化你的程序结构，去除冗余的按键处理硬编码，让你的按键业务逻辑更清晰。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1.先申请一个按键结构</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Button button1<span class="token punctuation">;</span></code></pre><p>2.初始化按键对象，绑定按键的GPIO电平读取接口<strong>read_button_pin()</strong> ，后一个参数设置有效触发电平</p><pre class=" language-c"><code class="language-c"><span class="token function">button_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">,</span> read_button_pin<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.注册按键事件</p><pre><code>button_attach(&amp;button1, SINGLE_CLICK, Callback_SINGLE_CLICK_Handler);button_attach(&amp;button1, DOUBLE_CLICK, Callback_DOUBLE_Click_Handler);...</code></pre><p>4.启动按键</p><pre class=" language-c"><code class="language-c"><span class="token function">button_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5.设置一个5ms间隔的定时器循环调用后台处理函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer_ticks <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        timer_ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">button_ticks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>MultiButton 使用C语言实现，基于面向对象方式设计思路，每个按键对象单独用一份数据结构管理：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Button <span class="token punctuation">{</span>    uint16_t ticks<span class="token punctuation">;</span>    uint8_t  repeat<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    uint8_t  event <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    uint8_t  state <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    uint8_t  debounce_cnt <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>     uint8_t  active_level <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    uint8_t  button_level <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">uint8_t</span>  <span class="token punctuation">(</span><span class="token operator">*</span>hal_button_Level<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BtnCallback  cb<span class="token punctuation">[</span>number_of_event<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Button<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这样每个按键使用单向链表相连，依次进入 button_handler(struct Button* handle) 状态机处理，所以每个按键的状态彼此独立。</p><h2 id="按键事件"><a href="#按键事件" class="headerlink" title="按键事件"></a>按键事件</h2><table><thead><tr><th>事件</th><th>说明</th></tr></thead><tbody><tr><td>PRESS_DOWN</td><td>按键按下，每次按下都触发</td></tr><tr><td>PRESS_UP</td><td>按键弹起，每次松开都触发</td></tr><tr><td>PRESS_REPEAT</td><td>重复按下触发，变量repeat计数连击次数</td></tr><tr><td>SINGLE_CLICK</td><td>单击按键事件</td></tr><tr><td>DOUBLE_CLICK</td><td>双击按键事件</td></tr><tr><td>LONG_RRESS_START</td><td>达到长按时间阈值时触发一次</td></tr><tr><td>LONG_PRESS_HOLD</td><td>长按期间一直触发</td></tr></tbody></table><h2 id="官方Examples"><a href="#官方Examples" class="headerlink" title="官方Examples"></a>官方Examples</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"button.h"</span></span><span class="token keyword">struct</span> Button btn1<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read_button1_GPIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">HAL_GPIO_ReadPin</span><span class="token punctuation">(</span>B1_GPIO_Port<span class="token punctuation">,</span> B1_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">button_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> read_button1_GPIO<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> PRESS_DOWN<span class="token punctuation">,</span>       BTN1_PRESS_DOWN_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> PRESS_UP<span class="token punctuation">,</span>         BTN1_PRESS_UP_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> PRESS_REPEAT<span class="token punctuation">,</span>     BTN1_PRESS_REPEAT_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> SINGLE_CLICK<span class="token punctuation">,</span>     BTN1_SINGLE_Click_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> DOUBLE_CLICK<span class="token punctuation">,</span>     BTN1_DOUBLE_Click_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">,</span> LONG_RRESS_START<span class="token punctuation">,</span> BTN1_LONG_RRESS_START_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn2<span class="token punctuation">,</span> LONG_PRESS_HOLD<span class="token punctuation">,</span>  BTN1_LONG_PRESS_HOLD_Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">button_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//make the timer invoking the button_ticks() interval 5ms.</span>    <span class="token comment" spellcheck="true">//This function is implemented by yourself.</span>    <span class="token function">__timer_start</span><span class="token punctuation">(</span>button_ticks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">BTN1_PRESS_DOWN_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> btn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something...</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">BTN1_PRESS_UP_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> btn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something...</span><span class="token punctuation">}</span></code></pre><h2 id="野火F1开发板STM32案例-MultiButton移植-1"><a href="#野火F1开发板STM32案例-MultiButton移植-1" class="headerlink" title="野火F1开发板STM32案例-MultiButton移植"></a>野火F1开发板STM32案例-MultiButton移植</h2><h3 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  ******************************************************************************  * @file    main.c  * 实验平台:野火 F103-霸道 STM32 开发板   ******************************************************************************  * 第三方库文件导入  START THE FILE  ******************************************************************************  */</span> <span class="token comment" spellcheck="true">//基本库</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_SysTick.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token comment" spellcheck="true">//扩展库</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"multi_button.h"</span></span><span class="token comment" spellcheck="true">//按键驱动</span><span class="token comment" spellcheck="true">/********************************************************************************变量定义*********************************************************************************/</span><span class="token keyword">struct</span> Button button1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY1_GPIO_CLK     RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY1_GPIO_PORT    GPIOA               </span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY1_GPIO_PIN         GPIO_Pin_0</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY2_GPIO_CLK     RCC_APB2Periph_GPIOC</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY2_GPIO_PORT    GPIOC           </span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY2_GPIO_PIN         GPIO_Pin_13</span><span class="token comment" spellcheck="true">/********************************************************************************函数部分*********************************************************************************/</span><span class="token keyword">void</span> <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//IO初始化</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*开启按键端口的时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>KEY1_GPIO_CLK<span class="token operator">|</span>KEY2_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选择按键KEY1的引脚 </span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY1_GPIO_PIN<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 设置按键的引脚为浮空输入</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用结构体初始化按键</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY1_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选择按键的引脚</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY2_GPIO_PIN<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设置按键的引脚为浮空输入</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用结构体初始化按键</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY2_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按键状态读取接口  按键输入模式 ReadInputDataBit</span>uint8_t <span class="token function">read_button1_GPIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>KEY1_GPIO_PORT<span class="token punctuation">,</span> KEY1_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按键1按下事件回调函数</span><span class="token keyword">void</span> <span class="token function">btn1_press_down_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> btn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---> key1 press down! &lt;---\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按键1松开事件回调函数</span><span class="token keyword">void</span> <span class="token function">btn1_press_up_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> btn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***> key1 press up! &lt;***\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">button_callback</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>button<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t btn_event_val<span class="token punctuation">;</span>     btn_event_val <span class="token operator">=</span> <span class="token function">get_button_event</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button <span class="token operator">*</span><span class="token punctuation">)</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>btn_event_val<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> PRESS_DOWN<span class="token punctuation">:</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---> key1 press down! &lt;---\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> PRESS_UP<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***> key1 press up! &lt;***\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> PRESS_REPEAT<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---> key1 press repeat! &lt;---\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> SINGLE_CLICK<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---> key1 single click! &lt;---\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> DOUBLE_CLICK<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***> key1 double click! &lt;***\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> LONG_PRESS_START<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---> key1 long press start! &lt;---\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> LONG_PRESS_HOLD<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***> key1 long press hold! &lt;***\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  HardWare_Iint  * @param  无  * @retval 无  */</span> <span class="token keyword">void</span> <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  主函数  * @param  无  * @retval 无  */</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 硬件端口初始化 */</span>    <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MultiButton Test...\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化按键对象</span>    <span class="token function">button_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">,</span> read_button1_GPIO<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//注册按钮事件回调函数</span>      <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">,</span> PRESS_DOWN<span class="token punctuation">,</span>       button_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">,</span> PRESS_UP<span class="token punctuation">,</span>         button_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//启动按键</span>      <span class="token function">button_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>button1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token function">button_ticks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="multi-button-c"><a href="#multi-button-c" class="headerlink" title="multi_button.c"></a>multi_button.c</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Copyright (c) 2016 Zibin Zheng &lt;znbin@qq.com> * All rights reserved */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"multi_button.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> EVENT_CB(ev)   if(handle->cb[ev])handle->cb[ev]((Button*)handle)</span><span class="token comment" spellcheck="true">//button handle list head.</span><span class="token keyword">static</span> <span class="token keyword">struct</span> Button<span class="token operator">*</span> head_handle <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  * @brief  Initializes the button struct handle.  * @param  handle: the button handle strcut.  * @param  pin_level: read the HAL GPIO of the connet button level.  * @param  active_level: pressed GPIO level.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">button_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token function">uint8_t</span><span class="token punctuation">(</span><span class="token operator">*</span>pin_level<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uint8_t active_level<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>NONE_PRESS<span class="token punctuation">;</span>    handle<span class="token operator">-></span>hal_button_Level <span class="token operator">=</span> pin_level<span class="token punctuation">;</span>    handle<span class="token operator">-></span>button_level <span class="token operator">=</span> handle<span class="token operator">-></span><span class="token function">hal_button_Level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handle<span class="token operator">-></span>active_level <span class="token operator">=</span> active_level<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  Attach the button event callback function.  * @param  handle: the button handle strcut.  * @param  event: trigger event type.  * @param  cb: callback function.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">,</span> PressEvent event<span class="token punctuation">,</span> BtnCallback cb<span class="token punctuation">)</span><span class="token punctuation">{</span>    handle<span class="token operator">-></span>cb<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> cb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  Inquire the button event happen.  * @param  handle: the button handle strcut.  * @retval button event.  */</span>PressEvent <span class="token function">get_button_event</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>PressEvent<span class="token punctuation">)</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  Button driver core function, driver state machine.  * @param  handle: the button handle strcut.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">button_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t read_gpio_level <span class="token operator">=</span> handle<span class="token operator">-></span><span class="token function">hal_button_Level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ticks counter working..</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>state<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> handle<span class="token operator">-></span>ticks<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*------------button debounce handle---------------*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>read_gpio_level <span class="token operator">!=</span> handle<span class="token operator">-></span>button_level<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//not equal to prev one</span>        <span class="token comment" spellcheck="true">//continue read 3 times same new level change</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>debounce_cnt<span class="token punctuation">)</span> <span class="token operator">>=</span> DEBOUNCE_TICKS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            handle<span class="token operator">-></span>button_level <span class="token operator">=</span> read_gpio_level<span class="token punctuation">;</span>            handle<span class="token operator">-></span>debounce_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//leved not change ,counter reset.</span>        handle<span class="token operator">-></span>debounce_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*-----------------State machine-------------------*/</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>handle<span class="token operator">-></span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>button_level <span class="token operator">==</span> handle<span class="token operator">-></span>active_level<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//start press down</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_DOWN<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>repeat <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>NONE_PRESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>button_level <span class="token operator">!=</span> handle<span class="token operator">-></span>active_level<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//released press up</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_UP<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>ticks <span class="token operator">></span> LONG_TICKS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>LONG_PRESS_START<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>LONG_PRESS_START<span class="token punctuation">)</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>button_level <span class="token operator">==</span> handle<span class="token operator">-></span>active_level<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//press down again</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_DOWN<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>repeat<span class="token operator">++</span><span class="token punctuation">;</span>      handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_REPEAT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_REPEAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// repeat hit</span>            handle<span class="token operator">-></span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>ticks <span class="token operator">></span> SHORT_TICKS<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//released timeout</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>repeat <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>SINGLE_CLICK<span class="token punctuation">;</span>                <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>SINGLE_CLICK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>repeat <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>DOUBLE_CLICK<span class="token punctuation">;</span>                <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>DOUBLE_CLICK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// repeat hit</span>            <span class="token punctuation">}</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>button_level <span class="token operator">!=</span> handle<span class="token operator">-></span>active_level<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//released press up</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_UP<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>ticks <span class="token operator">&lt;</span> SHORT_TICKS<span class="token punctuation">)</span> <span class="token punctuation">{</span>                handle<span class="token operator">-></span>ticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//repeat press</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handle<span class="token operator">-></span>button_level <span class="token operator">==</span> handle<span class="token operator">-></span>active_level<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//continue hold trigger</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>LONG_PRESS_HOLD<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>LONG_PRESS_HOLD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//releasd</span>            handle<span class="token operator">-></span>event <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>PRESS_UP<span class="token punctuation">;</span>            <span class="token function">EVENT_CB</span><span class="token punctuation">(</span>PRESS_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>            handle<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//reset</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  Start the button work, add the handle into work list.  * @param  handle: target handle strcut.  * @retval 0: succeed. -1: already exist.  */</span><span class="token keyword">int</span> <span class="token function">button_start</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Button<span class="token operator">*</span> target <span class="token operator">=</span> head_handle<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> handle<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//already exist.</span>        target <span class="token operator">=</span> target<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    handle<span class="token operator">-></span>next <span class="token operator">=</span> head_handle<span class="token punctuation">;</span>    head_handle <span class="token operator">=</span> handle<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  Stop the button work, remove the handle off work list.  * @param  handle: target handle strcut.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">button_stop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Button<span class="token operator">*</span><span class="token operator">*</span> curr<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>curr <span class="token operator">=</span> <span class="token operator">&amp;</span>head_handle<span class="token punctuation">;</span> <span class="token operator">*</span>curr<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">struct</span> Button<span class="token operator">*</span> entry <span class="token operator">=</span> <span class="token operator">*</span>curr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">*</span>curr <span class="token operator">=</span> entry<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            free(entry);</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            curr <span class="token operator">=</span> <span class="token operator">&amp;</span>entry<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  background ticks, timer repeat invoking interval 5ms.  * @param  None.  * @retval None  */</span><span class="token keyword">void</span> <span class="token function">button_ticks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Button<span class="token operator">*</span> target<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>target<span class="token operator">=</span>head_handle<span class="token punctuation">;</span> target<span class="token punctuation">;</span> target<span class="token operator">=</span>target<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">button_handler</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="multi-button-h"><a href="#multi-button-h" class="headerlink" title="multi_button.h"></a>multi_button.h</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Copyright (c) 2016 Zibin Zheng &lt;znbin@qq.com> * All rights reserved */</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> _MULTI_BUTTON_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _MULTI_BUTTON_H_</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdint.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"string.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">//According to your need to modify the constants.</span><span class="token macro property">#<span class="token directive keyword">define</span> TICKS_INTERVAL    5    </span><span class="token comment" spellcheck="true">//ms</span><span class="token macro property">#<span class="token directive keyword">define</span> DEBOUNCE_TICKS    3    </span><span class="token comment" spellcheck="true">//MAX 8</span><span class="token macro property">#<span class="token directive keyword">define</span> SHORT_TICKS       (300 /TICKS_INTERVAL)</span><span class="token macro property">#<span class="token directive keyword">define</span> LONG_TICKS        (1000 /TICKS_INTERVAL)</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>BtnCallback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>    PRESS_DOWN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    PRESS_UP<span class="token punctuation">,</span>    PRESS_REPEAT<span class="token punctuation">,</span>    SINGLE_CLICK<span class="token punctuation">,</span>    DOUBLE_CLICK<span class="token punctuation">,</span>    LONG_PRESS_START<span class="token punctuation">,</span>    LONG_PRESS_HOLD<span class="token punctuation">,</span>    number_of_event<span class="token punctuation">,</span>    NONE_PRESS<span class="token punctuation">}</span>PressEvent<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Button <span class="token punctuation">{</span>    uint16_t ticks<span class="token punctuation">;</span>    uint8_t  repeat <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    uint8_t  event <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    uint8_t  state <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    uint8_t  debounce_cnt <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    uint8_t  active_level <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    uint8_t  button_level <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">uint8_t</span>  <span class="token punctuation">(</span><span class="token operator">*</span>hal_button_Level<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BtnCallback  cb<span class="token punctuation">[</span>number_of_event<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> Button<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>Button<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">button_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token function">uint8_t</span><span class="token punctuation">(</span><span class="token operator">*</span>pin_level<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uint8_t active_level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">button_attach</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">,</span> PressEvent event<span class="token punctuation">,</span> BtnCallback cb<span class="token punctuation">)</span><span class="token punctuation">;</span>PressEvent <span class="token function">get_button_event</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">button_start</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">button_stop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Button<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">button_ticks</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="bsp-usart-c"><a href="#bsp-usart-c" class="headerlink" title="bsp_usart.c"></a>bsp_usart.c</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  ******************************************************************************  * @file    bsp_usart.c  * @version V1.0  * @date    2013-xx-xx  * @brief   调试用的printf串口，重定向printf到串口  ******************************************************************************  * @attention  *  * 实验平台:野火 F103-霸道 STM32 开发板   * 论坛    :http://www.firebbs.cn  * 淘宝    :https://fire-stm32.taobao.com  *  ******************************************************************************  */</span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"./usart/bsp_usart.h"</span></span> <span class="token comment" spellcheck="true">/**  * @brief  USART GPIO 配置,工作参数配置  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">USART_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    USART_InitTypeDef USART_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打开串口GPIO的时钟</span>    <span class="token function">DEBUG_USART_GPIO_APBxClkCmd</span><span class="token punctuation">(</span>DEBUG_USART_GPIO_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打开串口外设的时钟</span>    <span class="token function">DEBUG_USART_APBxClkCmd</span><span class="token punctuation">(</span>DEBUG_USART_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将USART Tx的GPIO配置为推挽复用模式</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> DEBUG_USART_TX_GPIO_PIN<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>DEBUG_USART_TX_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将USART Rx的GPIO配置为浮空输入模式</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> DEBUG_USART_RX_GPIO_PIN<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>DEBUG_USART_RX_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置串口的工作参数</span>    <span class="token comment" spellcheck="true">// 配置波特率</span>    USART_InitStructure<span class="token punctuation">.</span>USART_BaudRate <span class="token operator">=</span> DEBUG_USART_BAUDRATE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置 针数据字长</span>    USART_InitStructure<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置停止位</span>    USART_InitStructure<span class="token punctuation">.</span>USART_StopBits <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置校验位</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Parity <span class="token operator">=</span> USART_Parity_No <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置硬件流控制</span>    USART_InitStructure<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置工作模式，收发一起</span>    USART_InitStructure<span class="token punctuation">.</span>USART_Mode <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 完成串口的初始化配置</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使能串口</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">///重定向c库函数printf到串口，重定向后可使用printf函数</span><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 发送一个字节数据到串口 */</span>        <span class="token function">USART_SendData</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 等待发送完毕 */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">,</span> USART_FLAG_TXE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">///重定向c库函数scanf到串口，重写向后可使用scanf、getchar等函数</span><span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 等待串口输入数据 */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">,</span> USART_FLAG_RXNE<span class="token punctuation">)</span> <span class="token operator">==</span> RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>DEBUG_USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-usart-h"><a href="#bsp-usart-h" class="headerlink" title="bsp_usart.h"></a>bsp_usart.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __USART_H</span><span class="token macro property">#<span class="token directive keyword">define</span>    __USART_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">/**   * 串口宏定义，不同的串口挂载的总线和IO不一样，移植时需要修改这几个宏    * 1-修改总线时钟的宏，uart1挂载到apb2总线，其他uart挂载到apb1总线    * 2-修改GPIO的宏  */</span><span class="token comment" spellcheck="true">// 串口1-USART1</span><span class="token macro property">#<span class="token directive keyword">define</span>  DEBUG_USARTx                   USART1</span><span class="token macro property">#<span class="token directive keyword">define</span>  DEBUG_USART_CLK                RCC_APB2Periph_USART1</span><span class="token macro property">#<span class="token directive keyword">define</span>  DEBUG_USART_APBxClkCmd         RCC_APB2PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span>  DEBUG_USART_BAUDRATE           115200</span><span class="token keyword">void</span> <span class="token function">USART_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">/* __USART_H */</span></code></pre><h3 id="串口打印效果"><a href="#串口打印效果" class="headerlink" title="串口打印效果"></a>串口打印效果</h3><p><img src="https://img-blog.csdnimg.cn/20201004212815405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="工程结构"><br><img src="https://img-blog.csdnimg.cn/20201004212815203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="串口打印效果"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>野火F1开发板STM32案例-外部中断(按键)使用</title>
      <link href="/2020/10/03/ye-huo-f1-kai-fa-ban-stm32-an-li-wai-bu-zhong-duan-an-jian-shi-yong/"/>
      <url>/2020/10/03/ye-huo-f1-kai-fa-ban-stm32-an-li-wai-bu-zhong-duan-an-jian-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="野火F1开发板STM32案例-外部中断-按键-使用"><a href="#野火F1开发板STM32案例-外部中断-按键-使用" class="headerlink" title="野火F1开发板STM32案例-外部中断(按键)使用"></a>野火F1开发板STM32案例-外部中断(按键)使用</h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1系列开发板<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32产品"><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2></li><li>Keil MDK 5.31</li><li>串口调试助手</li></ol><p>工程下载<a href="https://download.csdn.net/download/weixin_43599390/12910397" target="_blank" rel="noopener">https://download.csdn.net/download/weixin_43599390/12910397</a></p><h2 id="中断相关概念"><a href="#中断相关概念" class="headerlink" title="中断相关概念"></a>中断相关概念</h2><pre class=" language-c"><code class="language-c">中断配置寄存器# 配置中断时，使用ISER、 ICER 和 IP 寄存器，## ISER 是中断使能寄存器## ICER 是中断清除寄存器## IP 是中断优先级寄存器中断优先级<span class="token number">1</span><span class="token punctuation">.</span> 数值越小，优先级越高<span class="token number">2</span><span class="token punctuation">.</span> STM32F103 中只使用<span class="token number">4</span>位，高<span class="token number">4</span>位有效。<span class="token number">3</span><span class="token punctuation">.</span> 用于表达优先级的高 <span class="token number">4</span> 位又被分组成抢占式优先级和响应优先级，称为“亚优先级”或“副优先级”<span class="token number">4</span><span class="token punctuation">.</span> 每个中断源都需要被指定这两种优先级。中断配置步骤<span class="token number">1</span><span class="token punctuation">.</span>使能外设中断<span class="token number">6</span><span class="token punctuation">.</span> 设置中断优先级分组初始化 NVIC_InitTypeDef 结构体，设置抢占优先级和响应优先级，使能中断请求。<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>     uint8_t NVIC_IRQChannel<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断源</span>     uint8_t NVIC_IRQChannelPreemptionPriority<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抢占优先级</span>     uint8_t NVIC_IRQChannelSubPriority<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应优先级</span>     FunctionalState NVIC_IRQChannelCmd<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中断使能或失能</span> <span class="token punctuation">}</span> NVIC_InitTypeDef<span class="token punctuation">;</span>NVIC_IRQChannel 中断源<span class="token punctuation">:</span>中断源的设置，不同的外设中断，中断源不一样NVIC_IRQChannelPreemptionPriority  <span class="token comment" spellcheck="true">//抢占优先级</span>NVIC_IRQChannelSubPriority  <span class="token comment" spellcheck="true">//响应优先级</span>NVIC_IRQChannelCmd <span class="token comment" spellcheck="true">//中断使能或失能:使能配置为 ENABLE，失能配置为 DISABLE。</span></code></pre><pre class=" language-c"><code class="language-c">NVIC_IRQChannel   <span class="token comment" spellcheck="true">//中断源</span><span class="token comment" spellcheck="true">/******  Cortex-M3 Processor Exceptions Numbers ***************************************************/</span>  NonMaskableInt_IRQn         <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; 2 Non Maskable Interrupt                             */</span>  MemoryManagement_IRQn       <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; 4 Cortex-M3 Memory Management Interrupt              */</span>  BusFault_IRQn               <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; 5 Cortex-M3 Bus Fault Interrupt                      */</span>  UsageFault_IRQn             <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*!&lt; 6 Cortex-M3 Usage Fault Interrupt                    */</span>  SVCall_IRQn                 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; 11 Cortex-M3 SV Call Interrupt                       */</span>  DebugMonitor_IRQn           <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; 12 Cortex-M3 Debug Monitor Interrupt                 */</span>  PendSV_IRQn                 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; 14 Cortex-M3 Pend SV Interrupt                       */</span>  SysTick_IRQn                <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; 15 Cortex-M3 System Tick Interrupt                   */</span><span class="token comment" spellcheck="true">/******  STM32 specific Interrupt Numbers *********************************************************/</span>  WWDG_IRQn                   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; Window WatchDog Interrupt                            */</span>  PVD_IRQn                    <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; PVD through EXTI Line detection Interrupt            */</span>  TAMPER_IRQn                 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; Tamper Interrupt                                     */</span>  RTC_IRQn                    <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; RTC global Interrupt                                 */</span>  FLASH_IRQn                  <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; FLASH global Interrupt                               */</span>  RCC_IRQn                    <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; RCC global Interrupt                                 */</span>  EXTI0_IRQn                  <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; EXTI Line0 Interrupt                                 */</span>  EXTI1_IRQn                  <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; EXTI Line1 Interrupt                                 */</span>  EXTI2_IRQn                  <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; EXTI Line2 Interrupt                                 */</span>  EXTI3_IRQn                  <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; EXTI Line3 Interrupt                                 */</span>  EXTI4_IRQn                  <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; EXTI Line4 Interrupt                                 */</span>  DMA1_Channel1_IRQn          <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 1 global Interrupt                      */</span>  DMA1_Channel2_IRQn          <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 2 global Interrupt                      */</span>  DMA1_Channel3_IRQn          <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 3 global Interrupt                      */</span>  DMA1_Channel4_IRQn          <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 4 global Interrupt                      */</span>  DMA1_Channel5_IRQn          <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 5 global Interrupt                      */</span>  DMA1_Channel6_IRQn          <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 6 global Interrupt                      */</span>  DMA1_Channel7_IRQn          <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">/*!&lt; DMA1 Channel 7 global Interrupt                      */</span></code></pre><h3 id="STM32F103-中断向量表"><a href="#STM32F103-中断向量表" class="headerlink" title="STM32F103  中断向量表"></a>STM32F103  中断向量表</h3><p><img src="https://img-blog.csdnimg.cn/2020100315141155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt=" 中断向量表1"><br><img src="https://img-blog.csdnimg.cn/20201003151410982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt=" 中断向量表2"></p><h3 id="EXTI外部中断"><a href="#EXTI外部中断" class="headerlink" title="EXTI外部中断"></a>EXTI外部中断</h3><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> STM32F10x 外部中断<span class="token operator">/</span>事件控制器（EXTI）包含多达 <span class="token number">20</span> 个用于产生事件<span class="token operator">/</span>中断请求的边沿检测器。<span class="token number">2</span><span class="token punctuation">.</span> EXTI 的每根输入线都可单独进行配置，以选择类型（中断或事件）和相应的触发事件（上升沿触发、下降沿触发或边沿触发）还可独立地被屏蔽。<span class="token number">3</span><span class="token punctuation">.</span> EXIT功能<span class="token punctuation">:</span>产生中断<span class="token punctuation">;</span>产生事件<span class="token punctuation">.</span></code></pre><h3 id="STM32-EXIT框架图"><a href="#STM32-EXIT框架图" class="headerlink" title="STM32 EXIT框架图"></a>STM32 EXIT框架图</h3><p><img src="https://img-blog.csdnimg.cn/20201003151626597.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="STM32 EXIT框架图"></p><h2 id="EXTI外部中断步骤"><a href="#EXTI外部中断步骤" class="headerlink" title="EXTI外部中断步骤"></a>EXTI外部中断步骤</h2><ol><li>使能I0口时钟，配置I0口模式为输入</li><li>开启AFIO时钟，设置I0口与中断线的映射关系</li><li>配置中断分组（NVIC），使能中断</li><li>初始化EXTI，选择触发方式</li><li>编写EXTI中断服务函数<h4 id="GPIO引脚配置（本文中和外部中断bsp-exit-h一起进行初始化，可以分开进行配置相关函数）"><a href="#GPIO引脚配置（本文中和外部中断bsp-exit-h一起进行初始化，可以分开进行配置相关函数）" class="headerlink" title="GPIO引脚配置（本文中和外部中断bsp_exit.h一起进行初始化，可以分开进行配置相关函数）"></a>GPIO引脚配置（本文中和外部中断bsp_exit.h一起进行初始化，可以分开进行配置相关函数）</h4>(一般配置过程类似，无论使用什么外设，UART,IIC,SPI,ADC 一般情况都要GPIO初始化)<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//定义GPIO初始化结构体</span><span class="token comment" spellcheck="true">//使能 GPIO时钟 (时钟分频)</span><span class="token comment" spellcheck="true">//设置相关外部设备的对应引脚</span><span class="token comment" spellcheck="true">//设置GPIO端口模式(GPIO输入 GPIO输出)</span><span class="token comment" spellcheck="true">//设置生效(GPIO端口启动生效)</span><span class="token macro property"># GPIO输入模式</span><span class="token keyword">void</span> <span class="token function">initKey</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//定义GPIO初始化结构体</span> <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使能 GPIO时钟 (时钟分频)</span> GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY_UP_PIN<span class="token operator">|</span>KEY_DOWN_PIN<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置相关外部设备的对应引脚</span> GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IPU<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//设置上拉输入 //设置GPIO端口模式</span> <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//设置生效(GPIO端口启动生效)</span></code></pre></li></ol><p>}</p><h1 id="GPIO输出模式"><a href="#GPIO输出模式" class="headerlink" title="GPIO输出模式"></a>GPIO输出模式</h1><p>void initLED(void)<br>{<br>    GPIO_InitTypeDef GPIO_InitStructure;                  //定义GPIO初始化结构体<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); //使能GPIO时钟<br>    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;              //设置对应引脚<br>    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;      //设置推挽输出<br>    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;     //工作速度50MHz<br>    GPIO_Init(GPIOB, &amp;GPIO_InitStructure);                //设置生效<br>    GPIO_ResetBits(GPIOB, GPIO_Pin_5);                      //默认低电平，LED不<br>}</p><pre><code>#### 配置嵌套向量中断控制器NVIC步骤1. 定义NVIC结构体        NVIC_InitTypeDef 结构体```ctypedef struct{    uint8_t NVIC_IRQChannel; //中断源    uint8_t NVIC_IRQChannelPreemptionPriority; //抢占优先级    uint8_t NVIC_IRQChannelSubPriority; //响应优先级    FunctionalState NVIC_IRQChannelCmd; //中断使能或失能} NVIC_InitTypeDef;</code></pre><ol start="2"><li>配置NVIC为优先级组<br><img src="https://img-blog.csdnimg.cn/20201003160403277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="优先级组"><pre class=" language-c"><code class="language-c"><span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_1<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li><li>配置中断源<pre class=" language-c"><code class="language-c">NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> KEY1_INT_EXTI_IRQ<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// #define KEY1_INT_EXTI_PORTSOURCE   GPIO_PortSourceGPIOA</span><span class="token comment" spellcheck="true">// #define KEY1_INT_EXTI_PINSOURCE    GPIO_PinSource0</span><span class="token comment" spellcheck="true">// #define KEY1_INT_EXTI_LINE         EXTI_Line0</span><span class="token comment" spellcheck="true">// #define KEY1_INT_EXTI_IRQ          EXTI0_IRQn</span></code></pre></li><li>配置抢占优先级<pre class=" language-c"><code class="language-c">NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li>配置子优先级 <pre class=" language-c"><code class="language-c">NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li>使能中断通道<pre class=" language-c"><code class="language-c">NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span></code></pre></li><li>初始化NVIC<pre class=" language-c"><code class="language-c"><span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="配置-EXTI中断口，并设置中断优先级步骤流程"><a href="#配置-EXTI中断口，并设置中断优先级步骤流程" class="headerlink" title="配置 EXTI中断口，并设置中断优先级步骤流程"></a>配置 EXTI中断口，并设置中断优先级步骤流程</h4></li></ol><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> 定义GPIO_InitTypeDef EXTI_InitTypeDef 结构体GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span> EXTI_InitTypeDef EXTI_InitStructure<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  uint16_t GPIO_Pin<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/*!&lt; Specifies the GPIO pins to be configured.                                      This parameter can be any value of @ref GPIO_pins_define */</span>  GPIOSpeed_TypeDef GPIO_Speed<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*!&lt; Specifies the speed for the selected pins.                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */</span>  GPIOMode_TypeDef GPIO_Mode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*!&lt; Specifies the operating mode for the selected pins.                                      This parameter can be a value of @ref GPIOMode_TypeDef */</span><span class="token punctuation">}</span>GPIO_InitTypeDef<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  uint32_t EXTI_Line<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/*!&lt; Specifies the EXTI lines to be enabled or disabled.                                         This parameter can be any combination of @ref EXTI_Lines */</span>  EXTIMode_TypeDef EXTI_Mode<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*!&lt; Specifies the mode for the EXTI lines.                                         This parameter can be a value of @ref EXTIMode_TypeDef */</span>  EXTITrigger_TypeDef EXTI_Trigger<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*!&lt; Specifies the trigger signal active edge for the EXTI lines.                                         This parameter can be a value of @ref EXTIMode_TypeDef */</span>  FunctionalState EXTI_LineCmd<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*!&lt; Specifies the new state of the selected EXTI lines.                                         This parameter can be set either to ENABLE or DISABLE */</span> <span class="token punctuation">}</span>EXTI_InitTypeDef<span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201003162222876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="GPIO结构体"><br><img src="https://img-blog.csdnimg.cn/20201003162222867.png#pic_center" alt="中断事件结构体"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*开启按键GPIO口的时钟*/</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>KEY1_INT_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 配置 NVIC 中断*/</span><span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="GPIO引脚配置"><a href="#GPIO引脚配置" class="headerlink" title="GPIO引脚配置"></a>GPIO引脚配置</h5><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*--------------------------KEY1配置-------------------------*/</span><span class="token comment" spellcheck="true">/* 选择按键用到的GPIO */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY1_INT_GPIO_PIN<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置为浮空输入 */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY1_INT_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*------------------------KEY2配置-----------------------------*/</span>  <span class="token comment" spellcheck="true">/* 选择按键用到的GPIO */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY2_INT_GPIO_PIN<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置为浮空输入 */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY2_INT_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="中断配置"><a href="#中断配置" class="headerlink" title="中断配置"></a>中断配置</h5><ol><li>中断信号源 </li><li>EXIT模式</li><li>外部中断触发类型</li><li>使能中断EXIT</li><li>中断初始化<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 选择EXTI的信号源 */</span><span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>KEY1_INT_EXTI_PORTSOURCE<span class="token punctuation">,</span> KEY1_INT_EXTI_PINSOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span> EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line <span class="token operator">=</span> KEY1_INT_EXTI_LINE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* EXTI为中断模式 */</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode <span class="token operator">=</span> EXTI_Mode_Interrupt<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 上升沿中断 */</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger <span class="token operator">=</span> EXTI_Trigger_Rising<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使能中断 */</span>    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span><span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="BSP-EXIT-H"><a href="#BSP-EXIT-H" class="headerlink" title="BSP_EXIT.H"></a>BSP_EXIT.H</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_GPIO_PORT         GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_GPIO_CLK          (RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO)</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_GPIO_PIN          GPIO_Pin_0</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_EXTI_PORTSOURCE   GPIO_PortSourceGPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_EXTI_PINSOURCE    GPIO_PinSource0</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_EXTI_LINE         EXTI_Line0</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_INT_EXTI_IRQ          EXTI0_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY1_IRQHandler            EXTI0_IRQHandler</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_GPIO_PORT         GPIOC</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_GPIO_CLK          (RCC_APB2Periph_GPIOC|RCC_APB2Periph_AFIO)</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_GPIO_PIN          GPIO_Pin_13</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_EXTI_PORTSOURCE   GPIO_PortSourceGPIOC</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_EXTI_PINSOURCE    GPIO_PinSource13</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_EXTI_LINE         EXTI_Line13</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_INT_EXTI_IRQ          EXTI15_10_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY2_IRQHandler            EXTI15_10_IRQHandler</span></code></pre><h3 id="BSP-EXIT-C"><a href="#BSP-EXIT-C" class="headerlink" title="BSP_EXIT.C"></a>BSP_EXIT.C</h3><h4 id="配置嵌套向量中断控制器NVIC"><a href="#配置嵌套向量中断控制器NVIC" class="headerlink" title="配置嵌套向量中断控制器NVIC"></a>配置嵌套向量中断控制器NVIC</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> “bsp_exit.h”</span><span class="token comment" spellcheck="true">/**  * @brief  配置嵌套向量中断控制器NVIC  * @param  无  * @retval 无  */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置NVIC为优先级组1 */</span>  <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置中断源：按键1 */</span>  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> KEY1_INT_EXTI_IRQ<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置抢占优先级 */</span>  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置子优先级 */</span>  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 使能中断通道 */</span>  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>  <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置中断源：按键2，其他使用上面相关配置 */</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> KEY2_INT_EXTI_IRQ<span class="token punctuation">;</span>  <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="配置-IO为EXTI中断口，并设置中断优先级"><a href="#配置-IO为EXTI中断口，并设置中断优先级" class="headerlink" title="配置 IO为EXTI中断口，并设置中断优先级"></a>配置 IO为EXTI中断口，并设置中断优先级</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EXTI_Key_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>     EXTI_InitTypeDef EXTI_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*开启按键GPIO口的时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>KEY1_INT_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 配置 NVIC 中断*/</span>    <span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*--------------------------KEY1配置-----------------------------*/</span>    <span class="token comment" spellcheck="true">/* 选择按键用到的GPIO */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY1_INT_GPIO_PIN<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置为浮空输入 */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY1_INT_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 选择EXTI的信号源 */</span>  <span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>KEY1_INT_EXTI_PORTSOURCE<span class="token punctuation">,</span> KEY1_INT_EXTI_PINSOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span>   EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line <span class="token operator">=</span> KEY1_INT_EXTI_LINE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* EXTI为中断模式 */</span>  EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode <span class="token operator">=</span> EXTI_Mode_Interrupt<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 上升沿中断 */</span>  EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger <span class="token operator">=</span> EXTI_Trigger_Rising<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 使能中断 */</span>      EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>  <span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*--------------------------KEY2配置-----------------------------*/</span>    <span class="token comment" spellcheck="true">/* 选择按键用到的GPIO */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY2_INT_GPIO_PIN<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 配置为浮空输入 */</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY2_INT_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 选择EXTI的信号源 */</span>  <span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>KEY2_INT_EXTI_PORTSOURCE<span class="token punctuation">,</span> KEY2_INT_EXTI_PINSOURCE<span class="token punctuation">)</span><span class="token punctuation">;</span>   EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line <span class="token operator">=</span> KEY2_INT_EXTI_LINE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* EXTI为中断模式 */</span>  EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode <span class="token operator">=</span> EXTI_Mode_Interrupt<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 下降沿中断 */</span>  EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger <span class="token operator">=</span> EXTI_Trigger_Falling<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 使能中断 */</span>      EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>  <span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="中断服务函数"><a href="#中断服务函数" class="headerlink" title="中断服务函数"></a>中断服务函数</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x_it.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_test.h"</span></span><span class="token comment" spellcheck="true">/********************************************************************************  * @file    stm32 用户自定义外部中断  * @author  dele  * @version V1.0  * @date    2020-10-03  * @brief   按键测试（中断模式/EXTI模式）  * 实验平台:野火 F103-霸道 STM32 开发板   ******************************************************************************  */</span> <span class="token keyword">void</span> <span class="token function">KEY1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//确保是否产生了EXTI Line中断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EXTI_GetITStatus</span><span class="token punctuation">(</span>KEY1_INT_EXTI_LINE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// LED1 取反        </span>        LED1_TOGGLE<span class="token punctuation">;</span>        <span class="token function">BSP_KEY1_EXIT_LCDTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"KEY1 EXIT www.delehub.top"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//清除中断标志位</span>        <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>KEY1_INT_EXTI_LINE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">KEY2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//确保是否产生了EXTI Line中断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EXTI_GetITStatus</span><span class="token punctuation">(</span>KEY2_INT_EXTI_LINE<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// LED2 取反        </span>        LED2_TOGGLE        <span class="token function">BSP_KEY2_EXIT_LCDTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token string">"KEY2 EXIT 2020-10-03 14:50"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//清除中断标志位</span>        <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>KEY2_INT_EXTI_LINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h4 id="按键外部中断测试函数"><a href="#按键外部中断测试函数" class="headerlink" title="按键外部中断测试函数"></a>按键外部中断测试函数</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BSP_KEY1_EXIT_LCDTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">LCD_SetFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetColors</span><span class="token punctuation">(</span>RED<span class="token punctuation">,</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_Clear</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>LCD_X_LENGTH<span class="token punctuation">,</span>LCD_Y_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清屏，显示全黑 */</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"2020-10-03 14:30 BSP_EXIT_TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"KEY1 EXIT TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DrawCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">BSP_KEY2_EXIT_LCDTEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">LCD_SetFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetColors</span><span class="token punctuation">(</span>RED<span class="token punctuation">,</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_Clear</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>LCD_X_LENGTH<span class="token punctuation">,</span>LCD_Y_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清屏，显示全黑 */</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"2020-10-03 14:30 DELEHUB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"KEY2 EXIT TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DrawCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/****************************************************************  * @file    main.c  * 实验平台:野火 F103-霸道 STM32 开发板  ***************************************************************** 第三方库文件导入  START THE FILE ***************************************************************/</span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_led.h"</span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_key.h"</span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_beep.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_exit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_ili9341_lcd.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_SysTick.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_test.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"STM32F103xxxx_USART.H"</span>  </span><span class="token comment" spellcheck="true">/******************************************************************************END THE FILE  * 第三方库文件导入*********************************************************/</span> <span class="token keyword">void</span> <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">EXTI_Key_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LED_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Key_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Beep_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM4_Int_Init(9999,7199);</span>  <span class="token function">ILI9341_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  主函数  * @param  无  * @retval 无  */</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 硬件端口初始化 */</span>    <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="串口打印效果"><a href="#串口打印效果" class="headerlink" title="串口打印效果"></a>串口打印效果</h3><p><img src="https://img-blog.csdnimg.cn/20201003153440133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="串口打印效果"></p><h3 id="TFT显示效果"><a href="#TFT显示效果" class="headerlink" title="TFT显示效果"></a>TFT显示效果</h3><p><img src="https://img-blog.csdnimg.cn/20201003153501455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="TFT显示效果key2"><br><img src="https://img-blog.csdnimg.cn/20201003153501430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="TFT显示效果key2"></p><h3 id="博客地址https-delehub-vercel-app"><a href="#博客地址https-delehub-vercel-app" class="headerlink" title="博客地址https://delehub.vercel.app/"></a>博客地址<a href="https://delehub.vercel.app/">https://delehub.vercel.app/</a></h3>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> 嵌入式 STM32 </category>
          
          <category> 中断 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> 嵌入式STM32 </tag>
            
            <tag> 野火F1开发 </tag>
            
            <tag> 中断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>野火F1开发板STM32案例-USART使用</title>
      <link href="/2020/10/02/ye-huo-f1-kai-fa-ban-stm32-an-li-usart-shi-yong/"/>
      <url>/2020/10/02/ye-huo-f1-kai-fa-ban-stm32-an-li-usart-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="野火F1开发板STM32-USART使用"><a href="#野火F1开发板STM32-USART使用" class="headerlink" title="野火F1开发板STM32-USART使用"></a>野火F1开发板STM32-USART使用</h1><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><ol><li>野火STM32F103ZET6 霸道V2开发板</li><li>正点原子F1开发板</li><li>STM32蓝色板<br><img src="https://img-blog.csdnimg.cn/20201002210908329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="野火STM32产品"></li></ol><h2 id="软件平台"><a href="#软件平台" class="headerlink" title="软件平台"></a>软件平台</h2><ol><li>Keil MDK 5.31</li><li>串口调试助手<h2 id="串口配置步骤"><a href="#串口配置步骤" class="headerlink" title="串口配置步骤"></a>串口配置步骤</h2></li><li>使能RX和TX引脚GPIO时钟和USART时钟；</li><li>初始化 GPIO，并将GPIO复用到USART.上；</li><li>配置 USART参数；</li><li>配置中断控制器并使能USART接收中断；</li><li>使 能USART；</li><li>在USART接收中断服务函数实现数据接收和发送。<h2 id="工程模板结构"><a href="#工程模板结构" class="headerlink" title="工程模板结构"></a>工程模板结构</h2><img src="https://img-blog.csdnimg.cn/20201002204307734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="工程模板结构"><br>文件夹 STExtend外设扩展文件，USER用户自定义函数库<br>工程文件下载链接<a href="https://download.csdn.net/download/weixin_43599390/12909901" target="_blank" rel="noopener">https://download.csdn.net/download/weixin_43599390/12909901</a><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//bsp_xx.h板载第三方库文件</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_led.h"</span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_key.h"</span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_beep.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_exit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_ili9341_lcd.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_SysTick.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_test.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"STM32F103xxxx_USART.H"</span>  </span></code></pre></li></ol><h2 id="STM32F103ZET6-串口引脚列表"><a href="#STM32F103ZET6-串口引脚列表" class="headerlink" title="STM32F103ZET6 串口引脚列表"></a>STM32F103ZET6 串口引脚列表</h2><p><img src="https://img-blog.csdnimg.cn/20201002205012211.png#pic_center" alt="串口引脚列表"></p><h3 id="STM32F103xxxx-USART-C"><a href="#STM32F103xxxx-USART-C" class="headerlink" title="STM32F103xxxx_USART.C"></a>STM32F103xxxx_USART.C</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//==================================================================================================                                  // 包含全局头文件</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"STM32F103xxxx_USART.H"</span>                     </span><span class="token comment" spellcheck="true">// 包含内设头文件 USART-USART通信总线</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  宏自定义声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  定义引用变量    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  硬件端口定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  引用函数声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token keyword">void</span> <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">USART_ReceiveChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_Float</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">float</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送字节</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 本函数没有考虑发送9位数据可能性</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Byte - 字节  取值范文 - ASCII字符</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>USARTx <span class="token operator">-></span> SR <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 等待上次发送完成   </span>    USARTx <span class="token operator">-></span> DR <span class="token operator">=</span> Char<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 装载本次发送数据    </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 接收字符</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//  输出参量: Char - 待接收字节  取值范围 - ASCII字符</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">USART_ReceiveChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> USARTx<span class="token operator">-></span>DR<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送字符串</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            String - 待发送字符串指针  取值范文 - ASCII字符串</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true">// \0 表示字符串结束标志，通过检测是否字符串末尾</span>    <span class="token punctuation">{</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数组</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Array - 待发送数组的指针  取值范围 - 指针类型</span><span class="token comment" spellcheck="true">//            Count - 待发送数组的数量  取值范围 - 0~255</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 定义局部变量 用于函数循环</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> Array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送回车换行</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 换行</span>    <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 回车</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送有符号整型数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送整数  取值范围 - 整型类型 -99999~+99999</span><span class="token comment" spellcheck="true">//            Count - 显示的位数  取值范围 - 1~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 定义局部数组，用于数据存储</span>    <span class="token comment" spellcheck="true">// 判断 整型数字正负</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 负数转整数</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 发送串口数据</span>    <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送无符号整型数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送整数  取值范围 - 整型类型 0~99999</span><span class="token comment" spellcheck="true">//            Count - 显示的位数  取值范围 - 1~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 定义局部数组，用于数据存储</span>    <span class="token comment" spellcheck="true">// 断言检查参数</span>    <span class="token comment" spellcheck="true">// 执行相关操作</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> NumberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送串口数据</span>    <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">,</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数字 浮点类型</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 本函数打印浮点数字与实际输入数字存在偏差</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送浮点型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count1 - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//            Count2 - 小数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_Float</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">float</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储整数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部数组 用于存储小数位各位数据</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span>  Number_Integer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的整数部分</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span>  Number_Decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义局部变量 表示浮点数的小数部分</span>    <span class="token comment" spellcheck="true">// 判断 浮点数字正负</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number<span class="token punctuation">;</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 限制 发送位数</span>    <span class="token comment" spellcheck="true">// 由于由于float型的有效十进制数值最多为7位，即整数位 + 小数位 数量一定小于等于7</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">+</span> Count2 <span class="token operator">></span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Count1 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Count1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>Count2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 分离 整数位与小数位</span>    <span class="token comment" spellcheck="true">// 取整数部分</span>    Number_Integer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 取小数部分 1e5科学计数法表示10000</span>    Number_Decimal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Number <span class="token operator">-</span> Number_Integer <span class="token operator">+</span> <span class="token number">0.000005</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算各位数值的字符</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count1<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Integer<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>Count2<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Decimal<span class="token operator">/</span><span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>     <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span><span class="token punctuation">,</span> Count1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 显示整数位</span>    <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Number_Decimal_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        Count2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 显示小数位</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 发送数字 二进制数字</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: USARTx - 通道号  取值范围 - USARTx1/USARTx2/USARTx3/UARTx4/UARTx5</span><span class="token comment" spellcheck="true">//            Number - 待发送有符号长整型数字  取值范围 - -99999.99999~99999.99999</span><span class="token comment" spellcheck="true">//            Count - 整数显示位数  取值范围 - 0~5</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_Binary</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span><span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Count<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Number <span class="token operator">&amp;</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>Count<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Number <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  函数功能: USART 预配置</span><span class="token comment" spellcheck="true">//  函数标记: 内设驱动函数</span><span class="token comment" spellcheck="true">//  函数说明: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  输入参量: 无</span><span class="token comment" spellcheck="true">//  输出参量: 无</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  |   -   |   -   |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token keyword">void</span> <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    USART_InitTypeDef USART_InitStructure_USARTx1<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 配置 USARTx1 功能</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1 == 1)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 参数检查</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx1_BAUD != 600)   \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 1200)  \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 2400)  \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 4800)  \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 9600)  \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 14400) \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 19200) \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 38400) \        &amp;&amp;   (STM32F103xxxx_USARTx1_BAUD != 115200))</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx1_BAUD"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx1_BAUD != 600)   \</span>                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">1200</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">2400</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">4800</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">9600</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">14400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">19200</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">38400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx1_BAUD <span class="token operator">!=</span> <span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx1_PORT_A09A10 + STM32F103xxxx_USARTx1_PORT_B06B07) != 1)</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx1_PORT"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx1_PORT_A09A10 + STM32F103xxxx_USARTx1_PORT_B06B07) != 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO引脚映射功能</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)                </span><span class="token comment" spellcheck="true">// 不映射</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_B06B07 == 1)                </span><span class="token comment" spellcheck="true">// 完全映射</span>        <span class="token punctuation">{</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">GPIO_PinRemapConfig</span><span class="token punctuation">(</span>GPIO_Remap_USART1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_B06B07 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO TXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOA模块时钟</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_9<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_B06B07 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOB模块时钟</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_6<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx1_TxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_B06B07 == 1) </span>        <span class="token comment" spellcheck="true">// 配置GPIO RXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOA模块时钟</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_A09A10 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_PORT_B06B07 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOB模块时钟</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_7<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx1_RxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_PORT_B06B07 == 1) </span>        <span class="token comment" spellcheck="true">// 配置 USARTx1 功能</span>       <span class="token comment" spellcheck="true">// USART_InitTypeDef USART_InitStructure_USARTx1;                                          // 定义结构体变量</span>        <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_USART1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 使能USART1模块时钟</span>        <span class="token function">USART_DeInit</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_BaudRate   <span class="token operator">=</span> STM32F103xxxx_USARTx1_BAUD<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 设置USART波特率</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 设置USART数据位长度 8位数据位</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_StopBits   <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 设置USART停止位长度 1位停止位</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_Parity     <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 设置USART校验位长度 无校验</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置USART硬件数据流控制</span>        USART_InitStructure_USARTx1<span class="token punctuation">.</span>USART_Mode       <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 设置USART模式 发送模式+接收模式</span>        <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure_USARTx1<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                              <span class="token comment" spellcheck="true">// 使能USART1模块运行</span>        <span class="token comment" spellcheck="true">// 配置 USARTx1 中断操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_ITEN_RXNE == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx1接受中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_ITEN_RXNE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_ITEN_IDLE == 1)              </span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_IDLE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx1空闲中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_ITEN_IDLE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_ITEN_TC == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_IT_TC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启用USARTx1发送完成中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_ITEN_TC == 1)</span>        <span class="token comment" spellcheck="true">// 配置 USARTx1 DMA操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_DMA_TX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_DMAReq_Tx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx1 DMA发送</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_DMA_TX == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx1_DMA_RX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span> USART_DMAReq_Rx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx1 DMA接收</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1_DMA_RX == 1)</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1 == 1)</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 配置 USARTx2 功能</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2 == 1)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 参数检查</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx2_BAUD != 600)   \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 1200)  \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 2400)  \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 4800)  \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 9600)  \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 14400) \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 19200) \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 38400) \        &amp;&amp;   (STM32F103xxxx_USARTx2_BAUD != 115200))</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx2_BAUD"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx2_BAUD != 600)   \</span>                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">1200</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">2400</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">4800</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">9600</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">14400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">19200</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">38400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx2_BAUD <span class="token operator">!=</span> <span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx2_PORT_A02A03 + STM32F103C8T6_USARTx2_PORT_D06D07) != 1)</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx2_PORT"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx2_PORT_A02A03 + STM32F103C8T6_USARTx2_PORT_D06D07) != 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO引脚映射功能</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)                </span><span class="token comment" spellcheck="true">// 不映射</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103C8T6_USARTx2_PORT_D06D07 == 1)                </span><span class="token comment" spellcheck="true">// 完全映射</span>        <span class="token punctuation">{</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">GPIO_PinRemapConfig</span><span class="token punctuation">(</span>GPIO_FullRemap_USART2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103C8T6_USARTx2_PORT_D06D07 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO TXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使能GPIOA模块时钟</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_2<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103C8T6_USARTx2_PORT_D06D07 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOD<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使能GPIOD模块时钟</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_6<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx2_TxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103C8T6_USARTx2_PORT_D06D07 == 1) </span>        <span class="token comment" spellcheck="true">// 配置GPIO RXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使能GPIOA模块时钟</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_3<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_PORT_A02A03 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103C8T6_USARTx2_PORT_D06D07 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOD<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使能GPIOD模块时钟</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_7<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx2_RxD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103C8T6_USARTx2_PORT_D06D07 == 1) </span>        <span class="token comment" spellcheck="true">// 配置 USARTx2 功能</span>        USART_InitTypeDef USART_InitStructure_USARTx2<span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">// 定义结构体变量</span>        <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_USART2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 使能USART2模块时钟</span>        <span class="token function">USART_DeInit</span><span class="token punctuation">(</span>USART2<span class="token punctuation">)</span><span class="token punctuation">;</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_BaudRate   <span class="token operator">=</span> STM32F103xxxx_USARTx2_BAUD<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 设置USART波特率</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 设置USART数据位长度 8位数据位</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_StopBits   <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 设置USART停止位长度 1位停止位</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_Parity     <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 设置USART校验位长度 无校验</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置USART硬件数据流控制</span>        USART_InitStructure_USARTx2<span class="token punctuation">.</span>USART_Mode       <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 设置USART模式 发送模式+接收模式</span>        <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure_USARTx2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                              <span class="token comment" spellcheck="true">// 使能USART2模块运行</span>        <span class="token comment" spellcheck="true">// 配置 USARTx2 中断操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_ITEN_RXNE == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx2接受中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_ITEN_RXNE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_ITEN_IDLE == 1)              </span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_IDLE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx2空闲中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_ITEN_IDLE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_ITEN_TC == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_IT_TC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启用USARTx2发送完成中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_ITEN_TC == 1)</span>        <span class="token comment" spellcheck="true">// 配置 USARTx2 DMA操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_DMA_TX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_DMAReq_Tx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx2 DMA发送</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_DMA_TX == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx2_DMA_RX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART2<span class="token punctuation">,</span> USART_DMAReq_Rx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx2 DMA接收</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx2_DMA_RX == 1)</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx1 == 1)</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 配置 USARTx3 功能</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3 == 1)  </span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 参数检查</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx3_BAUD != 600)   \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 1200)  \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 2400)  \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 4800)  \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 9600)  \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 14400) \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 19200) \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 38400) \        &amp;&amp;   (STM32F103xxxx_USARTx3_BAUD != 115200))</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx3_BAUD"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx3_BAUD != 600)   \</span>                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">1200</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">2400</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">4800</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">9600</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">14400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">19200</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">38400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_USARTx3_BAUD <span class="token operator">!=</span> <span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_USARTx3_PORT_B10B11 + STM32F103xxxx_USARTx3_PORT_C10C11 + STM32F103xxxx_USARTx3_PORT_D08D09) != 1)</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_USARTx3_PORT"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_USARTx3_PORT_B10B11 + STM32F103xxxx_USARTx3_PORT_C10C11 + STM32F103xxxx_USARTx3_PORT_D08D09) != 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO引脚映射功能</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)                </span><span class="token comment" spellcheck="true">// 不映射</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)                </span><span class="token comment" spellcheck="true">// 部分映射</span>        <span class="token punctuation">{</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">GPIO_PinRemapConfig</span><span class="token punctuation">(</span>GPIO_PartialRemap_USART3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)                </span><span class="token comment" spellcheck="true">// 完全映射</span>        <span class="token punctuation">{</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">GPIO_PinRemapConfig</span><span class="token punctuation">(</span>GPIO_FullRemap_USART3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO TXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOB模块时钟</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOC模块时钟</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOD<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOD模块时钟</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_8<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_TXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO RXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOB模块时钟</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_B10B11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOC模块时钟</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_C10C11 == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOD<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOD模块时钟</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_9<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_USARTx3_RXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_PORT_D08D09 == 1)</span>        <span class="token comment" spellcheck="true">// 配置 USARTx3 功能</span>        USART_InitTypeDef USART_InitStructure_USARTx3<span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">// 定义结构体变量</span>        <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_USART3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 使能USART3模块时钟</span>        <span class="token function">USART_DeInit</span><span class="token punctuation">(</span>USART3<span class="token punctuation">)</span><span class="token punctuation">;</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_BaudRate   <span class="token operator">=</span> STM32F103xxxx_USARTx3_BAUD<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 设置USART波特率</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 设置USART数据位长度 8位数据位</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_StopBits   <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 设置USART停止位长度 1位停止位</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_Parity     <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 设置USART校验位长度 无校验</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置USART硬件数据流控制</span>        USART_InitStructure_USARTx3<span class="token punctuation">.</span>USART_Mode       <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 设置USART模式 发送模式+接收模式</span>        <span class="token function">USART_Init</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure_USARTx3<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                              <span class="token comment" spellcheck="true">// 使能USART3模块运行</span>        <span class="token comment" spellcheck="true">// 配置 USARTx3 中断操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_ITEN_RXNE == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx3接受中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_ITEN_RXNE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_ITEN_IDLE == 1)              </span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_IT_IDLE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx3空闲中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_ITEN_IDLE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_ITEN_TC == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_IT_TC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启用USARTx3发送完成中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_ITEN_TC == 1)</span>        <span class="token comment" spellcheck="true">// 配置 USARTx3 DMA操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_DMA_TX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_DMAReq_Tx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx3 DMA发送</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_DMA_TX == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_USARTx3_DMA_RX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>USART3<span class="token punctuation">,</span> USART_DMAReq_Rx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 启用USARTx3 DMA接收</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3_DMA_RX == 1)</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_USARTx3 == 1)</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 配置 UARTx4 功能</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4 == 1)    </span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 参数检查</span>        <span class="token macro property">#<span class="token directive keyword">if</span> ((STM32F103xxxx_UARTx4_BAUD != 600)   \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 1200)  \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 2400)  \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 4800)  \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 9600)  \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 14400) \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 19200) \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 38400) \        &amp;&amp;   (STM32F103xxxx_UARTx4_BAUD != 115200))</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_UARTx4_BAUD"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if ((STM32F103xxxx_UARTx4_BAUD != 600)   \</span>                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">1200</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">2400</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">4800</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">9600</span><span class="token punctuation">)</span>  \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">14400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">19200</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">38400</span><span class="token punctuation">)</span> \                   <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>STM32F103xxxx_UARTx4_BAUD <span class="token operator">!=</span> <span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_PORT_C10C11 != 1)</span>        <span class="token punctuation">{</span>            <span class="token macro property">#<span class="token directive keyword">error</span> "There are errors in the STM32F103xxxx_UARTx4_PORT"</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_PORT_C10C11 != 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO引脚映射功能</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)                 </span><span class="token comment" spellcheck="true">// 不映射</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO TXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOC模块时钟</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_10<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 推挽输出类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)</span>        <span class="token comment" spellcheck="true">// 配置GPIO RXD引脚</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)</span>        <span class="token punctuation">{</span>            GPIO_InitTypeDef GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 定义结构体变量</span>            <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 使能GPIOC模块时钟</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> GPIO_Pin_11<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 设置GPIO引脚号</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置GPIO引脚速率</span>            GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 设置GPIO引脚输出类型 浮空输入类型</span>            <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure_UARTx4_TXD<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_PORT_C10C11 == 1)</span>        <span class="token comment" spellcheck="true">// 配置 UARTx4 功能</span>        USART_InitTypeDef USART_InitStructure_UARTx4<span class="token punctuation">;</span>                                           <span class="token comment" spellcheck="true">// 定义结构体变量</span>        <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_UART4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">// 使能UART4模块时钟</span>        <span class="token function">USART_DeInit</span><span class="token punctuation">(</span>UART4<span class="token punctuation">)</span><span class="token punctuation">;</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_BaudRate   <span class="token operator">=</span> STM32F103xxxx_UARTx4_BAUD<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置USART波特率</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_WordLength <span class="token operator">=</span> USART_WordLength_8b<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 设置USART数据位长度 8位数据位</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_StopBits   <span class="token operator">=</span> USART_StopBits_1<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 设置USART停止位长度 1位停止位</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_Parity     <span class="token operator">=</span> USART_Parity_No<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 设置USART校验位长度 无校验</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_HardwareFlowControl <span class="token operator">=</span> USART_HardwareFlowControl_None<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置USART硬件数据流控制</span>        USART_InitStructure_UARTx4<span class="token punctuation">.</span>USART_Mode       <span class="token operator">=</span> USART_Mode_Rx <span class="token operator">|</span> USART_Mode_Tx<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置USART模式 发送模式+接收模式</span>        <span class="token function">USART_Init</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStructure_UARTx4<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">// 初始化结构体</span>        <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                               <span class="token comment" spellcheck="true">// 使能UART4模块运行</span>        <span class="token comment" spellcheck="true">// 配置 UARTx4 中断操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_ITEN_RXNE == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_IT_RXNE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 启用UARTx4接受中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_ITEN_RXNE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_ITEN_IDLE == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_IT_IDLE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 启用UARTx4空闲中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_ITEN_IDLE == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_ITEN_TC == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_ITConfig</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_IT_TC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 启用UARTx4发送完成中断</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_ITEN_TC == 1)</span>        <span class="token comment" spellcheck="true">// 配置 UARTx4 DMA操作</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_DMA_TX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_DMAReq_Tx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 启用UARTx4 DMA发送</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_DMA_TX == 1)</span>        <span class="token macro property">#<span class="token directive keyword">if</span> (STM32F103xxxx_UARTx4_DMA_RX == 1)</span>        <span class="token punctuation">{</span>            <span class="token function">USART_DMACmd</span><span class="token punctuation">(</span>UART4<span class="token punctuation">,</span> USART_DMAReq_Rx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 启用UARTx4 DMA接收</span>        <span class="token punctuation">}</span>        <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4_DMA_RX == 1)</span>    <span class="token punctuation">}</span>    <span class="token macro property">#<span class="token directive keyword">endif</span>  </span><span class="token comment" spellcheck="true">// #if (STM32F103xxxx_UARTx4 == 1)</span><span class="token punctuation">}</span></code></pre><h3 id="STM32F103xxxx-USART-H"><a href="#STM32F103xxxx-USART-H" class="headerlink" title="STM32F103xxxx_USART.H"></a>STM32F103xxxx_USART.H</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token comment" spellcheck="true">//  文件名称: STM32F103xxxx_USART.H</span><span class="token comment" spellcheck="true">//  文件功能: USART-USART通信总线</span><span class="token comment" spellcheck="true">//  文件说明: 无</span><span class="token comment" spellcheck="true">//==================================================================================================</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> __STM32F103xxxx_USART_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __STM32F103xxxx_USART_H__</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  包含的头文件    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x_usart.h"</span></span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// 宏自定义声明     |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  兼容STM32系列单片机 GPIO端口宏定义</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx1                             USART1</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx2                             USART2</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx3                             USART3</span><span class="token macro property">#<span class="token directive keyword">define</span> UARTx4                              UART4</span><span class="token macro property">#<span class="token directive keyword">define</span> UARTx5                              UART5</span><span class="token comment" spellcheck="true">// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1                       1       </span><span class="token comment" spellcheck="true">// USARTx1 开关开启  取值范围 - 0为禁用 1为启用  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_BAUD                  115200  </span><span class="token comment" spellcheck="true">// USARTx1 波特率  取值范围 - 600/1200/2400/4800/9600/19200/38400/115200</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_PORT_A09A10           1       </span><span class="token comment" spellcheck="true">// USARTx1 引脚设置 PA9 - TxD PA10 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_PORT_B06B07           0       </span><span class="token comment" spellcheck="true">// USARTx1 引脚设置 PB6 - TxD PB7 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_ITEN_RXNE             0       </span><span class="token comment" spellcheck="true">// USARTx1 接受中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_ITEN_IDLE             0       </span><span class="token comment" spellcheck="true">// USARTx1 空闲中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_ITEN_TC               0       </span><span class="token comment" spellcheck="true">// USARTx1 发送完成中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_DMA_TX                0       </span><span class="token comment" spellcheck="true">// USARTx1 DMA发送 开关  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_DMA_RX                0       </span><span class="token comment" spellcheck="true">// USARTx1 DMA接受 开关  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_DMA_TX_CUNT           1024    </span><span class="token comment" spellcheck="true">// USARTx1 DMA发送 字节数量</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx1_DMA_RX_CUNT           1024    </span><span class="token comment" spellcheck="true">// USARTx1 DMA接受 字节数量</span><span class="token comment" spellcheck="true">// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2                       0       </span><span class="token comment" spellcheck="true">// USARTx2 开关开启  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_BAUD                  9600    </span><span class="token comment" spellcheck="true">// USARTx2 波特率  取值范围 - 600/1200/2400/4800/9600/19200/38400/115200</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_PORT_A02A03           1       </span><span class="token comment" spellcheck="true">// USARTx2 引脚设置 PA2 - TxD PA3 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_PORT_D05D06           0       </span><span class="token comment" spellcheck="true">// USARTx2 引脚设置 PD5 - TxD PD6 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_ITEN_RXNE             0       </span><span class="token comment" spellcheck="true">// USARTx2 接受中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_ITEN_IDLE             0       </span><span class="token comment" spellcheck="true">// USARTx2 空闲中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx2_ITEN_TC               0       </span><span class="token comment" spellcheck="true">// USARTx2 发送完成中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token comment" spellcheck="true">// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3                       0       </span><span class="token comment" spellcheck="true">// USARTx3 开关开启  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_BAUD                  115200  </span><span class="token comment" spellcheck="true">// USARTx3 波特率  取值范围 - 600/1200/2400/4800/9600/19200/38400/115200</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_PORT_B10B11           1       </span><span class="token comment" spellcheck="true">// USARTx3 引脚设置 PB10 - TxD PB11 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_PORT_C10C11           0       </span><span class="token comment" spellcheck="true">// USARTx3 引脚设置 PC10 - TxD PC11 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_PORT_D08D09           0       </span><span class="token comment" spellcheck="true">// USARTx3 引脚设置 PD8 - TxD PD9 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_ITEN_RXNE             0       </span><span class="token comment" spellcheck="true">// USARTx3 接受中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_ITEN_IDLE             0       </span><span class="token comment" spellcheck="true">// USARTx3 空闲中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_ITEN_TC               0       </span><span class="token comment" spellcheck="true">// USARTx3 发送完成中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_DMA_TX                0       </span><span class="token comment" spellcheck="true">// USARTx3 DMA发送 开关开启  取值范围 - 0为禁用 1为使能</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_DMA_RX                0       </span><span class="token comment" spellcheck="true">// USARTx3 DMA接受 开关开启  取值范围 - 0为禁用 1为使能</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_DMA_TX_COUNT          1024    </span><span class="token comment" spellcheck="true">// USARTx3 DMA发送 字节数量</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_USARTx3_DMA_RX_COUNT          1024    </span><span class="token comment" spellcheck="true">// USARTx3 DMA接受 字节数量</span><span class="token comment" spellcheck="true">// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4                        0       </span><span class="token comment" spellcheck="true">// UARTx4 开关开启  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4_BAUD                   115200  </span><span class="token comment" spellcheck="true">// UARTx4 波特率  取值范围 - 600/1200/2400/4800/9600/19200/38400/115200</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4_PORT_C10C11            1       </span><span class="token comment" spellcheck="true">// UARTx4 引脚设置 PC10 - TxD PC11 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4_ITEN_RXNE              1       </span><span class="token comment" spellcheck="true">// UARTx4 接受中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4_ITEN_IDLE              0       </span><span class="token comment" spellcheck="true">// UARTx4 空闲中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx4_ITEN_TC                0       </span><span class="token comment" spellcheck="true">// UARTx4 发送完成中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token comment" spellcheck="true">// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5                        0       </span><span class="token comment" spellcheck="true">// UARTx5 开关开启  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5_BAUD                   115200  </span><span class="token comment" spellcheck="true">// UARTx5 波特率  取值范围 - 600/1200/2400/4800/9600/19200/38400/115200</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5_PORT_C12D02            1       </span><span class="token comment" spellcheck="true">// UARTx5 引脚设置 PC10 - TxD PC11 - RxD  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5_ITEN_RXNE              1       </span><span class="token comment" spellcheck="true">// UARTx5 接受中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5_ITEN_IDLE              0       </span><span class="token comment" spellcheck="true">// UARTx5 空闲中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token macro property">#<span class="token directive keyword">define</span> STM32F103xxxx_UARTx5_ITEN_TC                0       </span><span class="token comment" spellcheck="true">// UARTx5 发送完成中断操作使能  取值范围 - 0为禁用 1为启用</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  数据变量定义    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  函数调用声明    |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   </span><span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">//  USART 预配置</span><span class="token keyword">void</span> <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送字符、字符串</span><span class="token keyword">void</span> <span class="token function">USART_SendChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 接受字符</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">USART_ReceiveChar</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送数组 </span><span class="token keyword">void</span> <span class="token function">USART_SendArray</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送回车换行</span><span class="token keyword">void</span> <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  USART 发送数字 </span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_Float</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">float</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USART_SendNumber_Binary</span><span class="token punctuation">(</span>USART_TypeDef<span class="token operator">*</span> USARTx<span class="token punctuation">,</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// #ifndef __STM32F103xxxx_USART_H__</span></code></pre><h3 id="BSP-TEST-C"><a href="#BSP-TEST-C" class="headerlink" title="BSP_TEST.C"></a>BSP_TEST.C</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_test.h"</span></span><span class="token comment" spellcheck="true">/**  * @brief  TFT_LCD_TEST LCD测试函数  * @param  none  * @retval 无 */</span><span class="token keyword">void</span>  <span class="token function">TFT_LCD_TEST</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_SetFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetColors</span><span class="token punctuation">(</span>RED<span class="token punctuation">,</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_Clear</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>LCD_X_LENGTH<span class="token punctuation">,</span>LCD_Y_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清屏，显示全黑 */</span>    <span class="token comment" spellcheck="true">/********显示字符串示例*******/</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"dele 3.2 inch LCD:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Image resolution:240x320"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"ILI9341 TFT_LCD_TEST driver "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"www.delehub.top By wangzixuan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"2020-10-02 17:15 TFT_LCD_TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LCD_SetFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Font8x16<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 画圆 */</span>  <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清除单行文字 */</span>    <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DispStringLine_EN</span><span class="token punctuation">(</span><span class="token function">LINE</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"TFT_LCD_DrawCir_TEST :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DrawCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_DrawCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_SetTextColor</span><span class="token punctuation">(</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ILI9341_DrawCircle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">0xFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ILI9341_Clear</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span>LCD_X_LENGTH<span class="token punctuation">,</span>LCD_Y_LENGTH<span class="token number">-16</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 清屏，显示全黑 */</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Usart_test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1 <span class="token punctuation">,</span> <span class="token string">"2020-10-02 18:00 USART1 Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendNumber_SignedInteger</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendNumber_UnsignedInteger</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">12445</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendNumber_Float</span><span class="token punctuation">(</span>USART1<span class="token punctuation">,</span><span class="token number">1234.89</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendString</span><span class="token punctuation">(</span>USART1 <span class="token punctuation">,</span> <span class="token string">"www.delehub.top  By wang zi xuan "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_SendLine</span><span class="token punctuation">(</span>USART1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  简单延时函数  * @param  nCount ：延时计数值  * @retval 无  */</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Delay</span> <span class="token punctuation">(</span> __IO uint32_t nCount <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> nCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> nCount <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="MAIN-C"><a href="#MAIN-C" class="headerlink" title="MAIN.C"></a>MAIN.C</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  ******************************************************************************  * @file    main.c  * 实验平台:野火 F103-霸道 STM32 开发板   ******************************************************************************  * 第三方库文件导入  START THE FILE  ******************************************************************************  */</span> <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_led.h"</span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_key.h"</span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_beep.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_exit.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_ili9341_lcd.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_SysTick.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_test.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"STM32F103xxxx_USART.H"</span>  </span><span class="token comment" spellcheck="true">/******************************************************************************END THE FILE  * 第三方库文件导入*********************************************************/</span> <span class="token keyword">void</span> <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LED_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Key_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Beep_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//TIM4_Int_Init(9999,7199);</span>  <span class="token function">ILI9341_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">USART_Configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  主函数  * @param  无  * @retval 无  */</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 硬件端口初始化 */</span>    <span class="token function">HardWare_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">ILI9341_GramScan</span> <span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">TFT_LCD_TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Usart_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="串口助手打印效果"><a href="#串口助手打印效果" class="headerlink" title="串口助手打印效果"></a>串口助手打印效果</h3><p><img src="https://img-blog.csdnimg.cn/20201002210122772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="串口助手打印效果"></p><h3 id="TFT-LCD-测试效果"><a href="#TFT-LCD-测试效果" class="headerlink" title="TFT_LCD 测试效果"></a>TFT_LCD 测试效果</h3><p><img src="https://img-blog.csdnimg.cn/20201002210353427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="TFT_LCD 测试效果"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> 嵌入式 STM32 </category>
          
          <category> 串口通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> 嵌入式STM32 </tag>
            
            <tag> 串口通信 USART String </tag>
            
            <tag> 野火F1开发板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C and MicrocontrollersPlan-2</title>
      <link href="/2020/09/15/c-and-microcontrollersplan-2/"/>
      <url>/2020/09/15/c-and-microcontrollersplan-2/</url>
      
        <content type="html"><![CDATA[<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><h2 id="1-二进制-字节单位"><a href="#1-二进制-字节单位" class="headerlink" title="1.二进制 字节单位"></a>1.二进制 字节单位</h2><p><strong>二进制</strong>：二进制数只有0和1两个数码，它的每一位都可以用电子元件来实现，且运算规则简单，运算电路也容易实现。</p><p><strong>位</strong>(bit)：位的英文名是用bit来表示。一个变量的位数越大就意味着这个变量的取值范围越大。一个单片机的位数越大，就说明这个单片机一次处理的数据范围就越大，意味着运算和处理速度就越快。</p><p><strong>字节</strong>(Byte)： 什么是字节？字节是计算机很重要的一个基本单位，一个字节有8位。（1B = 8bit）</p><p><strong>字：</strong>16个位(bit)为一个字，它代表计算机处理指令或数据的二进制数位数。</p><p><strong>位是最小的存储单位，每一个位存储一个1位的二进制码，一个字节由8位组成。而字通常为16、32或64个位组成。</strong></p><pre class=" language-markdown"><code class="language-markdown">千，1KB=2的10次方＝bai1024B，du兆，1MB=2的20次方zhi＝dao1024<span class="token italic"><span class="token punctuation">*</span>1024B＝1024KB，吉，1GB=2的30次方＝1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024B=1024MB，太，1TB=2的40次方＝1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024B=1024GB,拍，1PB=2的50次方＝1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024B=1024TB,艾，1EB=2的60次方＝1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024B=1024PB,泽，1ZB=2的70次方＝1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024B=1024EB,尧，1YB=2的80次方＝1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024<span class="token italic"><span class="token punctuation">*</span>1024<span class="token punctuation">*</span></span>1024B=1024ZB</code></pre><p><strong><em>变量取值范围：</em></strong></p><pre class=" language-c"><code class="language-c"> <span class="token keyword">unsigned</span> <span class="token keyword">char</span>的变量占用<span class="token number">1</span>个字节RAM，共<span class="token number">8</span>位，取值范围是从<span class="token number">0</span>到<span class="token number">255</span>。  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>的变量占用<span class="token number">2</span>个字节RAM，共<span class="token number">16</span>位，取值范围是从<span class="token number">0</span>到<span class="token number">65535</span>。 <span class="token comment" spellcheck="true">//对于51内核的单片机，unsigned int的变量是占用2个字节。</span> <span class="token comment" spellcheck="true">//如果是在32位的stm32单片机，unsigned int的变量是占用4个字节的，所以不同的单片机不同的编译器是会有一些差异的。</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span>的变量占用<span class="token number">4</span>个字节RAM，共<span class="token number">32</span>位，根据前面LED灯的例子，取值范围是从<span class="token number">0</span>到<span class="token number">4294967295</span>。 </code></pre><h2 id="2-进制"><a href="#2-进制" class="headerlink" title="2.进制"></a><strong>2.进制</strong></h2><h3 id="数制："><a href="#数制：" class="headerlink" title="数制："></a>数制：</h3><ol><li>进位制：表示数时，仅用一位数码往往不够用，必须用进位计数的方法组成多位数码。多位数码每一位的构成以及从低位到高位的进位规则称为进位计数制，简称进位制。</li><li>基 数：进位制的基数，就是在该进位制中可能用到的数码个数。</li><li>位 权（位的权数）：在某一进位制的数中，每一位的大小都对应着该位上的数码乘上一个固定的数，这个固定的数就是这一位的权数。权数是一个幂。</li></ol><h3 id="二进制：（B）"><a href="#二进制：（B）" class="headerlink" title="二进制：（B）"></a>二进制：（B）</h3><ol><li>数码为：0、1；基数是2。</li><li>运算规律：逢二进一，即：1＋1＝10</li><li>加法规则：0+0=0，0+1=1，1+0=1，1+1=10</li><li>乘法规则：0.0=0， 0.1=0 ，1.0=0，1.1=1</li><li>二进制数只有0和1两个数码，它的每一位都可以用电子元件来实现，且运算规则简单，相应的运算电路也容易实现。</li></ol><h3 id="十进制：-D"><a href="#十进制：-D" class="headerlink" title="十进制：(D)"></a>十进制：(D)</h3><ol><li>数码为：0～9；基数是10。</li><li>运算规律：逢十进一，即：9＋1＝10</li><li>任意一个十进制数都可以表示为各个数位上的数码与其对应的权的乘积之和，称权展开式。</li></ol><h3 id="八进制：-O"><a href="#八进制：-O" class="headerlink" title="八进制：(O)"></a>八进制：(O)</h3><ol><li>数码为：0～7；基数是8。</li><li>运算规律：逢八进一，即：7＋1＝10</li></ol><h3 id="16进制：-H"><a href="#16进制：-H" class="headerlink" title="16进制：(H)"></a>16进制：(H)</h3><ol><li>数码为：0～9、A～F；基数是16。</li><li>运算规律：逢十六进一，即：F＋1＝10</li><li>16进制表示为 0X?? </li><li>16进制转成二进制 0X?? ？对应二进制数</li></ol><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><p><strong>①一般地，N进制需要用到N个数码，基数是N；运算规律为逢N进一。</strong></p><p><strong>②如果一个N进制数M包含ｎ位整数和ｍ位小数, (an-1 an-2 … a1 a0 · a－1 a－2 … a－m)2</strong></p><p><strong>则该数的权展开式为：</strong></p><p><strong>(M)2 ＝ an-1×Nn-1 ＋ an-2 ×Nn-2 ＋  …  ＋a1×N1＋ a0 ×N0＋a－1 ×N-1＋a－2 ×N-2＋… ＋a－m×N-m</strong>                          </p><p><strong>③由权展开式很容易将一个N进制数转换为十进制数</strong></p><p><strong>常见的进制转换</strong></p><p><img src="https://i.loli.net/2020/09/19/GuZlvoYdQxJmhPi.jpg" alt="img"></p><h2 id="3-数制转换"><a href="#3-数制转换" class="headerlink" title="3.数制转换"></a><strong>3.数制转换</strong></h2><h3 id="1-二进制数与八进制数的相互转换"><a href="#1-二进制数与八进制数的相互转换" class="headerlink" title="1.二进制数与八进制数的相互转换"></a><strong>1.二进制数与八进制数的相互转换</strong></h3><p>（1）二进制数转换为八进制数： 将二进制数由小数点开始，整数部分向左，小数部分向右，每3位分成一组，不够3位补零，则每组二进制数便是一位八进制数。</p><p><img src="https://i.loli.net/2020/09/19/Hot9kAlFDuiP76M.jpg" alt="img"></p><p>八进制数转换为二进制数：将每位八进制数用3位二进制数表示。    </p><p><img src="https://i.loli.net/2020/09/19/ALBvMQwYSk8dJl7.jpg" alt="img"></p><h3 id="2-二进制数与十六进制数的相互转换"><a href="#2-二进制数与十六进制数的相互转换" class="headerlink" title="2.二进制数与十六进制数的相互转换"></a><strong>2.二进制数与十六进制数的相互转换</strong></h3><p>1.二进制数与十六进制数的相互转换，按照每4位二进制数对应于一位十六进制数进行转换。</p><p><img src="https://i.loli.net/2020/09/19/OapsivEVWHgkCAU.jpg" alt="img"></p><h3 id="3-十进制数转换为二进制数"><a href="#3-十进制数转换为二进制数" class="headerlink" title="3.十进制数转换为二进制数"></a><strong>3.十进制数转换为二进制数</strong></h3><p>采用的方法 — 基数连除、连乘法</p><p>原理：将整数部分和小数部分分别进行转换。整数部分采用基数连除法，小数部分采用基数连乘法再合并。</p><ol><li>整数部分采用基数连除法，先得到的余数为低位，后得到的余数为高位。</li><li>小数部分采用基数连乘法，先得到的整数为高位，后得到的整数为低位。</li></ol><p><img src="https://i.loli.net/2020/09/19/q7RrQtvUgOcw6Jj.jpg" alt="img"></p><p>采用基数连除、连乘法，可将十进制数转换为任意的N进制数。</p><p><img src="https://i.loli.net/2020/09/19/ealxOqtJTBrA6hD.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/5RcpvmB7n43NETd.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/Fg2xRXKNhPOuJYZ.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/MONsuW4pKq6DPXm.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/BGfv7jkQRD3EuFe.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/WslAwO6dqHpi7gK.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/FVyrZusMk9IeAUj.jpg" alt="img"></p><p><img src="https://i.loli.net/2020/09/19/H3Jhfjy8PbgDOMZ.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C and MicrocontrollersPlan-1</title>
      <link href="/2020/09/13/c-and-microcontrollersplan-1/"/>
      <url>/2020/09/13/c-and-microcontrollersplan-1/</url>
      
        <content type="html"><![CDATA[<h1 id="MicrocontrollersPlan"><a href="#MicrocontrollersPlan" class="headerlink" title="MicrocontrollersPlan"></a>MicrocontrollersPlan</h1><h2 id="C程序设计复习"><a href="#C程序设计复习" class="headerlink" title="C程序设计复习"></a>C程序设计复习</h2><h2 id="单片机复习"><a href="#单片机复习" class="headerlink" title="单片机复习"></a>单片机复习</h2><ol><li>单片机案例实验与仿真 (51单片机100实例源码)</li><li>C51单片机开源项目合集</li><li>单片机编程技巧与分析(手把手教你单片机程序框架 )(从单片机基础到程序框架.pdf)</li><li>项目课程设计</li></ol><h3 id="参考资料-吴坚鸿《从单片机基础到程序框架》"><a href="#参考资料-吴坚鸿《从单片机基础到程序框架》" class="headerlink" title="参考资料 吴坚鸿《从单片机基础到程序框架》"></a>参考资料 吴坚鸿《从单片机基础到程序框架》</h3><p>===================================================================================</p><h2 id="复习1-md-程序模块化设计"><a href="#复习1-md-程序模块化设计" class="headerlink" title="复习1.md 程序模块化设计"></a>复习1.md 程序模块化设计</h2><h3 id="程序模块化设计"><a href="#程序模块化设计" class="headerlink" title="程序模块化设计"></a>程序模块化设计</h3><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"REG52.H"</span>   </span><span class="token comment" spellcheck="true">//进入主程序前的区域：头文件包含</span>sbit beep_dr<span class="token operator">=</span>P3<span class="token operator">^</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进入主程序前的区域：宏定义</span>sbit led_dr<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进入主程序前的区域：宏定义</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进入主程序前的区域：内存分配</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//主程序入口，即将进入初始化区域</span><span class="token punctuation">{</span>    beep_dr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一步：初始化区域：蜂鸣器开始鸣叫。</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6250</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第二步：初始化区域：延时 0.5 秒左右。也就是蜂鸣器鸣叫的持续时间。</span>    beep_dr<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第三步：初始化区域：蜂鸣器停止鸣叫。</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//执行完上面的初始化区域，即将进入循环区域</span>    <span class="token punctuation">{</span>        led_dr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第四步：循环区域：LED 开始点亮。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6250</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第五步：循环区域：延时 0.5 秒左右。也就是 LED 点亮的持续时间。</span>        led_dr<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第六步：循环区域：LED 开始熄灭。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6250</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第七步：循环区域：延时 0.5 秒左右。也就是 LED 熄灭的持续时间。</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//执行完上面第七步后，单片机又马上返回到上面第四步继续往下执行。</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//...进入主程序前的区域</span>main<span class="token punctuation">.</span>c<span class="token comment" spellcheck="true">// 官方库文件导入 </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg51.h></span></span><span class="token comment" spellcheck="true">// 第三方库文件导入(个人)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"led.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"oled.h"</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 模块引脚定义</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模块初始化</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//代码执行部分</span>         <span class="token comment" spellcheck="true">//代码循环部分</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Iint</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">oled_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">led_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">beep_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dht_11_Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//....... </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...初始化区域</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//...循环区域</span>     <span class="token comment" spellcheck="true">// led_on;</span>     <span class="token comment" spellcheck="true">// led_off;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>定义变量的关键字。常用有 3 种容量的变量，每种变量的取值范围不一样。</p><ol><li><p>第一种是”unsigned char”  <strong>0~2^8-1</strong><br>变量，取值范围从 0 到 255，占用 RAM 一个字节，比喻成一房一厅。</p></li><li><p>第二种是”unsigned int”变量，取值  <strong>0~2^16-1</strong><br>范围从 0 到 65535，占用 RAM 两个字节，比喻成两房一厅。</p></li><li><p>第三种是“unsigned long”变量，取值范围从 0<br>到 4294967295，占用 RAM 四个字节，比喻成四房一厅。<strong>0~2^32-1</strong></p></li></ol><p><strong>注意：多说一句，上述的变量范围是针对本教程所用的单片机，当针对不同的单片机时上述变量的范围可能会有一些小差异，比如在 stm32 单片机中，unsigned int 的字节数就不是两个字节，而是四个字节，这些都是由所选的编译器决定.</strong></p><p>定义变量的语法格式</p><ol><li><p>关键字，变量名，分号</p><pre class=" language-C"><code class="language-C">unsigned char a;//其中 unsigned char 就是关键字，a 就是变量名，分号”;”就是一条语句的结束符号</code></pre></li><li><p>关键字标识符一些注意点</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*不合法标识符*/</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> 3a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不合法，第一个字符不能是数字。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token keyword">char</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不合法，char 是编译器已征用的关键字。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不合法，ab 是一个变量名，a 与 b 的中间不能有空格。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法，a 和 b 分别是一个独立的变量名，a 与 b 的中间可以用逗号隔开。</span><span class="token comment" spellcheck="true">/*合法标识符*/</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> abc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> _ab<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> _3ab<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a123<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a12ced<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合法。</span></code></pre><p><strong><u>规则：</u></strong></p><ol><li><strong>变量名的第一个字符不能是数字。</strong></li><li><strong>必须是字母或者下划线，字母或者下划线后面可以带数字。</strong></li><li><strong>一个变量名之间的字符不能带空格，两个独立变量名之间也不能用空格隔开（但是两个独立变量</strong><br><strong>名之间可以用逗号隔开）。</strong></li><li><strong>变量名不能跟编译器已征用的关键字重名，不能跟函数名重名。</strong></li></ol></li></ol><h3 id="变量-RAM关系"><a href="#变量-RAM关系" class="headerlink" title="变量 RAM关系"></a>变量 RAM关系</h3><ol><li><p>定义变量与 RAM 的内在关系。<strong>当我们定义一个变量时，相当于向单片机申请了一个 RAM 空间。</strong>C 编译器<br>会<strong>自动为这个变量名分配一个 RAM 空间</strong>，<strong>每个字节的 RAM 空间都有一个固定唯一的地址</strong>。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a 占用一个字节的 RAM 空间，这个空间的地址由 C 编译自动分配。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//b 占用一个字节的 RAM 空间，这个空间的地址由 C 编译自动分配。</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c 占用一个字节的 RAM 空间，这个空间的地址由 C 编译自动分配。</span></code></pre></li><li><p>只需要记住这个变量的名称就可以了。<strong>操作某个变量名，就相当于操作某个对应地址的 RAM 空间</strong>。</p></li></ol><h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h3><ol><li><p>赋值：把右边对象的内容复制一份给左边对象。</p></li><li><p>特性：就是覆盖性，左边对象原来的内容会被右边对象复制过来的新内容所覆盖。</p></li><li><p>格式</p><ol><li>赋值语句的格式。赋值语句的语法格式由 4 部分组成：左边对象，关键字，右边对象，分号。</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span></code></pre></li><li><p>其中 a 就是左边对象。</p><ol start="3"><li><strong>其中“=”就是关键字。</strong>写法跟我们平时用的等于号是一样，但是在 C 语言里不是等于的意思，而是代<br>表赋值的意思。</li><li>它是<strong>代表中文含义的“给”</strong>，而<strong>不是用于判断的“等于”</strong>，跟等于号是两码事。</li><li>其中 <strong>b 就是右边对象</strong>。</li><li>其中<strong>分号“;”</strong>代表一条语句的结束符。</li><li>注意C语言程序是    <strong>等于是  ——–》 “ == “</strong></li></ol><h3 id="单片机串口打印部分函数"><a href="#单片机串口打印部分函数" class="headerlink" title="单片机串口打印部分函数"></a>单片机串口打印部分函数</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> u32ViewData<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Su8ViewBuffer<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8_0D_0A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x0d</span><span class="token punctuation">,</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8Start<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"开始..."</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Su8FirstFlag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Su16FirstDelay<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>Su8FirstFlag<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Su8FirstFlag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Su16FirstDelay<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16FirstDelay<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>Su16FirstDelay<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SendString</span><span class="token punctuation">(</span>Cu8Start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SendString</span><span class="token punctuation">(</span>Cu8_0D_0A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SendString</span><span class="token punctuation">(</span>Cu8_0D_0A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">to_BufferData</span><span class="token punctuation">(</span>u32ViewData<span class="token punctuation">,</span>Su8ViewBuffer<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SendString</span><span class="token punctuation">(</span>Su8ViewBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">to_BufferData</span><span class="token punctuation">(</span>u32ViewData<span class="token punctuation">,</span>Su8ViewBuffer<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SendString</span><span class="token punctuation">(</span>Su8ViewBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">to_BufferData</span><span class="token punctuation">(</span>u32ViewData<span class="token punctuation">,</span>Su8ViewBuffer<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SendString</span><span class="token punctuation">(</span>Su8ViewBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">to_BufferData</span><span class="token punctuation">(</span>u32ViewData<span class="token punctuation">,</span>Su8ViewBuffer<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SendString</span><span class="token punctuation">(</span>Su8ViewBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SendString</span><span class="token punctuation">(</span>Cu8_0D_0A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">to_BufferData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> u32Data<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pu8Buffer<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8Type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8Array1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0xB5</span><span class="token punctuation">,</span><span class="token number">0xDA</span><span class="token punctuation">,</span><span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0xB8</span><span class="token punctuation">,</span><span class="token number">0xF6</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span><span class="token number">0xFD</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8Array2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"十进制:"</span><span class="token punctuation">;</span>     code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8Array3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"十六进制:"</span><span class="token punctuation">;</span>   code <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cu8Array4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"二进制:"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Su8SerialNumber<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  Su16BufferCnt<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  Su16TempCnt<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  Su16TempSet<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Su32Temp1<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Su32Temp2<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Su32Temp3<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Su8ViewFlag<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span>u8Type<span class="token punctuation">)</span>   <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Su16BufferCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Cu8Array1<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>         pu8Buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>Su8SerialNumber<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">;</span>         pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x0d</span><span class="token punctuation">;</span>         pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x0a</span><span class="token punctuation">;</span>         pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       Su8SerialNumber<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">==</span>u8Type<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Su16BufferCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>          pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Cu8Array2<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        Su32Temp1<span class="token operator">=</span><span class="token number">1000000000</span><span class="token punctuation">;</span>      Su32Temp2<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>      Su16TempSet<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">==</span>u8Type<span class="token punctuation">)</span>   <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Su16BufferCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>          pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Cu8Array3<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         Su32Temp1<span class="token operator">=</span><span class="token number">0x10000000</span><span class="token punctuation">;</span>       Su32Temp2<span class="token operator">=</span><span class="token number">0x00000010</span><span class="token punctuation">;</span>       Su16TempSet<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>     <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Su16BufferCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>          pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Cu8Array4<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         Su32Temp1<span class="token operator">=</span><span class="token number">0x80000000</span><span class="token punctuation">;</span>       Su32Temp2<span class="token operator">=</span><span class="token number">0x00000002</span><span class="token punctuation">;</span>       Su16TempSet<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    Su8ViewFlag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Su16TempCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16TempCnt<span class="token operator">&lt;</span>Su16TempSet<span class="token punctuation">;</span>Su16TempCnt<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       Su32Temp3<span class="token operator">=</span>u32Data<span class="token operator">/</span>Su32Temp1<span class="token operator">%</span>Su32Temp2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Su32Temp3<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Su32Temp3<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>           pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span>Su32Temp3<span class="token number">-10</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>u32Data<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>Su8ViewFlag<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token operator">!=</span>pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>               Su8ViewFlag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            Su16BufferCnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       Su32Temp1<span class="token operator">=</span>Su32Temp1<span class="token operator">/</span>Su32Temp2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x0d</span><span class="token punctuation">;</span>    pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x0a</span><span class="token punctuation">;</span>    pu8Buffer<span class="token punctuation">[</span>Su16BufferCnt<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SendString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pu8String<span class="token punctuation">)</span>   <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Su16SendCnt<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Su16Delay<span class="token punctuation">;</span>  SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>  TMOD<span class="token operator">=</span><span class="token number">0X21</span><span class="token punctuation">;</span>  TH1<span class="token operator">=</span>TL1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">11059200</span><span class="token operator">/</span><span class="token number">12</span><span class="token operator">/</span><span class="token number">32</span><span class="token operator">/</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TR1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  ES <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   TI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>Su16SendCnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16SendCnt<span class="token operator">&lt;</span><span class="token number">43</span><span class="token punctuation">;</span>Su16SendCnt<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>pu8String<span class="token punctuation">[</span>Su16SendCnt<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        SBUF <span class="token operator">=</span>pu8String<span class="token punctuation">[</span>Su16SendCnt<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>Su16Delay<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Su16Delay<span class="token operator">&lt;</span><span class="token number">800</span><span class="token punctuation">;</span>Su16Delay<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      TI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><pre><code>   ### 赋值语句的覆盖性   #### 案例 数字交换   #### demo 1   ```c   //view()功能相当于printf()函数，view()单片机的串口打印功能   void main() //主函数   {       unsigned char a=1; //定义的变量 a 被分配了 1 个字节的 RAM 空间，保存的数据被初始化成 1。       unsigned char b=5; //定义的变量 b 被分配了 1 个字节的 RAM 空间，保存的数据被初始化成 5。       b=a; //第一步：为了交换，先把 a 的数赋值给 b。       a=b; //第二步：为了交换，再把 b 的数赋值给 a。       View(a); //把第 1 个数 a 发送到电脑端的串口助手软件上观察。       View(b); //把第 2 个数 b 发送到电脑端的串口助手软件上观察。       while(1)       {       }   }   //代码分析   //由于b的数据在执行完“第一步”后，b自己原来的数据5被覆盖丢失了变成新的数据1，   //接着执行“第二步”后，此时相当于把 b的新数据1赋值给a，并没有5！所以a和b的数据都是1</code></pre><pre class=" language-c"><code class="language-c">   <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//主函数</span>   <span class="token punctuation">{</span>          <span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义的变量a被分配了1个字节的RAM空间，保存的数据被初始化成1。</span>          <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义的变量b被分配了1个字节的RAM空间，保存的数据被初始化成5。</span>          <span class="token keyword">unsigned</span> <span class="token keyword">char</span> t<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//定义一个第三方变量t，用来临时寄存数值。</span>          t<span class="token operator">=</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一步：为了避免b的数据在赋值后被覆盖丢失，先寄存一份在第三方变量t那里。</span>          b<span class="token operator">=</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第二步：把a的数赋值给b，b原来的数据虽然丢失，但是b在t变量那里有备份。</span>          a<span class="token operator">=</span>t<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第三步：再把b在t变量里的备份赋值给a。注意，这里不能用b，因b原数据已被覆盖。</span>          <span class="token function">View</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把第1个数a发送到电脑端的串口助手软件上观察。</span>           <span class="token function">View</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把第2个数b发送到电脑端的串口助手软件上观察。</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 代码分析</span>   <span class="token comment" spellcheck="true">//中间变量t  b=a; b--> t &lt;--a </span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Simple Dynamic Strings</title>
      <link href="/2020/09/12/c-yu-yan-zi-fu-chuan-han-shu-ku/"/>
      <url>/2020/09/12/c-yu-yan-zi-fu-chuan-han-shu-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="Simple-Dynamic-Strings"><a href="#Simple-Dynamic-Strings" class="headerlink" title="Simple Dynamic Strings"></a>Simple Dynamic Strings</h1><p><strong>Notes about version 2</strong>: this is an updated version of SDS in an attempt<br>to finally unify Redis, Disque, Hiredis, and the stand alone SDS versions.<br>This version is <strong>NOT* binary compatible</strong> with SDS verison 1, but the API<br>is 99% compatible so switching to the new lib should be trivial.</p><p>Note that this version of SDS may be a slower with certain workloads, but<br>uses less memory compared to V1 since header size is dynamic and depends to<br>the string to alloc.</p><p>Moreover it includes a few more API functions, notably <code>sdscatfmt</code> which<br>is a faster version of <code>sdscatprintf</code> that can be used for the simpler<br>cases in order to avoid the libc <code>printf</code> family functions performance<br>penalty.</p><h1 id="How-SDS-strings-work"><a href="#How-SDS-strings-work" class="headerlink" title="How SDS strings work"></a>How SDS strings work</h1><p>SDS is a string library for C designed to augment the limited libc string<br>handling functionalities by adding heap allocated strings that are:</p><ul><li>Simpler to use.</li><li>Binary safe.</li><li>Computationally more efficient.</li><li>But yet… Compatible with normal C string functions.</li></ul><p>This is achieved using an alternative design in which instead of using a C<br>structure to represent a string, we use a binary prefix that is stored<br>before the actual pointer to the string that is returned by SDS to the user.</p><pre><code>+--------+-------------------------------+-----------+| Header | Binary safe C alike string... | Null term |+--------+-------------------------------+-----------+         |         `-&gt; Pointer returned to the user.</code></pre><p>Because of meta data stored before the actual returned pointer as a prefix,<br>and because of every SDS string implicitly adding a null term at the end of<br>the string regardless of the actual content of the string, SDS strings work<br>well together with C strings and the user is free to use them interchangeably<br>with other std C string functions that access the string in read-only.</p><p>SDS was a C string I developed in the past for my everyday C programming needs,<br>later it was moved into Redis where it is used extensively and where it was<br>modified in order to be suitable for high performance operations. Now it was<br>extracted from Redis and forked as a stand alone project.</p><p>Because of its many years life inside Redis, SDS provides both higher level<br>functions for easy strings manipulation in C, but also a set of low level<br>functions that make it possible to write high performance code without paying<br>a penalty for using an higher level string library.</p><h1 id="Advantages-and-disadvantages-of-SDS"><a href="#Advantages-and-disadvantages-of-SDS" class="headerlink" title="Advantages and disadvantages of SDS"></a>Advantages and disadvantages of SDS</h1><p>Normally dynamic string libraries for C are implemented using a structure<br>that defines the string. The structure has a pointer field that is managed<br>by the string function, so it looks like this:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> yourAverageStringLibrary <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>    size_t len<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> possibly more fields here <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>SDS strings as already mentioned don’t follow this schema, and are instead<br>a single allocation with a prefix that lives <em>before</em> the address actually<br>returned for the string.</p><p>There are advantages and disadvantages with this approach over the traditional<br>approach:</p><p><strong>Disadvantage #1</strong>: many functions return the new string as value, since sometimes SDS requires to create a new string with more space, so the most SDS API calls look like this:</p><pre class=" language-c"><code class="language-c">s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"Some more data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>As you can see <code>s</code> is used as input for <code>sdscat</code> but is also set to the value<br>returned by the SDS API call, since we are not sure if the call modified the<br>SDS string we passed or allocated a new one. Not remembering to assign back<br>the return value of <code>sdscat</code> or similar functions to the variable holding<br>the SDS string will result in a bug.</p><p><strong>Disadvantage #2</strong>: if an SDS string is shared in different places in your program you have to modify all the references when you modify the string. However most of the times when you need to share SDS strings it is much better to encapsulate them into structures with a <code>reference count</code> otherwise it is too easy to incur into memory leaks.</p><p><strong>Advantage #1</strong>: you can pass SDS strings to functions designed for C functions without accessing a struct member or calling a function, like this:</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> sds_string<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In most other libraries this will be something like:</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> string<span class="token operator">-></span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Or:</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">getStringPointer</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Advantage #2</strong>: accessing individual chars is straightforward. C is a low level language so this is an important operation in many programs. With SDS strings accessing individual chars is very natural:</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c %c\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>With other libraries your best chance is to assign <code>string-&gt;buf</code> (or call the function to get the string pointer) to a <code>char</code> pointer and work with this. However since the other libraries may reallocate the buffer implicitly every time you call a function that may modify the string you have to get a reference to the buffer again.</p><p><strong>Advantage #3</strong>: single allocation has better cache locality. Usually when you access a string created by a string library using a structure, you have two different allocations for the structure representing the string, and the actual buffer holding the string. Over the time the buffer is reallocated, and it is likely that it ends in a totally different part of memory compared to the structure itself. Since modern programs performances are often dominated by cache misses, SDS may perform better in many workloads.</p><h1 id="SDS-basics"><a href="#SDS-basics" class="headerlink" title="SDS basics"></a>SDS basics</h1><p>The type of SDS strings is just the char pointer <code>char *</code>. However SDS defines<br>an <code>sds</code> type as alias of <code>char *</code> in its header file: you should use the<br><code>sds</code> type in order to make sure you remember that a given variable in your<br>program holds an SDS string and not a C string, however this is not mandatory.</p><p>This is the simplest SDS program you can write that does something:</p><pre class=" language-c"><code class="language-c">sds mystring <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> mystring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsfree</span><span class="token punctuation">(</span>mystring<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> Hello World<span class="token operator">!</span></code></pre><p>The above small program already shows a few important things about SDS:</p><ul><li>SDS strings are created, and heap allocated, via the <code>sdsnew()</code> function, or other similar functions that we’ll see in a moment.</li><li>SDS strings can be passed to <code>printf()</code> like any other C string.</li><li>SDS strings require to be freed with <code>sdsfree()</code>, since they are heap allocated.</li></ul><h2 id="Creating-SDS-strings"><a href="#Creating-SDS-strings" class="headerlink" title="Creating SDS strings"></a>Creating SDS strings</h2><pre class=" language-c"><code class="language-c">sds <span class="token function">sdsnewlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>init<span class="token punctuation">,</span> size_t initlen<span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdsdup</span><span class="token punctuation">(</span><span class="token keyword">const</span> sds s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>There are many ways to create SDS strings:</p><ul><li><p>The <code>sdsnew</code> function creates an SDS string starting from a C null terminated string. We already saw how it works in the above example.</p></li><li><p>The <code>sdsnewlen</code> function is similar to <code>sdsnew</code> but instead of creating the string assuming that the input string is null terminated, it gets an additional length parameter. This way you can create a string using binary data:</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  sds mystring<span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>  mystring <span class="token operator">=</span> <span class="token function">sdsnewlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s of len %d\n"</span><span class="token punctuation">,</span> mystring<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>mystring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  output<span class="token operator">></span> ABC of len <span class="token number">3</span></code></pre><p>Note: <code>sdslen</code> return value is casted to <code>int</code> because it returns a <code>size_t</code><br>type. You can use the right <code>printf</code> specifier instead of casting.</p></li><li><p>The <code>sdsempty()</code> function creates an empty zero-length string:</p><pre class=" language-c"><code class="language-c">  sds mystring <span class="token operator">=</span> <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>mystring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  output<span class="token operator">></span> <span class="token number">0</span></code></pre></li><li><p>The <code>sdsdup()</code> function duplicates an already existing SDS string:</p><pre class=" language-c"><code class="language-c">  sds s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>  s1 <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s2 <span class="token operator">=</span> <span class="token function">sdsdup</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  output<span class="token operator">></span> Hello Hello</code></pre></li></ul><h2 id="Obtaining-the-string-length"><a href="#Obtaining-the-string-length" class="headerlink" title="Obtaining the string length"></a>Obtaining the string length</h2><pre class=" language-c"><code class="language-c">size_t <span class="token function">sdslen</span><span class="token punctuation">(</span><span class="token keyword">const</span> sds s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In the examples above we already used the <code>sdslen</code> function in order to get<br>the length of the string. This function works like <code>strlen</code> of the libc<br>except that:</p><ul><li>It runs in constant time since the length is stored in the prefix of SDS strings, so calling <code>sdslen</code> is not expensive even when called with very large strings.</li><li>The function is binary safe like any other SDS string function, so the length is the true length of the string regardless of the content, there is no problem if the string includes null term characters in the middle.</li></ul><p>As an example of the binary safeness of SDS strings, we can run the following<br>code:</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnewlen</span><span class="token punctuation">(</span><span class="token string">"A\0\0B"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token number">4</span></code></pre><p>Note that SDS strings are always null terminated at the end, so even in that<br>case <code>s[4]</code> will be a null term, however printing the string with <code>printf</code><br>would result in just <code>&quot;A&quot;</code> to be printed since libc will treat the SDS string<br>like a normal C string.</p><h2 id="Destroying-strings"><a href="#Destroying-strings" class="headerlink" title="Destroying strings"></a>Destroying strings</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sdsfree</span><span class="token punctuation">(</span>sds s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The destroy an SDS string there is just to call <code>sdsfree</code> with the string<br>pointer. Note that even empty strings created with <code>sdsempty</code> need to be<br>destroyed as well otherwise they’ll result into a memory leak.</p><p>The function <code>sdsfree</code> does not perform any operation if instead of an SDS<br>string pointer, <code>NULL</code> is passed, so you don’t need to check for <code>NULL</code> explicitly before calling it:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token function">sdsfree</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Not needed. */</span><span class="token function">sdsfree</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Same effect but simpler. */</span></code></pre><h2 id="Concatenating-strings"><a href="#Concatenating-strings" class="headerlink" title="Concatenating strings"></a>Concatenating strings</h2><p>Concatenating strings to other strings is likely the operation you will end<br>using the most with a dynamic C string library. SDS provides different<br>functions to concatenate strings to existing strings.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdscatlen</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdscat</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The main string concatenation functions are <code>sdscatlen</code> and <code>sdscat</code> that are<br>identical, the only difference being that <code>sdscat</code> does not have an explicit<br>length argument since it expects a null terminated string.</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> Hello World<span class="token operator">!</span></code></pre><p>Sometimes you want to cat an SDS string to another SDS string, so you don’t<br>need to specify the length, but at the same time the string does not need to<br>be null terminated but can contain any binary data. For this there is a<br>special function:</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdscatsds</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> sds t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Usage is straightforward:</p><pre class=" language-c"><code class="language-c">sds s1 <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sds s2 <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1 <span class="token operator">=</span> <span class="token function">sdscatsds</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsfree</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> aaabbb</code></pre><p>Sometimes you don’t want to append any special data to the string, but you want<br>to make sure that there are at least a given number of bytes composing the<br>whole string.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdsgrowzero</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The <code>sdsgrowzero</code> function will do nothing if the current string length is<br>already <code>len</code> bytes, otherwise it will enlarge the string to <code>len</code> just padding<br>it with zero bytes.</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdsgrowzero</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* We are sure this is safe because of sdsgrowzero() */</span><span class="token function">printf</span><span class="token punctuation">(</span>"<span class="token operator">%</span>s\n'<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> Hello<span class="token operator">!</span></code></pre><h2 id="Formatting-strings"><a href="#Formatting-strings" class="headerlink" title="Formatting strings"></a>Formatting strings</h2><p>There is a special string concatenation function that accepts a <code>printf</code> alike<br>format specifier and cats the formatted string to the specified string.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdscatprintf</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><p>Example:</p><pre class=" language-c"><code class="language-c">sds s<span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"The sum is: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscatprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"%d+%d = %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Often you need to create SDS string directly from <code>printf</code> format specifiers.<br>Because <code>sdscatprintf</code> is actually a function that concatenates strings, all<br>you need is to concatenate your string to an empty string:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>name <span class="token operator">=</span> <span class="token string">"Anna"</span><span class="token punctuation">;</span><span class="token keyword">int</span> loc <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span>sds s<span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscatprintf</span><span class="token punctuation">(</span><span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%s wrote %d lines of LISP\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>You can use <code>sdscatprintf</code> in order to convert numbers into SDS strings:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> some_integer <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>sds num <span class="token operator">=</span> <span class="token function">sdscatprintf</span><span class="token punctuation">(</span><span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> some_integer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>However this is slow and we have a special function to make it efficient.</p><h2 id="Fast-number-to-string-operations"><a href="#Fast-number-to-string-operations" class="headerlink" title="Fast number to string operations"></a>Fast number to string operations</h2><p>Creating an SDS string from an integer may be a common operation in certain<br>kind of programs, and while you may do this with <code>sdscatprintf</code> the performance<br>hit is big, so SDS provides a specialized function.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdsfromlonglong</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Use it like this:</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsfromlonglong</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token number">5</span></code></pre><h2 id="Trimming-strings-and-getting-ranges"><a href="#Trimming-strings-and-getting-ranges" class="headerlink" title="Trimming strings and getting ranges"></a>Trimming strings and getting ranges</h2><p>String trimming is a common operation where a set of characters are<br>removed from the left and the right of the string. Another useful operation<br>regarding strings is the ability to just take a range out of a larger<br>string.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sdstrim</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sdsrange</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>SDS provides both the operations with the <code>sdstrim</code> and <code>sdsrange</code> functions.<br>However note that both functions work differently than most functions modifying<br>SDS strings since the return value is void: basically those functions always<br>destructively modify the passed SDS string, never allocating a new one, because<br>both trimming and ranges will never need more room: the operations can only<br>remove characters from the original string.</p><p>Because of this behavior, both functions are fast and don’t involve reallocation.</p><p>This is an example of string trimming where newlines and spaces are removed<br>from an SDS strings:</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"         my string\n\n  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdstrim</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">" \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-%s-\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token operator">-</span>my string<span class="token operator">-</span></code></pre><p>Basically <code>sdstrim</code> takes the SDS string to trim as first argument, and a<br>null terminated set of characters to remove from left and right of the string.<br>The characters are removed as long as they are not interrupted by a character<br>that is not in the list of characters to trim: this is why the space between<br><code>&quot;my&quot;</code> and <code>&quot;string&quot;</code> was preserved in the above example.</p><p>Taking ranges is similar, but instead to take a set of characters, it takes<br>to indexes, representing the start and the end as specified by zero-based<br>indexes inside the string, to obtain the range that will be retained.</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsrange</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-%s-\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token operator">-</span>ello<span class="token operator">-</span></code></pre><p>Indexes can be negative to specify a position starting from the end of the<br>string, so that <code>-1</code> means the last character, <code>-2</code> the penultimate, and so forth:</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsrange</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-%s-\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsrange</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-%s-\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token operator">-</span>World<span class="token operator">!</span><span class="token operator">-</span>output<span class="token operator">></span> <span class="token operator">-</span>World<span class="token operator">-</span></code></pre><p><code>sdsrange</code> is very useful when implementing networking servers processing<br>a protocol or sending messages. For example the following code is used<br>implementing the write handler of the Redis Cluster message bus between<br>nodes:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clusterWriteHandler</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    clusterLink <span class="token operator">*</span>link <span class="token operator">=</span> <span class="token punctuation">(</span>clusterLink<span class="token operator">*</span><span class="token punctuation">)</span> privdata<span class="token punctuation">;</span>    ssize_t nwritten <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> link<span class="token operator">-></span>sndbuf<span class="token punctuation">,</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>link<span class="token operator">-></span>sndbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nwritten <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Error handling... */</span>    <span class="token punctuation">}</span>    <span class="token function">sdsrange</span><span class="token punctuation">(</span>link<span class="token operator">-></span>sndbuf<span class="token punctuation">,</span>nwritten<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> more code here <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Every time the socket of the node we want to send the message to is writable<br>we attempt to write as much bytes as possible, and we use <code>sdsrange</code> in order<br>to remove from the buffer what was already sent.</p><p>The function to queue new messages to send to some node in the cluster will<br>simply use <code>sdscatlen</code> in order to put more data in the send buffer.</p><p>Note that the Redis Cluster bus implements a binary protocol, but since SDS<br>is binary safe this is not a problem, so the goal of SDS is not just to provide<br>an high level string API for the C programmer but also dynamically allocated<br>buffers that are easy to manage.</p><h2 id="String-copying"><a href="#String-copying" class="headerlink" title="String copying"></a>String copying</h2><p>The most dangerous and infamus function of the standard C library is probably<br><code>strcpy</code>, so perhaps it is funny how in the context of better designed dynamic<br>string libraries the concept of copying strings is almost irrelevant. Usually<br>what you do is to create strings with the content you want, or concatenating<br>more content as needed.</p><p>However SDS features a string copy function that is useful in performance<br>critical code sections, however I guess its practical usefulness is limited<br>as the function never managed to get called in the context of the 50k<br>lines of code composing the Redis code base.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdscpylen</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdscpy</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The string copy function of SDS is called <code>sdscpylen</code> and works like that:</p><pre class=" language-c"><code class="language-c">s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscpylen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"Hello Superman!"</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>As you can see the function receives as input the SDS string <code>s</code>, but also<br>returns an SDS string. This is common to many SDS functions that modify the<br>string: this way the returned SDS string may be the original one modified<br>or a newly allocated one (for example if there was not enough room in the<br>old SDS string).</p><p>The <code>sdscpylen</code> will simply replace what was in the old SDS string with the<br>new data you pass using the pointer and length argument. There is a similar<br>function called <code>sdscpy</code> that does not need a length but expects a null<br>terminated string instead.</p><p>You may wonder why it makes sense to have a string copy function in the<br>SDS library, since you can simply create a new SDS string from scratch<br>with the new value instead of copying the value in an existing SDS string.<br>The reason is efficiency: <code>sdsnewlen</code> will always allocate a new string<br>while <code>sdscpylen</code> will try to reuse the existing string if there is enough<br>room to old the new content specified by the user, and will allocate a new<br>one only if needed.</p><h2 id="Quoting-strings"><a href="#Quoting-strings" class="headerlink" title="Quoting strings"></a>Quoting strings</h2><p>In order to provide consistent output to the program user, or for debugging<br>purposes, it is often important to turn a string that may contain binary<br>data or special characters into a quoted string. Here for quoted string<br>we mean the common format for String literals in programming source code.<br>However today this format is also part of the well known serialization formats<br>like JSON and CSV, so it definitely escaped the simple goal of representing<br>literals strings in the source code of programs.</p><p>An example of quoted string literal is the following:</p><pre class=" language-c"><code class="language-c"><span class="token string">"\x00Hello World\n"</span></code></pre><p>The first byte is a zero byte while the last byte is a newline, so there are<br>two non alphanumerical characters inside the string.</p><p>SDS uses a concatenation function for this goal, that concatenates to an<br>existing string the quoted string representation of the input string.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdscatrepr</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The <code>scscatrepr</code> (where <code>repr</code> means <em>representation</em>) follows the usualy<br>SDS string function rules accepting a char pointer and a length, so you can<br>use it with SDS strings, normal C strings by using strlen() as <code>len</code> argument,<br>or binary data. The following is an example usage:</p><pre class=" language-c"><code class="language-c">sds s1 <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sds s2 <span class="token operator">=</span> <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>s2 <span class="token operator">=</span> <span class="token function">sdscatrepr</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span>s1<span class="token punctuation">,</span><span class="token function">sdslen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token string">"a\x01\x02\n"</span></code></pre><p>This is the rules <code>sdscatrepr</code> uses for conversion:</p><ul><li><code>\</code> and <code>&quot;</code> are quoted with a backslash.</li><li>It quotes special characters <code>&#39;\n&#39;</code>, <code>&#39;\r&#39;</code>, <code>&#39;\t&#39;</code>, <code>&#39;\a&#39;</code> and <code>&#39;\b&#39;</code>.</li><li>All the other non printable characters not passing the <code>isprint</code> test are quoted in <code>\x..</code> form, that is: backslash followed by <code>x</code> followed by two digit hex number representing the character byte value.</li><li>The function always adds initial and final double quotes characters.</li></ul><p>There is an SDS function that is able to perform the reverse conversion and is<br>documented in the <em>Tokenization</em> section below.</p><h2 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h2><p>Tokenization is the process of splitting a larger string into smaller strings.<br>In this specific case, the split is performed specifying another string that<br>acts as separator. For example in the following string there are two substrings<br>that are separated by the <code>|-|</code> separator:</p><pre><code>foo|-|bar|-|zap</code></pre><p>A more common separator that consists of a single character is the comma:</p><pre><code>foo,bar,zap</code></pre><p>In many progrems it is useful to process a line in order to obtain the sub<br>strings it is composed of, so SDS provides a function that returns an<br>array of SDS strings given a string and a separator.</p><pre class=" language-c"><code class="language-c">sds <span class="token operator">*</span><span class="token function">sdssplitlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sep<span class="token punctuation">,</span> <span class="token keyword">int</span> seplen<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sdsfreesplitres</span><span class="token punctuation">(</span>sds <span class="token operator">*</span>tokens<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>As usually the function can work with both SDS strings or normal C strings.<br>The first two arguments <code>s</code> and <code>len</code> specify the string to tokenize, and the<br>other two arguments <code>sep</code> and <code>seplen</code> the separator to use during the<br>tokenization. The final argument <code>count</code> is a pointer to an integer that will<br>be set to the number of tokens (sub strings) returned.</p><p>The return value is a heap allocated array of SDS strings.</p><pre class=" language-c"><code class="language-c">sds <span class="token operator">*</span>tokens<span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> j<span class="token punctuation">;</span>sds line <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tokens <span class="token operator">=</span> <span class="token function">sdssplitlen</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token function">sdslen</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> tokens<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsfreesplitres</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> Hellooutput<span class="token operator">></span> World<span class="token operator">!</span></code></pre><p>The returned array is heap allocated, and the single elements of the array<br>are normal SDS strings. You can free everything calling <code>sdsfreesplitres</code><br>as in the example. Alternativey you are free to release the array yourself<br>using the <code>free</code> function and use and/or free the individual SDS strings<br>as usually.</p><p>A valid approach is to set the array elements you reused in some way to<br><code>NULL</code>, and use <code>sdsfreesplitres</code> to free all the rest.</p><h2 id="Command-line-oriented-tokenization"><a href="#Command-line-oriented-tokenization" class="headerlink" title="Command line oriented tokenization"></a>Command line oriented tokenization</h2><p>Splitting by a separator is a useful operation, but usually it is not enough<br>to perform one of the most common tasks involving some non trivial string<br>manipulation, that is, implementing a <strong>Command Line Interface</strong> for a program.</p><p>This is why SDS also provides an additional function that allows you to split<br>arguments provided by the user via the keyboard in an interactive manner, or<br>via a file, network, or any other mean, into tokens.</p><pre class=" language-c"><code class="language-c">sds <span class="token operator">*</span><span class="token function">sdssplitargs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>line<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>argc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The <code>sdssplitargs</code> function returns an array of SDS strings exactly like<br><code>sdssplitlen</code>. The function to free the result is also identical, and is<br><code>sdsfreesplitres</code>. The difference is in the way the tokenization is performed.</p><p>For example if the input is the following line:</p><pre><code>call &quot;Sabrina&quot;    and &quot;Mark Smith\n&quot;</code></pre><p>The function will return the following tokens:</p><ul><li>“call”</li><li>“Sabrina”</li><li>“and”</li><li>“Mark Smith\n”</li></ul><p>Basically different tokens need to be separated by one or more spaces, and<br>every single token can also be a quoted string in the same format that<br><code>sdscatrepr</code> is able to emit.</p><h2 id="String-joining"><a href="#String-joining" class="headerlink" title="String joining"></a>String joining</h2><p>There are two functions doing the reverse of tokenization by joining strings<br>into a single one.</p><pre class=" language-c"><code class="language-c">sds <span class="token function">sdsjoin</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>sep<span class="token punctuation">,</span> size_t seplen<span class="token punctuation">)</span><span class="token punctuation">;</span>sds <span class="token function">sdsjoinsds</span><span class="token punctuation">(</span>sds <span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sep<span class="token punctuation">,</span> size_t seplen<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The two functions take as input an array of strings of length <code>argc</code> and<br>a separator and its length, and produce as output an SDS string consisting<br>of all the specified strings separated by the specified separator.</p><p>The difference between <code>sdsjoin</code> and <code>sdsjoinsds</code> is that the former accept<br>C null terminated strings as input while the latter requires all the strings<br>in the array to be SDS strings. However because of this only <code>sdsjoinsds</code> is<br>able to deal with binary data.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>tokens<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"foo"</span><span class="token punctuation">,</span><span class="token string">"bar"</span><span class="token punctuation">,</span><span class="token string">"zap"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>sds s <span class="token operator">=</span> <span class="token function">sdsjoin</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"|"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> foo<span class="token operator">|</span>bar<span class="token operator">|</span>zap</code></pre><h2 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h2><p>All the SDS functions that return an SDS pointer may also return <code>NULL</code> on<br>out of memory, this is basically the only check you need to perform.</p><p>However many modern C programs handle out of memory simply aborting the program<br>so you may want to do this as well by wrapping <code>malloc</code> and other related<br>memory allocation calls directly.</p><h1 id="SDS-internals-and-advanced-usage"><a href="#SDS-internals-and-advanced-usage" class="headerlink" title="SDS internals and advanced usage"></a>SDS internals and advanced usage</h1><p>At the very beginning of this documentation it was explained how SDS strings<br>are allocated, however the prefix stored before the pointer returned to the<br>user was classified as an <em>header</em> without further details. For an advanced<br>usage it is better to dig more into the internals of SDS and show the<br>structure implementing it:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> sdshdr <span class="token punctuation">{</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">int</span> free<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>As you can see, the structure may resemble the one of a conventional string<br>library, however the <code>buf</code> field of the structure is different since it is<br>not a pointer but an array without any length declared, so <code>buf</code> actually<br>points at the first byte just after the <code>free</code> integer. So in order to create<br>an SDS string we just allocate a piece of memory that is as large as the<br><code>sdshdr</code> structure plus the length of our string, plus an additional byte<br>for the mandatory null term that every SDS string has.</p><p>The <code>len</code> field of the structure is quite obvious, and is the current length<br>of the SDS string, always computed every time the string is modified via<br>SDS function calls. The <code>free</code> field instead represents the amount of free<br>memory in the current allocation that can be used to store more characters.</p><p>So the actual SDS layout is this one:</p><pre><code>+------------+------------------------+-----------+---------------\| Len | Free | H E L L O W O R L D \n | Null term |  Free space   \+------------+------------------------+-----------+---------------\             |             `-&gt; Pointer returned to the user.</code></pre><p>You may wonder why there is some free space at the end of the string, it<br>looks like a waste. Actually after a new SDS string is created, there is no<br>free space at the end at all: the allocation will be as small as possible to<br>just hold the header, string, and null term. However other access patterns<br>will create extra free space at the end, like in the following program:</p><pre class=" language-c"><code class="language-c">s <span class="token operator">=</span> <span class="token function">sdsempty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Since SDS tries to be efficient it can’t afford to reallocate the string every<br>time new data is appended, since this would be very inefficient, so it uses<br>the <strong>preallocation of some free space</strong> every time you enlarge the string.</p><p>The preallocation algorithm used is the following: every time the string<br>is reallocated in order to hold more bytes, the actual allocation size performed<br>is two times the minimum required. So for instance if the string currently<br>is holding 30 bytes, and we concatenate 2 more bytes, instead of allocating 32<br>bytes in total SDS will allocate 64 bytes.</p><p>However there is an hard limit to the allocation it can perform ahead, and is<br>defined by <code>SDS_MAX_PREALLOC</code>. SDS will never allocate more than 1MB of<br>additional space (by default, you can change this default).</p><h2 id="Shrinking-strings"><a href="#Shrinking-strings" class="headerlink" title="Shrinking strings"></a>Shrinking strings</h2><pre class=" language-c"><code class="language-c">sds <span class="token function">sdsRemoveFreeSpace</span><span class="token punctuation">(</span>sds s<span class="token punctuation">)</span><span class="token punctuation">;</span>size_t <span class="token function">sdsAllocSize</span><span class="token punctuation">(</span>sds s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Sometimes there are class of programs that require to use very little memory.<br>After strings concatenations, trimming, ranges, the string may end having<br>a non trivial amount of additional space at the end.</p><p>It is possible to resize a string back to its minimal size in order to hold<br>the current content by using the function <code>sdsRemoveFreeSpace</code>.</p><pre class=" language-c"><code class="language-c">s <span class="token operator">=</span> <span class="token function">sdsRemoveFreeSpace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>There is also a function that can be used in order to get the size of the<br>total allocation for a given string, and is called <code>sdsAllocSize</code>.</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"Ladies and gentlemen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdscat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"... welcome to the C language."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdsAllocSize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdsRemoveFreeSpace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sdsAllocSize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token number">109</span>output<span class="token operator">></span> <span class="token number">59</span></code></pre><p>NOTE: SDS Low level API use cammelCase in order to warn you that you are playing with the fire.</p><h2 id="Manual-modifications-of-SDS-strings"><a href="#Manual-modifications-of-SDS-strings" class="headerlink" title="Manual modifications of SDS strings"></a>Manual modifications of SDS strings</h2><pre><code>void sdsupdatelen(sds s);</code></pre><p>Sometimes you may want to hack with an SDS string manually, without using<br>SDS functions. In the following example we implicitly change the length<br>of the string, however we want the logical length to reflect the null terminated<br>C string.</p><p>The function <code>sdsupdatelen</code> does just that, updating the internal length<br>information for the specified string to the length obtained via <code>strlen</code>.</p><pre class=" language-c"><code class="language-c">sds s <span class="token operator">=</span> <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token string">"foobar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sdsupdatelen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token operator">></span> <span class="token number">6</span>output<span class="token operator">></span> <span class="token number">2</span></code></pre><h2 id="Sharing-SDS-strings"><a href="#Sharing-SDS-strings" class="headerlink" title="Sharing SDS strings"></a>Sharing SDS strings</h2><p>If you are writing a program in which it is advantageous to share the same<br>SDS string across different data structures, it is absolutely advised to<br>encapsulate SDS strings into structures that remember the number of references<br>of the string, with functions to increment and decrement the number of references.</p><p>This approach is a memory management technique called <em>reference counting</em> and<br>in the context of SDS has two advantages:</p><ul><li>It is less likely that you’ll create memory leaks or bugs due to non freeing SDS strings or freeing already freed strings.</li><li>You’ll not need to update every reference to an SDS string when you modify it (since the new SDS string may point to a different memory location).</li></ul><p>While this is definitely a very common programming technique I’ll outline<br>the basic ideas here. You create a structure like that:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> mySharedString <span class="token punctuation">{</span>    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span>    sds string<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>When new strings are created, the structure is allocated and returned with<br><code>refcount</code> set to 1. The you have two functions to change the reference count<br>of the shared string:</p><ul><li><code>incrementStringRefCount</code> will simply increment <code>refcount</code> of 1 in the structure. It will be called every time you add a reference to the string on some new data structure, variable, or whatever.</li><li><code>decrementStringRefCount</code> is used when you remove a reference. This function is however special since when the <code>refcount</code> drops to zero, it automatically frees the SDS string, and the <code>mySharedString</code> structure as well.</li></ul><h2 id="Interactions-with-heap-checkers"><a href="#Interactions-with-heap-checkers" class="headerlink" title="Interactions with heap checkers"></a>Interactions with heap checkers</h2><p>Because SDS returns pointers into the middle of memory chunks allocated with<br><code>malloc</code>, heap checkers may have issues, however:</p><ul><li>The popular Valgrind program will detect SDS strings are <em>possibly lost</em> memory and never as <em>definitely lost</em>, so it is easy to tell if there is a leak or not. I used Valgrind with Redis for years and every real leak was consistently detected as “definitely lost”.</li><li>OSX instrumentation tools don’t detect SDS strings as leaks but are able to correctly handle pointers pointing to the middle of memory chunks.</li></ul><h2 id="Zero-copy-append-from-syscalls"><a href="#Zero-copy-append-from-syscalls" class="headerlink" title="Zero copy append from syscalls"></a>Zero copy append from syscalls</h2><p>At this point you should have all the tools to dig more inside the SDS<br>library by reading the source code, however there is an interesting pattern<br>you can mount using the low level API exported, that is used inside Redis<br>in order to improve performances of the networking code.</p><p>Using <code>sdsIncrLen()</code> and <code>sdsMakeRoomFor()</code> it is possible to mount the<br>following schema, to cat bytes coming from the kernel to the end of an<br>sds string without copying into an intermediate buffer:</p><pre class=" language-c"><code class="language-c">oldlen <span class="token operator">=</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token function">sdsMakeRoomFor</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> s<span class="token operator">+</span>oldlen<span class="token punctuation">,</span> BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> check <span class="token keyword">for</span> nread <span class="token operator">&lt;=</span> <span class="token number">0</span> and handle it <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">sdsIncrLen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> nread<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>sdsIncrLen</code> is documented inside the source code of <code>sds.c</code>.</p><h1 id="Embedding-SDS-into-your-project"><a href="#Embedding-SDS-into-your-project" class="headerlink" title="Embedding SDS into your project"></a>Embedding SDS into your project</h1><p>This is as simple as copying the following files inside your<br>project:</p><ul><li>sds.c</li><li>sds.h</li><li>sdsalloc.h</li></ul><p>The source code is small and every C99 compiler should deal with<br>it without issues.</p><h1 id="Using-a-different-allocator-for-SDS"><a href="#Using-a-different-allocator-for-SDS" class="headerlink" title="Using a different allocator for SDS"></a>Using a different allocator for SDS</h1><p>Internally sds.c uses the allocator defined into <code>sdsalloc.h</code>. This header<br>file just defines macros for malloc, realloc and free, and by default libc<br><code>malloc()</code>, <code>realloc()</code> and <code>free()</code> are used. Just edit this file in order<br>to change the name of the allocation functions.</p><p>The program using SDS can call the SDS allocator in order to manipulate<br>SDS pointers (usually not needed but sometimes the program may want to<br>do advanced things) by using the API exported by SDS in order to call the<br>allocator used. This is especially useful when the program linked to SDS<br>is using a different allocator compared to what SDS is using.</p><p>The API to access the allocator used by SDS is composed of three functions: <code>sds_malloc()</code>, <code>sds_realloc()</code> and <code>sds_free()</code>.</p><h1 id="Credits-and-license"><a href="#Credits-and-license" class="headerlink" title="Credits and license"></a>Credits and license</h1><p>SDS was created by Salvatore Sanfilippo and is released under the BDS two clause license. See the LICENSE file in this source distribution for more information.</p><p>Oran Agra improved SDS version 2 by adding dynamic sized headers in order to<br>save memory for small strings and allow strings greater than 4GB.</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> Strings </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Simple Dynamic Strings </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Plan</title>
      <link href="/2020/09/04/plan/"/>
      <url>/2020/09/04/plan/</url>
      
        <content type="html"><![CDATA[<h1 id="学习内容："><a href="#学习内容：" class="headerlink" title="学习内容："></a>学习内容：</h1><pre><code>(√)传感器及检测技术(√)数字信号处理(√)FPGA原理(√)微波技术(电磁场与电磁波)(√)电子测量技术(√)嵌入式系统及应用(√)RFID原理及应用</code></pre><p><img src="https://img-blog.csdnimg.cn/2020090422343299.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h1><h1 id="电子专业安排"><a href="#电子专业安排" class="headerlink" title="电子专业安排"></a>电子专业安排</h1><ol><li>软件安排<ol><li>以C为核心复习</li><li>嵌入式系统开发，STM32 51微控制器学习 </li><li>QT学习 Linux基本操作</li><li>以Python为核心安排 Python基础，Python数据分析与爬虫技术</li></ol></li><li>硬件安排<ol><li>以STM32单片机为核心安排，嵌入式32位系统学习,完成几个开源项目</li><li>硬件电路设计</li><li>PCB绘图软件学习Kicad</li><li>AD增加运用熟练度</li></ol></li><li>掌握基本电路设计电路<br> 复习模电知识<br> ADI新概念模拟电路 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 电子 </tag>
            
            <tag> 传感器 </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机简答题</title>
      <link href="/2020/08/18/dan-pian-ji-jian-da-ti/"/>
      <url>/2020/08/18/dan-pian-ji-jian-da-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="80C51单片机简答题"><a href="#80C51单片机简答题" class="headerlink" title="80C51单片机简答题"></a>80C51单片机简答题</h1><h3 id="80C51基本型单片机的存储器地址空间如何划分？各空间的地址范围和容量如何？"><a href="#80C51基本型单片机的存储器地址空间如何划分？各空间的地址范围和容量如何？" class="headerlink" title="80C51基本型单片机的存储器地址空间如何划分？各空间的地址范围和容量如何？"></a>80C51基本型单片机的存储器地址空间如何划分？各空间的地址范围和容量如何？</h3><pre class=" language-bash"><code class="language-bash">分为四个空间。 内部程序存储器地址范围0000H-0FFFH 共4KB <span class="token punctuation">;</span>外部程序存储器0FFFH-0FFFFH 共64KB <span class="token punctuation">;</span>内部数据存储器00H-FFH 共256 个字节<span class="token punctuation">(</span>其中包括低128 字节和特殊功能寄存器SFR 128 个字节<span class="token punctuation">)</span>外部数据存储器可扩展至64KB 。 CPU 访问片内外程序存储器ROM 指令用MOVC ,访问片外数据存储器RAM 指令用MOVX , 访问片内RAM 用MOV 。</code></pre><h3 id="80C51单片机复位后的状态如何-常用的复位方式有哪些"><a href="#80C51单片机复位后的状态如何-常用的复位方式有哪些" class="headerlink" title="80C51单片机复位后的状态如何?常用的复位方式有哪些"></a>80C51单片机复位后的状态如何?常用的复位方式有哪些</h3><pre class=" language-bash"><code class="language-bash">上电复位,按钮复位 <span class="token punctuation">(</span> PC<span class="token punctuation">)</span><span class="token operator">=</span>0000H :程序的初始入口地址为 0000H <span class="token punctuation">(</span>PSW<span class="token punctuation">)</span> <span class="token operator">=</span>00H:</code></pre><h3 id="80C51寄存器及其在存储器中的映射情况如何"><a href="#80C51寄存器及其在存储器中的映射情况如何" class="headerlink" title="80C51寄存器及其在存储器中的映射情况如何?"></a>80C51寄存器及其在存储器中的映射情况如何?</h3><pre class=" language-bash"><code class="language-bash">80C51，有四组工作寄存器，每组八个。位于片内存储器的00~1FH中。80C51，有21个特殊功能寄存器。位于片内80~FFH中，只可直接寻址。</code></pre><h3 id="80C51单片机的PSW寄存器各位标志的意义如何？"><a href="#80C51单片机的PSW寄存器各位标志的意义如何？" class="headerlink" title="80C51单片机的PSW寄存器各位标志的意义如何？"></a>80C51单片机的PSW寄存器各位标志的意义如何？</h3><pre class=" language-bash"><code class="language-bash">CY：进位、借位标志。有进位、借位时CY<span class="token operator">=</span>1，否则CY<span class="token operator">=</span>0；AC：辅助进位、借位标志（高半字节与低半字节间的进位或借位）；F0：用户标志位，由用户自己定义；RS1、RS0：当前工作寄存器组选择位；OV：溢出标志位。有溢出时OV<span class="token operator">=</span>1，否则OV<span class="token operator">=</span>0；P：奇偶标志位。存于ACC中的运算结果有奇数个1时P<span class="token operator">=</span>1，否则P<span class="token operator">=</span>0。</code></pre><p>……….</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 简答题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV example 素描</title>
      <link href="/2020/08/16/ji-yu-python-opencv-de-ren-lian-shi-bie/"/>
      <url>/2020/08/16/ji-yu-python-opencv-de-ren-lian-shi-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Python–opencv的人脸识别"><a href="#基于Python–opencv的人脸识别" class="headerlink" title="基于Python–opencv的人脸识别"></a>基于Python–opencv的人脸识别</h1><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li><p>安装python3.7 配置pip 下载环境</p></li><li><p>安装第三方包</p><ol><li>opencv -python的安装，输入：<pre><code>pip install opencv-python</code></pre><ol start="2"><li>pillow的安装，输入： <pre><code>pip install pillow</code></pre></li></ol></li><li>contrib的安装<pre><code>pip install opencv-contrib-python</code></pre></li></ol></li><li><p>建立一个文件夹，保存一些东西</p></li><li><p>需要保存 haarcascade_frontalface_default.xml</p></li><li><p>需要保存 haarcascade_eye.xml  （这两个文件很重要）<br><img src="https://img-blog.csdnimg.cn/20200410082912256.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ol><h2 id="软件代码分析"><a href="#软件代码分析" class="headerlink" title="软件代码分析"></a>软件代码分析</h2><h3 id="FaceDetection-人脸检测"><a href="#FaceDetection-人脸检测" class="headerlink" title="FaceDetection 人脸检测"></a>FaceDetection 人脸检测</h3><pre><code>import numpy as npimport cv2# 人脸识别分类器 //填入的路径为你建立的新的文件夹的路径faceCascade = cv2.CascadeClassifier(r&#39;E:\cv\face\haarcascade_frontalface_default.xml&#39;)# 识别眼睛的分类器eyeCascade = cv2.CascadeClassifier(r&#39;E:\cv\face\haarcascade_eye.xml&#39;)# 开启摄像头cap = cv2.VideoCapture(0)ok = Truewhile ok:    # 读取摄像头中的图像，ok为是否读取成功的判断参数    ok, img = cap.read()    # 转换成灰度图像    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    # 人脸检测    faces = faceCascade.detectMultiScale(        gray,             scaleFactor=1.2,        minNeighbors=5,             minSize=(32, 32)    )    # 在检测人脸的基础上检测眼睛    for (x, y, w, h) in faces:        fac_gray = gray[y: (y+h), x: (x+w)]        result = []        eyes = eyeCascade.detectMultiScale(fac_gray, 1.3, 2)        # 眼睛坐标的换算，将相对位置换成绝对位置        for (ex, ey, ew, eh) in eyes:            result.append((x+ex, y+ey, ew, eh))    # 画矩形    for (x, y, w, h) in faces:        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)    for (ex, ey, ew, eh) in result:        cv2.rectangle(img, (ex, ey), (ex+ew, ey+eh), (0, 255, 0), 2)    cv2.imshow(&#39;video&#39;, img)    k = cv2.waitKey(1)    if k == 27:    # press &#39;ESC&#39; to quit        breakcap.release()cv2.destroyAllWindows()</code></pre><h3 id="FaceDataCollect-人脸数据收集"><a href="#FaceDataCollect-人脸数据收集" class="headerlink" title="FaceDataCollect 人脸数据收集"></a>FaceDataCollect 人脸数据收集</h3><pre><code>import cv2import os# 调用笔记本内置摄像头，所以参数为0，如果有其他的摄像头可以调整参数为1，2cap = cv2.VideoCapture(0)face_detector = cv2.CascadeClassifier(&#39;haarcascade_frontalface_default.xml&#39;)face_id = input(&#39;\n enter user id:&#39;)print(&#39;\n Initializing face capture. Look at the camera and wait ...&#39;)count = 0while True:    # 从摄像头读取图片    sucess, img = cap.read()    # 转为灰度图片    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    # 检测人脸    faces = face_detector.detectMultiScale(gray, 1.3, 5)    for (x, y, w, h) in faces:        cv2.rectangle(img, (x, y), (x+w, y+w), (255, 0, 0))        count += 1        # 保存图像        cv2.imwrite(&quot;Facedata/User.&quot; + str(face_id) + &#39;.&#39; + str(count) + &#39;.jpg&#39;, gray[y: y + h, x: x + w])        cv2.imshow(&#39;image&#39;, img)    # 保持画面的持续。    k = cv2.waitKey(1)    if k == 27:   # 通过esc键退出摄像        break    elif count &gt;= 1000:  # 得到1000个样本后退出摄像        break# 关闭摄像头cap.release()cv2.destroyAllWindows()</code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://img-blog.csdnimg.cn/20200410083235380.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol><li>请先创建一个Facedata文件夹并和你的程序放在一个文件夹下。</li><li>请将程序和文件打包放在一个叫人脸识别的文件夹下。可以把分类器也放入其中。</li><li>程序运行过程中，会提示你输入id，请从0开始输入，即第一个人的脸的数据id为0，第二个人的脸的数据id为1，运行一次可收集一张人脸的数据。</li><li>程序运行时间可能会比较长，可能会有几分钟，如果嫌长，可以将     #得到1000个样本后退出摄像      这个注释前的1000，改为100。</li><li>如果实在等不及，可按esc退出，但可能会导致数据不够模型精度下降。</li></ol><h3 id="face-training-人脸数据训练"><a href="#face-training-人脸数据训练" class="headerlink" title="face_training 人脸数据训练"></a>face_training 人脸数据训练</h3><pre><code>import numpy as npfrom PIL import Imageimport osimport cv2# 人脸数据路径path = &#39;Facedata&#39;recognizer = cv2.face.LBPHFaceRecognizer_create()detector = cv2.CascadeClassifier(&quot;haarcascade_frontalface_default.xml&quot;)def getImagesAndLabels(path):    imagePaths = [os.path.join(path, f) for f in os.listdir(path)]  # join函数的作用？    faceSamples = []    ids = []    for imagePath in imagePaths:        PIL_img = Image.open(imagePath).convert(&#39;L&#39;)   # convert it to grayscale        img_numpy = np.array(PIL_img, &#39;uint8&#39;)        id = int(os.path.split(imagePath)[-1].split(&quot;.&quot;)[1])        faces = detector.detectMultiScale(img_numpy)        for (x, y, w, h) in faces:            faceSamples.append(img_numpy[y:y + h, x: x + w])            ids.append(id)    return faceSamples, idsprint(&#39;Training faces. It will take a few seconds. Wait ...&#39;)faces, ids = getImagesAndLabels(path)recognizer.train(faces, np.array(ids))recognizer.write(r&#39;face_trainer\trainer.yml&#39;)print(&quot;{0} faces trained. Exiting Program&quot;.format(len(np.unique(ids))))</code></pre><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><img src="https://img-blog.csdnimg.cn/20200410083333132.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="face-recognition-人脸检测"><a href="#face-recognition-人脸检测" class="headerlink" title="face_recognition 人脸检测"></a>face_recognition 人脸检测</h3><pre><code>import cv2recognizer = cv2.face.LBPHFaceRecognizer_create()recognizer.read(&#39;face_trainer/trainer.yml&#39;)cascadePath = &quot;haarcascade_frontalface_default.xml&quot;faceCascade = cv2.CascadeClassifier(cascadePath)font = cv2.FONT_HERSHEY_SIMPLEXidnum = 0names = [&#39;wanzixuan&#39;, &#39;Bob&#39;]cam = cv2.VideoCapture(0)minW = 0.1*cam.get(3)minH = 0.1*cam.get(4)while True:    ret, img = cam.read()    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)    faces = faceCascade.detectMultiScale(        gray,        scaleFactor=1.2,        minNeighbors=5,        minSize=(int(minW), int(minH))    )    for (x, y, w, h) in faces:        cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)        idnum, confidence = recognizer.predict(gray[y:y+h, x:x+w])        if confidence &lt; 100:            idnum = names[idnum]            confidence = &quot;{0}%&quot;.format(round(100 - confidence))        else:            idnum = &quot;unknown&quot;            confidence = &quot;{0}%&quot;.format(round(100 - confidence))        cv2.putText(img, str(idnum), (x+5, y-5), font, 1, (0, 0, 255), 1)        cv2.putText(img, str(confidence), (x+5, y+h-5), font, 1, (0, 0, 0), 1)    cv2.imshow(&#39;camera&#39;, img)    k = cv2.waitKey(10)    if k == 27:        breakcam.release()cv2.destroyAllWindows()</code></pre><h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20200410083632262.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="注：四个python代码具体分析，以后更新"><a href="#注：四个python代码具体分析，以后更新" class="headerlink" title="注：四个python代码具体分析，以后更新"></a>注：四个python代码具体分析，以后更新</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>基于Python3.7和opencv的人脸识别（含数据收集，模型训练） <a href="https://www.cnblogs.com/xp12345/p/9818435.html" target="_blank" rel="noopener">https://www.cnblogs.com/xp12345/p/9818435.html</a></li><li>opencv 官网<a href="https://opencv.org/" target="_blank" rel="noopener">https://opencv.org/</a> </li><li>基于Opencv快速实现人脸识别（完整版）<a href="https://blog.csdn.net/beyond9305/article/details/93724948" target="_blank" rel="noopener">https://blog.csdn.net/beyond9305/article/details/93724948</a></li><li>OpenCV计算机视觉实战<a href="https://www.bilibili.com/video/BV1b741117vN?p=21" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1b741117vN?p=21</a></li><li>CSDN博客<a href="https://blog.csdn.net/weixin_43599390/article/details/105425237" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390/article/details/105425237</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> OpenCV </category>
          
          <category> 人脸识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
            <tag> 人脸识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV example</title>
      <link href="/2020/08/07/opencv-example/"/>
      <url>/2020/08/07/opencv-example/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenCV-Example"><a href="#OpenCV-Example" class="headerlink" title="OpenCV Example"></a>OpenCV Example</h1><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">Vscode + Anconda + Python3.6pip <span class="token function">install</span> opencv-pythonpip <span class="token function">install</span> numpy</code></pre><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>将须处理图片或视频放入该文件夹</li><li>重命名为 tey.jpg(mp4)</li><li>运行生成代码将逐帧生成图片</li><li>后运行合成视频将逐帧图片生成视频</li></ol><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haS1zdHVkaW8tc3RhdGljLW9ubGluZS5jZG4uYmNlYm9zLmNvbS9mNGVkY2YyMzE5YjI0YjczOTQ0MTc1YWMyOGEzOWY0MzBjN2M4M2I2ZTdiYzQ5ODA4ZGQ4NDE4Yjk1ZDJkZTdi?x-oss-process=image/format,png" alt=""></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9haS1zdHVkaW8tc3RhdGljLW9ubGluZS5jZG4uYmNlYm9zLmNvbS81MjUyMzJmNTkzYmQ0Nzg2OTc1MWRjZDhjZDdhYmM5ZmViMjFmNmY1MmU4NjRhMjI5ZWQ4ZWUxMGI5NjE3Y2Jj?x-oss-process=image/format,png" alt=""></h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token comment" spellcheck="true"># 查看当前挂载的数据集目录, 该目录下的变更重启环境后会自动还原</span><span class="token comment" spellcheck="true"># View dataset directory. This directory will be recovered automatically after resetting environment. </span>get_ipython<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls /home/aistudio/data'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token comment" spellcheck="true"># 查看工作区文件, 该目录下的变更将会持久保存. 请及时清理不必要的文件, 避免加载过慢.</span><span class="token comment" spellcheck="true"># View personal work directory. All changes under this directory will be kept even after reset. Please clean unnecessary files in time to speed up environment loading.</span>get_ipython<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls /home/aistudio/work'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token comment" spellcheck="true"># 如果需要进行持久化安装, 需要使用持久化路径, 如下方代码示例:</span><span class="token comment" spellcheck="true"># If a persistence installation is required, you need to use the persistence path as the following:</span>get_ipython<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir /home/aistudio/external-libraries'</span><span class="token punctuation">)</span>get_ipython<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'pip install beautifulsoup4 -t /home/aistudio/external-libraries'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token comment" spellcheck="true"># 同时添加如下代码, 这样每次环境(kernel)启动的时候只要运行下方代码即可:</span><span class="token comment" spellcheck="true"># Also add the following code, so that every time the environment (kernel) starts, just run the following code:</span><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'/home/aistudio/external-libraries'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 请点击[此处](https://ai.baidu.com/docs#/AIStudio_Project_Notebook/a38e5576)查看本环境基本用法.  &lt;br></span><span class="token comment" spellcheck="true"># Please click [here ](https://ai.baidu.com/docs#/AIStudio_Project_Notebook/a38e5576) for more detailed instructions. </span><span class="token comment" spellcheck="true"># In[1]:</span><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/8/2 8:24</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : video.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token string">"data/tey.mp4"</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span><span class="token punctuation">(</span>cap<span class="token punctuation">.</span>isOpened<span class="token punctuation">)</span><span class="token punctuation">:</span>    ret<span class="token punctuation">,</span>img <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    imgsize <span class="token operator">=</span> img<span class="token punctuation">.</span>shape    height <span class="token operator">=</span> imgsize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    width <span class="token operator">=</span> imgsize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    inv <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span>width<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            gar <span class="token operator">=</span> gray<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span>            inv<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> gar    blur <span class="token operator">=</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>inv<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>gray<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span>blur<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    a<span class="token punctuation">,</span>dst1<span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>dst<span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            gar1 <span class="token operator">=</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span>            dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> gar1            <span class="token keyword">if</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">:</span>                dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">240</span>            <span class="token keyword">if</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span>    dst1<span class="token operator">=</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>dst1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"%d.jpg"</span><span class="token operator">%</span>i<span class="token punctuation">,</span>dst1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d帧"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>    i<span class="token operator">+=</span><span class="token number">1</span>cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token keyword">import</span> cv2fps <span class="token operator">=</span> <span class="token number">30</span><span class="token comment" spellcheck="true">#填写原视频帧率</span>fourcc <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter_fourcc<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'J'</span><span class="token punctuation">,</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">)</span>videoWriter <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter<span class="token punctuation">(</span><span class="token string">'dst.avi'</span><span class="token punctuation">,</span> fourcc<span class="token punctuation">,</span> fps<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1920</span><span class="token punctuation">,</span><span class="token number">1080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#(640,360)为原视频宽高</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1249</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    img<span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'%d.jpg'</span><span class="token operator">%</span>i<span class="token punctuation">)</span>    videoWriter<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span>videoWriter<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># In[ ]:</span><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/8/2 8:21</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : demo1.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npimg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"data/tey.jpg"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>imgsize <span class="token operator">=</span> img<span class="token punctuation">.</span>shapeheight <span class="token operator">=</span> imgsize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>width <span class="token operator">=</span> imgsize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>inv <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span>width<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        gar <span class="token operator">=</span> gray<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span>        inv<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> garblur <span class="token operator">=</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>inv<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>gray<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span>blur<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span>dst1<span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>dst<span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        gar1 <span class="token operator">=</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span>        dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> gar1        <span class="token keyword">if</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">:</span>            dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">240</span>        <span class="token keyword">if</span> dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            dst1<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span>dst1<span class="token operator">=</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>dst1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">,</span>gray<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"inv"</span><span class="token punctuation">,</span>inv<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"blur"</span><span class="token punctuation">,</span>blur<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"dst"</span><span class="token punctuation">,</span>dst<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"dst1"</span><span class="token punctuation">,</span>dst1<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"dst.jpg"</span><span class="token punctuation">,</span>dst1<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>野火STM32F1开发板 IIC 0.96OLED 波形显示</title>
      <link href="/2020/07/28/ye-huo-stm32f1-kai-fa-ban-iic-0.96oled-bo-xing-xian-shi/"/>
      <url>/2020/07/28/ye-huo-stm32f1-kai-fa-ban-iic-0.96oled-bo-xing-xian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="野火STM32F1开发板-IIC-0-96OLED-ADC模拟-波形显示"><a href="#野火STM32F1开发板-IIC-0-96OLED-ADC模拟-波形显示" class="headerlink" title="野火STM32F1开发板 IIC 0.96OLED ADC模拟 波形显示"></a>野火STM32F1开发板 IIC 0.96OLED ADC模拟 波形显示</h1><a id="more"></a><h1 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h1><p><img src="https://img-blog.csdnimg.cn/20200728101746954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="软件代码"><a href="#软件代码" class="headerlink" title="软件代码"></a>软件代码</h1><h3 id="bsp-adc-c"><a href="#bsp-adc-c" class="headerlink" title="bsp_adc.c"></a>bsp_adc.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_adc.h"</span></span>uint16_t ConvData<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ADCx_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStruct<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*开时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>ADCx_PORT_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*配置参数*/</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>ADCx_PIN<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_AIN<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*模拟输入模式*/</span>    <span class="token comment" spellcheck="true">/*写入寄存器*/</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>ADCx_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ADCx_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ADC_InitTypeDef ADC_InitStruct<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*打开ADC时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>ADCx_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*配置参数*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_Mode<span class="token operator">=</span>ADC_Mode_Independent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*独立模式*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_ContinuousConvMode<span class="token operator">=</span>ENABLE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*连续转换*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_DataAlign<span class="token operator">=</span>ADC_DataAlign_Right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*数据右对齐*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_ExternalTrigConv<span class="token operator">=</span>ADC_ExternalTrigConv_None<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不使用外部硬件触发*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_NbrOfChannel<span class="token operator">=</span>ADCx_CHx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*ADC是哪个通道*/</span>    ADC_InitStruct<span class="token punctuation">.</span>ADC_ScanConvMode<span class="token operator">=</span>DISABLE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不使用连续扫描*/</span>    <span class="token comment" spellcheck="true">/*将参数写入寄存器*/</span>    <span class="token function">ADC_Init</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ADC_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*设置ADC_CLK*/</span>    <span class="token function">RCC_ADCCLKConfig</span><span class="token punctuation">(</span>RCC_PCLK2_Div6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*规则通道设置，通道，采样顺序，采样时间*/</span>    <span class="token function">ADC_RegularChannelConfig</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">,</span> ADCx_CHx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> ADC_SampleTime_1Cycles5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*ADC使能*/</span>    <span class="token function">ADC_Cmd</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*校验ADC*/</span>    <span class="token function">ADC_StartCalibration</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">ADC_GetCalibrationStatus</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">)</span><span class="token operator">==</span>RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*DMA设置*/</span>    <span class="token function">ADC_DMACmd</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*ADC软件触发，开始转换*/</span>    <span class="token function">ADC_SoftwareStartConvCmd</span><span class="token punctuation">(</span>ADC_x<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ADCx_DMA_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    DMA_InitTypeDef DMA_InitStruct<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*打开DMA时钟*/</span>  <span class="token function">RCC_AHBPeriphClockCmd</span><span class="token punctuation">(</span>RCC_AHBPeriph_DMA1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*配置DMA参数*/</span>    DMA_InitStruct<span class="token punctuation">.</span>DMA_PeripheralBaseAddr<span class="token operator">=</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>ADC_x<span class="token operator">-></span>DR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*ADC的数据寄存器*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_MemoryBaseAddr<span class="token operator">=</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ConvData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*存储器地址*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_DIR<span class="token operator">=</span>DMA_DIR_PeripheralSRC<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*外设为源*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_BufferSize<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*数据的个数为1*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_PeripheralInc<span class="token operator">=</span>DMA_PeripheralInc_Disable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*外设地址不增加*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_MemoryInc<span class="token operator">=</span>DMA_MemoryInc_Disable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*存储器地址不增加*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_PeripheralDataSize<span class="token operator">=</span>DMA_PeripheralDataSize_HalfWord<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*16位数据，所以是半字*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_MemoryDataSize<span class="token operator">=</span>DMA_MemoryDataSize_HalfWord<span class="token punctuation">;</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_Mode<span class="token operator">=</span>DMA_Mode_Circular<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*这里是指数据循环不停地发送*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_Priority<span class="token operator">=</span>DMA_Priority_High<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*DMA优先级设为高*/</span>  DMA_InitStruct<span class="token punctuation">.</span>DMA_M2M<span class="token operator">=</span>DMA_M2M_Disable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不使能存储器到存储器*/</span>    <span class="token comment" spellcheck="true">/*将参数写入寄存器*/</span>  <span class="token function">DMA_Init</span><span class="token punctuation">(</span>ADCx_DMA_CHx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>DMA_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*使能DMA*/</span>  <span class="token function">DMA_Cmd</span><span class="token punctuation">(</span>ADCx_DMA_CHx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ADCx_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ADCx_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADCx_DMA_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADCx_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-adc-h"><a href="#bsp-adc-h" class="headerlink" title="bsp_adc.h"></a>bsp_adc.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _BSP_ADC_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _BSP_ADC_H_</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">/*GPIO*/</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_PORT_CLK          RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_PIN                  GPIO_Pin_7</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_PORT                    GPIOA</span><span class="token comment" spellcheck="true">/*ADC*/</span><span class="token macro property">#<span class="token directive keyword">define</span> ADC_x                            ADC1</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_CLK              RCC_APB2Periph_ADC1</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_CHx                 ADC_Channel_7</span><span class="token comment" spellcheck="true">/*DMA*/</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_DMA_CLK          RCC_AHBPeriph_DMA1</span><span class="token macro property">#<span class="token directive keyword">define</span> ADCx_DMA_CHx           DMA1_Channel1</span><span class="token keyword">void</span> <span class="token function">ADCx_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//_BSP_ADC_H_</span></code></pre><h3 id="bsp-advanced-timer-c"><a href="#bsp-advanced-timer-c" class="headerlink" title="bsp_advanced_timer.c"></a>bsp_advanced_timer.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_advanced_timer.h"</span></span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AdvancedTim_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStruct<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*开时钟*/</span>    <span class="token function">TIMx_CH1_GPIO_CLK_CMD</span><span class="token punctuation">(</span>TIMx_CH1_GPIO_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIMx_CH1N_GPIO_CLK_CMD</span><span class="token punctuation">(</span>TIMx_CH1N_GPIO_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIMx_BKIN_GPIO_CLK_CMD</span><span class="token punctuation">(</span>TIMx_BKIN_GPIO_CLK <span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*设置参数1*/</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_AF_PP<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>TIMx_CH1_GPIO_PIN<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Speed<span class="token operator">=</span>GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*写参数*/</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>TIMx_CH1_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*设置参数2*/</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>TIMx_CH1N_GPIO_PIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*写参数*/</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>TIMx_CH1N_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*设置参数3*/</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_AF_PP<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>TIMx_BKIN_GPIO_PIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*写参数*/</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>TIMx_BKIN_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AdvancedTim_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct<span class="token punctuation">;</span>    TIM_OCInitTypeDef TIM_OCInitStruct<span class="token punctuation">;</span>    TIM_BDTRInitTypeDef TIM_BDTRInitStruct<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*开时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>ADVANCED_TIM_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*配置时基参数*/</span>    TIM_TimeBaseInitStruct<span class="token punctuation">.</span>TIM_Prescaler<span class="token operator">=</span>ADVANCED_TIM_PSC<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*预分频因子*/</span>    TIM_TimeBaseInitStruct<span class="token punctuation">.</span>TIM_CounterMode<span class="token operator">=</span>TIM_CounterMode_Up<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*向上计数*/</span>    TIM_TimeBaseInitStruct<span class="token punctuation">.</span>TIM_Period<span class="token operator">=</span>ADVANCED_TIM_ARR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*周期*/</span>    TIM_TimeBaseInitStruct<span class="token punctuation">.</span>TIM_ClockDivision<span class="token operator">=</span>TIM_CKD_DIV1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Tdts:这里会与死区时间有关*/</span>    TIM_TimeBaseInitStruct<span class="token punctuation">.</span>TIM_RepetitionCounter<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*不使用重复计数器*/</span>    <span class="token comment" spellcheck="true">/*写参数*/</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseInitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*配置输出比较的参数*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OCMode<span class="token operator">=</span>TIM_OCMode_PWM1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*PWM模式一*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OutputState<span class="token operator">=</span>TIM_OutputState_Enable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*主通道使能*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OutputNState<span class="token operator">=</span>TIM_OutputNState_Enable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*互补通道使能*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_Pulse<span class="token operator">=</span>ADVANCED_TIM_CCR<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*占空比*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OCPolarity<span class="token operator">=</span>TIM_OCPolarity_High<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*主通道高电平为有效*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OCNPolarity<span class="token operator">=</span>TIM_OCNPolarity_High<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*互补通道高电平为有效*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OCIdleState<span class="token operator">=</span>TIM_OCIdleState_Reset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*刹车后的输出状态*/</span>    TIM_OCInitStruct<span class="token punctuation">.</span>TIM_OCNIdleState<span class="token operator">=</span>TIM_OCNIdleState_Reset<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*写参数*/</span>    <span class="token function">TIM_OC1Init</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_OC1PreloadConfig</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> TIM_OCPreload_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*配置死区刹车寄存器*/</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_OSSRState<span class="token operator">=</span>TIM_OSSRState_Enable<span class="token punctuation">;</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_OSSIState<span class="token operator">=</span>TIM_OSSIState_Enable<span class="token punctuation">;</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_LOCKLevel<span class="token operator">=</span>TIM_LOCKLevel_OFF<span class="token punctuation">;</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_DeadTime<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*死区时间97ns*/</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_Break<span class="token operator">=</span>TIM_Break_Enable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*使能刹车功能*/</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_BreakPolarity<span class="token operator">=</span>TIM_BreakPolarity_High<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*当刹车通道为高电平时停止输出*/</span>    TIM_BDTRInitStruct<span class="token punctuation">.</span>TIM_AutomaticOutput<span class="token operator">=</span>TIM_AutomaticOutput_Enable<span class="token punctuation">;</span>    <span class="token function">TIM_BDTRConfig</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_BDTRInitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TIM_CtrlPWMOutputs</span><span class="token punctuation">(</span>ADVANCED_TIM<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">AdvancedTim_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">AdvancedTim_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">AdvancedTim_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-advanced-timer-h"><a href="#bsp-advanced-timer-h" class="headerlink" title="bsp_advanced_timer.h"></a>bsp_advanced_timer.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _BSP_ADVANCED_TIMER_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _BSP_ADVANCED_TIMER_H_</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">/*GPIO*/</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1_GPIO_PORT                 GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1_GPIO_PIN                 GPIO_Pin_8</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1_GPIO_CLK             RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1_GPIO_CLK_CMD         RCC_APB2PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1N_GPIO_PORT             GPIOB</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1N_GPIO_PIN                 GPIO_Pin_13</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1N_GPIO_CLK             RCC_APB2Periph_GPIOB</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_CH1N_GPIO_CLK_CMD         RCC_APB2PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_BKIN_GPIO_PORT             GPIOB</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_BKIN_GPIO_PIN                 GPIO_Pin_12</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_BKIN_GPIO_CLK             RCC_APB2Periph_GPIOB</span><span class="token macro property">#<span class="token directive keyword">define</span> TIMx_BKIN_GPIO_CLK_CMD         RCC_APB2PeriphClockCmd</span><span class="token comment" spellcheck="true">/*Advanced Timer*/</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM                             TIM1</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_CLK                    RCC_APB2Periph_TIM1</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_PSC_SET             36</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_PSC                     (ADVANCED_TIM_PSC_SET-1)</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_ARR_SET             65536</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_ARR                     (ADVANCED_TIM_ARR_SET-1)</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_CCR_SET             12000</span><span class="token macro property">#<span class="token directive keyword">define</span> ADVANCED_TIM_CCR                    (ADVANCED_TIM_CCR_SET)</span><span class="token keyword">void</span> <span class="token function">AdvancedTim_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">//_BSP_ADVANCED_TIMER_H_</span></code></pre><h3 id="bsp-i2c-gpio-c"><a href="#bsp-i2c-gpio-c" class="headerlink" title="bsp_i2c_gpio.c"></a>bsp_i2c_gpio.c</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  ******************************************************************************  * @file    bsp_i2c_gpio.c  * @version V1.0  * @date    2013-xx-xx  * @brief   用gpio模拟i2c总线, 适用于STM32系列CPU。该模块不包括应用层命令帧，仅包括I2C总线基本操作函数。  ******************************************************************************  * @attention  *  * 实验平台:野火 F103-MINI STM32 开发板   * 论坛    :http://www.firebbs.cn  * 淘宝    :https://fire-stm32.taobao.com  *  ******************************************************************************  */</span> <span class="token comment" spellcheck="true">/*    应用说明：    在访问I2C设备前，请先调用 i2c_CheckDevice() 检测I2C设备是否正常*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_i2c_gpio.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_Delay*    功能说明: I2C总线位延迟，最快400KHz*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//uint8_t i;</span>    <span class="token comment" spellcheck="true">/*　         下面的时间是通过逻辑分析仪测试得到的。    工作条件：CPU主频72MHz ，MDK编译环境，1级优化        循环次数为10时，SCL频率 = 205KHz         循环次数为7时，SCL频率 = 347KHz， SCL高电平时间1.5us，SCL低电平时间2.87us          循环次数为5时，SCL频率 = 421KHz， SCL高电平时间1.25us，SCL低电平时间2.375us     */</span>    <span class="token comment" spellcheck="true">//for (i = 0; i &lt; 10; i++);</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_Start*    功能说明: CPU发起I2C总线启动信号*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 当SCL高电平时，SDA出现一个下跳沿表示I2C总线启动信号 */</span>    <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_Start*    功能说明: CPU发起I2C总线停止信号*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 当SCL高电平时，SDA出现一个上跳沿表示I2C总线停止信号 */</span>    <span class="token function">OLED_I2C_SDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_SendByte*    功能说明: CPU向I2C总线设备发送8bit数据*    形    参：_ucByte ： 等待发送的字节*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>uint8_t _ucByte<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 先发送字节的高位bit7 */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>_ucByte <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_I2C_SDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>             <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放总线</span>        <span class="token punctuation">}</span>        _ucByte <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 左移一个bit */</span>        <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_ReadByte*    功能说明: CPU从I2C总线设备读取8bit数据*    形    参：无*    返 回 值: 读到的数据**********************************************************************************************************/</span>uint8_t <span class="token function">i2c_ReadByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t i<span class="token punctuation">;</span>    uint8_t value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 读到第1个bit为数据的bit7 */</span>    value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        value <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">OLED_I2C_SDA_READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            value<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_WaitAck*    功能说明: CPU产生一个时钟，并读取器件的ACK应答信号*    形    参：无*    返 回 值: 返回0表示正确应答，1表示无器件响应**********************************************************************************************************/</span> uint8_t <span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t re<span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU释放SDA总线 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU驱动SCL = 1, 此时器件会返回ACK应答 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">OLED_I2C_SDA_READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* CPU读取SDA口线状态 */</span>    <span class="token punctuation">{</span>        re <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        re <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> re<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_Ack*    功能说明: CPU产生一个ACK信号*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_I2C_SDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU驱动SDA = 0 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU产生1个时钟 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU释放SDA总线 */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_NAck*    功能说明: CPU产生1个NACK信号*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_NAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">OLED_I2C_SDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU驱动SDA = 1 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* CPU产生1个时钟 */</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OLED_I2C_SCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">i2c_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_CfgGpio*    功能说明: 配置I2C总线的GPIO，采用模拟IO的方式实现*    形    参：无*    返 回 值: 无**********************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">i2c_CfgGpio</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>OLED_RCC_I2C_PORT<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 打开GPIO时钟 */</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> OLED_I2C_SCL_PIN <span class="token operator">|</span> OLED_I2C_SDA_PIN<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_OD<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 开漏输出 */</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>OLED_GPIO_PORT_I2C<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 给一个停止信号, 复位I2C总线上的所有设备到待机模式 */</span>    <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-i2c-gpio-h"><a href="#bsp-i2c-gpio-h" class="headerlink" title="bsp_i2c_gpio.h"></a>bsp_i2c_gpio.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _BSP_I2C_GPIO_H</span><span class="token macro property">#<span class="token directive keyword">define</span> _BSP_I2C_GPIO_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_WR    0        </span><span class="token comment" spellcheck="true">/* 写控制bit */</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_RD    1        </span><span class="token comment" spellcheck="true">/* 读控制bit */</span><span class="token comment" spellcheck="true">/* 定义I2C总线连接的GPIO端口, 用户只需要修改下面4行代码即可任意改变SCL和SDA的引脚 */</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_GPIO_PORT_I2C    GPIOB            </span><span class="token comment" spellcheck="true">/* GPIO端口 */</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_RCC_I2C_PORT     RCC_APB2Periph_GPIOB        </span><span class="token comment" spellcheck="true">/* GPIO端口时钟 */</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SCL_PIN        GPIO_Pin_6            </span><span class="token comment" spellcheck="true">/* 连接到SCL时钟线的GPIO */</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_PIN        GPIO_Pin_7            </span><span class="token comment" spellcheck="true">/* 连接到SDA数据线的GPIO */</span><span class="token comment" spellcheck="true">/* 定义读写SCL和SDA的宏，已增加代码的可移植性和可阅读性 */</span><span class="token macro property">#<span class="token directive keyword">if</span> 0    </span><span class="token comment" spellcheck="true">/* 条件编译： 1 选择GPIO的库函数实现IO读写 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SCL_1()  GPIO_SetBits(OLED_GPIO_PORT_I2C, OLED_I2C_SCL_PIN)        </span><span class="token comment" spellcheck="true">/* SCL = 1 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SCL_0()  GPIO_ResetBits(OLED_GPIO_PORT_I2C, OLED_I2C_SCL_PIN)        </span><span class="token comment" spellcheck="true">/* SCL = 0 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_1()  GPIO_SetBits(OLED_GPIO_PORT_I2C, OLED_I2C_SDA_PIN)        </span><span class="token comment" spellcheck="true">/* SDA = 1 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_0()  GPIO_ResetBits(OLED_GPIO_PORT_I2C, OLED_I2C_SDA_PIN)        </span><span class="token comment" spellcheck="true">/* SDA = 0 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_READ()  GPIO_ReadInputDataBit(OLED_GPIO_PORT_I2C, OLED_I2C_SDA_PIN)    </span><span class="token comment" spellcheck="true">/* 读SDA口线状态 */</span><span class="token macro property">#<span class="token directive keyword">else</span>    </span><span class="token comment" spellcheck="true">/* 这个分支选择直接寄存器操作实现IO读写 */</span>    <span class="token comment" spellcheck="true">/*　注意：如下写法，在IAR最高级别优化时，会被编译器错误优化 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SCL_1()  OLED_GPIO_PORT_I2C->BSRR = OLED_I2C_SCL_PIN                </span><span class="token comment" spellcheck="true">/* SCL = 1 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SCL_0()  OLED_GPIO_PORT_I2C->BRR = OLED_I2C_SCL_PIN                </span><span class="token comment" spellcheck="true">/* SCL = 0 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_1()  OLED_GPIO_PORT_I2C->BSRR = OLED_I2C_SDA_PIN                </span><span class="token comment" spellcheck="true">/* SDA = 1 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_0()  OLED_GPIO_PORT_I2C->BRR = OLED_I2C_SDA_PIN                </span><span class="token comment" spellcheck="true">/* SDA = 0 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span> OLED_I2C_SDA_READ()  ((OLED_GPIO_PORT_I2C->IDR &amp; OLED_I2C_SDA_PIN) != 0)    </span><span class="token comment" spellcheck="true">/* 读SDA口线状态 */</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">i2c_Start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>uint8_t _ucByte<span class="token punctuation">)</span><span class="token punctuation">;</span>uint8_t <span class="token function">i2c_ReadByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uint8_t <span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_Ack</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_NAck</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">i2c_CfgGpio</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="OLED-I2C-c"><a href="#OLED-I2C-c" class="headerlink" title="OLED_I2C.c"></a>OLED_I2C.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"OLED_I2C.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_i2c_gpio.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_systick.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"codetab.h"</span></span>uint8_t DataBuffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>uint8_t Bef<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存前一个数据的几个参数1.要写在第几页2.0x01要移动几位3.写什么数据</span>uint8_t Cur<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前前一个数据1.要写在第几页2.0x01要移动几位3.写什么数据</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: i2c_CheckDevice*    功能说明: 检测I2C总线设备，CPU向发送设备地址，然后读取设备应答来判断该设备是否存在*    形    参：_Address：设备的I2C总线地址*    返 回 值: 返回值 0 表示正确， 返回1表示未探测到**********************************************************************************************************/</span>uint8_t <span class="token function">OLED_CheckDevice</span><span class="token punctuation">(</span>uint8_t _Address<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint8_t ucAck<span class="token punctuation">;</span>    <span class="token function">i2c_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 发送启动信号 */</span>    <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>_Address<span class="token operator">|</span>OLED_I2C_WR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 发送设备地址 */</span>    ucAck <span class="token operator">=</span> <span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 检测设备的ACK应答 */</span>    <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 发送停止信号 */</span>    <span class="token keyword">return</span> ucAck<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  I2C_WriteByte，向OLED寄存器地址写一个byte的数据  * @param  addr：寄存器地址    *                    data：要写入的数据  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>uint8_t addr<span class="token punctuation">,</span>uint8_t data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">i2c_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启I2C总线</span>    <span class="token comment" spellcheck="true">/* 发送设备地址+读写控制bit（0 = w， 1 = r) bit7 先传 */</span>    <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>OLED_ADDRESS<span class="token operator">|</span>OLED_I2C_WR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*等待ACK */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">goto</span> cmd_fail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* OLED器件无应答 */</span>    <span class="token punctuation">}</span>    <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送寄存器地址</span>    <span class="token comment" spellcheck="true">/*等待ACK */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">goto</span> cmd_fail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* OLED器件无应答 */</span>    <span class="token punctuation">}</span>    <span class="token function">i2c_SendByte</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送数据</span>    <span class="token comment" spellcheck="true">/*等待ACK */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">i2c_WaitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">goto</span> cmd_fail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* OLED器件无应答 */</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 发送I2C总线停止信号 */</span>    <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmd_fail<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/* 命令执行失败后，切记发送停止信号，避免影响I2C总线上其他设备 */</span>    <span class="token comment" spellcheck="true">/* 发送I2C总线停止信号 */</span>    <span class="token function">i2c_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  WriteCmd，向OLED写入命令  * @param  I2C_Command：命令代码  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> I2C_Command<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写命令</span><span class="token punctuation">{</span>    <span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> I2C_Command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  WriteDat，向OLED写入数据  * @param  I2C_Data：数据  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> I2C_Data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写数据</span><span class="token punctuation">{</span>    <span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> I2C_Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_Init，初始化OLED  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">i2c_CfgGpio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/*I2C总线的GPIO初始化*/</span>    <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1s,这里的延时很重要,上电后延时，没有错误的冗余设计</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xAE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//display off</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Set Memory Addressing Mode    </span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Set Page Start Address for Page Addressing Mode,0-7</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Set COM Output Scan Direction</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//---set low column address</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//---set high column address</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set start line address</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set contrast control register</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//亮度调节 0x00~0xff</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set segment re-map 0 to 127</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set normal display</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set multiplex ratio(1 to 64)</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x3F</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xa4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0xa4,Output follows RAM content;0xa5,Output ignores RAM content</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-set display offset</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-not offset</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set display clock divide ratio/oscillator frequency</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set divide ratio</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xd9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set pre-charge period</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xda</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set com pins hardware configuration</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xdb</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set vcomh</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0x20,0.77xVcc</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x8d</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--set DC-DC enable</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xaf</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//--turn on oled panel</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_SetPos，设置光标  * @param  x,第几页    *                    y,第几列  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置起始点坐标</span><span class="token punctuation">{</span>     <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LOW</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HIGHT</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_Fill，填充整个屏幕  * @param  fill_Data:要填充的数据    * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_Fill</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//全屏填充</span><span class="token punctuation">{</span>    uint8_t i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DataBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xff</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">Write_DataBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_CLS，清屏  * @param  无    * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_CLS</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//清屏</span><span class="token punctuation">{</span>    uint8_t i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DataBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">Write_DataBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_ON，将OLED从休眠中唤醒  * @param  无    * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0X8D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置电荷泵</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0X14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开启电荷泵</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0XAF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//OLED唤醒</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * @brief  OLED_OFF，让OLED休眠 -- 休眠模式下,OLED功耗不到10uA  * @param  无    * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">OLED_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0X8D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置电荷泵</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0X10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//关闭电荷泵</span>    <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token number">0XAE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//OLED休眠</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_ShowStr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> TextSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Parameters     : x,y -- 起始点坐标(x:0~127, y:0~7); ch[] -- 要显示的字符串; TextSize -- 字符大小(1:6*8 ; 2:8*16)</span>    <span class="token comment" spellcheck="true">// Description    : 显示codetab.h中的ASCII字符,有6*8和8*16可选择</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>TextSize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                c <span class="token operator">=</span> ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">126</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    y<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//OLED_SetPos(x,y);</span>                <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token function">WriteDat</span><span class="token punctuation">(</span>F6x8<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                c <span class="token operator">=</span> ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">120</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    y<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//OLED_SetPos(x,y);</span>                <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token function">WriteDat</span><span class="token punctuation">(</span>F8X16<span class="token punctuation">[</span>c<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//OLED_SetPos(x,y+1);</span>                <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token function">WriteDat</span><span class="token punctuation">(</span>F8X16<span class="token punctuation">[</span>c<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_ShowCN</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> N<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Parameters     : x,y -- 起始点坐标(x:0~127, y:0~7); N:汉字在codetab.h中的索引</span>    <span class="token comment" spellcheck="true">// Description    : 显示codetab.h中的汉字,16*16点阵</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> wm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  adder<span class="token operator">=</span><span class="token number">32</span><span class="token operator">*</span>N<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//OLED_SetPos(x , y);</span>    <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>wm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>wm <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>wm<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span>F16x16<span class="token punctuation">[</span>adder<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adder <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//OLED_SetPos(x,y + 1);</span>    <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>wm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>wm <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>wm<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span>F16x16<span class="token punctuation">[</span>adder<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adder <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_DrawBMP</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> BMP<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Parameters     : x0,y0 -- 起始点坐标(x0:0~127, y0:0~7); x1,y1 -- 起点对角线(结束点)的坐标(x1:1~128,y1:1~8)</span>    <span class="token comment" spellcheck="true">// Description    : 显示BMP位图</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y1<span class="token operator">%</span><span class="token number">8</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> y1<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>        y <span class="token operator">=</span> y1<span class="token operator">/</span><span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span>y0<span class="token punctuation">;</span>y<span class="token operator">&lt;</span>y1<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//OLED_SetPos(x0,y);</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span>x0<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>x1<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span>BMP<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Before_State_Update</span><span class="token punctuation">(</span>uint8_t y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据y的值，求出前一个数据的有关参数</span><span class="token punctuation">{</span>    Bef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>    Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span>    Bef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Current_State_Update</span><span class="token punctuation">(</span>uint8_t y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据Y值，求出当前数据的有关参数</span><span class="token punctuation">{</span>    Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据写在第几页</span>    Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x01要移动的位数</span>    Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要写什么数据</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*0&lt;=x&lt;=127,0&lt;=y&lt;=63屏幕看作一个坐标轴，左下角是原点*/</span><span class="token keyword">void</span> <span class="token function">OLED_DrawPoint</span><span class="token punctuation">(</span>uint8_t x<span class="token punctuation">,</span>uint8_t y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*这里x是横坐标，y是纵坐标，在（x,y）处画一个点*/</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">127</span><span class="token operator">||</span>y<span class="token operator">></span><span class="token number">63</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    uint8_t page<span class="token punctuation">,</span>move<span class="token punctuation">,</span>data<span class="token punctuation">;</span>    page<span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据写在第几页</span>    move<span class="token operator">=</span><span class="token number">7</span><span class="token operator">-</span>y<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x01要移动的位数</span>    data<span class="token operator">=</span><span class="token number">0x01</span><span class="token operator">&lt;&lt;</span>move<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要写什么数据</span>    <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteDat</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">OLED_DrawWave</span><span class="token punctuation">(</span>uint8_t x<span class="token punctuation">,</span>uint8_t y<span class="token punctuation">)</span><span class="token punctuation">{</span>    int8_t page_sub<span class="token punctuation">;</span>    uint8_t page_buff<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">Current_State_Update</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据Y值，求出当前数据的有关参数</span>    page_sub<span class="token operator">=</span>Bef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前值与前一个值的页数相比较</span>    <span class="token comment" spellcheck="true">//确定当前列，每一页应该写什么数据</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>page_sub<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        page_buff<span class="token operator">=</span>Bef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span>Bef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        page_buff<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>page_sub<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            page_buff<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token operator">&lt;&lt;</span>Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>page_sub<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>Bef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span>Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span>Bef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>page_sub<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        page_buff<span class="token operator">=</span>Cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        page_buff<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">-</span>page_sub<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            page_buff<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>page_buff<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>Bef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Before_State_Update</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把下一列，每一页的数据清除掉</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***********************************************************************************************************    函 数 名: OLED检测测试*    功能说明: 检测I2C总线设备，实际是对OLED_CheckDevice()的封装*    形    参：*    返 回 值: 返回值 0 表示没有检测到OLED，返回1表示检测到OLED**********************************************************************************************************/</span> uint8_t <span class="token function">OLED_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">OLED_CheckDevice</span><span class="token punctuation">(</span>OLED_ADDRESS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*写 缓存数据*/</span><span class="token keyword">void</span> <span class="token function">Write_DataBuffer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这个是将DataBuffer数组里面的值，全部写进屏里去</span><span class="token punctuation">{</span>        uint8_t i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置起始点坐标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">WriteDat</span><span class="token punctuation">(</span>DataBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写数据</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="OLED-I2C-h"><a href="#OLED-I2C-h" class="headerlink" title="OLED_I2C.h"></a>OLED_I2C.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __OLED_I2C_H</span><span class="token macro property">#<span class="token directive keyword">define</span>    __OLED_I2C_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUFF_SIZE 10</span><span class="token macro property">#<span class="token directive keyword">define</span> OLED_ADDRESS    0x78 </span><span class="token comment" spellcheck="true">//通过调整0R电阻,屏可以0x78和0x7A两个地址 -- 默认0x78</span>uint8_t <span class="token function">OLED_CheckDevice</span><span class="token punctuation">(</span>uint8_t _Address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检测I2C总线设备OLED</span><span class="token keyword">void</span> <span class="token function">I2C_WriteByte</span><span class="token punctuation">(</span>uint8_t addr<span class="token punctuation">,</span>uint8_t data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">WriteCmd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> I2C_Command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">WriteDat</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> I2C_Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_SetPos</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_Fill</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_CLS</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ON</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_OFF</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowStr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> TextSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_ShowCN</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_DrawBMP</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y0<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y1<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> BMP<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uint8_t <span class="token function">OLED_Test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OLED检测测试</span><span class="token keyword">void</span> <span class="token function">Write_DataBuffer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_DrawWave</span><span class="token punctuation">(</span>uint8_t x<span class="token punctuation">,</span>uint8_t y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OLED_DrawPoint</span><span class="token punctuation">(</span>uint8_t x<span class="token punctuation">,</span>uint8_t y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Before_State_Update</span><span class="token punctuation">(</span>uint8_t y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="bsp-systick-c"><a href="#bsp-systick-c" class="headerlink" title="bsp_systick.c"></a>bsp_systick.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_systick.h"</span></span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span><span class="token keyword">static</span> __INLINE uint32_t <span class="token function">SysTick_Config</span><span class="token punctuation">(</span>uint32_t ticks<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ticks <span class="token operator">></span> SysTick_LOAD_RELOAD_Msk<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* Reload value impossible */</span>  SysTick<span class="token operator">-></span>LOAD  <span class="token operator">=</span> <span class="token punctuation">(</span>ticks <span class="token operator">&amp;</span> SysTick_LOAD_RELOAD_Msk<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* set reload register */</span>  <span class="token function">NVIC_SetPriority</span> <span class="token punctuation">(</span>SysTick_IRQn<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>__NVIC_PRIO_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* set Priority for Cortex-M0 System Interrupts */</span>  SysTick<span class="token operator">-></span>VAL   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                          <span class="token comment" spellcheck="true">/* Load the SysTick Counter Value */</span>  SysTick<span class="token operator">-></span>CTRL  <span class="token operator">=</span> SysTick_CTRL_CLKSOURCE_Msk <span class="token operator">|</span>                    SysTick_CTRL_TICKINT_Msk   <span class="token operator">|</span>                    SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* Enable SysTick IRQ and SysTick Timer */</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                  <span class="token comment" spellcheck="true">/* Function successful */</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">Delay_ms</span><span class="token punctuation">(</span>uint32_t ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t i<span class="token punctuation">;</span>    <span class="token function">SysTick_Config</span><span class="token punctuation">(</span><span class="token number">72000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">/*配置为1ms中断一次*/</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ms<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>SysTick<span class="token operator">-></span>CTRL <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*检测标志位（最高位）*/</span>    <span class="token punctuation">}</span>    SysTick<span class="token operator">-></span>CTRL<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token operator">~</span>SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*关闭SysTick*/</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Delay_us</span><span class="token punctuation">(</span>uint32_t us<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t i<span class="token punctuation">;</span>    <span class="token function">SysTick_Config</span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>us<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>SysTick<span class="token operator">-></span>CTRL <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    SysTick<span class="token operator">-></span>CTRL<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token operator">~</span>SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-systick-h"><a href="#bsp-systick-h" class="headerlink" title="bsp_systick.h"></a>bsp_systick.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _BSP_SYSTICK_H</span><span class="token macro property">#<span class="token directive keyword">define</span> _BSP_SYSTICK_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"core_cm3.h"</span></span><span class="token keyword">void</span> <span class="token function">Delay_ms</span><span class="token punctuation">(</span>uint32_t ms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Delay_us</span><span class="token punctuation">(</span>uint32_t us<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//_BSP_SYSTICK_H</span></code></pre><h3 id="bsp-usart-c"><a href="#bsp-usart-c" class="headerlink" title="bsp_usart.c"></a>bsp_usart.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"bsp_usart.h"</span></span><span class="token keyword">void</span> <span class="token function">USARTx_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStruct<span class="token punctuation">;</span>    <span class="token function">USART_Rx_GPIO_CLK_CMD</span><span class="token punctuation">(</span>USART_Rx_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USART_Tx_GPIO_CLK_CMD</span><span class="token punctuation">(</span>USART_Tx_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>USART_Rx_GPIO_PIN<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>USART_Rx_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>USART_Tx_GPIO_PIN<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_AF_PP<span class="token punctuation">;</span>    GPIO_InitStruct<span class="token punctuation">.</span>GPIO_Speed<span class="token operator">=</span>GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>USART_Tx_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">USARTx_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    USART_InitTypeDef USART_InitStruct<span class="token punctuation">;</span>    <span class="token function">USARTx_CLK_CMD</span><span class="token punctuation">(</span>USARTx_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化串口相关数据</span>    USART_InitStruct<span class="token punctuation">.</span>USART_BaudRate<span class="token operator">=</span>USARTx_BAUD_RATE<span class="token punctuation">;</span>    USART_InitStruct<span class="token punctuation">.</span>USART_WordLength<span class="token operator">=</span>USART_WordLength_8b<span class="token punctuation">;</span>    USART_InitStruct<span class="token punctuation">.</span>USART_StopBits<span class="token operator">=</span>USART_StopBits_1<span class="token punctuation">;</span>    USART_InitStruct<span class="token punctuation">.</span>USART_Parity<span class="token operator">=</span>USART_Parity_No<span class="token punctuation">;</span>    USART_InitStruct<span class="token punctuation">.</span>USART_Mode<span class="token operator">=</span>USART_Mode_Rx<span class="token operator">|</span>USART_Mode_Tx<span class="token punctuation">;</span>    USART_InitStruct<span class="token punctuation">.</span>USART_HardwareFlowControl<span class="token operator">=</span>USART_HardwareFlowControl_None<span class="token punctuation">;</span>    <span class="token function">USART_Init</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使能串口</span>    <span class="token function">USART_Cmd</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使能串口中断</span>    <span class="token comment" spellcheck="true">//USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE);</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">USARTx_NVIC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      NVIC_InitTypeDef NVIC_InitStruct<span class="token punctuation">;</span>      <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>      NVIC_InitStruct<span class="token punctuation">.</span>NVIC_IRQChannel<span class="token operator">=</span>USARTx_IRQCHANNEL<span class="token punctuation">;</span>      NVIC_InitStruct<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      NVIC_InitStruct<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      NVIC_InitStruct<span class="token punctuation">.</span>NVIC_IRQChannelCmd<span class="token operator">=</span>ENABLE<span class="token punctuation">;</span>      <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">USARTx_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//USARTx_NVIC_Config();</span>    <span class="token function">USARTx_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">USARTx_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span>FILE<span class="token operator">*</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">USART_SendData</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> USART_FLAG_TXE<span class="token punctuation">)</span><span class="token operator">==</span>RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">USART_GetFlagStatus</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">,</span> USART_FLAG_RXNE<span class="token punctuation">)</span><span class="token operator">==</span>RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">USART_ReceiveData</span><span class="token punctuation">(</span>USARTx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="bsp-usart-h"><a href="#bsp-usart-h" class="headerlink" title="bsp_usart.h"></a>bsp_usart.h</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _BSP_USART_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _BSP_USART_H_</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx USART1</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx_BAUD_RATE 115200</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx_CLK  RCC_APB2Periph_USART1</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx_CLK_CMD  RCC_APB2PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx_IRQCHANNEL USART1_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span> USARTx_IRQHANDLER USART1_IRQHandler</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Rx_GPIO_PORT  GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Rx_GPIO_PIN   GPIO_Pin_10</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Rx_GPIO_CLK   RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Rx_GPIO_CLK_CMD  RCC_APB2PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Tx_GPIO_PORT GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Tx_GPIO_PIN  GPIO_Pin_9</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Tx_GPIO_CLK  RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span> USART_Tx_GPIO_CLK_CMD  RCC_APB2PeriphClockCmd</span><span class="token keyword">void</span> <span class="token function">USARTx_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USARTx_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USARTx_NVIC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">USARTx_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//_BSP_USART_H_</span></code></pre><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://img-blog.csdnimg.cn/20200728102357299.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200728102357286.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200728102357282.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> 软件开发 </category>
          
          <category> IIC </category>
          
          <category> 嵌入式 </category>
          
          <category> STM32 ARM </category>
          
          <category> ADC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> C </tag>
            
            <tag> OLED </tag>
            
            <tag> 软件开发 </tag>
            
            <tag> IIC </tag>
            
            <tag> STM32 ARM </tag>
            
            <tag> ADC </tag>
            
            <tag> 野火、 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Vue框架微信小程序物联网项目之设计笔记--创建工程模板</title>
      <link href="/2020/07/05/ji-yu-vue-kuang-jia-wei-xin-xiao-cheng-xu-wu-lian-wang-xiang-mu-zhi-she-ji-bi-ji-chuang-jian-gong-cheng-mo-ban/"/>
      <url>/2020/07/05/ji-yu-vue-kuang-jia-wei-xin-xiao-cheng-xu-wu-lian-wang-xiang-mu-zhi-she-ji-bi-ji-chuang-jian-gong-cheng-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Vue框架微信小程序物联网项目之设计笔记–创建工程模板"><a href="#基于Vue框架微信小程序物联网项目之设计笔记–创建工程模板" class="headerlink" title="基于Vue框架微信小程序物联网项目之设计笔记–创建工程模板"></a>基于Vue框架微信小程序物联网项目之设计笔记–创建工程模板</h1><a id="more"></a><h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><p>Vue  是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。<br><img src="https://img-blog.csdnimg.cn/20200627204320322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="官网地址-https-cn-vuejs-org"><a href="#官网地址-https-cn-vuejs-org" class="headerlink" title="官网地址 https://cn.vuejs.org/"></a>官网地址 <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></h3><h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><h4 id="VScode（管理员版本）"><a href="#VScode（管理员版本）" class="headerlink" title="VScode（管理员版本）"></a>VScode（管理员版本）</h4><p><img src="https://img-blog.csdnimg.cn/20200627204854911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="Nodejs-win10-64位"><a href="#Nodejs-win10-64位" class="headerlink" title="Nodejs   win10 64位"></a>Nodejs   win10 64位</h4><p><img src="https://img-blog.csdnimg.cn/20200627204902994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="微信开发者工具-（稳定版）"><a href="#微信开发者工具-（稳定版）" class="headerlink" title="微信开发者工具 （稳定版）"></a>微信开发者工具 （稳定版）</h4><p><img src="https://img-blog.csdnimg.cn/202006272049100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="创建工程（最好看视频教程）"><a href="#创建工程（最好看视频教程）" class="headerlink" title="创建工程（最好看视频教程）"></a>创建工程（最好看视频教程）</h4><h3 id="创建工程（前提软件全部按萝卜师兄的教程安装完成之后）"><a href="#创建工程（前提软件全部按萝卜师兄的教程安装完成之后）" class="headerlink" title="创建工程（前提软件全部按萝卜师兄的教程安装完成之后）"></a>创建工程（前提软件全部按萝卜师兄的教程安装完成之后）</h3><h5 id="Vue-CLI-安装"><a href="#Vue-CLI-安装" class="headerlink" title="Vue CLI 安装"></a>Vue CLI 安装</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli<span class="token comment" spellcheck="true"># OR</span>yarn global add @vue/cli</code></pre><p><img src="https://img-blog.csdnimg.cn/20200705092324423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200705092324388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200705092324334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="加快速度"><a href="#加快速度" class="headerlink" title="加快速度"></a>加快速度</h6><p>淘宝 NPM 镜像<br>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步.<br><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/NPM?from=tnpm</a><br><img src="https://img-blog.csdnimg.cn/20200705092340973.png#pic_center" alt="在这里插入图片描述"></p><pre class=" language-bash"><code class="language-bash">安装命令<span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><p><img src="https://img-blog.csdnimg.cn/20200705092545669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装完成后<br><img src="https://img-blog.csdnimg.cn/20200705092830137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="VsCode-插件安装"><a href="#VsCode-插件安装" class="headerlink" title="VsCode 插件安装"></a>VsCode 插件安装</h5><p><img src="https://img-blog.csdnimg.cn/20200705093252966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020070509332269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200705093252945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200705093252924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200705093252916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200705093252898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200705093252880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200705093252682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="mpvue模板生成"><a href="#mpvue模板生成" class="headerlink" title="mpvue模板生成"></a>mpvue模板生成</h3><p>1.创建一个文件保存工程文件<br><img src="https://img-blog.csdnimg.cn/20200705093553390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2. 使用Vscode 打开文件夹 打开终端<br><img src="https://img-blog.csdnimg.cn/20200705093802600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200705093846661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>3. 终端 输入 命令</p><pre class=" language-bash"><code class="language-bash">vue init mpvue/mpvue-quickstart my-project <span class="token comment" spellcheck="true"># my-project项目名称 可以改成你自己的</span>例如：vue init mpvue/mpvue-quickstart wechatapp</code></pre><p><img src="https://img-blog.csdnimg.cn/20200705094355794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="一般情况下一路回车，Y-n-直接n"><a href="#一般情况下一路回车，Y-n-直接n" class="headerlink" title="一般情况下一路回车，Y/n? 直接n"></a>一般情况下一路回车，Y/n? 直接n</h5><p>4.工程生成<br><img src="https://img-blog.csdnimg.cn/2020070509462541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>生成如下文件<br><img src="https://img-blog.csdnimg.cn/20200705101524814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>5 终端 输入 npm install 安装依赖环境<br><img src="https://img-blog.csdnimg.cn/20200705101317173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>c<br>6. 打开微信开发者工具 导入项目<br><img src="https://img-blog.csdnimg.cn/20200705101431560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200705103534125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020070510353499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><h5 id="萝卜师兄-挽救小白STM32-8266-小程序智能家居毕设实战教程"><a href="#萝卜师兄-挽救小白STM32-8266-小程序智能家居毕设实战教程" class="headerlink" title="萝卜师兄 挽救小白STM32+8266+小程序智能家居毕设实战教程"></a>萝卜师兄 挽救小白STM32+8266+小程序智能家居毕设实战教程</h5><p>（非常的详细，从STM32简单入门到微信小程序开发全部手把手教学，非常感谢大佬的教程，可以完成一个简单的物联网项目）<br><a href="https://www.bilibili.com/video/BV1ae411W7yD" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1ae411W7yD</a><br><img src="https://img-blog.csdnimg.cn/2020062721001019.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200627205913540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>基于Vue框架微信小程序物联网项目之设计笔记–简单的界面显示实现<br><a href="https://blog.csdn.net/weixin_43599390/article/details/106987763" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390/article/details/106987763</a></p><h5 id="博客https-www-delehub-top"><a href="#博客https-www-delehub-top" class="headerlink" title="博客https://www.delehub.top/"></a>博客<a href="https://www.delehub.top/" target="_blank" rel="noopener">https://www.delehub.top/</a></h5>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
          <category> ESP8266 </category>
          
          <category> 微信小程序 </category>
          
          <category> Vue js </category>
          
          <category> 物联网 </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PCB </tag>
            
            <tag> OLED </tag>
            
            <tag> DHT11 </tag>
            
            <tag> ESP8266 </tag>
            
            <tag> STM32 </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> Vue js </tag>
            
            <tag> 智能家居 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机智云物联网平台 STM32 ESP8266-01S 简单无线控灯</title>
      <link href="/2020/06/29/ji-zhi-yun-wu-lian-wang-ping-tai-stm32-esp8266-01s-jian-dan-wu-xian-kong-deng/"/>
      <url>/2020/06/29/ji-zhi-yun-wu-lian-wang-ping-tai-stm32-esp8266-01s-jian-dan-wu-xian-kong-deng/</url>
      
        <content type="html"><![CDATA[<h1 id="机智云-STM32-ESP8266-01S-简单无线控灯"><a href="#机智云-STM32-ESP8266-01S-简单无线控灯" class="headerlink" title="机智云 STM32 ESP8266-01S 简单无线控灯"></a>机智云 STM32 ESP8266-01S 简单无线控灯</h1><a id="more"></a><h1><a name="t1"></a><a name="t1"></a><a id="1_3"></a>1、机智云账号注册和创建新产品</h1><h2><a name="t2"></a><a name="t2"></a><a id="11_4"></a>1.1、账号注册及其机智云使用文档</h2><p>账号注册我就不详细说了，<a href="http://docs.gizwits.com/zh-cn/overview/overview.html" target="_blank" rel="nofollow noopener">http://docs.gizwits.com/zh-cn/overview/overview.html</a>机智云的文档中心。可以查找自己需要的一部分信息。</p><h2><a name="t3"></a><a name="t3"></a><a id="12_7"></a>1.2、产品创建</h2><p><img src="https://img-blog.csdnimg.cn/20200628150102213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择入网方式：<br><img src="https://img-blog.csdnimg.cn/2020062815021684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看产品基本信息：<br><img src="https://img-blog.csdnimg.cn/20200628150348511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>数据点：<br>数据点要一定要选择可写。<br><img src="https://img-blog.csdnimg.cn/20200628150530819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3><a name="t4"></a><a name="t4"></a><a id="13_16"></a>1.3、数据读写类型区别</h3><p>  读写类型：定义数据点的作用范围，包含有 4 种类型，分别是：只读、可写、报警、故障，<br>以下是官方对读写类型的介绍：<br>  ① 只读：表示该数据点为非控制，数据只支持从设备上报。<br>  ② 可写：表示该数据点可控制。设备端可上报数据点数据，云端/客户端(移动端)可对该数<br>据点数据做出下发控制。<br>  ③ 报警：表示该数据点非控制，数据只支持从设备(设备端)上报，数据类型需为布尔值。<br>  ④ 故障：表示该数据点非控制，数据只支持从设备(设备端)上报，数据类型需为布尔值。<br>云端对设备上报的该数据点做统计，可在“运行状态”查看。<br>  数据类型：定义数据点数据类型，包含有布尔值、枚举类型、数值、以及扩展，以下是官方对数据类型介绍：<br>  ① 布尔值：表示两个状态： 0 或 1。如开关状态等，建议使用布尔数据类型。<br>  ② 枚举类型：可定义一个有限的取值集合。当定义的某个功能(元器件)有固定的若干个值，<br>  例如：“设定 LED 组合颜色”该数据点的枚举定义值：“自定义，黄色，紫色，粉色”。<br>  ③ 数值：填写数值范围，数值可为负数/小数，机智云自动将数值转换为正数。<br>  ④ 扩展：填写数据长度，数据内容由用户自定义。对于上述功能点无法满足的复杂功能可采用，机智云不建议使用此类型数据，数据上报该数据点的数据，机智云无法识别。</p><h3><a name="t5"></a><a name="t5"></a><a id="14MCU_31"></a>1.4、MCU开发</h3><p><strong>Product Secret 在前面基本信息里面可以看到。</strong><br><img src="https://img-blog.csdnimg.cn/20200628150919982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载代码：<br><img src="https://img-blog.csdnimg.cn/20200628151104833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1><a name="t6"></a><a name="t6"></a><a id="2_36"></a>2、可以使用虚拟设备调试</h1><p><img src="https://img-blog.csdnimg.cn/20200628151218306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020062815132253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>手机app下载地址：<br><a href="https://download.gizwits.com/zh-cn/p/98/99" target="_blank" rel="nofollow noopener">https://download.gizwits.com/zh-cn/p/98/99</a>机智云官方下载地址。<br><img src="https://img-blog.csdnimg.cn/2020062815153147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  现在就可以使用手机和虚拟设备进行简单调试了。</p><h1><a name="t7"></a><a name="t7"></a><a id="3esp01s_43"></a>3、esp-01s烧录机智云固件</h1><h2><a name="t8"></a><a name="t8"></a><a id="31_44"></a>3.1、固件下载</h2><p>  固件下载<a href="https://download.gizwits.com/zh-cn/p/92/94" target="_blank" rel="nofollow noopener">https://download.gizwits.com/zh-cn/p/92/94</a>直接下载机智云固件。由于 GAgent 固件会时刻的更新，有可能你们所看到的时间会不一样，以官网最新发布的为准，你也可以下载旧版本的固件。</p><p><img src="https://img-blog.csdnimg.cn/20200628151855106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解压后的固件文件：<br>可以看到固件类型有好几种类型，<strong>标红</strong>那个是我们需要烧录的固件，我是直接烧录的已经打包好的固件，我看到网上有人发布的不是打包的固件，烧录起来麻烦一点。<br><img src="https://img-blog.csdnimg.cn/20200628152052919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  烧录软件下载地址：<a href="http://wiki.ai-thinker.com/esp_download" target="_blank" rel="nofollow noopener">http://wiki.ai-thinker.com/esp_download</a><br><img src="https://img-blog.csdnimg.cn/20200628153221990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载解压就可以看到烧录软件：<br><img src="https://img-blog.csdnimg.cn/20200628154233914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  烧录了机智云固件还想要还原乐鑫的固件，附下载地址。<br>乐鑫固件下载地址：<a href="http://wiki.ai-thinker.com/esp8266/sdk" target="_blank" rel="nofollow noopener">http://wiki.ai-thinker.com/esp8266/sdk</a></p><h2><a name="t9"></a><a name="t9"></a><a id="32esp01s_59"></a>3.2、esp-01s简介</h2><p>实物图：<br><img src="https://img-blog.csdnimg.cn/20200628152725839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>管脚分布：<br><img src="https://img-blog.csdnimg.cn/20200628152632908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200628153655245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628153714536.png" alt="在这里插入图片描述"></p><h2><a name="t10"></a><a name="t10"></a><a id="33_68"></a>3.3、烧录</h2><p><img src="https://img-blog.csdnimg.cn/2020062815462957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2><a name="t11"></a><a name="t11"></a><a id="34espSTM32_70"></a>3.4、esp与STM32引脚连接</h2><p><strong>引脚连接：</strong><br><img src="https://img-blog.csdnimg.cn/20200628154752488.png" alt="在这里插入图片描述"><br>其它的引脚可以悬空。</p><h1><a name="t12"></a><a name="t12"></a><a id="4MCU_75"></a>4、程序移植MCU</h1><p>我自己的工程文件：<a href="https://download.csdn.net/download/weixin_45488643/12558122" target="_blank" rel="noopener">https://download.csdn.net/download/weixin_45488643/12558122</a></p><h2><a name="t13"></a><a name="t13"></a><a id="41_77"></a>4.1、工程配置</h2><p>  前面已经下载了机智云程序文件夹，解压缩可以看到如下文件：<br><img src="https://img-blog.csdnimg.cn/20200628155224980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>把这2个文件夹拷贝到自己的工程文件下。<br>我自己使用的是正点的代码。<br><img src="https://img-blog.csdnimg.cn/20200628155332767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在工程文件里面添加文件夹和文件路径。<br><img src="https://img-blog.csdnimg.cn/2020062815553823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628155633312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择<strong>C99 Mode</strong> 防止编译报错。<br><img src="https://img-blog.csdnimg.cn/20200628162542705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2><a name="t14"></a><a name="t14"></a><a id="42__89"></a>4.2 代码移植</h2><p>工程文件夹目录：<br><strong>使用了定时器3和串口3。</strong><br><img src="https://img-blog.csdnimg.cn/20200628160118207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3><a name="t15"></a><a name="t15"></a><a id="421_USART3__93"></a>4.2.1、修改 USART3 文件</h3><p>  在 usart3.c 文件中添加串口 3 的初始化和中断服务函数，将中断接收的数据写入到gizPutData()函数，代码如下：<br>  <strong>添加头文件</strong>#include “gizwits_product.h” 到<strong>USART3</strong>文件里面，不添加就会报错。</p><p><img src="https://img-blog.csdnimg.cn/20200628160751567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3><a name="t16"></a><a name="t16"></a><a id="422_timerc__98"></a>4.2.2、修改 timer.c 文件</h3><p>  在定时器 3 中断服务函数中添加 gizTimerMs()函数，并且添加 <strong>gizwits_product.h</strong> 头文件，代码如下<br><img src="https://img-blog.csdnimg.cn/20200628161047952.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628161110429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注意</strong>： gizwits_product.h 文件中没有对 gizTimerMs()函数做声明，需自己添加，否则编译会出现警报。</p><h3><a name="t17"></a><a name="t17"></a><a id="423_gizwits_productc__103"></a>4.2.3、修改 gizwits_product.c 文件</h3><p><img src="https://img-blog.csdnimg.cn/20200628161613524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  添加完串口发送函数后，回到 gizwitsEventProcess()用户处理事件函数中添加我们的用户事件逻辑，这里我们是控制 LED1 的亮灭，在 EVENT_LEDonoff 事件中根据返回的开关量添加其 LED1 的开关控制，代码如下：需要提前添加自己定义的LED头文件和<strong>usart3.h</strong>头文件，不然就报错了。<br><img src="https://img-blog.csdnimg.cn/20200628161819104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在mcuRestart()函数中添加软复位函数，代码如下：<br><img src="https://img-blog.csdnimg.cn/20200628162104174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改**userHandle()**函数：<br>添加数据上报。<br><img src="https://img-blog.csdnimg.cn/20200628162909659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  在主函数中，先对按键、 LED、串口以及 Gizwits 串口协议所需的定时器、 WIF 串口、数据缓冲区等一系列进行初始化，主循环通过按键扫描函数 KEY_Scan 一直扫描当前按键状态，KEY1 按下使 WIFI 设备进入 AirLink 配网模式， KEY_UP 按下让 WIFI 设备进入复位模式（清除配对信息、断开连接），而 UserHandl 函数则读取当前的 LED1 状态，将读出状态值赋予回设备数据结构体变量中，然后再通过 gizwitsHandle 函数上报到服务器。</p><h1><a name="t19"></a><a name="t19"></a><a id="5_168"></a>5、烧录工程配网</h1><p>下载工程文件到开发板。</p><h2><a name="t20"></a><a name="t20"></a><a id="51_170"></a>5.1、实物图</h2><p><img src="https://img-blog.csdnimg.cn/20200628164343707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2><a name="t21"></a><a name="t21"></a><a id="52_172"></a>5.2、配网</h2><p>配网：<br><img src="https://img-blog.csdnimg.cn/20200628164759612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628164501133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628164519362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  先按下开发板上的KEY1键在，在点击我已经完成上述操作。<br><img src="https://img-blog.csdnimg.cn/20200628164937457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2><a name="t22"></a><a name="t22"></a><a id="53__179"></a>5.3 、实物效果展示</h2><p>打开灯：<br><img src="https://img-blog.csdnimg.cn/20200628165104553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628165137380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ4ODY0Mw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  能看到这个地方的小伙伴也是比较有耐心了，工程文件免费送了。<br>工程文件免费下载地址：<a href="https://wwa.lanzous.com/iVf8re42hvi" target="_blank" rel="nofollow noopener">https://wwa.lanzous.com/iVf8re42hvi</a></p><p>  整个工程到此就结束了，希望小伙伴能够手下留情，给个<strong>赞</strong>。</p><pre class=" language-c"><code class="language-c">main<span class="token punctuation">.</span>c<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"usart3.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"gizwits_product.h"</span> </span><span class="token comment" spellcheck="true">//协议初始化</span><span class="token keyword">void</span> <span class="token function">Gizwits_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">TIM3_Int_Init</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7199</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1MS系统定时</span>  <span class="token function">usart3_init</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//WIFI初始化</span>    <span class="token function">userInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设备状态结构体初始化</span>    <span class="token function">gizwitsInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缓冲区初始化</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//延时函数初始化</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span>    <span class="token function">uart_init</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//串口初始化为115200</span>    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//LED端口初始化</span>    <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//按键初始化</span>    <span class="token function">Gizwits_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//协议初始化</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--------机智云-协议移植LED测试实验----------\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KEY1:AirLink连接模式\t KEY_UP:复位\r\n\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">userHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户采集</span>        <span class="token function">gizwitsHandle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dataPoint_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>currentDataPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//协议处理</span>        key <span class="token operator">=</span> <span class="token function">KEY_Scan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span>KEY1_PRES<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//KEY1按键</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"WIFI进入AirLink连接模式\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">gizwitsSetMode</span><span class="token punctuation">(</span>WIFI_AIRLINK_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Air-link模式接入</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span>WKUP_PRES<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//KEY_UP按键</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"WIFI复位，请重新配置连接\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">gizwitsSetMode</span><span class="token punctuation">(</span>WIFI_RESET_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//WIFI复位</span>        <span class="token punctuation">}</span>        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LED0 <span class="token operator">=</span> <span class="token operator">~</span>LED0<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
          <category> ESP8266 </category>
          
          <category> 物联网 </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PCB </tag>
            
            <tag> OLED </tag>
            
            <tag> DHT11 </tag>
            
            <tag> 机智云 </tag>
            
            <tag> ESP8266 </tag>
            
            <tag> STM32 </tag>
            
            <tag> 智能家居 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Vue框架微信小程序物联网项目之设计笔记--简单的界面显示实现</title>
      <link href="/2020/06/27/ji-yu-vue-kuang-jia-wei-xin-xiao-cheng-xu-wu-lian-wang-xiang-mu-zhi-she-ji-bi-ji-jian-dan-de-jie-mian-xian-shi-shi-xian/"/>
      <url>/2020/06/27/ji-yu-vue-kuang-jia-wei-xin-xiao-cheng-xu-wu-lian-wang-xiang-mu-zhi-she-ji-bi-ji-jian-dan-de-jie-mian-xian-shi-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Vue框架微信小程序物联网项目之设计笔记记录"><a href="#基于Vue框架微信小程序物联网项目之设计笔记记录" class="headerlink" title="基于Vue框架微信小程序物联网项目之设计笔记记录"></a>基于Vue框架微信小程序物联网项目之设计笔记记录</h1><a id="more"></a><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>Vue  是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。<br><img src="https://img-blog.csdnimg.cn/20200627204320322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="官网地址-https-cn-vuejs-org"><a href="#官网地址-https-cn-vuejs-org" class="headerlink" title="官网地址 https://cn.vuejs.org/"></a>官网地址 <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></h3><h3 id="软件配置-具体配置最好看视频配置或者后面重新写博客"><a href="#软件配置-具体配置最好看视频配置或者后面重新写博客" class="headerlink" title="软件配置(具体配置最好看视频配置或者后面重新写博客)"></a>软件配置(具体配置最好看视频配置或者后面重新写博客)</h3><h4 id="VScode（管理员版本）"><a href="#VScode（管理员版本）" class="headerlink" title="VScode（管理员版本）"></a>VScode（管理员版本）</h4><p><img src="https://img-blog.csdnimg.cn/20200627204854911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h4><p><img src="https://img-blog.csdnimg.cn/20200627204902994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="微信开发者工具-（稳定版）"><a href="#微信开发者工具-（稳定版）" class="headerlink" title="微信开发者工具 （稳定版）"></a>微信开发者工具 （稳定版）</h4><p><img src="https://img-blog.csdnimg.cn/202006272049100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="创建工程（视频教程）"><a href="#创建工程（视频教程）" class="headerlink" title="创建工程（视频教程）"></a>创建工程（视频教程）</h4><h5 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h5><p><img src="https://img-blog.csdnimg.cn/20200627205211152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="简单代码实现一些静态显示"><a href="#简单代码实现一些静态显示" class="headerlink" title="简单代码实现一些静态显示"></a>简单代码实现一些静态显示</h4><h5 id="主要页面显示效果"><a href="#主要页面显示效果" class="headerlink" title="主要页面显示效果"></a>主要页面显示效果</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"wrapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header-wrapper"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header-title"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>空气质量<span class="token operator">-</span>良好<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>安庆市<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header-text"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token number">55</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>阴天<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"weather-advice"</span><span class="token operator">></span>空气质量良好，健康人群外出无需刻意防护<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body-wrapper"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-wrapper"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-logo"</span> src<span class="token operator">=</span><span class="token string">"/static/images/wendu.png"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-text"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-title"</span><span class="token operator">></span>温度<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-value"</span><span class="token operator">></span><span class="token number">30</span>℃<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-logo"</span> src<span class="token operator">=</span><span class="token string">"/static/images/shidu.png"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-text"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-title"</span><span class="token operator">></span>湿度<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-value"</span><span class="token operator">></span><span class="token number">86</span><span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body-wrapper"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-wrapper"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-logo"</span> src<span class="token operator">=</span><span class="token string">"/static/images/guangzhaodu.png"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-text"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-title"</span><span class="token operator">></span>光照度<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-value"</span><span class="token operator">></span>1234Lx<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-logo"</span> src<span class="token operator">=</span><span class="token string">"/static/images/led.png"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-text"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-title"</span><span class="token operator">></span>客厅灯<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-value"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token keyword">switch</span> color<span class="token operator">=</span><span class="token string">"#3d7ef9"</span> <span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body-wrapper"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-wrapper"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-logo"</span> src<span class="token operator">=</span><span class="token string">"/static/images/beep.png"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-text"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-title"</span><span class="token operator">></span>报警器<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-value"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token keyword">switch</span> color<span class="token operator">=</span><span class="token string">"#FF0033"</span> <span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h5 id="主要格式框架"><a href="#主要格式框架" class="headerlink" title="主要格式框架"></a>主要格式框架</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> scoped<span class="token operator">></span><span class="token punctuation">.</span>wrapper <span class="token punctuation">{</span>  padding<span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token punctuation">.</span>header<span class="token operator">-</span>wrapper <span class="token punctuation">{</span>    background<span class="token operator">-</span>color<span class="token punctuation">:</span> #3d7ef9<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> #d6d6d6 0px 0px 5px<span class="token punctuation">;</span>    padding<span class="token punctuation">:</span> 15px 30px<span class="token punctuation">;</span>    <span class="token punctuation">.</span>header<span class="token operator">-</span>title <span class="token punctuation">{</span>      display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      justify<span class="token operator">-</span>content<span class="token punctuation">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>header<span class="token operator">-</span>text <span class="token punctuation">{</span>      font<span class="token operator">-</span>size<span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>      font<span class="token operator">-</span>weight<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span>      display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      justify<span class="token operator">-</span>content<span class="token punctuation">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>weather<span class="token operator">-</span>advice <span class="token punctuation">{</span>      margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      font<span class="token operator">-</span>size<span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>data<span class="token operator">-</span>wrapper <span class="token punctuation">{</span>    margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token punctuation">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>    <span class="token punctuation">.</span>data <span class="token punctuation">{</span>      background<span class="token operator">-</span>color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      width<span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>      height<span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>      border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      justify<span class="token operator">-</span>content<span class="token punctuation">:</span> space<span class="token operator">-</span>around<span class="token punctuation">;</span>      padding<span class="token punctuation">:</span> <span class="token number">0</span> 8px<span class="token punctuation">;</span>      box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> #d6d6d6 0px 0px 5px<span class="token punctuation">;</span>      <span class="token punctuation">.</span>data<span class="token operator">-</span>logo <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>        margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">.</span>data<span class="token operator">-</span>text <span class="token punctuation">{</span>        margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        color<span class="token punctuation">:</span> #7f7f7f<span class="token punctuation">;</span>        <span class="token punctuation">.</span>data<span class="token operator">-</span>title <span class="token punctuation">{</span>          text<span class="token operator">-</span>align<span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>data<span class="token operator">-</span>value <span class="token punctuation">{</span>          font<span class="token operator">-</span>size<span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">*</span> @Author<span class="token punctuation">:</span> dele <span class="token operator">*</span> @Date<span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">227</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">48</span> <span class="token operator">*</span> @LastEditTime<span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">48</span> <span class="token operator">*</span> @LastEditors<span class="token punctuation">:</span> Please <span class="token keyword">set</span> LastEditors <span class="token operator">*</span> @Description<span class="token punctuation">:</span> In User Settings Edit <span class="token operator">*</span> @FilePath<span class="token punctuation">:</span> \APP\src\pages\index\index<span class="token punctuation">.</span>vue<span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"wrapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header-wrapper"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header-title"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>空气质量<span class="token operator">-</span>良好<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>安庆市<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header-text"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token number">55</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>阴天<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"weather-advice"</span><span class="token operator">></span>空气质量良好，健康人群外出无需刻意防护<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body-wrapper"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-wrapper"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-logo"</span> src<span class="token operator">=</span><span class="token string">"/static/images/wendu.png"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-text"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-title"</span><span class="token operator">></span>温度<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-value"</span><span class="token operator">></span><span class="token number">30</span>℃<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-logo"</span> src<span class="token operator">=</span><span class="token string">"/static/images/shidu.png"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-text"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-title"</span><span class="token operator">></span>湿度<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-value"</span><span class="token operator">></span><span class="token number">86</span><span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body-wrapper"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-wrapper"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-logo"</span> src<span class="token operator">=</span><span class="token string">"/static/images/guangzhaodu.png"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-text"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-title"</span><span class="token operator">></span>光照度<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-value"</span><span class="token operator">></span>1234Lx<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-logo"</span> src<span class="token operator">=</span><span class="token string">"/static/images/led.png"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-text"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-title"</span><span class="token operator">></span>客厅灯<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-value"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token keyword">switch</span> color<span class="token operator">=</span><span class="token string">"#3d7ef9"</span> <span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body-wrapper"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-wrapper"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-logo"</span> src<span class="token operator">=</span><span class="token string">"/static/images/beep.png"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-text"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-title"</span><span class="token operator">></span>报警器<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"data-value"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token keyword">switch</span> color<span class="token operator">=</span><span class="token string">"#FF0033"</span> <span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// let app = getApp()</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> scoped<span class="token operator">></span><span class="token punctuation">.</span>wrapper <span class="token punctuation">{</span>  padding<span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token punctuation">.</span>header<span class="token operator">-</span>wrapper <span class="token punctuation">{</span>    background<span class="token operator">-</span>color<span class="token punctuation">:</span> #3d7ef9<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> #d6d6d6 0px 0px 5px<span class="token punctuation">;</span>    padding<span class="token punctuation">:</span> 15px 30px<span class="token punctuation">;</span>    <span class="token punctuation">.</span>header<span class="token operator">-</span>title <span class="token punctuation">{</span>      display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      justify<span class="token operator">-</span>content<span class="token punctuation">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>header<span class="token operator">-</span>text <span class="token punctuation">{</span>      font<span class="token operator">-</span>size<span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>      font<span class="token operator">-</span>weight<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span>      display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      justify<span class="token operator">-</span>content<span class="token punctuation">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>weather<span class="token operator">-</span>advice <span class="token punctuation">{</span>      margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      font<span class="token operator">-</span>size<span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>data<span class="token operator">-</span>wrapper <span class="token punctuation">{</span>    margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token punctuation">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>    <span class="token punctuation">.</span>data <span class="token punctuation">{</span>      background<span class="token operator">-</span>color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      width<span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>      height<span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>      border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      justify<span class="token operator">-</span>content<span class="token punctuation">:</span> space<span class="token operator">-</span>around<span class="token punctuation">;</span>      padding<span class="token punctuation">:</span> <span class="token number">0</span> 8px<span class="token punctuation">;</span>      box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> #d6d6d6 0px 0px 5px<span class="token punctuation">;</span>      <span class="token punctuation">.</span>data<span class="token operator">-</span>logo <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>        margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">.</span>data<span class="token operator">-</span>text <span class="token punctuation">{</span>        margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        color<span class="token punctuation">:</span> #7f7f7f<span class="token punctuation">;</span>        <span class="token punctuation">.</span>data<span class="token operator">-</span>title <span class="token punctuation">{</span>          text<span class="token operator">-</span>align<span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span>data<span class="token operator">-</span>value <span class="token punctuation">{</span>          font<span class="token operator">-</span>size<span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://img-blog.csdnimg.cn/20200627205534723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><h5 id="萝卜师兄-挽救小白STM32-8266-小程序智能家居毕设实战教程"><a href="#萝卜师兄-挽救小白STM32-8266-小程序智能家居毕设实战教程" class="headerlink" title="萝卜师兄 挽救小白STM32+8266+小程序智能家居毕设实战教程"></a>萝卜师兄 挽救小白STM32+8266+小程序智能家居毕设实战教程</h5><p>（非常的详细，从STM32简单入门到微信小程序开发全部手把手教学，非常感谢大佬的教程，可以完成一个简单的物联网项目）<br><a href="https://www.bilibili.com/video/BV1ae411W7yD" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1ae411W7yD</a><br><img src="https://img-blog.csdnimg.cn/2020062721001019.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200627205913540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="博客https-www-delehub-top"><a href="#博客https-www-delehub-top" class="headerlink" title="博客https://www.delehub.top/"></a>博客<a href="https://www.delehub.top/" target="_blank" rel="noopener">https://www.delehub.top/</a></h5>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
          <category> ESP8266 </category>
          
          <category> 微信小程序 </category>
          
          <category> Vue js </category>
          
          <category> 物联网 </category>
          
          <category> 嵌入式 </category>
          
          <category> Vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP8266 </tag>
            
            <tag> STM32 </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> Vue js </tag>
            
            <tag> 智能家居 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析 乘风破浪的姐姐</title>
      <link href="/2020/06/21/python-shu-ju-fen-xi-cheng-feng-po-lang-de-jie-jie/"/>
      <url>/2020/06/21/python-shu-ju-fen-xi-cheng-feng-po-lang-de-jie-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="乘风破浪的姐姐-数据分析"><a href="#乘风破浪的姐姐-数据分析" class="headerlink" title="乘风破浪的姐姐 数据分析"></a>乘风破浪的姐姐 数据分析</h1><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/6/21 22:08</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : demo.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"E:\\deep learning\\Spider\\analysisdata\\final_data.csv"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">"display.max_colwidth"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> df<span class="token punctuation">.</span>names<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">import</span> requestsnames <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'names'</span><span class="token punctuation">]</span>urls <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'picUrl'</span><span class="token punctuation">]</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>url <span class="token keyword">in</span> zip<span class="token punctuation">(</span>names<span class="token punctuation">,</span> urls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'candidate/{}.jpg'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 年龄分布</span>df<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'（'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'）'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'岁'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> df<span class="token punctuation">.</span>age<span class="token punctuation">.</span>values<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># from  pyecharts import Pie, Bar, Line</span><span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>charts <span class="token keyword">import</span> Pie<span class="token punctuation">,</span> Bar<span class="token punctuation">,</span> Line<span class="token punctuation">,</span> Funnel<span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>options<span class="token punctuation">.</span>global_options <span class="token keyword">import</span> ThemeType<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> options <span class="token keyword">as</span> opts<span class="token comment" spellcheck="true"># from pyecharts.charts import Pie, Bar, line</span>attr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>age_cut <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>df<span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token punctuation">[</span>u<span class="token string">"26-33"</span><span class="token punctuation">,</span>u<span class="token string">"33-40"</span><span class="token punctuation">,</span>u<span class="token string">"40-47"</span><span class="token punctuation">,</span>u<span class="token string">"47-54"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对年龄进行分段划分</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> age_cut<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    attr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    count<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>pie <span class="token operator">=</span> <span class="token punctuation">(</span>Pie<span class="token punctuation">(</span>init_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>InitOpts<span class="token punctuation">(</span>        theme<span class="token operator">=</span>ThemeType<span class="token punctuation">.</span>CHALK        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token keyword">for</span> z <span class="token keyword">in</span> zip<span class="token punctuation">(</span>attr<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            radius<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"30%"</span><span class="token punctuation">,</span> <span class="token string">"75%"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rosetype<span class="token operator">=</span><span class="token string">"radius"</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"《乘风破浪的姐姐》"</span><span class="token punctuation">,</span> subtitle<span class="token operator">=</span><span class="token string">"年龄分布"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span>set_series_opts<span class="token punctuation">(</span>label_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>formatter<span class="token operator">=</span><span class="token string">"{b}: {d}%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">)</span>pie<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">"age.html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  职业分布</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> CounterjobsClass <span class="token operator">=</span> Counter<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>None<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>df<span class="token punctuation">.</span>jobs<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>funnel <span class="token operator">=</span> <span class="token punctuation">(</span>Funnel<span class="token punctuation">(</span>init_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>InitOpts<span class="token punctuation">(</span>        theme<span class="token operator">=</span>ThemeType<span class="token punctuation">.</span>CHALK        <span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"《乘风破浪的姐姐》"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token keyword">for</span> z <span class="token keyword">in</span> zip<span class="token punctuation">(</span>jobsClass<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jobsClass<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               sort_<span class="token operator">=</span><span class="token string">'ascending'</span><span class="token punctuation">,</span>               label_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>position<span class="token operator">=</span><span class="token string">"inside"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"《乘风破浪的姐姐》"</span><span class="token punctuation">,</span> subtitle<span class="token operator">=</span><span class="token string">"职业分布"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>         <span class="token punctuation">)</span>funnel<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'job.html'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 家乡分布</span><span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>charts <span class="token keyword">import</span> Map<span class="token keyword">import</span> randomprovinces <span class="token operator">=</span> Counter<span class="token punctuation">(</span>df<span class="token punctuation">.</span>hometown<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>provinces<span class="token punctuation">)</span>area <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> provinces<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>maps <span class="token operator">=</span> <span class="token punctuation">(</span>        Map<span class="token punctuation">(</span>init_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>InitOpts<span class="token punctuation">(</span>        theme<span class="token operator">=</span>ThemeType<span class="token punctuation">.</span>ROMANTIC        <span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"出生地"</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span> <span class="token string">"china"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>            title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"Map-基本示例"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            legend_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LegendOpts<span class="token punctuation">(</span>is_show<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            visualmap_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>VisualMapOpts<span class="token punctuation">(</span>max_<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> is_piecewise<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span>maps<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">"中国地图.html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 成绩比较</span><span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> options <span class="token keyword">as</span> opts<span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>charts <span class="token keyword">import</span> Bar<span class="token punctuation">,</span> Linetop <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span>names <span class="token operator">=</span> top<span class="token punctuation">.</span>names<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>ages <span class="token operator">=</span> top<span class="token punctuation">.</span>age<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>scores <span class="token operator">=</span> top<span class="token punctuation">.</span>primaryScore<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>bar <span class="token operator">=</span> <span class="token punctuation">(</span>    Bar<span class="token punctuation">(</span>init_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>InitOpts<span class="token punctuation">(</span>        theme<span class="token operator">=</span>ThemeType<span class="token punctuation">.</span>ROMANTIC        <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span>names<span class="token punctuation">)</span>    <span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token punctuation">,</span> ages<span class="token punctuation">)</span>    <span class="token punctuation">.</span>extend_axis<span class="token punctuation">(</span>        yaxis<span class="token operator">=</span>opts<span class="token punctuation">.</span>AxisOpts<span class="token punctuation">(</span>            axislabel_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>formatter<span class="token operator">=</span><span class="token string">"{value}分"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval<span class="token operator">=</span><span class="token number">20</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span>set_series_opts<span class="token punctuation">(</span>label_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>is_show<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>        title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"《乘风破浪的姐姐》"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        yaxis_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>AxisOpts<span class="token punctuation">(</span>axislabel_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>formatter<span class="token operator">=</span><span class="token string">"{value}岁"</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> min_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max_<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>line <span class="token operator">=</span> Line<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_xaxis<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">.</span>add_yaxis<span class="token punctuation">(</span><span class="token string">"初舞台评分"</span><span class="token punctuation">,</span> scores<span class="token punctuation">,</span> yaxis_index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>bar<span class="token punctuation">.</span>overlap<span class="token punctuation">(</span>line<span class="token punctuation">)</span>bar<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">"年龄-得分.html"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>ages<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span></code></pre><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><h2 id="年龄分布"><a href="#年龄分布" class="headerlink" title="年龄分布"></a>年龄分布</h2><p><img src="http://graph.baidu.com/resource/1220a680523206e1df40901596794170.jpg" alt="avatar"></p><h2 id="成绩分布"><a href="#成绩分布" class="headerlink" title="成绩分布"></a>成绩分布</h2><p><img src="http://graph.baidu.com/resource/122991e7c7dac11816b4e01596794167.jpg" alt="avatar"></p><h2 id="职业分布"><a href="#职业分布" class="headerlink" title="职业分布"></a>职业分布</h2><p><img src="http://graph.baidu.com/resource/122d1310e41b383f8d58001596794164.jpg" alt="avatar"></p><h2 id="城市分布"><a href="#城市分布" class="headerlink" title="城市分布"></a>城市分布</h2><p><img src="http://graph.baidu.com/resource/1226ef532a127c82da31201596794180.jpg" alt="avatar"></p><h2 id="参考资料-微信公众号-菜鸟学python"><a href="#参考资料-微信公众号-菜鸟学python" class="headerlink" title="参考资料 微信公众号 菜鸟学python"></a>参考资料 微信公众号 菜鸟学python</h2><h3 id="博客https-www-delehub-top"><a href="#博客https-www-delehub-top" class="headerlink" title="博客https://www.delehub.top/"></a>博客<a href="https://www.delehub.top/" target="_blank" rel="noopener">https://www.delehub.top/</a></h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
          <category> 数据可视化 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 数据可视化 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32CubeMX学习记录--安装配置与使用</title>
      <link href="/2020/06/19/stm32cubemx-xue-xi-ji-lu-an-zhuang-pei-zhi-yu-shi-yong/"/>
      <url>/2020/06/19/stm32cubemx-xue-xi-ji-lu-an-zhuang-pei-zhi-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<hr><p>categories:  #分类<br>    - STM32 ARM单片机<br>    - 嵌入式<br>    - STM32CubeMX</p><p>tags:   #标签<br>    - STM32 ARM单片机<br>    - 嵌入式<br>    - STM32CubeMX<br>    - ESP8266</p><hr><h1 id="STM32CubeMX使用"><a href="#STM32CubeMX使用" class="headerlink" title="STM32CubeMX使用"></a>STM32CubeMX使用</h1><a id="more"></a><article class="baidu_pl">                 <div id="article_content" class="article_content clearfix">            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-211130ba7a.css">                            <div id="content_views" class="markdown_views prism-atom-one-light">                    <!-- flowchart 箭头图标 勿删 -->                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>                    </svg>                                            <article class="baidu_pl">                 <div id="article_content" class="article_content clearfix"></div></div></article><p>&nbsp;1、STM32CubeMX 是 ST 意法半导体近几年来大力推荐的STM32 芯片图形化配置工具，目的就是为了方便开发者， 允许用户使用图形化向导生成C 初始化代码，可以大大减轻开发工作，时间和费用，提高开发效率。STM32CubeMX几乎覆盖了STM32 全系列芯片。&nbsp;</p><p>&nbsp;</p><p>在CubeMX上，通过傻瓜化的操作便能实现相关配置，最终能够生成C语言代码，支持多种工具链，比如MDK、IAR For ARM、TrueStudio等&nbsp; 省去了我们配置各种外设的时间，大大的节省了时间</p><p>&nbsp;</p><p><img alt="" class="has" height="299" src="https://img-blog.csdn.net/20161031103050516" width="471"></p><p>安装CubeMx一共需要三个</p><ul><li>&nbsp;<strong>JRE </strong>（Java Runtime Environment）&nbsp;&nbsp;Java运行环境&nbsp;运行<em>JAVA</em>程序所必须的环境的集合</li>    <li>&nbsp;<strong>STM32CubeMX</strong></li>    <li><strong>HAL库&nbsp; &nbsp;</strong>STM32 HAL固件库&nbsp; &nbsp;ST官方推出的另一套库</li></ul><h3><a name="t1"></a><a name="t1"></a><a></a><a></a><span><strong>1安装JRE</strong></span></h3><p>由于 STM32CubeMX 软件是基于 JAVA 环境运行的，所以需要安装 JRE （Java Runtime Environment）才能使用，&nbsp;</p><p>官网：&nbsp;&nbsp;<a href="https://www.java.com/en/download/manual.jsp" target="_blank" rel="nofollow noopener">https://www.java.com/en/download/manual.jsp</a></p><p>百度云：<a href="https://pan.baidu.com/s/1WD5E4enEZ_mw0-NGBl_bUw" target="_blank" rel="nofollow noopener">https://pan.baidu.com/s/1WD5E4enEZ_mw0-NGBl_bUw</a> 提取码: e8gs&nbsp; &nbsp; (定时更新最新版本)</p><p>&nbsp;</p><p>1点击安装</p><p><img alt="" class="has" height="297" src="https://img-blog.csdnimg.cn/20190808215245694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="546"></p><p>2 修改路径 点下一步</p><p><img alt="" class="has" height="297" src="https://img-blog.csdnimg.cn/2019080821543193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="547"></p><p>3 等待安装完成，关闭界面</p><p><img alt="" class="has" height="296" src="https://img-blog.csdnimg.cn/20190808215501606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="546"></p><p>&nbsp;</p><h3><a name="t2"></a><a name="t2"></a><a></a><a></a><span>2安装<strong>STM32CubeMX</strong></span></h3><p>&nbsp;官网：<a href="http://www.st.com/stm32cubemx" target="_blank" rel="nofollow noopener">www.st.com/stm32cubemx</a></p><p>百度云：<a href="https://pan.baidu.com/s/1dm83PbIsq7Vk9bAyFNinag" target="_blank" rel="nofollow noopener">https://pan.baidu.com/s/1dm83PbIsq7Vk9bAyFNinag</a> 提取码: wjmd&nbsp;</p><p>&nbsp;</p><p>官网下载：</p><p><img alt="" class="has" height="302" src="https://img-blog.csdnimg.cn/20190808221316432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="537"></p><p>在官网下载需要注册下ST官网账号,目前最新为5.3.0版本，不想在官网下可以在百度云盘下载，</p><p>&nbsp;</p><p>1打开安装包&nbsp;</p><p><img alt="" class="has" height="400" src="https://img-blog.csdnimg.cn/20190808215815695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="532"></p><p>2同意协议，下一步</p><p><img alt="" class="has" height="399" src="https://img-blog.csdnimg.cn/20190808220044650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="531"></p><p>3 勾选第一个即可，第二个选项是是否同意ST公司收集你的个人使用信息等。</p><p><img alt="" class="has" height="399" src="https://img-blog.csdnimg.cn/20190808220146434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="531"></p><p>4 点YES&nbsp; 这句话是安装本软件可能会与文件夹之前文件冲突，导致文件夹之前文件丢失 是否继续&nbsp;</p><p>点继续即可</p><p><img alt="" class="has" height="331" src="https://img-blog.csdnimg.cn/20190808220302910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="558"></p><p>5 直接点NEXT，其他不用设置 之后开始安装</p><p><img alt="" class="has" height="426" src="https://img-blog.csdnimg.cn/20190808220742381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="567"></p><p>6 安装完成，点Done退出</p><p><img alt="" class="has" height="425" src="https://img-blog.csdnimg.cn/20190808220846664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="566"></p><p>&nbsp;</p><h3><a name="t3"></a><a name="t3"></a><a></a><a></a><span><strong>3安装HAL库</strong></span></h3><p>什么是HAL固件库？</p><p>STM32 HAL固件库是Hardware Abstraction Layer的缩写，中文名称是：硬件抽象层。HAL库是ST公司为STM32的MCU最新推出的抽象层嵌入式软件，为更方便的实现跨STM32产品的最大可移植性。HAL库的推出，可以说ST也慢慢的抛弃了原来的标准固件库，这也使得很多老用户不满。但是HAL库推出的同时，也加入了很多第三方的中间件，有RTOS，USB，TCP / IP和图形等等。</p><p>&nbsp;</p><p>和标准库对比起来，STM32的HAL库更加的抽象，ST最终的目的是要实现在STM32系列MCU之间无缝移植，甚至在其他MCU也能实现快速移植。</p><p>并且从16年开始，ST公司就逐渐停止了对标准固件库的更新，转而倾向于HAL固件库和 Low-layer底层库的更新，停止标准库更新，也就表示了以后使用STM32CubeMX配置HAL/LL库是主流配置环境；</p><p>&nbsp;</p><p>HAL库，有<strong>在线安装、离线安装</strong>两种方式。</p><p>&nbsp;</p><h3 id="3-3-1-在线安装"><a name="t4"></a><a name="t4"></a><a></a><a></a>在线安装</h3><p>打开安装好的 STM32CubeMX 软件&nbsp; 点上面的Help -&gt; Manage embedded software packages&nbsp;</p><p><img alt="" class="has" height="402" src="https://img-blog.csdnimg.cn/20190808222604905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="714"></p><p>会跳出来一个选择型号界面&nbsp;&nbsp; 勾选上你要安装的HAL库， 点击“Install Now” 直到安装成功。 如下图：</p><p><img alt="" class="has" height="402" src="https://img-blog.csdnimg.cn/20190808223241593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="714"></p><h3><a name="t5"></a><a name="t5"></a><a></a><a></a>离线安装</h3><p>离线安装需要下载安装包，这里提供百度云和ST官方下载方式&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <strong>&nbsp;PS：建议在线安装&nbsp; 速度快，又稳定</strong></p><p>官网：<a href="http://www.st.com/stm32cubemx" target="_blank" rel="nofollow noopener">www.st.com/stm32cubemx</a></p><p>软件下载旁边一栏就是HAL库下载&nbsp; 下载对应芯片的安装包</p><p><img alt="" class="has" height="258" src="https://img-blog.csdnimg.cn/20190808221822509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="524"></p><p>&nbsp;</p><p><img alt="" class="has" height="424" src="https://img-blog.csdnimg.cn/20190808221843712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="542"></p><p>&nbsp;</p><p>百度云：<a href="https://pan.baidu.com/s/1dm83PbIsq7Vk9bAyFNinag" target="_blank" rel="nofollow noopener">https://pan.baidu.com/s/1dm83PbIsq7Vk9bAyFNinag</a> 提取码: wjmd&nbsp; &nbsp;&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>1直接导入安装包&nbsp; &nbsp;Help -&gt; Manage embedded software packages -&gt;From Local&nbsp; 选择离线包即可</p><p><img alt="" class="has" height="372" src="https://img-blog.csdnimg.cn/20190809085042881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="510"></p><p>2直接解压</p><p><strong>Help-&gt;Updater Settings...&nbsp; &nbsp; &nbsp;可以选择HAL库安装包路径 </strong>，默认在C盘 可以自行修改</p><p><img alt="" class="has" height="402" src="https://img-blog.csdnimg.cn/20190809084531361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="714"></p><p>解压到相对应路径即可</p><p><img alt="" class="has" height="361" src="https://img-blog.csdnimg.cn/2019080908584173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" width="768"></p><p>&nbsp;</p><h3><a name="t6"></a><a name="t6"></a><a id="_155"></a>参考资料</h3><ol><li>转载Z小旋博客<a href="https://blog.csdn.net/as480133937/article/details/98885316" target="_blank" rel="noopener">https://blog.csdn.net/as480133937/article/details/98885316</a></li><li>STM32CubeMX官网<a href="https://www.st.com/zh/development-tools/stm32cubemx.html" target="_blank" rel="nofollow noopener">https://www.st.com/zh/development-tools/stm32cubemx.html</a></li><li>STM32Cube中文社区<a href="http://www.stm32cube.com/" target="_blank" rel="nofollow noopener">http://www.stm32cube.com/</a></li><li>微学课堂<a href="http://www.waveshare.net/study/portal.php" target="_blank" rel="nofollow noopener">http://www.waveshare.net/study/portal.php</a></li><li>Z小旋博客STM32<a href="https://blog.csdn.net/as480133937/category_9188655.html" target="_blank" rel="noopener">https://blog.csdn.net/as480133937/category_9188655.html</a></li><li>大佬Mculover666的STM32CubeMX系列教程 <a href="http://www.mculover666.cn/posts/578764034/" target="_blank" rel="nofollow noopener">http://www.mculover666.cn/posts/578764034/</a></li><li>个人博客<a href="https://www.delehub.top/" target="_blank" rel="nofollow noopener">https://www.delehub.top/</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 爬虫入门经典爬取豆瓣TOP250</title>
      <link href="/2020/06/17/python-pa-chong-ru-men-jing-dian-pa-qu-dou-ban-top250/"/>
      <url>/2020/06/17/python-pa-chong-ru-men-jing-dian-pa-qu-dou-ban-top250/</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫入门-经典案例-爬取豆瓣TOP250"><a href="#Python爬虫入门-经典案例-爬取豆瓣TOP250" class="headerlink" title="Python爬虫入门 经典案例 爬取豆瓣TOP250"></a>Python爬虫入门 经典案例 爬取豆瓣TOP250</h1><a id="more"></a><h2 id="爬虫基本思想"><a href="#爬虫基本思想" class="headerlink" title="爬虫基本思想"></a>爬虫基本思想</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#### 1、分析目标网页，确定爬取的url路径，headers参数</span><span class="token comment" spellcheck="true">#### 2、发送请求--requests 模拟浏览器发送请求，获取响应数据</span><span class="token comment" spellcheck="true">#### 3、解析数据 BeautifulSoup解析</span><span class="token comment" spellcheck="true">#### 4、保存数据--保存在目标文件夹中</span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbookwb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>dest_filename <span class="token operator">=</span> <span class="token string">'电影.xlsx'</span>ws1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>activews1<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"电影top250"</span>DOWNLOAD_URL <span class="token operator">=</span> <span class="token string">'http://movie.douban.com/top250/'</span><span class="token keyword">def</span> <span class="token function">download_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取url地址页面内容"""</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span>            <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36'</span>    <span class="token punctuation">}</span>    data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">get_li</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">:</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>    ol <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'grid_view'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 名字</span>    star_con <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 评价人数</span>    score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 评分</span>    info_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 短评</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ol<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        detail <span class="token operator">=</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'hd'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        movie_name <span class="token operator">=</span> detail<span class="token punctuation">.</span>find<span class="token punctuation">(</span>            <span class="token string">'span'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'title'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 电影名字</span>        level_star <span class="token operator">=</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span>            <span class="token string">'span'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'rating_num'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 评分</span>        star <span class="token operator">=</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'star'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        star_num <span class="token operator">=</span> star<span class="token punctuation">.</span>find<span class="token punctuation">(</span>text<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'评价'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 评价</span>        info <span class="token operator">=</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'inq'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 短评</span>        <span class="token keyword">if</span> info<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断是否有短评</span>            info_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>info<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            info_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'无'</span><span class="token punctuation">)</span>        score<span class="token punctuation">.</span>append<span class="token punctuation">(</span>level_star<span class="token punctuation">)</span>        name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie_name<span class="token punctuation">)</span>        star_con<span class="token punctuation">.</span>append<span class="token punctuation">(</span>star_num<span class="token punctuation">)</span>    page <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'next'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取下一页</span>    <span class="token keyword">if</span> page<span class="token punctuation">:</span>        <span class="token keyword">return</span> name<span class="token punctuation">,</span> star_con<span class="token punctuation">,</span> score<span class="token punctuation">,</span> info_list<span class="token punctuation">,</span> DOWNLOAD_URL <span class="token operator">+</span> page<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> name<span class="token punctuation">,</span> star_con<span class="token punctuation">,</span> score<span class="token punctuation">,</span> info_list<span class="token punctuation">,</span> None<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> DOWNLOAD_URL    name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    star_con <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    info <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> url<span class="token punctuation">:</span>        doc <span class="token operator">=</span> download_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        movie<span class="token punctuation">,</span> star<span class="token punctuation">,</span> level_num<span class="token punctuation">,</span> info_list<span class="token punctuation">,</span> url <span class="token operator">=</span> get_li<span class="token punctuation">(</span>doc<span class="token punctuation">)</span>        name <span class="token operator">=</span> name <span class="token operator">+</span> movie        star_con <span class="token operator">=</span> star_con <span class="token operator">+</span> star        score <span class="token operator">=</span> score <span class="token operator">+</span> level_num        info <span class="token operator">=</span> info <span class="token operator">+</span> info_list    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> m<span class="token punctuation">,</span> o<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token keyword">in</span> zip<span class="token punctuation">(</span>name<span class="token punctuation">,</span> star_con<span class="token punctuation">,</span> score<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        col_A <span class="token operator">=</span> <span class="token string">'A%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(col_A)</span>        col_B <span class="token operator">=</span> <span class="token string">'B%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        col_C <span class="token operator">=</span> <span class="token string">'C%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        col_D <span class="token operator">=</span> <span class="token string">'D%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        ws1<span class="token punctuation">[</span>col_A<span class="token punctuation">]</span> <span class="token operator">=</span> i        ws1<span class="token punctuation">[</span>col_B<span class="token punctuation">]</span> <span class="token operator">=</span> m        ws1<span class="token punctuation">[</span>col_C<span class="token punctuation">]</span> <span class="token operator">=</span> o        ws1<span class="token punctuation">[</span>col_D<span class="token punctuation">]</span> <span class="token operator">=</span> p    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span>dest_filename<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>史上最全的立创元器件封装库导入AD详细教程(一直白嫖一直爽)</title>
      <link href="/2020/06/06/shi-shang-zui-quan-de-li-chuang-yuan-qi-jian-feng-zhuang-ku-dao-ru-ad-xiang-xi-jiao-cheng-yi-zhi-bai-piao-yi-zhi-shuang/"/>
      <url>/2020/06/06/shi-shang-zui-quan-de-li-chuang-yuan-qi-jian-feng-zhuang-ku-dao-ru-ad-xiang-xi-jiao-cheng-yi-zhi-bai-piao-yi-zhi-shuang/</url>
      
        <content type="html"><![CDATA[<h1 id="史上最全的立创元器件封装库导入AD详细教程"><a href="#史上最全的立创元器件封装库导入AD详细教程" class="headerlink" title="史上最全的立创元器件封装库导入AD详细教程"></a>史上最全的立创元器件封装库导入AD详细教程</h1><a id="more"></a><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><h2 id="立创EDA-立创商城"><a href="#立创EDA-立创商城" class="headerlink" title="立创EDA 立创商城"></a>立创EDA 立创商城</h2><h4 id="打开立创商城网站https-www-szlcsc-com"><a href="#打开立创商城网站https-www-szlcsc-com" class="headerlink" title="打开立创商城网站https://www.szlcsc.com/"></a>打开立创商城网站<a href="https://www.szlcsc.com/" target="_blank" rel="noopener">https://www.szlcsc.com/</a></h4><p><img src="https://img-blog.csdnimg.cn/20200606101121322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="搜索元器件"><a href="#搜索元器件" class="headerlink" title="搜索元器件"></a>搜索元器件</h3><h4 id="例如搜索STM32F103C8T6芯片"><a href="#例如搜索STM32F103C8T6芯片" class="headerlink" title="例如搜索STM32F103C8T6芯片"></a>例如搜索STM32F103C8T6芯片</h4><p><img src="https://img-blog.csdnimg.cn/20200606101512963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="查看搜索结果，寻找下载文件"><a href="#查看搜索结果，寻找下载文件" class="headerlink" title="查看搜索结果，寻找下载文件"></a>查看搜索结果，寻找下载文件</h4><p><img src="https://img-blog.csdnimg.cn/2020060610164658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200606101654421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="点击下载文件链接"><a href="#点击下载文件链接" class="headerlink" title="点击下载文件链接"></a>点击下载文件链接</h3><h4 id="出现如下图片情况，点击立即使用"><a href="#出现如下图片情况，点击立即使用" class="headerlink" title="出现如下图片情况，点击立即使用"></a>出现如下图片情况，点击立即使用</h4><p><img src="https://img-blog.csdnimg.cn/2020060610171767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="出现了工程文件，记得注册账号，保存到自己的工程"><a href="#出现了工程文件，记得注册账号，保存到自己的工程" class="headerlink" title="出现了工程文件，记得注册账号，保存到自己的工程"></a>出现了工程文件，记得注册账号，保存到自己的工程</h4><p><img src="https://img-blog.csdnimg.cn/20200606101813776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020060610203385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="如下图操作分别保存SCH，PCB文件到电脑本地文件中"><a href="#如下图操作分别保存SCH，PCB文件到电脑本地文件中" class="headerlink" title="如下图操作分别保存SCH，PCB文件到电脑本地文件中"></a>如下图操作分别保存SCH，PCB文件到电脑本地文件中</h4><p><img src="https://img-blog.csdnimg.cn/20200606101813680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="点击-否-导出Altium-然后同意下载到本地电脑"><a href="#点击-否-导出Altium-然后同意下载到本地电脑" class="headerlink" title="点击 否 导出Altium,然后同意下载到本地电脑"></a>点击 否 导出Altium,然后同意下载到本地电脑</h4><p><img src="https://img-blog.csdnimg.cn/20200606102043443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200606102250451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="下载到本地，重命名（最好）"><a href="#下载到本地，重命名（最好）" class="headerlink" title="下载到本地，重命名（最好）"></a>下载到本地，重命名（最好）</h4><p><img src="https://img-blog.csdnimg.cn/20200606102402629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="打开AD软件，打开下载好的文件，生成库文件"><a href="#打开AD软件，打开下载好的文件，生成库文件" class="headerlink" title="打开AD软件，打开下载好的文件，生成库文件"></a>打开AD软件，打开下载好的文件，生成库文件</h4><p><img src="https://img-blog.csdnimg.cn/2020060610251721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200606102535375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200606102946934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200606103145788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="生成SchLib，PcbLib文件"><a href="#生成SchLib，PcbLib文件" class="headerlink" title="生成SchLib，PcbLib文件"></a>生成SchLib，PcbLib文件</h4><p><img src="https://img-blog.csdnimg.cn/20200606102651113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020060610285980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200606103157686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="打开SchLIb文件添加PCB文件的封装库（我们不用这个方法）"><a href="#打开SchLIb文件添加PCB文件的封装库（我们不用这个方法）" class="headerlink" title="打开SchLIb文件添加PCB文件的封装库（我们不用这个方法）"></a>打开SchLIb文件添加PCB文件的封装库（我们不用这个方法）</h4><p><img src="https://img-blog.csdnimg.cn/20200606103317833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200606103328668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="新建一个Integrated-Library文件，填入名称路径"><a href="#新建一个Integrated-Library文件，填入名称路径" class="headerlink" title="新建一个Integrated_Library文件，填入名称路径"></a>新建一个Integrated_Library文件，填入名称路径<img src="https://img-blog.csdnimg.cn/20200606104245691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h4><h4 id="生成如下图文件-然后添加刚刚导出的文件SchLib，PcbLib"><a href="#生成如下图文件-然后添加刚刚导出的文件SchLib，PcbLib" class="headerlink" title="生成如下图文件 然后添加刚刚导出的文件SchLib，PcbLib"></a>生成如下图文件 然后添加刚刚导出的文件SchLib，PcbLib</h4><p><img src="https://img-blog.csdnimg.cn/20200606104451677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200606104601276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020060610461095.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="然后生成Integrated-Library文件"><a href="#然后生成Integrated-Library文件" class="headerlink" title="然后生成Integrated_Library文件"></a>然后生成Integrated_Library文件</h4><p><img src="https://img-blog.csdnimg.cn/2020060610465435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="右边出现文件库（基本结束）"><a href="#右边出现文件库（基本结束）" class="headerlink" title="右边出现文件库（基本结束）"></a>右边出现文件库（基本结束）</h5><p><img src="https://img-blog.csdnimg.cn/20200606104705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="创建一个新的PCB工程看看是否成功能够使用"><a href="#创建一个新的PCB工程看看是否成功能够使用" class="headerlink" title="创建一个新的PCB工程看看是否成功能够使用"></a>创建一个新的PCB工程看看是否成功能够使用</h3><p><img src="https://img-blog.csdnimg.cn/20200606104824466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="选择自己的库文件"><a href="#选择自己的库文件" class="headerlink" title="选择自己的库文件"></a>选择自己的库文件</h4><p><img src="https://img-blog.csdnimg.cn/2020060610495093.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="生成PCB文件"><a href="#生成PCB文件" class="headerlink" title="生成PCB文件"></a>生成PCB文件</h4><p><img src="https://img-blog.csdnimg.cn/2020060610555565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020060610555550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020060610555533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="到此为止，搞定（基本上没有问题，如果有问题可以去百度或者谷歌，我也是第一次搞，可能有没有注意的地方）"><a href="#到此为止，搞定（基本上没有问题，如果有问题可以去百度或者谷歌，我也是第一次搞，可能有没有注意的地方）" class="headerlink" title="到此为止，搞定（基本上没有问题，如果有问题可以去百度或者谷歌，我也是第一次搞，可能有没有注意的地方）"></a>到此为止，搞定（基本上没有问题，如果有问题可以去百度或者谷歌，我也是第一次搞，可能有没有注意的地方）</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p>立创商城网站<a href="https://www.szlcsc.com/" target="_blank" rel="noopener">https://www.szlcsc.com/</a> </p></li><li><p>学习AD绘制PCB 推荐一个哔哩哔哩UP主的视频（视频特点：简单 清晰 手把手教学）<br><a href="https://www.bilibili.com/video/BV1zE411q72a" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1zE411q72a</a></p></li><li><p>立创EDA学习使用教程<a href="https://space.bilibili.com/430536057?from=search&amp;seid=11621685439202966618" target="_blank" rel="noopener">https://space.bilibili.com/430536057?from=search&amp;seid=11621685439202966618</a></p></li></ol><h3 id="博客https-delehub-github-io-或者https-www-delehub-top"><a href="#博客https-delehub-github-io-或者https-www-delehub-top" class="headerlink" title="博客https://delehub.github.io/或者https://www.delehub.top/"></a>博客<a href="https://delehub.github.io/" target="_blank" rel="noopener">https://delehub.github.io/</a>或者<a href="https://www.delehub.top/" target="_blank" rel="noopener">https://www.delehub.top/</a></h3><h4 id="CSDNhttps-blog-csdn-net-weixin-43599390"><a href="#CSDNhttps-blog-csdn-net-weixin-43599390" class="headerlink" title="CSDNhttps://blog.csdn.net/weixin_43599390"></a>CSDN<a href="https://blog.csdn.net/weixin_43599390" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390</a></h4><h4 id="知乎https-www-zhihu-com-people-delehub"><a href="#知乎https-www-zhihu-com-people-delehub" class="headerlink" title="知乎https://www.zhihu.com/people/delehub"></a>知乎<a href="https://www.zhihu.com/people/delehub" target="_blank" rel="noopener">https://www.zhihu.com/people/delehub</a></h4>]]></content>
      
      
      <categories>
          
          <category> AD </category>
          
          <category> PCB </category>
          
          <category> 立创EDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD </tag>
            
            <tag> PCB </tag>
            
            <tag> 立创EDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 天气 简单 数据分析及可视化</title>
      <link href="/2020/06/02/python-tian-qi-jian-dan-shu-ju-fen-xi-ji-ke-shi-hua/"/>
      <url>/2020/06/02/python-tian-qi-jian-dan-shu-ju-fen-xi-ji-ke-shi-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-天气情况数据分析及可视化"><a href="#Python-天气情况数据分析及可视化" class="headerlink" title="Python 天气情况数据分析及可视化"></a>Python 天气情况数据分析及可视化</h1><a id="more"></a><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h3 id="第三方库导入"><a href="#第三方库导入" class="headerlink" title="第三方库导入"></a>第三方库导入</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## pip install 模块 清华大学镜像源</span><span class="token function">import</span> requests from bs4 <span class="token function">import</span>  BeautifulSoup<span class="token function">import</span> io<span class="token function">import</span> sys<span class="token function">import</span> pandasfrom matplotlib <span class="token function">import</span> pyplot as plt</code></pre><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><pre class=" language-bash"><code class="language-bash">1.爬虫requests 获取数据2.pandas 处理数据3.matplotlib 绘制图形4.其他 保存数据进入csv格式，简单处理，例如雷达图</code></pre><h3 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h3><h4 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/6/2 20:07</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : demo.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token comment" spellcheck="true"># 雷达图</span><span class="token keyword">import</span> pygal<span class="token comment" spellcheck="true"># pip install pygal 安装模块</span>rader_chart <span class="token operator">=</span> pygal<span class="token punctuation">.</span>Radar<span class="token punctuation">(</span><span class="token punctuation">)</span>rader_chart<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'成绩分析'</span>rader_chart<span class="token punctuation">.</span>x_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"数学"</span><span class="token punctuation">,</span><span class="token string">"英语"</span><span class="token punctuation">,</span><span class="token string">"文综"</span><span class="token punctuation">,</span><span class="token string">"理综"</span><span class="token punctuation">,</span><span class="token string">"体育"</span><span class="token punctuation">]</span>rader_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'StdudetA'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">,</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>rader_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'StdudetB'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>rader_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'StdudetC'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span>rader_chart<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'StdudetD'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">)</span>rader_chart<span class="token punctuation">.</span>render_to_file<span class="token punctuation">(</span><span class="token string">'radar_chart.svg'</span><span class="token punctuation">)</span></code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://img-blog.csdnimg.cn/20200602214421984.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="天气案例"><a href="#天气案例" class="headerlink" title="天气案例"></a>天气案例</h3><h4 id="爬取天气网站地址http-www-tianqihoubao-com-lishi"><a href="#爬取天气网站地址http-www-tianqihoubao-com-lishi" class="headerlink" title="爬取天气网站地址http://www.tianqihoubao.com/lishi/"></a>爬取天气网站地址<a href="http://www.tianqihoubao.com/lishi/" target="_blank" rel="noopener">http://www.tianqihoubao.com/lishi/</a></h4><p><img src="https://img-blog.csdnimg.cn/20200602214644360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="然后一直选择找到你需要的数据地址"><a href="#然后一直选择找到你需要的数据地址" class="headerlink" title="然后一直选择找到你需要的数据地址"></a>然后一直选择找到你需要的数据地址</h4><p>例如：如图<br><img src="https://img-blog.csdnimg.cn/20200602214731538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="进行网页分析-F12检查网页分析源代码"><a href="#进行网页分析-F12检查网页分析源代码" class="headerlink" title="进行网页分析 F12检查网页分析源代码"></a>进行网页分析 F12检查网页分析源代码</h4><h3 id="Python-爬虫代码分析"><a href="#Python-爬虫代码分析" class="headerlink" title="Python 爬虫代码分析"></a>Python 爬虫代码分析</h3><h3 id="Pandas-matplotlib-模块"><a href="#Pandas-matplotlib-模块" class="headerlink" title="Pandas matplotlib 模块"></a>Pandas matplotlib 模块</h3><h5 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h5><p>pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。pandas提供了大量能使我们快速便捷地处理数据的函数和方法。你很快就会发现，它是使Python成为强大而高效的数据分析环境的重要因素之一。</p><h5 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h5><pre class=" language-bash"><code class="language-bash">1. 数据文件读取/文本数据读取2. 索引、选取和数据过滤3. 算法运算和数据对齐4. 函数的应用和映射5. 重置索引6. 数学统计方法</code></pre><p><img src="https://img-blog.csdnimg.cn/20200602220448310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h4><p>Matplotlib 是一个 Python 的 2D绘图库，它以各种硬拷贝格式和跨平台的交互式环境生成出版质量级别的图形 。<br>通过 Matplotlib，开发者可以仅需要几行代码，便可以生成绘图，直方图，功率谱，条形图，错误图，散点图等。</p><h5 id="Matplotlib基础知识"><a href="#Matplotlib基础知识" class="headerlink" title="Matplotlib基础知识"></a>Matplotlib基础知识</h5><pre class=" language-bash"><code class="language-bash">1.Matplotlib中的基本图表包括的元素x轴和y轴水平和垂直的轴线x轴和y轴刻度刻度标示坐标轴的分隔，包括最小刻度和最大刻度x轴和y轴刻度标签表示特定坐标轴的值绘图区域实际绘图的区域2.hold属性hold属性默认为True，允许在一幅图中绘制多个曲线；将hold属性修改为False，每一个plot都会覆盖前面的plot。但是不推荐去动hold这个属性，这种做法（会有警告）。因此使用默认设置即可。3.网格线grid方法使用grid方法为图添加网格线设置grid参数（参数与plot函数相同）.lw代表linewidth，线的粗细.alpha表示线的明暗程度4.axis方法如果axis方法没有任何参数，则返回当前坐标轴的上下限5.xlim方法和ylim方法除了plt.axis方法，还可以通过xlim，ylim方法设置坐标轴范围6.legend方法</code></pre><p><img src="https://img-blog.csdnimg.cn/20200602220350171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/6/2 20:26</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : weather.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span>  BeautifulSoup<span class="token keyword">import</span> io<span class="token keyword">import</span> sys<span class="token keyword">import</span> pandassys<span class="token punctuation">.</span>stdout <span class="token operator">=</span> io<span class="token punctuation">.</span>TextIOWrapper<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>weather_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    rseponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>weather_url<span class="token punctuation">)</span>    html <span class="token operator">=</span> rseponse<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span>    tr_lsit <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tr_lsit<span class="token punctuation">)</span>    dates<span class="token punctuation">,</span>conditions<span class="token punctuation">,</span>temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> tr_lsit<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        sub_data <span class="token operator">=</span> data<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        dates<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        conditions<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据保存</span>    _data <span class="token operator">=</span> pandas<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>    _data<span class="token punctuation">[</span><span class="token string">'日期'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dates    _data<span class="token punctuation">[</span><span class="token string">'天气情况'</span><span class="token punctuation">]</span> <span class="token operator">=</span> conditions    _data<span class="token punctuation">[</span><span class="token string">'气温'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp    <span class="token keyword">return</span> _data    <span class="token comment" spellcheck="true"># print(_data)</span>    <span class="token comment" spellcheck="true"># _data.to_csv('anqing.csv',index=False,encoding='gbk')</span>    <span class="token comment" spellcheck="true"># 获取数据并保存csv格式，进行下面的数据分析</span><span class="token comment" spellcheck="true"># 定义成函数形式进行封装</span>data_month_3 <span class="token operator">=</span>get_data<span class="token punctuation">(</span><span class="token string">'http://www.tianqihoubao.com/lishi/anqing/month/202003.html'</span><span class="token punctuation">)</span>data_month_4 <span class="token operator">=</span>get_data<span class="token punctuation">(</span><span class="token string">'http://www.tianqihoubao.com/lishi/anqing/month/202004.html'</span><span class="token punctuation">)</span>data_month_5 <span class="token operator">=</span>get_data<span class="token punctuation">(</span><span class="token string">'http://www.tianqihoubao.com/lishi/anqing/month/202005.html'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pandas<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>data_month_3<span class="token punctuation">,</span>data_month_4<span class="token punctuation">,</span>data_month_5<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'anqing.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span></code></pre><h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 画图</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>datalsit <span class="token operator">=</span> pandas<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'G:/Python_Web/weather/anqing.csv'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据处理</span>datalsit<span class="token punctuation">[</span><span class="token string">'最高气温'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'气温'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>expand<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>datalsit<span class="token punctuation">[</span><span class="token string">'最低气温'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'气温'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>expand<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>datalsit<span class="token punctuation">[</span><span class="token string">'最高气温'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'最高气温'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>int<span class="token punctuation">(</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'℃'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>datalsit<span class="token punctuation">[</span><span class="token string">'最低气温'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'最低气温'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>int<span class="token punctuation">(</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'℃'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dates <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'日期'</span><span class="token punctuation">]</span>highs <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'最高气温'</span><span class="token punctuation">]</span>lows <span class="token operator">=</span>  datalsit<span class="token punctuation">[</span><span class="token string">'最低气温'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 画图</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>dpi<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span>highs<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span>lows<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>dates<span class="token punctuation">,</span>highs<span class="token punctuation">,</span>lows<span class="token punctuation">,</span>facecolor<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 图表格式</span><span class="token comment" spellcheck="true"># 设置图标的图形格式</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'2020安庆市3-5月天气情况'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>autofmt_xdate<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'气温'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'both'</span><span class="token punctuation">,</span>which<span class="token operator">=</span><span class="token string">'major'</span><span class="token punctuation">,</span>labelsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改刻度</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>dates<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20200602215239449.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/6/2 20:26</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : weather.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span>  BeautifulSoup<span class="token keyword">import</span> io<span class="token keyword">import</span> sys<span class="token keyword">import</span> pandas<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltsys<span class="token punctuation">.</span>stdout <span class="token operator">=</span> io<span class="token punctuation">.</span>TextIOWrapper<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>weather_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    rseponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>weather_url<span class="token punctuation">)</span>    html <span class="token operator">=</span> rseponse<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span>    tr_lsit <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tr_lsit<span class="token punctuation">)</span>    dates<span class="token punctuation">,</span>conditions<span class="token punctuation">,</span>temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> tr_lsit<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        sub_data <span class="token operator">=</span> data<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        dates<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        conditions<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据保存</span>    _data <span class="token operator">=</span> pandas<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>    _data<span class="token punctuation">[</span><span class="token string">'日期'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dates    _data<span class="token punctuation">[</span><span class="token string">'天气情况'</span><span class="token punctuation">]</span> <span class="token operator">=</span> conditions    _data<span class="token punctuation">[</span><span class="token string">'气温'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp    <span class="token keyword">return</span> _data    <span class="token comment" spellcheck="true"># print(_data)</span>    <span class="token comment" spellcheck="true"># _data.to_csv('anqing.csv',index=False,encoding='gbk')</span><span class="token comment" spellcheck="true"># data_month_3 =get_data('http://www.tianqihoubao.com/lishi/anqing/month/202003.html')</span><span class="token comment" spellcheck="true"># data_month_4 =get_data('http://www.tianqihoubao.com/lishi/anqing/month/202004.html')</span><span class="token comment" spellcheck="true"># data_month_5 =get_data('http://www.tianqihoubao.com/lishi/anqing/month/202005.html')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># data = pandas.concat([data_month_3,data_month_4,data_month_5]).reset_index(drop=True)</span><span class="token comment" spellcheck="true"># data.to_csv('anqing.csv',index=False,encoding='gbk')</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>datalsit <span class="token operator">=</span> pandas<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'G:/Python_Web/weather/anqing.csv'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据处理</span>datalsit<span class="token punctuation">[</span><span class="token string">'最高气温'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'气温'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>expand<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>datalsit<span class="token punctuation">[</span><span class="token string">'最低气温'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'气温'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>expand<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>datalsit<span class="token punctuation">[</span><span class="token string">'最高气温'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'最高气温'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>int<span class="token punctuation">(</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'℃'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>datalsit<span class="token punctuation">[</span><span class="token string">'最低气温'</span><span class="token punctuation">]</span> <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'最低气温'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>int<span class="token punctuation">(</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'℃'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dates <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'日期'</span><span class="token punctuation">]</span>highs <span class="token operator">=</span> datalsit<span class="token punctuation">[</span><span class="token string">'最高气温'</span><span class="token punctuation">]</span>lows <span class="token operator">=</span>  datalsit<span class="token punctuation">[</span><span class="token string">'最低气温'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 画图</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>dpi<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span>highs<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dates<span class="token punctuation">,</span>lows<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>dates<span class="token punctuation">,</span>highs<span class="token punctuation">,</span>lows<span class="token punctuation">,</span>facecolor<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 图表格式</span><span class="token comment" spellcheck="true"># 设置图标的图形格式</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'2020安庆市3-5月天气情况'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>autofmt_xdate<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'气温'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'both'</span><span class="token punctuation">,</span>which<span class="token operator">=</span><span class="token string">'major'</span><span class="token punctuation">,</span>labelsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改刻度</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>dates<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="博客地址https-www-delehub-top"><a href="#博客地址https-www-delehub-top" class="headerlink" title="博客地址https://www.delehub.top/"></a>博客地址<a href="https://www.delehub.top/" target="_blank" rel="noopener">https://www.delehub.top/</a></h3><h3 id="知乎https-www-zhihu-com-people-bi-shi-san-2-81"><a href="#知乎https-www-zhihu-com-people-bi-shi-san-2-81" class="headerlink" title="知乎https://www.zhihu.com/people/bi-shi-san-2-81"></a>知乎<a href="https://www.zhihu.com/people/bi-shi-san-2-81" target="_blank" rel="noopener">https://www.zhihu.com/people/bi-shi-san-2-81</a></h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
          <category> 数据可视化 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 数据可视化 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 静态网页分析--cosplay壁纸图片下载</title>
      <link href="/2020/05/26/python-jing-tai-wang-ye-fen-xi-cosplay-bi-zhi-tu-pian-xia-zai/"/>
      <url>/2020/05/26/python-jing-tai-wang-ye-fen-xi-cosplay-bi-zhi-tu-pian-xia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-cosplay壁纸图片下载-大家都懂的"><a href="#Python-cosplay壁纸图片下载-大家都懂的" class="headerlink" title="Python cosplay壁纸图片下载(大家都懂的)"></a>Python cosplay壁纸图片下载(大家都懂的)</h1><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h2 id="爬虫的一般思路-主要流程步骤"><a href="#爬虫的一般思路-主要流程步骤" class="headerlink" title="爬虫的一般思路 主要流程步骤"></a>爬虫的一般思路 主要流程步骤</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#### 1、分析目标网页，确定爬取的url路径，headers参数</span><span class="token comment" spellcheck="true">#### 2、发送请求--requests 模拟浏览器发送请求，获取响应数据</span><span class="token comment" spellcheck="true">#### 3、解析数据parsel转化为Selector对象，Selector对象 具有xpath的方法，能够对转化的数据进行处理</span><span class="token comment" spellcheck="true">#### 4、保存数据--保存在目标文件夹中</span></code></pre><h2 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h2 id="导入第三方模块"><a href="#导入第三方模块" class="headerlink" title="导入第三方模块"></a>导入第三方模块</h2><pre class=" language-python"><code class="language-python">    pip install requests    pip install parsel</code></pre><h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><h4 id="爬取网站美桌壁纸http-www-win4000-com"><a href="#爬取网站美桌壁纸http-www-win4000-com" class="headerlink" title="爬取网站美桌壁纸http://www.win4000.com/"></a>爬取网站美桌壁纸<a href="http://www.win4000.com/" target="_blank" rel="noopener">http://www.win4000.com/</a></h4><p><img src="https://img-blog.csdnimg.cn/20200526215128429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="爬取cosply壁纸（好东西，大家都懂得）"><a href="#爬取cosply壁纸（好东西，大家都懂得）" class="headerlink" title="爬取cosply壁纸（好东西，大家都懂得）"></a>爬取cosply壁纸（好东西，大家都懂得）</h4><p><img src="https://img-blog.csdnimg.cn/20200526215139304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="网页链接相册的链接地址分析"><a href="#网页链接相册的链接地址分析" class="headerlink" title="网页链接相册的链接地址分析"></a>网页链接相册的链接地址分析</h4><p><img src="https://img-blog.csdnimg.cn/20200526214708351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-bash"><code class="language-bash">html_data<span class="token operator">=</span> parsel.Selector<span class="token punctuation">(</span>data_text<span class="token punctuation">)</span>data_list <span class="token operator">=</span> html_data.xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="Left_bar"]//ul/li/a/@href'</span><span class="token punctuation">)</span>.extract<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取标签 '//'  从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</span>div 标签 使用@方法获取class 属性ul/li/ 获取地址一步一步到了li标签下面li 标签下面有a标签，标签下面有href属性，href属性里面有一些资源</code></pre><h4 id="详情页面图片资源获取"><a href="#详情页面图片资源获取" class="headerlink" title="详情页面图片资源获取"></a>详情页面图片资源获取</h4><p><img src="https://img-blog.csdnimg.cn/20200526214708209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 详情页面数据解析</span><span class="token comment" spellcheck="true"># img_url = response_2_data.xpath('//div[@class="pic-meinv"]/a/img/@data-original').extract_first()</span><span class="token comment" spellcheck="true"># 获取标签 '//'  从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</span>div 标签 使用@方法获取class 属性 pic-meinv标签下面有a标签，标签下面有img属性，@data-original属性里面有一些图片地址链接资源</code></pre><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/5/26 20:17</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : cosplay.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token comment" spellcheck="true">#爬虫的般思路</span><span class="token comment" spellcheck="true">#1、分析目标网页。确定爬取的ur1路径，headers参数</span><span class="token comment" spellcheck="true">#2、发送请求--requests 模拟浏览器发送请求，获取响应数据</span><span class="token comment" spellcheck="true">#3、解析数据--parsel转化为Selector对象，Selector对象 具有xpath的方法，能够对转化的数据进行处理</span><span class="token comment" spellcheck="true">#4、保存数据</span><span class="token comment" spellcheck="true"># cosplay 静态网页 数据获取 基本方法</span><span class="token comment" spellcheck="true"># 模块导入</span><span class="token keyword">import</span>  requests<span class="token keyword">import</span>  parsel<span class="token keyword">import</span>  os<span class="token comment" spellcheck="true"># 目标网页分析</span>base_url <span class="token operator">=</span> <span class="token string">'http://www.win4000.com/meinvtag26.html'</span>headers <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 发送请求--requests 模拟浏览器发送请求，获取响应数据</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>base_url<span class="token punctuation">,</span>headers<span class="token operator">=</span> headers<span class="token punctuation">)</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> response<span class="token punctuation">.</span>apparent_encoding <span class="token comment" spellcheck="true"># 自动识别编码格式  “charset=utf-8"  ”utf-8“</span>data_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token comment" spellcheck="true"># print(data_text) #打印网页源代码</span>html_data<span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>data_text<span class="token punctuation">)</span>data_list <span class="token operator">=</span> html_data<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="Left_bar"]//ul/li/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token keyword">for</span> alllist <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>    response_2 <span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>alllist<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    response_2_data <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response_2<span class="token punctuation">)</span>    img_url <span class="token operator">=</span> response_2_data<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="pic-meinv"]/a/img/@data-original'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>img_url<span class="token punctuation">)</span>    img_url_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content    file_name <span class="token operator">=</span> img_url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'cosplay_img\\'</span><span class="token operator">+</span>file_name<span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在保存图片：'</span><span class="token punctuation">,</span>file_name<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_url_data<span class="token punctuation">)</span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20200526215516158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="博客https-www-delehub-top"><a href="#博客https-www-delehub-top" class="headerlink" title="博客https://www.delehub.top/"></a>博客<a href="https://www.delehub.top/" target="_blank" rel="noopener">https://www.delehub.top/</a></h3><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 图片下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫学习--简单学习爬取音乐歌曲保存下载</title>
      <link href="/2020/05/15/python-pa-chong-xue-xi-jian-dan-xue-xi-pa-qu-yin-le-ge-qu-bao-cun-xia-zai/"/>
      <url>/2020/05/15/python-pa-chong-xue-xi-jian-dan-xue-xi-pa-qu-yin-le-ge-qu-bao-cun-xia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫学习–简单学习网易云音乐歌曲保存下载"><a href="#Python爬虫学习–简单学习网易云音乐歌曲保存下载" class="headerlink" title="Python爬虫学习–简单学习网易云音乐歌曲保存下载"></a>Python爬虫学习–简单学习网易云音乐歌曲保存下载</h1><a id="more"></a><p><img src="/medias/images/wyy.png" alt="avatar"></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><pre class=" language-python"><code class="language-python">Pycharm开发环境 python 版本 python3<span class="token number">.7</span>Anconda 集成开发环境</code></pre><h3 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># pip install requests </span><span class="token keyword">import</span> json </code></pre><h3 id="网页分析-找数据"><a href="#网页分析-找数据" class="headerlink" title="网页分析 找数据"></a>网页分析 找数据</h3><h5 id="某wyy音乐平台-搜索你想要听的歌曲或者歌手名称"><a href="#某wyy音乐平台-搜索你想要听的歌曲或者歌手名称" class="headerlink" title="某wyy音乐平台 搜索你想要听的歌曲或者歌手名称"></a>某wyy音乐平台 搜索你想要听的歌曲或者歌手名称</h5><p><img src="https://img-blog.csdnimg.cn/20200515214510714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="F12检查网页，寻找数据"><a href="#F12检查网页，寻找数据" class="headerlink" title="F12检查网页，寻找数据"></a>F12检查网页，寻找数据</h5><p><img src="https://img-blog.csdnimg.cn/20200515214704936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200515214915810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020051521472362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200515214813885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020051521472343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200515214722999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/5/15 20:16</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : wyyun_music.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token comment" spellcheck="true"># 搜索url</span>base_url <span class="token operator">=</span> <span class="token string">'https://music.163.com/weapi/cloudsearch/get/web?csrf_token='</span><span class="token comment" spellcheck="true"># headers 参数 模拟浏览器登录</span>headers <span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 修改From data 信息 获取其他歌曲</span><span class="token comment" spellcheck="true"># data={</span><span class="token comment" spellcheck="true">#     'params':'y29eUI9upnFLMNmqw2jCYRkbKBXfnYfh0fJ+FJh3xitnR+A5EDGWwPJfWFyNz7imbE+VmDWyO1VfJAEBgpcN3mJUv9YvxvhLv0DwBGf/EBEVpeZnBNTVf+3V7xxtyxYQsye9HLTNZGPTSWsC4WfRZcc5gzB2GdUS3huF2+j2pkBRTf9VSEPsD27oQSU4Z4IJojLz/s9s5tLWIL32E0/dzosOAn6XY+QJABRtByuaf8HR9amZlYOTXn++DPMx35QjVj/dTkIoRQD1T3rSDlhCdFyjMRcnrN+Dq/s8CbSdGak=',</span><span class="token comment" spellcheck="true">#     'encSecKey':'36f7389ba3af32613955f42e2c8e5bac688c21f59796e8738ba1235a1a56c2656eb3315113c6f39cf6bba5a3ea58fd38d7ac29b8bfb94fb6a49210a3529b04f9c053d26be25ad19cb378c19e28f4fc830fbbad41451240afcf5c6511d3cc5f24ab1799534375d820117a53da7716915889743a133aadf0200fdad2f437b8dc17'</span><span class="token comment" spellcheck="true"># }</span><span class="token comment" spellcheck="true"># data ={</span><span class="token comment" spellcheck="true">#     'params':'ZtkfjPE0FbvosyB4FvRoOwW62auIGyi/tBomCuf6Zh4q55OsLyRV7qOmoG9B6FH1xLYv18l8LlZNPTkIEQ5Iu8kmpe+6KYwilv6xgCHf78ClEQoC6J/L5g9uXD8Hg6lrOtUQIdCXBrOe5ubxrbHR2HqgLNm7i56QU/JNBKSc2sR2AV/BV1r9rqbpATlUUlTOI/i2bYC40pZGNMhgVUJ+tmd0pcM8b0Jbq2wsZem0nl2GTo4vcd4jerjCSXoQrkU/mxwxFF+TyHepgtKef3Ik8Ezwx+NK3rB0fTpFJyKTw8s=',</span><span class="token comment" spellcheck="true">#     'encSecKey':'ae7e844e01b4a58907b92e8f71e222c5a8f85160ce7bf68ba47b8a8ff181616f0cc955397bbc907ec062ee6a695c6de26ac5629ba933638dcb84f6cb07e1afcdf24db955e22744e3cca3d0c5c18ee27898fc5a2b09a3cfac255a231388cce9da41d3115a67bab703cc377146006525f8eadb953f90e378a6d8b0126c4cdfb376'</span><span class="token comment" spellcheck="true"># }</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'params'</span><span class="token punctuation">:</span><span class="token string">'4QI0slEwUH5LX0RyN2EG7oxcYxzdfdDC/lCvSlay0zFpOTD7YcyjOuEechTIKXtANulZEXeIhLvuvy6t35zdbFePvHNfgyDYOzB6Dp4cT6SLwoM8mdiab5PU+LFWR5WQgWywQ0bHzPBu05lpNB1qyGBZj8RIDlSohNDAKycc8YlYri0mHjsTs0OsTdPWAXNcJm1FpDZkDLnoT59mAcDUeN6f+jfM0kylGKD4bxQn3JaSpVOiWRTJKLl1tH1K3LsUAXqFv++8xoIgx2Vxpqwg4hxm6b9U3QrdoKJZyWUELvax2Y79iAOpYO5Zkw1d2n8p'</span><span class="token punctuation">,</span>    <span class="token string">'encSecKey'</span><span class="token punctuation">:</span><span class="token string">'8923fdfa47b7676969b1972b78fe8e7b7349a5fe1bf29480d0d65a1bd31b5d3aff1bc1f2f07343cae56591c823e67e09506d2c98582643542ad4a4230743ee15cf3394fa85ac68edbfce8bac8a1f573d5588e96994cbb696bd1db962ba41ad08e8064b3130033f54897e0c7d275fd509daf133c275d5b637795738ea036401b0'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># response requests.post 请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>base_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取id_list 列表里面的东西，例如result songs</span><span class="token comment" spellcheck="true"># 从songs 获得id 下载歌曲，name歌曲名称</span>id_list <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'songs'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(id_list)</span><span class="token comment" spellcheck="true"># 循环遍历 打印歌曲id name</span><span class="token keyword">for</span> idlist <span class="token keyword">in</span> id_list<span class="token punctuation">:</span>    songid <span class="token operator">=</span> idlist<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>    name <span class="token operator">=</span> idlist<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>songid<span class="token punctuation">,</span>name<span class="token punctuation">)</span>    song_url <span class="token operator">=</span> <span class="token string">'http://music.163.com/song/media/outer/url?id={}.mp3'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>songid<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># vip接口网站</span>    song_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>song_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment" spellcheck="true"># print(song_data)</span>    <span class="token comment" spellcheck="true"># 保存MP3文件，二进制保存 'kingGnu/' 文件夹地址</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'kingGnu/'</span> <span class="token operator">+</span>name <span class="token operator">+</span> <span class="token string">'.mp3'</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>song_data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'download 完成'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/2020051521502071.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200515215048970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="可能会出现一些歌曲无法爬取下了-例如单独付费下载的和听，一般的vip大部分都可以下载"><a href="#可能会出现一些歌曲无法爬取下了-例如单独付费下载的和听，一般的vip大部分都可以下载" class="headerlink" title="可能会出现一些歌曲无法爬取下了(例如单独付费下载的和听，一般的vip大部分都可以下载)"></a>可能会出现一些歌曲无法爬取下了(例如单独付费下载的和听，一般的vip大部分都可以下载)</h5><h4 id="博客地址https-www-delehub-top"><a href="#博客地址https-www-delehub-top" class="headerlink" title="博客地址https://www.delehub.top/"></a>博客地址<a href="https://www.delehub.top/" target="_blank" rel="noopener">https://www.delehub.top/</a></h4><h4 id="CSDN博客https-blog-csdn-net-weixin-43599390-article-details-106150156"><a href="#CSDN博客https-blog-csdn-net-weixin-43599390-article-details-106150156" class="headerlink" title="CSDN博客https://blog.csdn.net/weixin_43599390/article/details/106150156"></a>CSDN博客<a href="https://blog.csdn.net/weixin_43599390/article/details/106150156" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390/article/details/106150156</a></h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 音乐下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python pyqt5 实现简单的音乐下载器功能</title>
      <link href="/2020/05/13/python-pyqt5-shi-xian-jian-dan-de-yin-le-xia-zai-qi-gong-neng/"/>
      <url>/2020/05/13/python-pyqt5-shi-xian-jian-dan-de-yin-le-xia-zai-qi-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-pyqt5-实现简单的音乐下载器功能"><a href="#Python-pyqt5-实现简单的音乐下载器功能" class="headerlink" title="Python pyqt5 实现简单的音乐下载器功能"></a>Python pyqt5 实现简单的音乐下载器功能</h1><a id="more"></a><h5 id="界面比较糟糕，开始学习不会设计，UI以后应该会改"><a href="#界面比较糟糕，开始学习不会设计，UI以后应该会改" class="headerlink" title="界面比较糟糕，开始学习不会设计，UI以后应该会改"></a>界面比较糟糕，开始学习不会设计，UI以后应该会改</h5><h3 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h3><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境安装 Pyqt5-tools工具，Qt designer设计工具pip <span class="token function">install</span> pyqt5_tools</code></pre><h3 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlretrieve<span class="token keyword">import</span> jsonpath<span class="token keyword">import</span> json<span class="token keyword">import</span> re<span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token punctuation">,</span> QtGui<span class="token punctuation">,</span> QtWidgets<span class="token comment" spellcheck="true">## 安装速度慢时，使用 pip install pyqt5_tools -i https://pypi.tuna.tsinghua.edu.cn/simple</span></code></pre><h3 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h3><h4 id="某音乐平台"><a href="#某音乐平台" class="headerlink" title="某音乐平台"></a>某音乐平台</h4><p><img src="https://img-blog.csdnimg.cn/2020051322303626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="搜索你需要听的音乐名称，F12检查，查找网页内容"><a href="#搜索你需要听的音乐名称，F12检查，查找网页内容" class="headerlink" title="搜索你需要听的音乐名称，F12检查，查找网页内容"></a>搜索你需要听的音乐名称，F12检查，查找网页内容</h4><p><img src="https://img-blog.csdnimg.cn/20200513223035973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200513223035980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="复制你搜索的歌曲的播放页面的Url地址"><a href="#复制你搜索的歌曲的播放页面的Url地址" class="headerlink" title="复制你搜索的歌曲的播放页面的Url地址"></a>复制你搜索的歌曲的播放页面的Url地址</h4><p><img src="https://img-blog.csdnimg.cn/20200513223035846.png" alt="在这里插入图片描述"></p><h4 id="某音乐jx平台"><a href="#某音乐jx平台" class="headerlink" title="某音乐jx平台"></a>某音乐jx平台</h4><p><a href="http://www.douqq.com/qqmusic/" target="_blank" rel="noopener">http://www.douqq.com/qqmusic/</a><br><img src="https://img-blog.csdnimg.cn/20200513223035818.png" alt="在这里插入图片描述"></p><h4 id="把你复制的音乐播放链接地址放入解析搜索栏中"><a href="#把你复制的音乐播放链接地址放入解析搜索栏中" class="headerlink" title="把你复制的音乐播放链接地址放入解析搜索栏中"></a>把你复制的音乐播放链接地址放入解析搜索栏中</h4><p><img src="https://img-blog.csdnimg.cn/2020051322330422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="进行进行F12检查，获得一些重要的参数"><a href="#进行进行F12检查，获得一些重要的参数" class="headerlink" title="进行进行F12检查，获得一些重要的参数"></a>进行进行F12检查，获得一些重要的参数</h4><h5 id="例如接口，请求头"><a href="#例如接口，请求头" class="headerlink" title="例如接口，请求头"></a>例如接口，请求头</h5><p><img src="https://img-blog.csdnimg.cn/20200513223303987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h4 id="pyqt5-ui-文件-生成py文件"><a href="#pyqt5-ui-文件-生成py文件" class="headerlink" title="pyqt5 ui 文件 生成py文件"></a>pyqt5 ui 文件 生成py文件</h4><h5 id="由于pyqt5-ui保存的文件格式是ui文件，需要处理一下"><a href="#由于pyqt5-ui保存的文件格式是ui文件，需要处理一下" class="headerlink" title="由于pyqt5 ui保存的文件格式是ui文件，需要处理一下"></a>由于pyqt5 ui保存的文件格式是ui文件，需要处理一下</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 进入这个ui文件的位置 cmd cd 操作</span> pyuic5 <span class="token operator">-</span>o demo<span class="token punctuation">.</span>py test01<span class="token punctuation">.</span>ui</code></pre><p><img src="https://img-blog.csdnimg.cn/20200513223735847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="https://img-blog.csdnimg.cn/20200513223735801.png" alt="在这里插入图片描述"></p><h4 id="界面代码"><a href="#界面代码" class="headerlink" title="界面代码"></a>界面代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token punctuation">,</span> QtGui<span class="token punctuation">,</span> QtWidgets<span class="token comment" spellcheck="true"># 界面设计</span><span class="token keyword">class</span> <span class="token class-name">Ui_MainWindow</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>        MainWindow<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"MainWindow"</span><span class="token punctuation">)</span>        MainWindow<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>centralwidget <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"centralwidget"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span>self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLineEdit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">331</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"lineEdit"</span><span class="token punctuation">)</span>        MainWindow<span class="token punctuation">.</span>setCentralWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>menubar <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QMenuBar<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>menubar<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>menubar<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"menubar"</span><span class="token punctuation">)</span>        MainWindow<span class="token punctuation">.</span>setMenuBar<span class="token punctuation">(</span>self<span class="token punctuation">.</span>menubar<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statusbar <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QStatusBar<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statusbar<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"statusbar"</span><span class="token punctuation">)</span>        MainWindow<span class="token punctuation">.</span>setStatusBar<span class="token punctuation">(</span>self<span class="token punctuation">.</span>statusbar<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>        QtCore<span class="token punctuation">.</span>QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 按键绑定，监视(实现按键操作，进行下载)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>download_mp3<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>        _translate <span class="token operator">=</span> QtCore<span class="token punctuation">.</span>QCoreApplication<span class="token punctuation">.</span>translate        MainWindow<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"MainWindow"</span><span class="token punctuation">,</span> <span class="token string">"QQ Music Download"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"MainWindow"</span><span class="token punctuation">,</span> <span class="token string">"download"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setPlaceholderText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"MainWindow"</span><span class="token punctuation">,</span> <span class="token string">"Please enter a song name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="python-爬虫代码"><a href="#python-爬虫代码" class="headerlink" title="python 爬虫代码"></a>python 爬虫代码</h4><h5 id="def-定义了一个类里面的方法"><a href="#def-定义了一个类里面的方法" class="headerlink" title="def 定义了一个类里面的方法"></a>def 定义了一个类里面的方法</h5><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">download_mp3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 搜索链接</span>        keyword <span class="token operator">=</span>self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> <span class="token string">'https://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.song&amp;searchid=65868335786339164&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=10&amp;w={}&amp;g_tk_new_20200303=498689185&amp;g_tk=498689185&amp;loginUin=1057527027&amp;hostUin=0&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq.json&amp;needNewCode=0'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>        resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取url内容</span>        <span class="token comment" spellcheck="true"># print(resp.text) # 打印网页源代码</span>        html_doc <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        mids <span class="token operator">=</span> jsonpath<span class="token punctuation">.</span>jsonpath<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">"$..mid"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>mids<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 接口</span>        <span class="token comment" spellcheck="true"># headers 请求头 模拟浏览器登录</span>        headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>            <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>            <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh,zh-CN;q=0.9'</span><span class="token punctuation">,</span>            <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>            <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'65'</span><span class="token punctuation">,</span>            <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>            <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.douqq.com'</span><span class="token punctuation">,</span>            <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://www.douqq.com'</span><span class="token punctuation">,</span>            <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://www.douqq.com/qqmusic/'</span><span class="token punctuation">,</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36129 Safari/537.36'</span><span class="token punctuation">,</span>            <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        link <span class="token operator">=</span> <span class="token string">'http://www.douqq.com/qqmusic/qqapi.php'</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mid'</span><span class="token punctuation">:</span> <span class="token string">'https://y.qq.com/n/yqq/song/{}.html'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>mids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>link<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># print(req)</span>        req <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>req<span class="token punctuation">)</span>        req <span class="token operator">=</span> req<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\/'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 正则表达式，替换url下载链接</span>        <span class="token comment" spellcheck="true"># print(req)</span>        <span class="token comment" spellcheck="true"># 正则表达式</span>        res <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'"m4a":"(.*?)",'</span><span class="token punctuation">)</span>        rs <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>res<span class="token punctuation">,</span> req<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(rs)</span>        mp3 <span class="token operator">=</span> rs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 取列表第一个元素</span>        urlretrieve<span class="token punctuation">(</span>mp3<span class="token punctuation">,</span> keyword <span class="token operator">+</span> <span class="token string">'.mp3'</span><span class="token punctuation">)</span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/5/13 20:20</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : music.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token comment" spellcheck="true"># 功能实现</span><span class="token comment" spellcheck="true"># 搜索 https://y.qq.com/portal/search.html#page=1&amp;searchid=1&amp;remoteplace=txt.yqq.top&amp;t=song&amp;w=lemon</span><span class="token comment" spellcheck="true"># 歌曲ID https://y.qq.com/n/yqq/song/000akynZ2Rbro5.html</span><span class="token comment" spellcheck="true"># 解析 http://www.douqq.com/qqmusic/qqapi.php</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlretrieve<span class="token keyword">import</span> jsonpath<span class="token keyword">import</span> json<span class="token keyword">import</span> re<span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token punctuation">,</span> QtGui<span class="token punctuation">,</span> QtWidgets<span class="token comment" spellcheck="true"># 界面设计</span><span class="token keyword">class</span> <span class="token class-name">Ui_MainWindow</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>        MainWindow<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"MainWindow"</span><span class="token punctuation">)</span>        MainWindow<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>centralwidget <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"centralwidget"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span>self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLineEdit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">331</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"lineEdit"</span><span class="token punctuation">)</span>        MainWindow<span class="token punctuation">.</span>setCentralWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>menubar <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QMenuBar<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>menubar<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>menubar<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"menubar"</span><span class="token punctuation">)</span>        MainWindow<span class="token punctuation">.</span>setMenuBar<span class="token punctuation">(</span>self<span class="token punctuation">.</span>menubar<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statusbar <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QStatusBar<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>statusbar<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"statusbar"</span><span class="token punctuation">)</span>        MainWindow<span class="token punctuation">.</span>setStatusBar<span class="token punctuation">(</span>self<span class="token punctuation">.</span>statusbar<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>        QtCore<span class="token punctuation">.</span>QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>download_mp3<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>        _translate <span class="token operator">=</span> QtCore<span class="token punctuation">.</span>QCoreApplication<span class="token punctuation">.</span>translate        MainWindow<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"MainWindow"</span><span class="token punctuation">,</span> <span class="token string">"QQ Music Download"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"MainWindow"</span><span class="token punctuation">,</span> <span class="token string">"download"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setPlaceholderText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"MainWindow"</span><span class="token punctuation">,</span> <span class="token string">"Please enter a song name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">download_mp3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 搜索链接</span>        keyword <span class="token operator">=</span>self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> <span class="token string">'https://c.y.qq.com/soso/fcgi-bin/client_search_cp?ct=24&amp;qqmusic_ver=1298&amp;new_json=1&amp;remoteplace=txt.yqq.song&amp;searchid=65868335786339164&amp;t=0&amp;aggr=1&amp;cr=1&amp;catZhida=1&amp;lossless=0&amp;flag_qc=0&amp;p=1&amp;n=10&amp;w={}&amp;g_tk_new_20200303=498689185&amp;g_tk=498689185&amp;loginUin=1057527027&amp;hostUin=0&amp;format=json&amp;inCharset=utf8&amp;outCharset=utf-8&amp;notice=0&amp;platform=yqq.json&amp;needNewCode=0'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>        resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取url内容</span>        <span class="token comment" spellcheck="true"># print(resp.text) # 打印网页源代码</span>        html_doc <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        mids <span class="token operator">=</span> jsonpath<span class="token punctuation">.</span>jsonpath<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">"$..mid"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>mids<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 接口</span>        <span class="token comment" spellcheck="true"># headers 请求头 模拟浏览器登录</span>        headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>            <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>            <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh,zh-CN;q=0.9'</span><span class="token punctuation">,</span>            <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>            <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'65'</span><span class="token punctuation">,</span>            <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>            <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.douqq.com'</span><span class="token punctuation">,</span>            <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://www.douqq.com'</span><span class="token punctuation">,</span>            <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://www.douqq.com/qqmusic/'</span><span class="token punctuation">,</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36129 Safari/537.36'</span><span class="token punctuation">,</span>            <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        link <span class="token operator">=</span> <span class="token string">'http://www.douqq.com/qqmusic/qqapi.php'</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mid'</span><span class="token punctuation">:</span> <span class="token string">'https://y.qq.com/n/yqq/song/{}.html'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>mids<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>link<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># print(req)</span>        req <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>req<span class="token punctuation">)</span>        req <span class="token operator">=</span> req<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\/'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 正则表达式，替换url下载链接</span>        <span class="token comment" spellcheck="true"># print(req)</span>        <span class="token comment" spellcheck="true"># 正则表达式</span>        res <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'"m4a":"(.*?)",'</span><span class="token punctuation">)</span>        rs <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>res<span class="token punctuation">,</span> req<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(rs)</span>        mp3 <span class="token operator">=</span> rs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 取列表第一个元素</span>        urlretrieve<span class="token punctuation">(</span>mp3<span class="token punctuation">,</span> keyword <span class="token operator">+</span> <span class="token string">'.mp3'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    MainWindow <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    ui <span class="token operator">=</span> Ui_MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    ui<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>    MainWindow<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/2020051322475626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200513224807845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200513224822208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200513224841155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="博客地址https-www-delehub-top"><a href="#博客地址https-www-delehub-top" class="headerlink" title="博客地址https://www.delehub.top/"></a>博客地址<a href="https://www.delehub.top/" target="_blank" rel="noopener">https://www.delehub.top/</a></h5><h5 id="CSDNhttps-blog-csdn-net-weixin-43599390-article-details-106108189"><a href="#CSDNhttps-blog-csdn-net-weixin-43599390-article-details-106108189" class="headerlink" title="CSDNhttps://blog.csdn.net/weixin_43599390/article/details/106108189"></a>CSDN<a href="https://blog.csdn.net/weixin_43599390/article/details/106108189" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390/article/details/106108189</a></h5><h5 id="知乎https-www-zhihu-com-people-bi-shi-san-2-81"><a href="#知乎https-www-zhihu-com-people-bi-shi-san-2-81" class="headerlink" title="知乎https://www.zhihu.com/people/bi-shi-san-2-81"></a>知乎<a href="https://www.zhihu.com/people/bi-shi-san-2-81" target="_blank" rel="noopener">https://www.zhihu.com/people/bi-shi-san-2-81</a></h5>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> Pyqt5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> pyqt5 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码器</title>
      <link href="/2020/05/08/bian-ma-qi/"/>
      <url>/2020/05/08/bian-ma-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h1><a id="more"></a><h2 id="基本概念用特定的一组二进制代码来表示某种信息的过程称为编码，具有编码功能的电路称为编码器。"><a href="#基本概念用特定的一组二进制代码来表示某种信息的过程称为编码，具有编码功能的电路称为编码器。" class="headerlink" title="基本概念用特定的一组二进制代码来表示某种信息的过程称为编码，具有编码功能的电路称为编码器。"></a>基本概念用特定的一组二进制代码来表示某种信息的过程称为编码，具有编码功能的电路称为编码器。</h2><p>根据输入信号个数n和输出代码位数m是否匹配，可将编码器分为完全编码器和部分编码器。<br>当n=2^m时，该编码器为完全编码器或二进制编码器；<br>当n&lt;2^m时，该编码器为部分编码器或非二进制编码器。<br>常见编码器有8一3线编码器和10-4线编码器。<br>根据编码信号的优先级别，编码器又可分为普通编码器和优先编码器。</p><h1 id="普通编码器"><a href="#普通编码器" class="headerlink" title="普通编码器"></a>普通编码器</h1><h2 id="普通编码器在任何时刻只允许输人一个编码信号，否则输出将发生混乱。"><a href="#普通编码器在任何时刻只允许输人一个编码信号，否则输出将发生混乱。" class="headerlink" title="普通编码器在任何时刻只允许输人一个编码信号，否则输出将发生混乱。"></a>普通编码器在任何时刻只允许输人一个编码信号，否则输出将发生混乱。</h2><p>下面以8一3线普通编码器为例，说明普通编码器的设计过程及其工作原理。</p><h2 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h2><h1 id="逻辑表达式-逻辑电路"><a href="#逻辑表达式-逻辑电路" class="headerlink" title="逻辑表达式/逻辑电路"></a>逻辑表达式/逻辑电路</h1><h1 id="优先编码器"><a href="#优先编码器" class="headerlink" title="优先编码器"></a>优先编码器</h1><h2 id="普通编码器对输人信号有限制，输入信号不能同时有效，而优先编码器，允许多个输入信号同时有效，但只对优先级别最高的信号进行编码。"><a href="#普通编码器对输人信号有限制，输入信号不能同时有效，而优先编码器，允许多个输入信号同时有效，但只对优先级别最高的信号进行编码。" class="headerlink" title="普通编码器对输人信号有限制，输入信号不能同时有效，而优先编码器，允许多个输入信号同时有效，但只对优先级别最高的信号进行编码。"></a>普通编码器对输人信号有限制，输入信号不能同时有效，而优先编码器，允许多个输入信号同时有效，但只对优先级别最高的信号进行编码。</h2><p>常用的优先编码器有8-3线优先编码器74LS148，10-4线优先编码器74LS147。</p><h1 id="真值表-1"><a href="#真值表-1" class="headerlink" title="真值表"></a>真值表</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>对两片74LS148进行扩展可得到16-4线优先编码器，<br>如图所示，根据表可以判断第2片编码输人信号优先级别高于第1片，然后再对每片的编码输人信号优先级别进行判断。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文档：编码器.note<br>链接：<a href="http://note.youdao.com/noteshare?id=06e459b6beed928a48263bd1bf43fa06&amp;sub=189998A54DE74BB9B9E4B59A4ACF4AC5" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=06e459b6beed928a48263bd1bf43fa06&amp;sub=189998A54DE74BB9B9E4B59A4ACF4AC5</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>译码器</title>
      <link href="/2020/05/08/yi-ma-qi/"/>
      <url>/2020/05/08/yi-ma-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="译码器"><a href="#译码器" class="headerlink" title="译码器"></a>译码器</h1><a id="more"></a><h2 id="基本概念：译码是编码的逆过程，将输人的二进制编码转换为特定的输出信号，具有译码功能的电路称为译码器。"><a href="#基本概念：译码是编码的逆过程，将输人的二进制编码转换为特定的输出信号，具有译码功能的电路称为译码器。" class="headerlink" title="基本概念：译码是编码的逆过程，将输人的二进制编码转换为特定的输出信号，具有译码功能的电路称为译码器。"></a>基本概念：译码是编码的逆过程，将输人的二进制编码转换为特定的输出信号，具有译码功能的电路称为译码器。</h2><p>根据输人编码位数η和输出信号的个数m是否匹配，可以将译码器分为完全译码器和部分译码器。<br>当m=2^n时，该译码器为完全译码器或二进制译码器；<br>当m&lt;2^n时，该译码器为部分译码器或非二进制译码器。</p><h1 id="二进制译码器"><a href="#二进制译码器" class="headerlink" title="二进制译码器"></a>二进制译码器</h1><p>设计具有选通功能的2-4线译码器，<br>当ST’=0时，译码器不工作，当ST’= 1时，译码器可以对输入二进制代码进行译码，2一4线译码器真值表如表所示。</p><h1 id="逻辑电路-逻辑表达式"><a href="#逻辑电路-逻辑表达式" class="headerlink" title="逻辑电路/逻辑表达式"></a>逻辑电路/逻辑表达式</h1><h1 id="74LS138"><a href="#74LS138" class="headerlink" title="74LS138"></a>74LS138</h1><h2 id="逻辑电路-真值表"><a href="#逻辑电路-真值表" class="headerlink" title="逻辑电路/真值表"></a>逻辑电路/真值表</h2><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h1 id="案例：138译码器集成芯片"><a href="#案例：138译码器集成芯片" class="headerlink" title="案例：138译码器集成芯片"></a>案例：138译码器集成芯片</h1><p>74HC138 芯片</p><h2 id="简介-：74HC138D-是一种三通道输入、-八通道输出译码器，-主要应用于消费类电子产品。"><a href="#简介-：74HC138D-是一种三通道输入、-八通道输出译码器，-主要应用于消费类电子产品。" class="headerlink" title="简介 ：74HC138D 是一种三通道输入、 八通道输出译码器， 主要应用于消费类电子产品。"></a>简介 ：74HC138D 是一种三通道输入、 八通道输出译码器， 主要应用于消费类电子产品。</h2><p>（1） 主要特性<br>    采用 CMOS 工艺<br>    低功耗<br>    工作电压： 3.0V-5.0V<br>    封装形式： SOP16<br>（2）原理图</p><p>（3）引脚功能定义</p><p>（4）真值表</p><p>（5）工作原理<br>从上面的管脚功能定义说明及真值表可以知道该芯片使用方法非常简单，<br>给E1、 E2 使能管脚低电平， E3 管脚为高电平， 至于哪个管脚输出有效电平（低电平),要看 A0， A1， A2 输入管脚的电平状态。<br>如果 A0， A1， A2 都为低电平， 则Y0 输出有效电平（低电平） ， 其他管脚均输出高电平。<br>如果 A0 为高电平， A1，A2 都为低电平， 则 Y1 输出有效电平（低电平） ， 其他管脚均输出高电平。<br>如果 E1、 E2 使能管脚任意一个为高电平或者 E3 为低电平， 不论输入是什么， 输出都为高电平。</p><p>（6）总结</p><h2 id="A0、-A1、-A2-输入就相当于-3-位-2-进制数，-A0-是低位，-A1-是次高位，-A2-是高位。"><a href="#A0、-A1、-A2-输入就相当于-3-位-2-进制数，-A0-是低位，-A1-是次高位，-A2-是高位。" class="headerlink" title="A0、 A1、 A2 输入就相当于 3 位 2 进制数， A0 是低位， A1 是次高位， A2 是高位。"></a>A0、 A1、 A2 输入就相当于 3 位 2 进制数， A0 是低位， A1 是次高位， A2 是高位。</h2><h2 id="而-Y0-Y7-具体哪一个输出有效电平-就看输入二进制对应的十进制数值。"><a href="#而-Y0-Y7-具体哪一个输出有效电平-就看输入二进制对应的十进制数值。" class="headerlink" title="而 Y0-Y7 具体哪一个输出有效电平,就看输入二进制对应的十进制数值。"></a>而 Y0-Y7 具体哪一个输出有效电平,就看输入二进制对应的十进制数值。</h2><p>例如：<br>  输入是 101（A2， A1， A0） ， 其对应的十进制数是 5， 所以 Y5 输出有效电平（低电平）。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文档：译码译码器.note<br>链接：<a href="http://note.youdao.com/noteshare?id=c912a23fa24abb5fd7698141dff78948&amp;sub=5B487A72AA374F1EA9B49B262A39BC06" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=c912a23fa24abb5fd7698141dff78948&amp;sub=5B487A72AA374F1EA9B49B262A39BC06</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>转载博客【飞桨PaddlePaddle学习心得】day5大作业详细指南</title>
      <link href="/2020/05/08/zhuan-zai-bo-ke-fei-jiang-paddlepaddle-xue-xi-xin-de-day5-da-zuo-ye-xiang-xi-zhi-nan/"/>
      <url>/2020/05/08/zhuan-zai-bo-ke-fei-jiang-paddlepaddle-xue-xi-xin-de-day5-da-zuo-ye-xiang-xi-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="转载博客：【飞桨PaddlePaddle学习心得】day5大作业详细指南【源码-教程精讲】"><a href="#转载博客：【飞桨PaddlePaddle学习心得】day5大作业详细指南【源码-教程精讲】" class="headerlink" title="转载博客：【飞桨PaddlePaddle学习心得】day5大作业详细指南【源码+教程精讲】"></a>转载博客：【飞桨PaddlePaddle学习心得】day5大作业详细指南【源码+教程精讲】</h1><a id="more"></a><h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>大作业不难，但是涉及到的技术稍微多一点，请对于各个函数耐心查看代码和注释，认真食用。（因为用心，所有动人）</p><h2 id="作业内容-amp-要求"><a href="#作业内容-amp-要求" class="headerlink" title="作业内容&amp;要求"></a>作业内容&amp;要求</h2><li><p>第一步：爱奇艺《青春有你2》评论数据爬取(参考链接：https://www.iqiyi.com/v_19ryfkiv8w.html#curid=15068699100_9f9bab7e0d1e30c494622af777f4ba39)<br>爬取任意一期正片视频下评论<br>评论条数不少于1000条</p></li><li><p>第二步：词频统计并可视化展示<br>数据预处理：清理清洗评论中特殊字符（如：@#￥%、emoji表情符）,清洗后结果存储为txt文档<br>中文分词：添加新增词（如：青你、奥利给、冲鸭），去除停用词（如：哦、因此、不然、也好、但是）</p></li><li><p>第三步：统计top10高频词并展示绘制词云<br>统计top10高频词<br>可视化展示高频词<br>根据词频生成词云<br>可选项-添加背景图片，根据背景图片轮廓生成词云</p></li><li>第四步：结合PaddleHub，对评论进行内容审核</li><h2 id="需要的配置和准备"><a href="#需要的配置和准备" class="headerlink" title="需要的配置和准备"></a>需要的配置和准备</h2><ul><li>中文分词需要jieba</li><li>词云绘制需要wordclou</li><li>可视化展示中需要的中文字体              (./source/simhei.ttf)</li><li>网上公开资源中找一个中文停用词表 （./source/stopWords.txt)</li><li>根据分词结果自己制作新增词表            (./source/addWords.txt)</li><li>准备一张词云背景图（附加项，不做要求，可用hub抠图实现）(./source/bg.jpg)图片尽量使用白色背景或者透明背景</li><li>paddlehub配置</li></ul><p>本次的所有资源文件和生成的文件都会放到当前路径的source包下面。<br><br>在开始之前再次将matplotlib的显示中文的坑整理一下：</p><pre class=" language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>确保系统的<span class="token punctuation">.</span>font文件下面有中文字体（这里假设中文字体就是simhei<span class="token punctuation">.</span>ttf<span class="token punctuation">)</span>如果不懂可以忽略这一条，直接跳到<span class="token number">2</span>。    <span class="token comment" spellcheck="true"># Linux系统默认字体文件路径</span>    !ls <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>fonts<span class="token operator">/</span>    <span class="token comment" spellcheck="true">#查看系统可用的ttf格式中文字体</span>    !fc<span class="token operator">-</span>list <span class="token punctuation">:</span>lang<span class="token operator">=</span>zh <span class="token operator">|</span> grep <span class="token string">".ttf"</span><span class="token number">2</span><span class="token punctuation">.</span>要想matplotlib显示中文需要做到两点    <span class="token number">2.1</span>系统的font里面有simhei<span class="token punctuation">.</span>ttf    <span class="token number">2.</span>2matpltlib的mpl<span class="token operator">-</span>data<span class="token operator">/</span>fonts<span class="token operator">/</span>ttf<span class="token operator">/</span>下面也需要有这个字体    第一点不多说，对于第二点，可以使用如下命令    cp <span class="token punctuation">.</span><span class="token operator">/</span>resource<span class="token operator">/</span>simhei<span class="token punctuation">.</span>ttf <span class="token operator">/</span>opt<span class="token operator">/</span>conda<span class="token operator">/</span>envs<span class="token operator">/</span>python35<span class="token operator">-</span>paddle120<span class="token operator">-</span>env<span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token number">.7</span><span class="token operator">/</span>site<span class="token operator">-</span>packages<span class="token operator">/</span>matplotlib<span class="token operator">/</span>mpl<span class="token operator">-</span>data<span class="token operator">/</span>fonts<span class="token operator">/</span>ttf<span class="token operator">/</span>    然后只要在调用matplotlib的时候 设置一下字体就行了，使用如下命令     <span class="token comment" spellcheck="true"># 设置显示中文</span>    matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 解决负号'-'显示为方块的问题</span>    matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><h2 id="findfont-Font-family-‘sans-serif’-not-found-Falling-back-to-Bitstream-Vera-Sans"><a href="#findfont-Font-family-‘sans-serif’-not-found-Falling-back-to-Bitstream-Vera-Sans" class="headerlink" title="findfont: Font family [‘sans-serif’] not found. Falling back to Bitstream Vera Sans"></a>findfont: Font family [‘sans-serif’] not found. Falling back to Bitstream Vera Sans</h2><p>可能经过上面的设置后还是会出现这样的错误。解决方法如下：<br><br>在mac系统下面：<br><br>删除系统根目录下面的matplotlib的隐藏文件（里面的缓存文件）即可<br><br><code>rm -r ~/.matplotlib</code><br><br>在windows系统下面：<br><br>删除系统根目录下的.cache/matplotlib目录<br><br><code>rm -r .cache/matplotlib</code><br><br>在aistudio平台：<br><br>同样删除.cache/matplotlib目录就行了。</p><h3 id="如果经过上诉步骤还不行的话，可以重启服务器或者电脑。"><a href="#如果经过上诉步骤还不行的话，可以重启服务器或者电脑。" class="headerlink" title="如果经过上诉步骤还不行的话，可以重启服务器或者电脑。"></a>如果经过上诉步骤还不行的话，可以重启服务器或者电脑。</h3><h3 id="经过上面的准备，下面将正式进去整体，请打开你的pycharm-sublime-text也是可以的哟嘻嘻"><a href="#经过上面的准备，下面将正式进去整体，请打开你的pycharm-sublime-text也是可以的哟嘻嘻" class="headerlink" title="经过上面的准备，下面将正式进去整体，请打开你的pycharm(sublime text也是可以的哟嘻嘻)"></a>经过上面的准备，下面将正式进去整体，请打开你的pycharm(sublime text也是可以的哟嘻嘻)</h3><h2 id="导入需要用到的python包"><a href="#导入需要用到的python包" class="headerlink" title="导入需要用到的python包"></a>导入需要用到的python包</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> re <span class="token comment" spellcheck="true">#正则匹配</span><span class="token keyword">import</span> time <span class="token comment" spellcheck="true">#时间处理模块</span><span class="token keyword">import</span> jieba <span class="token comment" spellcheck="true">#中文分词</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>font_manager <span class="token keyword">as</span> font_manager<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud  <span class="token comment" spellcheck="true">#绘制词云模块</span><span class="token keyword">import</span> paddlehub <span class="token keyword">as</span> hub<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</code></pre><h2 id="一、评论爬取"><a href="#一、评论爬取" class="headerlink" title="一、评论爬取"></a>一、评论爬取</h2><p>这次的评论爬去其实就是一个对评论接口的调用。唯一的难度就在于如何找到接口的地址。<br><br>方法如下：</p><ol><li>先根据前面的<a href="https://www.iqiyi.com/v_19ryfkiv8w.html#curid=15068699100_9f9bab7e0d1e30c494622af777f4ba39" target="_blank" rel="noopener">参考链接</a>，打开爱奇艺青春2的视频页面。<li>下滑页面找到**全部评论**模块，如下图的地方<br><img src="https://img-blog.csdnimg.cn/20200429211241556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnlpeXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>然后按键盘的F12或者鼠标右键检查打开控制台，找到Network选项，并选中下面的JS<br><img src="https://img-blog.csdnimg.cn/20200429211654135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnlpeXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>等待页面加载一段时间（半分钟一分钟吧）等到目前页面的资源都加载完成后，将页面拉去到最下面的查看更多评论地方。此时现将控制台中的clear点击一下，因为里面加载的资源很多，我们先清空一下里面的所有内容。<br><img src="https://img-blog.csdnimg.cn/20200429211804529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnlpeXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">5. 然后“查看更多评论”，可以发现在控制台出现了一个名为get_comments.action的js请求。我们只要打开这个请求就可以看到评论的接口url。<br><img src="https://img-blog.csdnimg.cn/20200429211025323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnlpeXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></li></ol><h3 id="接口参数分析"><a href="#接口参数分析" class="headerlink" title="接口参数分析"></a>接口参数分析</h3><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># url = 'https://sns-comment.iqiyi.com/v3/comment/get_comments.action?' \</span>    <span class="token comment" spellcheck="true">#       'agent_type=118' \</span>    <span class="token comment" spellcheck="true">#       '&amp;amp;agent_version=9.11.5' \</span>    <span class="token comment" spellcheck="true">#       '&amp;amp;business_type=17' \</span>    <span class="token comment" spellcheck="true">#       '&amp;amp;content_id=15068699100' \</span>    <span class="token comment" spellcheck="true">#       '&amp;amp;hot_size=10' \</span>    <span class="token comment" spellcheck="true">#       '&amp;amp;last_id=' \ 根据last_id来确定这一页应该从哪一个评论开始拉去</span>    <span class="token comment" spellcheck="true">#       '&amp;amp;page=' \</span>    <span class="token comment" spellcheck="true">#       '&amp;amp;page_size=10' \一次拉去的评论有多少条，最多不超过40条</span>    <span class="token comment" spellcheck="true">#       '&amp;amp;types=hot,time' \</span>    <span class="token comment" spellcheck="true">#       '&amp;amp;callback=jsonp_1587883768795_67783'</span></code></pre><p>Function1:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getComment</span><span class="token punctuation">(</span>lastId<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    请求爱奇艺评论接口，返回response信息    参数  lastId: 前10条评论的最后一条的用户的id    :return: 字典格式的response信息    '''</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">'http://sns-comment.iqiyi.com/v3/comment/get_comments.action?'</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'types'</span><span class="token punctuation">:</span> <span class="token string">'time'</span><span class="token punctuation">,</span>        <span class="token string">'business_type'</span><span class="token punctuation">:</span> <span class="token string">'17'</span><span class="token punctuation">,</span>        <span class="token string">'agent_type'</span><span class="token punctuation">:</span> <span class="token string">'118'</span><span class="token punctuation">,</span>        <span class="token string">'agent_version'</span><span class="token punctuation">:</span> <span class="token string">'9.11.5'</span><span class="token punctuation">,</span>        <span class="token string">'content_id'</span><span class="token punctuation">:</span> <span class="token string">'15068699100'</span><span class="token punctuation">,</span>        <span class="token string">'page_size'</span> <span class="token punctuation">:</span> <span class="token string">'10'</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> lastId <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#判断lastId是否为空，如果不为空就在url中拼接上lastId的值</span>        params<span class="token punctuation">[</span><span class="token string">"last_id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> lastId    <span class="token keyword">for</span> item <span class="token keyword">in</span> params<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#将params里面的值全部拼接到url中</span>        url <span class="token operator">=</span> url <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> params<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&amp;amp;'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#根据前面拼接的url使用python的request模块爬去评论</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#评论返回的是json类型的字符串，这里将其使用json.loads解析为python的字典返回</span>        <span class="token keyword">return</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>Function2:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">saveCommentToFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#是出货lastId为空，以为第一个10条数据不需要lastId</span>    lastId <span class="token operator">=</span> <span class="token string">''</span>    response <span class="token operator">=</span> getComment<span class="token punctuation">(</span>lastId<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用function1的函数，获取到前10条的评论</span>    <span class="token comment" spellcheck="true">#将获取的评论中的comments里面的内容提取出来，comments是一个列表，长度为10，也就是我们10条评论的所有内容</span>    comment_list <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'comments'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#然后开始获取第一次爬去的10条评论的最后一个用户的id，然后根据lastId去爬取新的10条评论</span>    lastId <span class="token operator">=</span> comment_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>comment_list<span class="token punctuation">)</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token number">2000</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#总共预计爬去2000条评论</span>        response <span class="token operator">=</span> getComment<span class="token punctuation">(</span>lastId<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            comments <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'comments'</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> comments<span class="token punctuation">:</span>                comment_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            lastId <span class="token operator">=</span> comment_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>comment_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将包含2000条评论数据的数据写入到./resource/day5.json文件中</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./resource/day5.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>         json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>comment_list<span class="token punctuation">,</span> f<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>comment_list<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span></code></pre><p>通过调用saveCommentToFile函数，即可实现第一步的爬去爱奇艺青春2正片下的2000条评论。把day5.json打开可以发现里面的数据格式如下图所示：<br><br><img src="https://img-blog.csdnimg.cn/20200429221214776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnlpeXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二、统计词频并可视化展示"><a href="#二、统计词频并可视化展示" class="headerlink" title="二、统计词频并可视化展示"></a>二、统计词频并可视化展示</h2><p>在这个环节我们需要将前面爬去的每一条评论先使用jieba进行分词，然后再进行词频的统计。要实现这个功能需要进过以下4步骤：</p><ol><li>先对每条评论使用正则表达式去除特殊字符，以免影响后面的分词效果</li><li>给jieba添加新增词表（./source/addWord.txt）（主要包括青春109位选手的姓名和一些心得网络词汇）,并使用jieba.cut()对每条评论进行分词</li><li>对经过2分词后的每个评论词汇根据停用词表删除常用停用词。(./source/stopWords.txt)（停用词表博主是在github随便找的一个停用词，建议自己github搜索以下就能找到。也可以下载使用博主提供的）</li><li>将经过上诉处理后的短语写入到文档（./source/day5.txt)</li></ol><p>Function1</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">clear_special_char</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    正则处理特殊字符    参数 s:原文本    return s: 去除特殊字符后的文本    '''</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"&amp;lt;/?(.+?)&amp;gt;|&amp;amp;nbsp;|\t|\r"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"\*"</span><span class="token punctuation">,</span><span class="token string">"\\*"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"[^\u4e00-\u9fa5^a-z^A-Z^0-9]"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"[\001\002\003\004\005\006\007\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a]+"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"[a-zA-Z]"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"^d+(\.\d+)?$"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>    <span class="token keyword">return</span> s</code></pre><p>Function2:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">stopwordslist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将停用词表中的所有词汇读入到内存中，即使放入到一个list变量中存储以备使用    参数 file_path:停用词文本路径    return：停用词list    '''</span>    file_path <span class="token operator">=</span> <span class="token string">'./source/stopWords.txt'</span>    stopwords_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            stopwords_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token keyword">return</span> stopwords_list</code></pre><p>Function3</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fenci</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    利用jieba进行分词 并删除停用词  一次只能处理一条评论    参数 text:需要分词的句子    return：分词结果 list    '''</span>    jieba<span class="token punctuation">.</span>load_userdict<span class="token punctuation">(</span><span class="token string">'./source/addWords.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#加载新增词到jieba</span>    seg_list <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>text<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    liststr <span class="token operator">=</span> <span class="token string">"/ "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>seg_list<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将单词使用‘/’链接起来，以便后面再次分开</span>    mywordlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    stopwords_list <span class="token operator">=</span> stopwordslist<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#调用funciton1 获取内存中的通用词list</span>    <span class="token comment" spellcheck="true">#删除停止词</span>    <span class="token keyword">for</span> myword <span class="token keyword">in</span> liststr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>myword<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token keyword">in</span> stopwords_list<span class="token punctuation">)</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>myword<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">1</span><span class="token punctuation">:</span>            mywordlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>myword<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> mywordlist</code></pre><p>Function4</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">writeToTxt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    遍历一中爬取保存的json数据中的所有评论，并逐个将每一条评论进行分词操作    :return:     '''</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./source/day5.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>        json_array <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    content_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> contents <span class="token keyword">in</span> json_array<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            text <span class="token operator">=</span> contents<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#移除特殊字符</span>            text <span class="token operator">=</span> clear_special_char<span class="token punctuation">(</span>text<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#在分词的函数中 包含了对分文的分词和删除停止词操作</span>            text_fenci_list <span class="token operator">=</span> fenci<span class="token punctuation">(</span>text<span class="token punctuation">)</span>            <span class="token keyword">for</span> text_fenci <span class="token keyword">in</span> text_fenci_list<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#将清洗好并分好词的list遍历，将其中的每个短语添加到content_list里面</span>                content_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>text_fenci<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>content_list<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./source/day5.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> content_list<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>通过调用writeToTxt函数就可以实现将一中的评论数据进行数据清理后进行分词了。</p><h2 id="三、统计top10高频词并展示绘制词云"><a href="#三、统计top10高频词并展示绘制词云" class="headerlink" title="三、统计top10高频词并展示绘制词云"></a>三、统计top10高频词并展示绘制词云</h2><ol><li>现将第二步中保存的day5.txt中的所有词汇读取到一个list中</li><li>使用pandas中的value_counts函数轻松实现词频统计</li><li>将top10的单词和词频绘制到直方图中</li><li>将根据2得到的词频生成词云图</li></ol><p>Function1</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">countwordsfre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    统计day5.txt中的词频    return：每个单词和对于的词频 返回的是一个Series数据结构 类似字典可以通过键值访问    '''</span>    fenciwordlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./source/day5.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                fenciwordlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>fenciwordlist<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用pandas的value_counts函数统计词频</span></code></pre><p>Function2</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">drawcounts</span><span class="token punctuation">(</span>counts<span class="token punctuation">,</span>topN<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    绘制词频统计表 top1o    参数 counts: 词频统计结果 num:绘制topN    return：none    '''</span>    x <span class="token operator">=</span> list<span class="token punctuation">(</span>counts<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#得到单词列表</span>    x<span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span>topN<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#截取前10个单词</span>    y <span class="token operator">=</span> counts<span class="token punctuation">.</span>values<span class="token comment" spellcheck="true">#得到词频列表</span>    y <span class="token operator">=</span> y<span class="token punctuation">[</span><span class="token punctuation">:</span>topN<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#得到前10的词频列表</span>    <span class="token comment" spellcheck="true"># 设置显示中文</span>    matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 解决负号'-'显示为方块的问题</span>    matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#根据x和y画条形图</span>    plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> tick_label<span class="token operator">=</span>x<span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'#9999ff'</span><span class="token punctuation">,</span> edgecolor<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 这里是调节横坐标的倾斜度，rotation是度数，以及设置刻度字体大小</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''爱奇艺《青春有你2》评论Top10词频'''</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'./source/bar_result.jpg'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span></code></pre><p>调用drawcounts函数即可生成top10词频的直方图<br><br>Top10词频直方图结果战术：<br><br><img src="https://img-blog.csdnimg.cn/20200429233318657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnlpeXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><br>Function3<br><br>注意词云的背景图可能选择纯色背景</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">drawcloud</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span>img_path<span class="token operator">=</span><span class="token string">'./source/bg.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    根据词频绘制词云图    参数 words:统计出的词频结果    return：none    '''</span>    y <span class="token operator">=</span> words<span class="token punctuation">.</span>values    text <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> y<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#get color   下面的两行代码是根据背景图片的颜色来在plt中显示图片中文字的颜色</span>    alice_coloring <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span><span class="token punctuation">)</span>    image_colors <span class="token operator">=</span> ImageColorGenerator<span class="token punctuation">(</span>alice_coloring<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get mask</span>    my_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># set wordcloud</span>    my_wordcloud <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>        font_path<span class="token operator">=</span><span class="token string">'./source/simhei.ttf'</span><span class="token punctuation">,</span>        background_color<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">,</span>        max_words<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>        width<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">,</span>        height<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">,</span>        mask<span class="token operator">=</span>my_mask<span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># words must be dict</span>    my_wordcloud<span class="token punctuation">.</span>generate_from_frequencies<span class="token punctuation">(</span>words<span class="token punctuation">)</span>    my_wordcloud<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'./source/parrot_result.jpg'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 显示图像</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>my_wordcloud<span class="token punctuation">.</span>recolor<span class="token punctuation">(</span>color_func<span class="token operator">=</span>image_colors<span class="token punctuation">)</span><span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># interpolation='bilinear' 表示插值方法为双线性插值</span>    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 关掉图像的坐标</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>调用drawcloud函数即可生成词云图<br><br>词云效果对比图：<br><br><img src="https://img-blog.csdnimg.cn/20200430004559529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnlpeXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="四-结合PaddleHub，对评论进行内容审核"><a href="#四-结合PaddleHub，对评论进行内容审核" class="headerlink" title="四 结合PaddleHub，对评论进行内容审核"></a>四 结合PaddleHub，对评论进行内容审核</h2><p>主要是使用paddlehub预训练的senta_bilstm模型对句子进行情感分析，将其中是积极语言的置信度大于0.5的评论输出。其中唯一要注意的就是paddlehub模型对于要传入的数据必须是一个字典，字典的key为text，value为一个list。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">text_detection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    使用hub对评论进行内容分析    result：分析结果    '''</span>    <span class="token comment" spellcheck="true">#使用paddlehub加载senta_bilstm模型</span>    senta <span class="token operator">=</span> hub<span class="token punctuation">.</span>Module<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'senta_bilstm'</span><span class="token punctuation">,</span> version<span class="token operator">=</span><span class="token string">'1.0.0'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从1中得到的day5.json中获取所有评论的list</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./source/day5.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>        json_array <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    content_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> contents <span class="token keyword">in</span> json_array<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            text <span class="token operator">=</span> contents<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#移除特殊字符</span>            text <span class="token operator">=</span> clear_special_char<span class="token punctuation">(</span>text<span class="token punctuation">)</span>            content_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">#组建符合要求的data字典数据，然后遍历评论列表，对每条评论单独</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> content_list<span class="token punctuation">:</span>        text_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        text_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        input_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"text"</span><span class="token punctuation">:</span> text_list<span class="token punctuation">}</span>        res <span class="token operator">=</span> senta<span class="token punctuation">.</span>sentiment_classify<span class="token punctuation">(</span>data<span class="token operator">=</span>input_dict<span class="token punctuation">)</span>        <span class="token keyword">if</span> float<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'positive_probs'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0.5</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'positive_probs'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>最后调用函数即可实现对所有评论的情感分析，并输出其中的积极评论与评分。<br><br><img src="https://img-blog.csdnimg.cn/20200430005809586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpbnlpeXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="转载博客地址https-blog-csdn-net-yinyiyu-article-details-105822122"><a href="#转载博客地址https-blog-csdn-net-yinyiyu-article-details-105822122" class="headerlink" title="转载博客地址https://blog.csdn.net/yinyiyu/article/details/105822122"></a>转载博客地址<a href="https://blog.csdn.net/yinyiyu/article/details/105822122" target="_blank" rel="noopener">https://blog.csdn.net/yinyiyu/article/details/105822122</a></h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 百度AIstudio </category>
          
          <category> paddlepaddle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 百度AIstudio </tag>
            
            <tag> 百度飞桨 paddlepaddle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值比较器</title>
      <link href="/2020/05/08/shu-zhi-bi-jiao-qi/"/>
      <url>/2020/05/08/shu-zhi-bi-jiao-qi/</url>
      
        <content type="html"><![CDATA[<p>数值比较器</p><a id="more"></a><h1 id="比较大小-A-B"><a href="#比较大小-A-B" class="headerlink" title="比较大小 A B"></a>比较大小 A B</h1><h2 id="结果可能性"><a href="#结果可能性" class="headerlink" title="结果可能性"></a>结果可能性</h2><pre><code>1. A &gt; B2. A = B3. A &lt; B</code></pre><h1 id="数值比较器"><a href="#数值比较器" class="headerlink" title="数值比较器"></a>数值比较器</h1><h2 id="概念-：数值比较器是对位数相同的两个无符号二进制数进行数值比较，并判断大小关系的运算电路。"><a href="#概念-：数值比较器是对位数相同的两个无符号二进制数进行数值比较，并判断大小关系的运算电路。" class="headerlink" title="概念 ：数值比较器是对位数相同的两个无符号二进制数进行数值比较，并判断大小关系的运算电路。"></a>概念 ：数值比较器是对位数相同的两个无符号二进制数进行数值比较，并判断大小关系的运算电路。</h2><h2 id="1位数值比较器"><a href="#1位数值比较器" class="headerlink" title="1位数值比较器"></a>1位数值比较器</h2><h2 id="1位数值比较器可以对两个1位二进制数A、B的大小进行比较，比较结果"><a href="#1位数值比较器可以对两个1位二进制数A、B的大小进行比较，比较结果" class="headerlink" title="1位数值比较器可以对两个1位二进制数A、B的大小进行比较，比较结果"></a>1位数值比较器可以对两个1位二进制数A、B的大小进行比较，比较结果</h2><p>有三种情况：A&gt;B、A&lt;B和A=B。<br>当A&gt;B时，输出FA&gt;B=1，其余输出为0； F=AB’ （那个大那个就是1）<br>当A=B时，输出FA-B=1，其余输出为0； F=A’B’+AB<br>当A&lt;B时，输出FA&lt;B=1，其余输出为0。 F=A’B</p><h1 id="多位数值比较器"><a href="#多位数值比较器" class="headerlink" title="多位数值比较器"></a>多位数值比较器</h1><h2 id="比较规则"><a href="#比较规则" class="headerlink" title="比较规则"></a>比较规则</h2><ol><li>对两个n位二进制数进行比较，首先从最高位开始比较，最高位数大的数值大，最高位数小的数值小；</li><li>最高位数相等时，比较次高位，数的大小由次高位数大小决定；</li><li>次高位相等，再比较下–位，直至最低位比较结束。</li></ol><h1 id="74LS85-四位数值比较器"><a href="#74LS85-四位数值比较器" class="headerlink" title="74LS85 四位数值比较器"></a>74LS85 四位数值比较器</h1><h2 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h2><h2 id="特殊：作为级联扩展时，低位片的级联输入端IA-gt-B、IA-lt-B接0，IA-B接1；"><a href="#特殊：作为级联扩展时，低位片的级联输入端IA-gt-B、IA-lt-B接0，IA-B接1；" class="headerlink" title="特殊：作为级联扩展时，低位片的级联输入端IA&gt;B、IA&lt;B接0，IA=B接1；"></a>特殊：作为级联扩展时，低位片的级联输入端IA&gt;B、IA&lt;B接0，IA=B接1；</h2><h1 id="级联扩展-（8位数值比较器）"><a href="#级联扩展-（8位数值比较器）" class="headerlink" title="级联扩展 （8位数值比较器）"></a>级联扩展 （8位数值比较器）</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文档：数值比较器.note<br>链接：<a href="http://note.youdao.com/noteshare?id=6b03a402b8147793621d7ff4f7c9da2e&amp;sub=A563A81DE9C04DAC894AE8E2A8252134" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=6b03a402b8147793621d7ff4f7c9da2e&amp;sub=A563A81DE9C04DAC894AE8E2A8252134</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据分配器</title>
      <link href="/2020/05/08/shu-ju-fen-pei-qi/"/>
      <url>/2020/05/08/shu-ju-fen-pei-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="数据分配器"><a href="#数据分配器" class="headerlink" title="数据分配器"></a>数据分配器</h1><a id="more"></a><p>数据分配器将-个输人数据传送至若千个输出端的数字逻辑器件，数据分配到哪个输出端是由地址选择线决定的。<br>通常数据分配器有1个数据输入端，n个地址选择端和2^n个输出端，称为1-2^n数据分配器。</p><h1 id="1-4路数据分配器"><a href="#1-4路数据分配器" class="headerlink" title="1-4路数据分配器"></a>1-4路数据分配器</h1><p>1-4路数据分配器有1个数据输入端D，A1,A0为两个地址选择端，输出端用Y3,Y2,Y1,Y0表示。<br>当A1A0=00时，选择Y0,Y0=D；<br>当A1A0=01时, 选择Y1,Y1=D；<br>当A1A0=10时，选择Y2,Y2=D；<br>当A1A0=11时，选择Y3,Y3=D。</p><h1 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h1><h1 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h1><h1 id="逻辑电路"><a href="#逻辑电路" class="headerlink" title="逻辑电路"></a>逻辑电路</h1><h1 id="集成数据分配器"><a href="#集成数据分配器" class="headerlink" title="集成数据分配器"></a>集成数据分配器</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文档：数据分配器.note<br>链接：<a href="http://note.youdao.com/noteshare?id=e465b8f35d7b72b320afdd774dca3b9b&amp;sub=2C4BDE6C61C54094B4C0D779A1B044C7" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=e465b8f35d7b72b320afdd774dca3b9b&amp;sub=2C4BDE6C61C54094B4C0D779A1B044C7</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据选择器</title>
      <link href="/2020/05/08/shu-ju-xuan-ze-qi/"/>
      <url>/2020/05/08/shu-ju-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="数据选择器"><a href="#数据选择器" class="headerlink" title="数据选择器"></a>数据选择器</h1><a id="more"></a><h2 id="基本概念：-数据选择器是从多路输入数据中选择一路输出的数字逻辑器件，是一种多输人、单输出的组合逻辑电路。"><a href="#基本概念：-数据选择器是从多路输入数据中选择一路输出的数字逻辑器件，是一种多输人、单输出的组合逻辑电路。" class="headerlink" title="基本概念： 数据选择器是从多路输入数据中选择一路输出的数字逻辑器件，是一种多输人、单输出的组合逻辑电路。"></a>基本概念： 数据选择器是从多路输入数据中选择一路输出的数字逻辑器件，是一种多输人、单输出的组合逻辑电路。</h2><p>利用它可以完成将输入并行数据转换为串行数据的功能。常见数据选择器包括4选1数据选择器、8选1数据选择器、16选1数据选择器等。</p><h1 id="4选1数据选择器"><a href="#4选1数据选择器" class="headerlink" title="4选1数据选择器"></a>4选1数据选择器</h1><p>设计具有选通功能的4选1数据选择器，当ST’= 1时，数据选择器不工作，(SR低电平有效)<br>当ST’=0时，数据选择器在地址线A1A0的作用下，对输人端数据D0~D3进行选择，4选1数据选择器真值表如表所示。</p><h1 id="74LS153-数据选择器"><a href="#74LS153-数据选择器" class="headerlink" title="74LS153 数据选择器"></a>74LS153 数据选择器</h1><p> #8选1 数据选择器</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文档：数据选择器.note<br>链接：<a href="http://note.youdao.com/noteshare?id=9c2c7a6cdef76f84ee0060138587d893&amp;sub=58024A76CD304EB594620AC2173FD1B3" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=9c2c7a6cdef76f84ee0060138587d893&amp;sub=58024A76CD304EB594620AC2173FD1B3</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度AI Stduio 深度学习手势识别</title>
      <link href="/2020/05/08/bai-du-ai-stduio-shen-du-xue-xi-shou-shi-shi-bie/"/>
      <url>/2020/05/08/bai-du-ai-stduio-shen-du-xue-xi-shou-shi-shi-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="百度AI-深度学习-CV-训练营-手势识别"><a href="#百度AI-深度学习-CV-训练营-手势识别" class="headerlink" title="百度AI 深度学习 CV 训练营  手势识别"></a>百度AI 深度学习 CV 训练营  手势识别</h1><a id="more"></a><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>深度学习(DL, Deep Learning)是机器学习(ML, Machine Learning)领域中一个新的研究方向，它被引入机器学习使其更接近于最初的目标——人工智能(AI, Artificial Intelligence)。<br>深度学习是学习样本数据的内在规律和表示层次，这些学习过程中获得的信息对诸如文字，图像和声音等数据的解释有很大的帮助。它的最终目标是让机器能够像人一样具有分析学习能力，能够识别文字、图像和声音等数据。 深度学习是一个复杂的机器学习算法，在语音和图像识别方面取得的效果，远远超过先前相关技术。<br>深度学习在搜索技术，数据挖掘，机器学习，机器翻译，自然语言处理，多媒体学习，语音，推荐和个性化技术，以及其他相关领域都取得了很多成果。深度学习使机器模仿视听和思考等人类的活动，解决了很多复杂的模式识别难题，使得人工智能相关技术取得了很大进步。</p><h2 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h2><p>Paddlepadddle零基础深度学习7日入门-CV疫情特辑学习笔记<br><a href="https://blog.csdn.net/claychenlei/article/details/105271658" target="_blank" rel="noopener">https://blog.csdn.net/claychenlei/article/details/105271658</a></p><h5 id="我觉得这个这个总结的挺好的"><a href="#我觉得这个这个总结的挺好的" class="headerlink" title="我觉得这个这个总结的挺好的"></a>我觉得这个这个总结的挺好的</h5><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>一般采用百度AI官方的教程<br>我个人选择的是电脑本地开发</p><ol><li>安装Anaconda详细安装及使用教程（带图文）（非常详细）<br><a href="https://blog.csdn.net/ITLearnHall/article/details/81708148" target="_blank" rel="noopener">https://blog.csdn.net/ITLearnHall/article/details/81708148</a></li><li>安装python运行环境  Pycharm</li><li>安装paddlepaddle 教程非常详细<br><a href="https://www.paddlepaddle.org.cn/install/quick" target="_blank" rel="noopener">https://www.paddlepaddle.org.cn/install/quick</a><br><img src="https://img-blog.csdnimg.cn/20200411135229304.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200411135312290.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200411135621778.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> paddle<span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid<span class="token punctuation">.</span>layers <span class="token keyword">as</span> layers<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> cpu_count<span class="token keyword">from</span> PIL<span class="token punctuation">.</span>_imaging <span class="token keyword">import</span> display<span class="token keyword">from</span> paddle<span class="token punctuation">.</span>fluid<span class="token punctuation">.</span>dygraph <span class="token keyword">import</span> Pool2D<span class="token punctuation">,</span>Conv2D<span class="token keyword">from</span> paddle<span class="token punctuation">.</span>fluid<span class="token punctuation">.</span>dygraph <span class="token keyword">import</span> Linear<span class="token comment" spellcheck="true"># 生成图像列表</span>data_path <span class="token operator">=</span> <span class="token string">'data/Dataset'</span>character_folders <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>data_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(character_folders)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./train_data.list'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'./train_data.list'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./test_data.list'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'./test_data.list'</span><span class="token punctuation">)</span><span class="token keyword">for</span> character_folder <span class="token keyword">in</span> character_folders<span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./train_data.list'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_train<span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./test_data.list'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_test<span class="token punctuation">:</span>            <span class="token keyword">if</span> character_folder <span class="token operator">==</span> <span class="token string">'.DS_Store'</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            character_imgs <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> character_folder<span class="token punctuation">)</span><span class="token punctuation">)</span>            count <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> img <span class="token keyword">in</span> character_imgs<span class="token punctuation">:</span>                <span class="token keyword">if</span> img <span class="token operator">==</span> <span class="token string">'.DS_Store'</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">if</span> count <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    f_test<span class="token punctuation">.</span>write<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> character_folder<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> character_folder <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    f_train<span class="token punctuation">.</span>write<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> character_folder<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> character_folder <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'列表已生成'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#%%</span><span class="token comment" spellcheck="true"># 定义训练集和测试集的reader</span><span class="token keyword">def</span> <span class="token function">data_mapper</span><span class="token punctuation">(</span>sample<span class="token punctuation">)</span><span class="token punctuation">:</span>    img<span class="token punctuation">,</span> label <span class="token operator">=</span> sample    img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>    img <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#对图片做了转置，</span>    img <span class="token operator">=</span> img<span class="token operator">/</span><span class="token number">255.0</span>    <span class="token keyword">return</span> img<span class="token punctuation">,</span> label<span class="token comment" spellcheck="true">#定义数据读取器</span><span class="token keyword">def</span> <span class="token function">data_reader</span><span class="token punctuation">(</span>data_list_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>data_list_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>                img<span class="token punctuation">,</span> label <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>                <span class="token keyword">yield</span> img<span class="token punctuation">,</span> int<span class="token punctuation">(</span>label<span class="token punctuation">)</span>    <span class="token keyword">return</span> paddle<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>xmap_readers<span class="token punctuation">(</span>data_mapper<span class="token punctuation">,</span> reader<span class="token punctuation">,</span> cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#语法不懂</span><span class="token comment" spellcheck="true"># 用于训练的数据提供器</span>train_reader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>reader<span class="token operator">=</span>paddle<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>reader<span class="token operator">=</span>data_reader<span class="token punctuation">(</span><span class="token string">'./train_data.list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用于测试的数据提供器</span>test_reader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>reader<span class="token operator">=</span>data_reader<span class="token punctuation">(</span><span class="token string">'./test_data.list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义DNN网络</span><span class="token keyword">class</span> <span class="token class-name">MyDNN</span><span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyDNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden1 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden2 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden3 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden4 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出层</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>hidden1<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输入层</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>hidden2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>hidden3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span>shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>hidden4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#输出层</span>        <span class="token keyword">return</span> y<span class="token comment" spellcheck="true">#分段运行</span><span class="token comment" spellcheck="true">#%%</span><span class="token comment" spellcheck="true"># 用动态图进行训练</span><span class="token keyword">with</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>guard<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> MyDNN<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 模型实例化</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 训练模式</span>    opt <span class="token operator">=</span> fluid<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>SGDOptimizer<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span>                                       parameter_list<span class="token operator">=</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 优化器选用SGD随机梯度下降，学习率为0.001.</span><span class="token comment" spellcheck="true">#学习率和迭代次数优化，优化器可以选择</span>    epochs_num <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true"># 迭代次数</span>    <span class="token keyword">for</span> pass_num <span class="token keyword">in</span> range<span class="token punctuation">(</span>epochs_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_reader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            images <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>            labels <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int64'</span><span class="token punctuation">)</span>            labels <span class="token operator">=</span> labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print(images.shape)</span>            <span class="token comment" spellcheck="true">#将lable和image转化为变量对象，以便投入模型</span>            image <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>images<span class="token punctuation">)</span>            label <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>            predict <span class="token operator">=</span> model<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 预测，即训练</span>            <span class="token comment" spellcheck="true"># print(predict)</span>            loss <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>predict<span class="token punctuation">,</span> label<span class="token punctuation">)</span>            avg_loss <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取loss值</span>            acc <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>predict<span class="token punctuation">,</span> label<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算精度</span>            <span class="token keyword">if</span> batch_id <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> batch_id <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>                    <span class="token string">"train_pass:{},batch_id:{},train_loss:{},train_acc:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pass_num<span class="token punctuation">,</span> batch_id<span class="token punctuation">,</span> avg_loss<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                                  acc<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#打印训练集数据，不代表测试集数据</span>            avg_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#反向传播算法，帮助反向计算梯度</span>            opt<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>avg_loss<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#调用定义的优化器对象的minimize()方法进行参数更新</span>            model<span class="token punctuation">.</span>clear_gradients<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#每一轮参数更新完成后，调用clear_gradients()方法来重置梯度，以保证下一轮的正确性</span>    fluid<span class="token punctuation">.</span>save_dygraph<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'MyDNN'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 保存模型</span><span class="token comment" spellcheck="true">#%%</span><span class="token comment" spellcheck="true"># 模型校验</span><span class="token keyword">with</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>guard<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    accs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    model_dict<span class="token punctuation">,</span> _ <span class="token operator">=</span> fluid<span class="token punctuation">.</span>load_dygraph<span class="token punctuation">(</span><span class="token string">'MyDNN'</span><span class="token punctuation">)</span>    model <span class="token operator">=</span> MyDNN<span class="token punctuation">(</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>load_dict<span class="token punctuation">(</span>model_dict<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 加载模型参数</span>    model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 训练模式</span>    <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>test_reader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 测试集</span>        images <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        labels <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int64'</span><span class="token punctuation">)</span>        labels <span class="token operator">=</span> labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>        image <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        label <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>        predict <span class="token operator">=</span> model<span class="token punctuation">(</span>image<span class="token punctuation">)</span>        acc <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>predict<span class="token punctuation">,</span> label<span class="token punctuation">)</span>        accs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>acc<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        avg_acc <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>accs<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>avg_acc<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#测试集 准确率</span><span class="token comment" spellcheck="true">#%%</span><span class="token comment" spellcheck="true">#读取预测图像，进行预测</span><span class="token keyword">def</span> <span class="token function">load_image</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span>    img <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> img<span class="token operator">/</span><span class="token number">255.0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">return</span> img<span class="token comment" spellcheck="true">#构建预测动态图过程</span><span class="token keyword">with</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>guard<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    infer_path <span class="token operator">=</span> <span class="token string">'手势.JPG'</span>    model<span class="token operator">=</span>MyDNN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#模型实例化</span>    model_dict<span class="token punctuation">,</span>_<span class="token operator">=</span>fluid<span class="token punctuation">.</span>load_dygraph<span class="token punctuation">(</span><span class="token string">'MyDNN'</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>load_dict<span class="token punctuation">(</span>model_dict<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#加载模型参数</span>    model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#评估模式</span>    infer_img <span class="token operator">=</span> load_image<span class="token punctuation">(</span>infer_path<span class="token punctuation">)</span>    infer_img<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>infer_img<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>    infer_img<span class="token operator">=</span>infer_img<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span> <span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    infer_img <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>infer_img<span class="token punctuation">)</span>    result<span class="token operator">=</span>model<span class="token punctuation">(</span>infer_img<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>result<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'手势.JPG'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#根据数组绘制图像</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#显示图像</span><span class="token comment" spellcheck="true"># display(Image.open('手势.JPG'))</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>百度paddlepaddle官方开发文档<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/beginners_guide/index_cn.html" target="_blank" rel="noopener">https://www.paddlepaddle.org.cn/documentation/docs/zh/beginners_guide/index_cn.html</a></li><li>paddlepadddle零基础深度学习7日入门-CV疫情特辑学习笔记（三）DAY02 手势识别 <a href="https://blog.csdn.net/claychenlei/article/details/105271658" target="_blank" rel="noopener">https://blog.csdn.net/claychenlei/article/details/105271658</a></li><li>CSDN<a href="https://blog.csdn.net/weixin_43599390/article/details/105451481" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390/article/details/105451481</a></li><li>知乎<a href="https://zhuanlan.zhihu.com/p/128989891" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/128989891</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 手势识别 </category>
          
          <category> 百度AIstudio </category>
          
          <category> paddlepaddle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 百度智能云 </tag>
            
            <tag> 百度AIstudio </tag>
            
            <tag> 百度飞桨 paddlepaddle </tag>
            
            <tag> 手势识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体</title>
      <link href="/2020/05/08/jie-gou-ti/"/>
      <url>/2020/05/08/jie-gou-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言学习–结构体"><a href="#C语言学习–结构体" class="headerlink" title="C语言学习–结构体"></a>C语言学习–结构体</h1><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><a id="more"></a><h3 id="1-结构体"><a href="#1-结构体" class="headerlink" title="1. 结构体"></a>1. 结构体</h3><p>在C语言中，可以使用结构体（Struct）来存放一组不同类型的数据。结构体的定义形式为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> 结构体名<span class="token punctuation">{</span>    结构体所包含的变量或数组<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p> 结构体是一种集合，它里面包含了多个变量或数组，它们的类型可以相同，也可以不同，每个这样的变量或数组都称为结构体的成员（Member).<br>例如：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> stu<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">char</span> group<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所在学习小组</span>    <span class="token keyword">float</span> score<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成绩</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意:大括号后面的分号;不能少，这是一条完整的语句。</span> <span class="token comment" spellcheck="true">//stu 为结构体名，它包含了 5 个成员，分别是 name、num、age、group、score。</span><span class="token comment" spellcheck="true">//结构体成员的定义方式与变量和数组的定义方式相同，只是不能初始化。</span></code></pre><h3 id="2-结构体变量"><a href="#2-结构体变量" class="headerlink" title="2.结构体变量"></a>2.结构体变量</h3><p>结构体是一种数据类型，那么就可以用它来定义变量。例如：<br>1.定义结构体的同时定义结构体变量</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//格式：</span><span class="token keyword">struct</span> 结构体名<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义结构体内部变量</span><span class="token punctuation">}</span>结构体变量<span class="token number">1</span>，结构体变量<span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">struct</span> stu<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">char</span> group<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所在学习小组</span>    <span class="token keyword">float</span> score<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成绩</span><span class="token punctuation">}</span> stu1<span class="token punctuation">,</span> stu2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//stu1,stu2是结构体变量的名称</span></code></pre><p>2.先定义结构体，然后再定义结构体变量</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Student<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学生姓名</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//学生年龄</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Student stu1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这句话表示定义一个Student结构体类型的变量，变量名称是stu1;</span><span class="token comment" spellcheck="true">//stu1 因为是Student 类型，stu1可以存放学生的姓名、年龄</span><span class="token keyword">struct</span> Student stu2<span class="token punctuation">,</span>stu3<span class="token punctuation">,</span>stu4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以定义多个结构体变量 其中每个结构体变量都是可以存放学生的姓名、年龄</span></code></pre><p>3.使用匿名结构体定义结构体变量</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//格式</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义结构体内部变量</span><span class="token punctuation">}</span>结构体变量<span class="token number">1</span>，结构体变量<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//举例</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学生姓名</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//学生年龄</span><span class="token punctuation">}</span>stu1<span class="token punctuation">,</span>stu2<span class="token punctuation">;</span>注意：若要定义指向结构的指针则<span class="token keyword">struct</span> Student<span class="token operator">*</span> stu_ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不要忘了关键字struct</span></code></pre><h3 id="3-成员的获取和赋值"><a href="#3-成员的获取和赋值" class="headerlink" title="3. 成员的获取和赋值"></a>3. 成员的获取和赋值</h3><p>结构体和数组类似，也是一组数据的集合，整体使用没有太大的意义。数组使用下标[]获取单个元素，结构体使用点号.获取单个成员。获取结构体成员的一般格式为：      </p><pre class=" language-c"><code class="language-c">结构体变量名<span class="token punctuation">.</span>成员名<span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c">赋值<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span>一个一个赋值<span class="token punctuation">)</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//姓名</span>            <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//学号</span>            <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//年龄</span>            <span class="token keyword">char</span> group<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所在小组</span>            <span class="token keyword">float</span> score<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成绩</span>           <span class="token punctuation">}</span> stu1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给结构体成员赋值</span>    stu1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>    stu1<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    stu1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    stu1<span class="token punctuation">.</span>group <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    stu1<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">136.5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读取结构体成员的值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s的学号是%d，年龄是%d，在%c组，今年的成绩是%.1f！\n"</span><span class="token punctuation">,</span> stu1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> stu1<span class="token punctuation">.</span>num<span class="token punctuation">,</span> stu1<span class="token punctuation">.</span>age<span class="token punctuation">,</span> stu1<span class="token punctuation">.</span>group<span class="token punctuation">,</span> stu1<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>赋值<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span>一起赋值<span class="token punctuation">)</span><span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">char</span> group<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所在小组</span>    <span class="token keyword">float</span> score<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成绩</span><span class="token punctuation">}</span> stu1<span class="token punctuation">,</span> stu2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">136.5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol><li>不过整体赋值仅限于定义结构体变量的时候，在使用过程中只能对成员逐一赋值，这和数组的赋值非常类似。</li><li>需要注意的是，结构体是一种自定义的数据类型，是创建变量的模板，不占用内存空间；结构体变量才包含了实实在在的数据，需要内存空间来存储。</li></ol><h3 id="4-结构体数组"><a href="#4-结构体数组" class="headerlink" title="4.结构体数组"></a>4.结构体数组</h3><p>所谓结构体数组，是指数组中的每个元素都是一个结构体。在实际应用中，C语言结构体数组常被用来表示一个拥有相同数据结构的群体，比如一个班的学生、一个车间的职工等。</p><h4 id="结构体数组的定义："><a href="#结构体数组的定义：" class="headerlink" title="结构体数组的定义："></a>结构体数组的定义：</h4><ol><li><p>定义结构体数组和定义结构体变量的方式类似。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> stu<span class="token punctuation">{</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//姓名</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//学号</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//年龄</span> <span class="token keyword">char</span> group<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所在小组 </span> <span class="token keyword">float</span> score<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成绩</span><span class="token punctuation">}</span>class<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示5个学生，结构体里面包括学生的身份信息资料</span></code></pre></li><li><p>结构体数组在定义的同时也可以初始化。<br>struct stu{<br> char *name;  //姓名<br> int num;  //学号<br> int age;  //年龄<br> char group;  //所在小组<br> float score;  //成绩<br>}class[5] = {<br> {“Li ping”, 5, 18, ‘C’, 145.0},<br> {“Zhang ping”, 4, 19, ‘A’, 130.5},<br> {“He fang”, 1, 18, ‘A’, 148.5},<br> {“Cheng ling”, 2, 17, ‘F’, 139.0},<br> {“Wang ming”, 3, 17, ‘B’, 144.5}<br>};//里面一一对应//</p></li><li><p>当对数组中全部元素赋值时，也可不给出数组长度。<br>struct stu{<br> char *name;  //姓名<br> int num;  //学号<br> int age;  //年龄<br> char group;  //所在小组<br> float score;  //成绩<br>}class[] = {<br> {“Li ping”, 5, 18, ‘C’, 145.0},<br> {“Zhang ping”, 4, 19, ‘A’, 130.5},<br> {“He fang”, 1, 18, ‘A’, 148.5},<br> {“Cheng ling”, 2, 17, ‘F’, 139.0},<br> {“Wang ming”, 3, 17, ‘B’, 144.5}<br>};<br>```</p><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><ol><li>class[5]是数组索引下标是0-1-2-3-4，没有5。</li><li>class是结构体数组的名称。</li><li>引用结构体数组成员的方式 结构体数组名.成员名（与结构体变量引用成员相同）</li></ol></li><li><p>结构体数组的使用：<br>例如，获取 Wang ming 的成绩：<br>class[4].score;<br>修改 Li ping 的学习小组：<br>class[0].group = ‘B’;</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>C语言程序设计案例：计算全班学生的总成绩、平均成绩和以及 140 分以下的人数。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//姓名</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//学号</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//年龄</span> <span class="token keyword">char</span> group<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所在小组</span> <span class="token keyword">float</span> score<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成绩</span><span class="token punctuation">}</span>class<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token string">"Li ping"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">145.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Zhang ping"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">130.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"He fang"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">148.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Cheng ling"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token number">139.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Wang ming"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">144.5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义了5个学生结构体数组并初始化了数据</span><span class="token comment" spellcheck="true">//主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> num_140 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计数变量（是否超过140的人数）</span> <span class="token keyword">float</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总成绩</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     sum <span class="token operator">+</span><span class="token operator">=</span> class<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用结构体数组成员的成绩</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>class<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">&lt;</span> <span class="token number">140</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断条件</span>         <span class="token punctuation">{</span>             num_140<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum=%.2f\naverage=%.2f\nnum_140=%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> sum<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">,</span> num_140<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><p>运行结果<br>sum=707.50<br>average=141.50<br>num_140=2<br>——————————————————————————————————</p><pre><code>### C语言结构体指针 当一个指针变量指向结构体时，我们就称它为结构体指针。C语言结构体指针的定义形式一般为： #### struct 结构体名 *变量名;```c1.结构体指针的定义//结构体struct stu{    char *name;  //姓名    int num;  //学号    int age;  //年龄    char group;  //所在小组    float score;  //成绩} stu1 = { &quot;Tom&quot;, 12, 18, &#39;A&#39;, 136.5 };//结构体指针struct stu *pstu = &amp;stu1;2.也可以在定义结构体的同时定义结构体指针struct stu{    char *name;  //姓名    int num;  //学号    int age;  //年龄    char group;  //所在小组    float score;  //成绩} stu1 = { &quot;Tom&quot;, 12, 18, &#39;A&#39;, 136.5 }, *pstu = &amp;stu1;</code></pre><h3 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h3><p>1.结构体变量名和数组名不同，数组名在表达式中会被转换为数组指针，而结构体变量名不会，无论在任何表达式中它表示的都是整个集合本身，要想取得结构体变量的地址，必须在前面加&amp;，所以给 pstu 赋值只能写作：<br>struct stu *pstu = &stu1;<br>//不能写成下面的形式<br>struct stu *pstu = stu1;（X）</p><p>2.还应该注意，结构体和结构体变量是两个不同的概念：结构体是一种数据类型，是一种创建变量的模板，编译器不会为它分配内存空间，就像 int、float、char 这些关键字本身不占用内存一样；结构体变量才包含实实在在的数据，才需要内存来存储。下面的写法是错误的，不可能去取一个结构体名的地址，也不能将它赋值给其他变量：<br>struct stu *pstu = &stu;<br>struct stu *pstu = stu;</p><h4 id="获取结构体成员"><a href="#获取结构体成员" class="headerlink" title="获取结构体成员"></a>获取结构体成员</h4><pre class=" language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">.</span>memberName pointer<span class="token operator">-></span>memberName <span class="token comment" spellcheck="true">//(*结构体指针变量名).成员名</span> <span class="token comment" spellcheck="true">// 结构体指针变量名->成员名</span><span class="token comment" spellcheck="true">// 案例：</span> <span class="token comment" spellcheck="true">//结构体</span><span class="token keyword">struct</span> stu<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">char</span> group<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所在小组</span>    <span class="token keyword">float</span> score<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成绩</span><span class="token punctuation">}</span> stu1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">136.5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结构体指针</span><span class="token keyword">struct</span> stu <span class="token operator">*</span>pstu <span class="token operator">=</span> <span class="token operator">&amp;</span>stu1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//其中pstu是结构体指针名</span> <span class="token operator">*</span>pstu <span class="token comment" spellcheck="true">//表取结构构体指针的地址</span> <span class="token operator">*</span>pstu <span class="token operator">=</span> <span class="token operator">&amp;</span>stu1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示一个叫pstu的指针变量指向了一个结构体变量stu1</span> <span class="token comment" spellcheck="true">//例如获取结构体成员的值</span> <span class="token comment" spellcheck="true">//如果需要获取结构体指针里面的成绩和年龄的方法</span> <span class="token punctuation">{</span>     <span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span>    <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span>score  <span class="token comment" spellcheck="true">//(*结构体指针变量名).成员名</span>     <span class="token number">2</span><span class="token punctuation">.</span> pstu<span class="token operator">-></span>age       pstu<span class="token operator">-></span>score   <span class="token comment" spellcheck="true">//结构体指针变量名->成员名</span>     <span class="token number">3</span><span class="token punctuation">.</span> stu1<span class="token punctuation">.</span>age        stu1<span class="token punctuation">.</span>score   <span class="token comment" spellcheck="true">//结构体变量名.成员名</span> <span class="token punctuation">}</span></code></pre><h3 id="结构体指针的使用案例"><a href="#结构体指针的使用案例" class="headerlink" title="结构体指针的使用案例"></a>结构体指针的使用案例</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//姓名</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//学号</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//年龄</span>        <span class="token keyword">char</span> group<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所在小组</span>        <span class="token keyword">float</span> score<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成绩</span>    <span class="token punctuation">}</span> stu1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">136.5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>pstu <span class="token operator">=</span> <span class="token operator">&amp;</span>stu1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读取结构体成员的值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s的学号是%d，年龄是%d，在%c组，今年的成绩是%.1f！\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pstu<span class="token punctuation">)</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s的学号是%d，年龄是%d，在%c组，今年的成绩是%.1f！\n"</span><span class="token punctuation">,</span> pstu<span class="token operator">-></span>name<span class="token punctuation">,</span> pstu<span class="token operator">-></span>num<span class="token punctuation">,</span> pstu<span class="token operator">-></span>age<span class="token punctuation">,</span> pstu<span class="token operator">-></span>group<span class="token punctuation">,</span> pstu<span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>运行结果：Tom的学号是<span class="token number">12</span>，年龄是<span class="token number">18</span>，在A组，今年的成绩是<span class="token number">136.5</span>！Tom的学号是<span class="token number">12</span>，年龄是<span class="token number">18</span>，在A组，今年的成绩是<span class="token number">136.5</span>！</code></pre><h4 id="结构体数组指针的使用案例"><a href="#结构体数组指针的使用案例" class="headerlink" title="结构体数组指针的使用案例"></a>结构体数组指针的使用案例</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> stu<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">char</span> group<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所在小组</span>    <span class="token keyword">float</span> score<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成绩</span><span class="token punctuation">}</span>stus<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"Zhou ping"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">145.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Zhang ping"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">130.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Liu fang"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">148.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Cheng ling"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token number">139.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Wang ming"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">144.5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>ps<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//求数组长度</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name\t\tNum\tAge\tGroup\tScore\t\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ps<span class="token operator">=</span>stus<span class="token punctuation">;</span> ps<span class="token operator">&lt;</span>stus<span class="token operator">+</span>len<span class="token punctuation">;</span> ps<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\t%d\t%d\t%c\t%.1f\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>name<span class="token punctuation">,</span> ps<span class="token operator">-></span>num<span class="token punctuation">,</span> ps<span class="token operator">-></span>age<span class="token punctuation">,</span> ps<span class="token operator">-></span>group<span class="token punctuation">,</span> ps<span class="token operator">-></span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>运行结果：Name            Num     Age     Group   ScoreZhou ping       <span class="token number">5</span>       <span class="token number">18</span>      C       <span class="token number">145.0</span>Zhang ping      <span class="token number">4</span>       <span class="token number">19</span>      A       <span class="token number">130.5</span>Liu fang        <span class="token number">1</span>       <span class="token number">18</span>      A       <span class="token number">148.5</span>Cheng ling      <span class="token number">2</span>       <span class="token number">17</span>      F       <span class="token number">139.0</span>Wang ming       <span class="token number">3</span>       <span class="token number">17</span>      B       <span class="token number">144.5</span></code></pre><h3 id="结构体指针作为函数参数"><a href="#结构体指针作为函数参数" class="headerlink" title="结构体指针作为函数参数:"></a>结构体指针作为函数参数:</h3><p>结构体变量名代表的是整个集合本身，作为函数参数时传递的整个集合，也就是所有成员，而不是像数组一样被编译器转换成一个指针。如果结构体成员较多，尤其是成员为数组时，传送的时间和空间开销会很大，影响程序的运行效率。所以最好的办法就是使用结构体指针，这时由实参传向形参的只是一个地址，非常快速。</p><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> stu<span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">char</span> group<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//所在小组</span>    <span class="token keyword">float</span> score<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成绩</span><span class="token punctuation">}</span>stus<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"Li ping"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">145.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Zhang ping"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">130.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"He fang"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">148.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Cheng ling"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token number">139.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Wang ming"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">144.5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">struct</span> stu <span class="token operator">*</span>ps<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数声明</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算数组长度</span>    <span class="token function">average</span><span class="token punctuation">(</span>stus<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">struct</span> stu <span class="token operator">*</span>ps<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> num_140 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> average<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>ps <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">-></span> score<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ps <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token operator">-></span>score <span class="token operator">&lt;</span> <span class="token number">140</span><span class="token punctuation">)</span> num_140<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum=%.2f\naverage=%.2f\nnum_140=%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> sum<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">,</span> num_140<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>运行结果<span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">707.50</span>average<span class="token operator">=</span><span class="token number">141.50</span>num_140<span class="token operator">=</span><span class="token number">2</span></code></pre><p>知乎链接：<a href="https://zhuanlan.zhihu.com/p/104355200" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/104355200</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度飞桨深度学习学院-深度学习7日入门-CV 疫情可视化</title>
      <link href="/2020/05/08/bai-du-fei-jiang-shen-du-xue-xi-xue-yuan-shen-du-xue-xi-7-ri-ru-men-cv-yi-qing-ke-shi-hua/"/>
      <url>/2020/05/08/bai-du-fei-jiang-shen-du-xue-xi-xue-yuan-shen-du-xue-xi-7-ri-ru-men-cv-yi-qing-ke-shi-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="百度飞桨深度学习学院-深度学习7日入门-CV-–疫情可视化"><a href="#百度飞桨深度学习学院-深度学习7日入门-CV-–疫情可视化" class="headerlink" title="百度飞桨深度学习学院-深度学习7日入门-CV –疫情可视化"></a>百度飞桨深度学习学院-深度学习7日入门-CV –疫情可视化</h1><a id="more"></a><h2 id="百度飞桨"><a href="#百度飞桨" class="headerlink" title="百度飞桨"></a>百度飞桨</h2><p><img src="https://img-blog.csdnimg.cn/20200409194904305.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>飞桨 (PaddlePaddle)   以百度多年的深度学习技术研究和业务应用为基础，集深度学习核心框架、基础模型库、端到端开发套件、工具组件和服务平台于一体，2016 年正式开源，是全面开源开放、技术领先、功能完备的产业级深度学习平台。飞桨源于产业实践，始终致力于与产业深入融合。目前飞桨已广泛应用于工业、农业、服务业等，服务 150 多万开发者，与合作伙伴一起帮助越来越多的行业完成 AI 赋能。 </p><h2 id="深度学习7日入门-CV-–疫情可视化"><a href="#深度学习7日入门-CV-–疫情可视化" class="headerlink" title="深度学习7日入门-CV –疫情可视化"></a>深度学习7日入门-CV –疫情可视化</h2><ol><li>数据准备</li><li>疫情地图</li><li>疫情增长趋势图</li><li>疫情饼图 <h2 id="软件代码"><a href="#软件代码" class="headerlink" title="软件代码"></a>软件代码</h2></li><li>数据准备 <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> datetime</code></pre></li></ol><p>today = datetime.date.today().strftime(‘%Y%m%d’)   #20200315</p><p>def crawl_dxy_data():<br>    “””<br>    爬取丁香园实时统计数据，保存到data目录下，以当前日期作为文件名，存JSON文件<br>    “””<br>    response = requests.get(‘<a href="https://ncov.dxy.cn/ncovh5/view/pneumonia&#39;" target="_blank" rel="noopener">https://ncov.dxy.cn/ncovh5/view/pneumonia&#39;</a>) #request.get()用于请求目标网站<br>    print(response.status_code)                                          # 打印状态码</p><pre><code>try:    url_text = response.content.decode()                             #更推荐使用response.content.deocde()的方式获取响应的html页面    #print(url_text)    url_content = re.search(r&#39;window.getAreaStat = (.*?)}]}catch&#39;,   #re.search():扫描字符串以查找正则表达式模式产生匹配项的第一个位置 ，然后返回相应的match对象。                            url_text, re.S)                          #在字符串a中，包含换行符\n，在这种情况下：如果不使用re.S参数，则只在每一行内进行匹配，如果一行没有，就换下一行重新开始;                                                                     #而使用re.S参数以后，正则表达式会将这个字符串作为一个整体，在整体中进行匹配。    texts = url_content.group()                                      #获取匹配正则表达式的整体结果    content = texts.replace(&#39;window.getAreaStat = &#39;, &#39;&#39;).replace(&#39;}catch&#39;, &#39;&#39;) #去除多余的字符    json_data = json.loads(content)                                             with open(&#39;data/&#39; + today + &#39;.json&#39;, &#39;w&#39;, encoding=&#39;UTF-8&#39;) as f:        json.dump(json_data, f, ensure_ascii=False)except:    print(&#39;&lt;Response [%s]&gt;&#39; % response.status_code)</code></pre><p>def crawl_statistics_data():<br>    “””<br>    获取各个省份历史统计数据，保存到data目录下，存JSON文件<br>    “””<br>    with open(‘data/‘+ today + ‘.json’, ‘r’, encoding=’UTF-8’) as file:<br>        json_array = json.loads(file.read())</p><pre><code>statistics_data = {}for province in json_array:    response = requests.get(province[&#39;statisticsData&#39;])    try:        statistics_data[province[&#39;provinceShortName&#39;]] = json.loads(response.content.decode())[&#39;data&#39;]    except:        print(&#39;&lt;Response [%s]&gt; for url: [%s]&#39; % (response.status_code, province[&#39;statisticsData&#39;]))with open(&quot;data/statistics_data.json&quot;, &quot;w&quot;, encoding=&#39;UTF-8&#39;) as f:    json.dump(statistics_data, f, ensure_ascii=False)</code></pre><p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    crawl_dxy_data()<br>    crawl_statistics_data()</p><pre><code>2. 疫情地图```pythonimport jsonimport datetimefrom pyecharts.charts import Mapfrom pyecharts import options as opts# 读原始数据文件today = datetime.date.today().strftime(&#39;%Y%m%d&#39;)   #20200315datafile = &#39;data/&#39;+ today + &#39;.json&#39;with open(datafile, &#39;r&#39;, encoding=&#39;UTF-8&#39;) as file:    json_array = json.loads(file.read())# 分析全国实时确诊数据：&#39;confirmedCount&#39;字段china_data = []for province in json_array:    china_data.append((province[&#39;provinceShortName&#39;], province[&#39;confirmedCount&#39;]))china_data = sorted(china_data, key=lambda x: x[1], reverse=True)                 #reverse=True,表示降序，反之升序print(china_data)# 全国疫情地图# 自定义的每一段的范围，以及每一段的特别的样式。pieces = [    {&#39;min&#39;: 10000, &#39;color&#39;: &#39;#540d0d&#39;},    {&#39;max&#39;: 9999, &#39;min&#39;: 1000, &#39;color&#39;: &#39;#9c1414&#39;},    {&#39;max&#39;: 999, &#39;min&#39;: 500, &#39;color&#39;: &#39;#d92727&#39;},    {&#39;max&#39;: 499, &#39;min&#39;: 100, &#39;color&#39;: &#39;#ed3232&#39;},    {&#39;max&#39;: 99, &#39;min&#39;: 10, &#39;color&#39;: &#39;#f27777&#39;},    {&#39;max&#39;: 9, &#39;min&#39;: 1, &#39;color&#39;: &#39;#f7adad&#39;},    {&#39;max&#39;: 0, &#39;color&#39;: &#39;#f7e4e4&#39;},]labels = [data[0] for data in china_data]counts = [data[1] for data in china_data]m = Map()m.add(&quot;累计确诊&quot;, [list(z) for z in zip(labels, counts)], &#39;china&#39;)#系列配置项,可配置图元样式、文字样式、标签样式、点线样式等m.set_series_opts(label_opts=opts.LabelOpts(font_size=12),                  is_show=False)#全局配置项,可配置标题、动画、坐标轴、图例等m.set_global_opts(title_opts=opts.TitleOpts(title=&#39;全国实时确诊数据&#39;,                                            subtitle=&#39;数据来源：丁香园&#39;),                  legend_opts=opts.LegendOpts(is_show=False),                  visualmap_opts=opts.VisualMapOpts(pieces=pieces,                                                    is_piecewise=True,   #是否为分段型                                                    is_show=True))       #是否显示视觉映射配置#render（）会生成本地 HTML 文件，默认会在当前目录生成 render.html 文件，也可以传入路径参数，如 m.render(&quot;mycharts.html&quot;)m.render(path=&#39;E:/cv/AI_baidu_day1_2/data/全国实时确诊数据.html&#39;)</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> datetime<span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>charts <span class="token keyword">import</span> Map<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> options <span class="token keyword">as</span> opts<span class="token comment" spellcheck="true"># 读原始数据文件</span>today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#20200315</span>datafile <span class="token operator">=</span> <span class="token string">'data/'</span><span class="token operator">+</span> today <span class="token operator">+</span> <span class="token string">'.json'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>datafile<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    json_array <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分析湖北省实时确诊数据</span><span class="token comment" spellcheck="true"># 读入规范化的城市名称，用于规范化丁香园数据中的城市简称</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'E:/cv/AI_baidu_day1_2/data/data_txt/pycharts_city.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    defined_cities <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">format_city_name</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> defined_cities<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> defined_city <span class="token keyword">in</span> defined_cities<span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span><span class="token punctuation">(</span>set<span class="token punctuation">(</span>defined_city<span class="token punctuation">)</span> <span class="token operator">&amp;</span> set<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> defined_city            <span class="token keyword">if</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'市'</span><span class="token punctuation">)</span> <span class="token operator">or</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'区'</span><span class="token punctuation">)</span> <span class="token operator">or</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'县'</span><span class="token punctuation">)</span> <span class="token operator">or</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'自治州'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> name            <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">'市'</span>    <span class="token keyword">return</span> Noneprovince_name <span class="token operator">=</span> <span class="token string">'湖北'</span><span class="token keyword">for</span> province <span class="token keyword">in</span> json_array<span class="token punctuation">:</span>    <span class="token keyword">if</span> province<span class="token punctuation">[</span><span class="token string">'provinceName'</span><span class="token punctuation">]</span> <span class="token operator">==</span> province_name <span class="token operator">or</span> province<span class="token punctuation">[</span><span class="token string">'provinceShortName'</span><span class="token punctuation">]</span> <span class="token operator">==</span> province_name<span class="token punctuation">:</span>        json_array_province <span class="token operator">=</span> province<span class="token punctuation">[</span><span class="token string">'cities'</span><span class="token punctuation">]</span>        hubei_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>format_city_name<span class="token punctuation">(</span>city<span class="token punctuation">[</span><span class="token string">'cityName'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> defined_cities<span class="token punctuation">)</span><span class="token punctuation">,</span> city<span class="token punctuation">[</span><span class="token string">'confirmedCount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> city <span class="token keyword">in</span>                      json_array_province<span class="token punctuation">]</span>        hubei_data <span class="token operator">=</span> sorted<span class="token punctuation">(</span>hubei_data<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>hubei_data<span class="token punctuation">)</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> hubei_data<span class="token punctuation">]</span>counts <span class="token operator">=</span> <span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> hubei_data<span class="token punctuation">]</span>pieces <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'min'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#540d0d'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">9999</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#9c1414'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#d92727'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">499</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#ed3232'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#f27777'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#f7adad'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'max'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'#f7e4e4'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span>m <span class="token operator">=</span> Map<span class="token punctuation">(</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"累计确诊"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token keyword">for</span> z <span class="token keyword">in</span> zip<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> counts<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'湖北'</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>set_series_opts<span class="token punctuation">(</span>label_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>font_size<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  is_show<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>set_global_opts<span class="token punctuation">(</span>title_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>TitleOpts<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'湖北省实时确诊数据'</span><span class="token punctuation">,</span>                                            subtitle<span class="token operator">=</span><span class="token string">'数据来源：丁香园'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  legend_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LegendOpts<span class="token punctuation">(</span>is_show<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  visualmap_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>VisualMapOpts<span class="token punctuation">(</span>pieces<span class="token operator">=</span>pieces<span class="token punctuation">,</span>                                                    is_piecewise<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                                    is_show<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>render<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'E:/cv/AI_baidu_day1_2/data/湖北省实时确诊数据.html'</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>疫情增长趋势图<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> json<span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>charts <span class="token keyword">import</span> Line<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> options <span class="token keyword">as</span> opts</code></pre></li></ol><h1 id="读原始数据文件"><a href="#读原始数据文件" class="headerlink" title="读原始数据文件"></a>读原始数据文件</h1><p>datafile = ‘E:/cv/AI_baidu_day1_2/data/statistics_data.json’<br>with open(datafile, ‘r’, encoding=’UTF-8’) as file:<br>    json_dict = json.loads(file.read())</p><h1 id="获取日期列表"><a href="#获取日期列表" class="headerlink" title="获取日期列表"></a>获取日期列表</h1><p>dateId = [str(da[‘dateId’])[4:6] + ‘-‘ + str(da[‘dateId’])[6:8] for da in json_dict[‘湖北’] if<br>          da[‘dateId’] &gt;= 20200201]</p><h1 id="分析各省份2月1日至今的新增确诊数据：’confirmedIncr’"><a href="#分析各省份2月1日至今的新增确诊数据：’confirmedIncr’" class="headerlink" title="分析各省份2月1日至今的新增确诊数据：’confirmedIncr’"></a>分析各省份2月1日至今的新增确诊数据：’confirmedIncr’</h1><p>statistics__data = {}<br>for province in json_dict:<br>    statistics__data[province] = []<br>    for da in json_dict[province]:<br>        if da[‘dateId’] &gt;= 20200201:<br>            statistics__data[province].append(da[‘confirmedIncr’])<br>    #若当天该省数据没有更新，则默认为0<br>    if(len(statistics__data[province])!=len(dateId)):<br>        statistics__data[province].append(0)</p><h1 id="全国新增趋势"><a href="#全国新增趋势" class="headerlink" title="全国新增趋势"></a>全国新增趋势</h1><p>all_statis = np.array([0] * len(dateId))<br>for province in statistics__data:<br>    all_statis = all_statis + np.array(statistics__data[province])</p><p>all_statis = all_statis.tolist()</p><h1 id="湖北新增趋势"><a href="#湖北新增趋势" class="headerlink" title="湖北新增趋势"></a>湖北新增趋势</h1><p>hubei_statis = statistics__data[‘湖北’]</p><h1 id="湖北以外的新增趋势"><a href="#湖北以外的新增趋势" class="headerlink" title="湖北以外的新增趋势"></a>湖北以外的新增趋势</h1><p>other_statis = [all_statis[i] - hubei_statis[i] for i in range(len(dateId))]</p><p>line = Line()<br>line.add_xaxis(dateId)<br>line.add_yaxis(“全国新增确诊病例”,   #图例<br>                all_statis,       #数据<br>                is_smooth=True,   #是否平滑曲线<br>               linestyle_opts=opts.LineStyleOpts(width=4, color=’#B44038’),#线样式配置项<br>               itemstyle_opts=opts.ItemStyleOpts(color=’#B44038’,          #图元样式配置项<br>                                                 border_color=”#B44038”,   #颜色<br>                                                 border_width=10))         #图元的大小<br>line.add_yaxis(“湖北新增确诊病例”, hubei_statis, is_smooth=True,<br>               linestyle_opts=opts.LineStyleOpts(width=2, color=’#4E87ED’),<br>               label_opts=opts.LabelOpts(position=’bottom’),              #标签在折线的底部<br>               itemstyle_opts=opts.ItemStyleOpts(color=’#4E87ED’,<br>                                                 border_color=”#4E87ED”,<br>                                                 border_width=3))<br>line.add_yaxis(“其他省份新增病例”, other_statis, is_smooth=True,<br>               linestyle_opts=opts.LineStyleOpts(width=2, color=’#F1A846’),<br>               label_opts=opts.LabelOpts(position=’bottom’),              #标签在折线的底部<br>               itemstyle_opts=opts.ItemStyleOpts(color=’#F1A846’,<br>                                                 border_color=”#F1A846”,<br>                                                 border_width=3))<br>line.set_global_opts(title_opts=opts.TitleOpts(title=”新增确诊病例”, subtitle=’数据来源：丁香园’),<br>                     yaxis_opts=opts.AxisOpts(max_=16000, min_=1, type_=”log”,    #坐标轴配置项<br>                                              splitline_opts=opts.SplitLineOpts(is_show=True),#分割线配置项<br>                                              axisline_opts=opts.AxisLineOpts(is_show=True)))#坐标轴刻度线配置项<br>line.render(path=’E:/cv/AI_baidu_day1_2/data/新增确诊趋势图.html’)<br>‘/home/aistudio/data/新增确诊趋势图.html’</p><pre><code>4. 疫情饼图```pythonimport jsonimport datetimefrom pyecharts import options as optsfrom pyecharts.charts import Pie# 读原始数据文件today = datetime.date.today().strftime(&#39;%Y%m%d&#39;)   #20200315datafile = &#39;data/&#39;+ today + &#39;.json&#39;with open(datafile, &#39;r&#39;, encoding=&#39;UTF-8&#39;) as file:    json_array = json.loads(file.read())    # 分析全国实时确诊数据：&#39;confirmedCount&#39;字段china_data = []for province in json_array:    china_data.append((province[&#39;provinceShortName&#39;], province[&#39;confirmedCount&#39;]))china_data = sorted(china_data, key=lambda x: x[1], reverse=True)  # reverse=True,表示降序，反之升序labels = [data[0] for data in china_data]counts = [data[1] for data in china_data]m = Pie(init_opts=opts.InitOpts(width=&#39;800px&#39;,height=&#39;500px&#39;,page_title=&#39;疫情数据&#39;))#px：像素m.add(&quot;中国&quot;,[list(z) for z in zip(labels,counts)],center=(&#39;50%&#39;,&#39;70%&#39;),radius=(0,150))# 系列名称，用于 tooltip 的显示，legend 的图例筛选。# series_name: str# 系列数据项，格式为 [(key1, value1), (key2, value2)]# data_pair: Sequence,#center圆心，radius半径#zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。#全局配置m.set_global_opts(title_opts=opts.TitleOpts(title=&quot;全国疫情3月31日数据&quot;, subtitle=&#39;数据来源：丁香园&#39;),                  legend_opts=opts.LegendOpts(pos_left=&quot;right&quot;, orient=&quot;vertical&quot;),                 )#type_=&quot;scroll&quot;,是开滚动m.set_series_opts(label_opts=opts.LabelOpts(formatter=&quot;{b}: {c}&quot;))#系列配置#render（）会生成本地 HTML 文件，默认会在当前目录生成 render.html 文件，也可以传入路径参数，如 m.render(&quot;mycharts.html&quot;)m.render(path=&#39;E:/cv/AI_baidu_day1_2/data/全国实时确诊数据--Piechart.html&#39;)</code></pre><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://img-blog.csdnimg.cn/20200409200100548.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200409200110954.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200409200120172.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200409200129725.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>百度飞桨深度学习学院-深度学习7日入门-CV -疫情可视化 <a href="https://aistudio.baidu.com/aistudio/education/group/info/1149" target="_blank" rel="noopener">https://aistudio.baidu.com/aistudio/education/group/info/1149</a></li><li>哔哩哔哩视频教程 <a href="https://www.bilibili.com/video/BV1hZ4y1j7rf" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1hZ4y1j7rf</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
          <category> 数据可视化 </category>
          
          <category> 百度AIstudio </category>
          
          <category> paddlepaddle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 百度智能云 </tag>
            
            <tag> 百度AIstudio </tag>
            
            <tag> 百度飞桨 paddlepaddle </tag>
            
            <tag> 疫情可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10本地安装EMQ 实现MQTT连接</title>
      <link href="/2020/05/08/win10-ben-di-an-zhuang-emq-shi-xian-mqtt-lian-jie/"/>
      <url>/2020/05/08/win10-ben-di-an-zhuang-emq-shi-xian-mqtt-lian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="win10本地安装EMQ-实现MQTT连接"><a href="#win10本地安装EMQ-实现MQTT连接" class="headerlink" title="win10本地安装EMQ 实现MQTT连接"></a>win10本地安装EMQ 实现MQTT连接</h1><a id="more"></a><h2 id="EMQ简介"><a href="#EMQ简介" class="headerlink" title="EMQ简介"></a>EMQ简介</h2><p><img src="https://img-blog.csdnimg.cn/20200430083013451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="EMQ-X-Erlang-Enterprise-Elastic-MQTT-Broker-是基于-Erlang-OTP-平台开发的开源物联网-MQTT-消息服务器。"><a href="#EMQ-X-Erlang-Enterprise-Elastic-MQTT-Broker-是基于-Erlang-OTP-平台开发的开源物联网-MQTT-消息服务器。" class="headerlink" title="EMQ X (Erlang/Enterprise/Elastic MQTT Broker) 是基于 Erlang/OTP 平台开发的开源物联网 MQTT 消息服务器。"></a>EMQ X (Erlang/Enterprise/Elastic MQTT Broker) 是基于 Erlang/OTP 平台开发的开源物联网 MQTT 消息服务器。</h3><h3 id="Erlang-OTP是出色的软实时-Soft-Realtime-、低延时-Low-Latency-、分布式-Distributed-的语言平台。"><a href="#Erlang-OTP是出色的软实时-Soft-Realtime-、低延时-Low-Latency-、分布式-Distributed-的语言平台。" class="headerlink" title="Erlang/OTP是出色的软实时 (Soft-Realtime)、低延时 (Low-Latency)、分布式 (Distributed)的语言平台。"></a>Erlang/OTP是出色的软实时 (Soft-Realtime)、低延时 (Low-Latency)、分布式 (Distributed)的语言平台。</h3><h3 id="MQTT-是轻量的-Lightweight-、发布订阅模式-PubSub-的物联网消息协议。"><a href="#MQTT-是轻量的-Lightweight-、发布订阅模式-PubSub-的物联网消息协议。" class="headerlink" title="MQTT 是轻量的 (Lightweight)、发布订阅模式 (PubSub) 的物联网消息协议。"></a>MQTT 是轻量的 (Lightweight)、发布订阅模式 (PubSub) 的物联网消息协议。</h3><h3 id="EMQ-X-设计目标是实现高可靠，并支持承载海量物联网终端的MQTT连接，支持在海量物联网设备间低延时消息路由"><a href="#EMQ-X-设计目标是实现高可靠，并支持承载海量物联网终端的MQTT连接，支持在海量物联网设备间低延时消息路由" class="headerlink" title="EMQ X 设计目标是实现高可靠，并支持承载海量物联网终端的MQTT连接，支持在海量物联网设备间低延时消息路由:"></a>EMQ X 设计目标是实现高可靠，并支持承载海量物联网终端的MQTT连接，支持在海量物联网设备间低延时消息路由:</h3><ol><li>稳定承载大规模的 MQTT 客户端连接，单服务器节点支持50万到100万连接。</li><li>分布式节点集群，快速低延时的消息路由，单集群支持1000万规模的路由。</li><li>消息服务器内扩展，支持定制多种认证方式、高效存储消息到后端数据库。</li><li>完整物联网协议支持，MQTT、MQTT-SN、CoAP、LwM2M、WebSocket 或私有协议支持.<h3 id="win10-安装过程"><a href="#win10-安装过程" class="headerlink" title="win10 安装过程"></a>win10 安装过程</h3><h3 id="压缩包下载地址-lt-gt"><a href="#压缩包下载地址-lt-gt" class="headerlink" title="压缩包下载地址&lt;&gt;"></a>压缩包下载地址&lt;&gt;</h3>```bash</li><li>下载压缩包，解压</li><li>cmd进入emqttd文件夹</li><li>进入bin文件夹</li><li>输入  emqttd start</li><li>打开浏览器 输入<a href="http://ip" target="_blank" rel="noopener">http://ip</a> address:18083/#/</li><li>打开页面，输入用户名admin 密码public 这是默认账号密码，可以直接修改<br>```<h3 id="下载压缩包，解压"><a href="#下载压缩包，解压" class="headerlink" title="下载压缩包，解压"></a>下载压缩包，解压</h3><img src="https://img-blog.csdnimg.cn/20200430084335147.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200430084356749.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200430084406906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h4 id="cmd进入emqttd文件夹"><a href="#cmd进入emqttd文件夹" class="headerlink" title="cmd进入emqttd文件夹"></a>cmd进入emqttd文件夹</h4><h4 id="进入bin文件夹"><a href="#进入bin文件夹" class="headerlink" title="进入bin文件夹"></a>进入bin文件夹</h4><img src="https://img-blog.csdnimg.cn/20200430084419268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h4 id="输入-emqttd-start"><a href="#输入-emqttd-start" class="headerlink" title="输入  emqttd start"></a>输入  emqttd start</h4><img src="https://img-blog.csdnimg.cn/20200430084601393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h4 id="打开浏览器-输入http-ip-address-18083"><a href="#打开浏览器-输入http-ip-address-18083" class="headerlink" title="打开浏览器 输入http://ip address:18083/#/"></a>打开浏览器 输入<a href="http://ip" target="_blank" rel="noopener">http://ip</a> address:18083/#/</h4><img src="https://img-blog.csdnimg.cn/20200430084704299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200430084820610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200430084834356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2></li><li>EMQ官方开发文档<a href="https://docs.emqx.io/broker/latest/en/introduction/checklist.html" target="_blank" rel="noopener">https://docs.emqx.io/broker/latest/en/introduction/checklist.html</a></li><li>哔哩哔哩-树莓的小创意室 建立自己的mqtt服务器 esp8266 安卓app远程控制 语音识别 信息回传 <a href="https://www.bilibili.com/video/BV1mJ411r7M9?t=264" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1mJ411r7M9?t=264</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 物联网 </category>
          
          <category> MQTT </category>
          
          <category> EMQX </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 物联网 </tag>
            
            <tag> MQTT </tag>
            
            <tag> EMQX </tag>
            
            <tag> WIN10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>串口通信 - 副本</title>
      <link href="/2020/05/08/chuan-kou-tong-xin-fu-ben/"/>
      <url>/2020/05/08/chuan-kou-tong-xin-fu-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机-–串口通信"><a href="#51单片机-–串口通信" class="headerlink" title="51单片机 –串口通信"></a>51单片机 –串口通信</h1><a id="more"></a><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><p>一般情况下，设备之间的通信方式可以分成并行通信和串行通信两种。它们的区别是：<br><img src="https://img-blog.csdnimg.cn/20200330193353400.jpg#pic_center" alt="在这里插入图片描述"></p><h2 id="串行通信方式"><a href="#串行通信方式" class="headerlink" title="串行通信方式"></a>串行通信方式</h2><h3 id="串行通信的分类"><a href="#串行通信的分类" class="headerlink" title="串行通信的分类"></a>串行通信的分类</h3><h4 id="按照数据传送方向分类："><a href="#按照数据传送方向分类：" class="headerlink" title="按照数据传送方向分类："></a>按照数据传送方向分类：</h4><p>单工：数据传输只支持数据在一个方向上传输；<br>半双工：允许数据在两个方向上传输。但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信；它不需要独立的接收端和发送端，两者可以合并一起使用一个端口。<br>全双工：允许数据同时在两个方向上传输。因此，全双工通信是两个单工通信方式的结合，需要独立的接收端和发送端。<br><img src="https://img-blog.csdnimg.cn/2020033019375459.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="按照通信方式分类："><a href="#按照通信方式分类：" class="headerlink" title="按照通信方式分类："></a>按照通信方式分类：</h4><p>同步通信：带时钟同步信号传输。比如：SPI，IIC通信接口。<br>异步通信：不带时钟同步信号。比如：UART(通用异步收发器)，单总线。<br>在同步通讯中，收发设备上方会使用一根信号线传输信号，在时钟信号的驱动下双方进行协调，同步数据。例如，通讯中通常双方会统一规定在时钟信号的上升沿或者下降沿对数据线进行采样。</p><p>在异步通讯中不使用时钟信号进行数据同步，它们直接在数据信号中穿插一些用于同步的信号位，或者将主题数据进行打包，以数据帧的格式传输数据。通讯中还需要双方规约好数据的传输速率（也就是波特率）等，以便更好地同步。常用的波特率有4800bps、9600bps、115200bps等。</p><p>在同步通讯中，数据信号所传输的内容绝大部分是有效数据，而异步通讯中会则会包含数据帧的各种标识符，所以同步通讯效率高，但是同步通讯双方的时钟允许误差小，稍稍时钟出错就可能导致数据错乱，异步通讯双方的时钟允许误差较大。</p><h3 id="常见的串行通信接口"><a href="#常见的串行通信接口" class="headerlink" title="常见的串行通信接口"></a>常见的串行通信接口</h3><p><img src="https://img-blog.csdnimg.cn/2020033019381586.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="串口通信（Serial-Communications）"><a href="#串口通信（Serial-Communications）" class="headerlink" title="串口通信（Serial Communications）"></a>串口通信（Serial Communications）</h3><p>串口通信（Serial Communications）的概念非常简单，串口按位（bit）发送和接收字节。尽管比按字节（byte）的并行通信慢，但是串口可以在使用一根线发送数据的同时用另一根线接收数据。它很简单并且能够实现远距离通信。比如IEEE488定义并行通行状态时，规定设备线总长不得超过20米，并且任意两个设备间的长度不得超过2米；而对于串口而言，长度可达1200米。典型地，串口用于ASCII码字符的传输。通信使用3根线完成，分别是地线、发送、接收。由于串口通信是异步的，端口能够在一根线上发送数据同时在另一根线上接收数据。其他线用于握手，但不是必须的。串口通信最重要的参数是波特率、数据位、停止位和奇偶校验。对于两个进行通信的端口，这些参数必须匹配。</p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p>这是一个衡量符号传输速率的参数。指的是信号被调制以后在单位时间内的变化，即单位时间内载波参数变化的次数，如每秒钟传送240个字符，而每个字符格式包含10位（1个起始位，1个停止位，8个数据位），这时的波特率为240Bd，比特率为10位*240个/秒=2400bps。一般调制速率大于波特率，比如曼彻斯特编码）。通常电话线的波特率为14400，28800和36600。波特率可以远远大于这些值，但是波特率和距离成反比。高波特率常常用于放置的很近的仪器间的通信，典型的例子就是GPIB设备的通信。 [1] </p><h3 id="数据位"><a href="#数据位" class="headerlink" title="数据位"></a>数据位</h3><p>这是衡量通信中实际数据位的参数。当计算机发送一个信息包，实际的数据往往不会是8位的，标准的值是6、7和8位。如何设置取决于你想传送的信息。比如，标准的ASCII码是0～127（7位）。扩展的ASCII码是0～255（8位）。如果数据使用简单的文本（标准 ASCII码），那么每个数据包使用7位数据。每个包是指一个字节，包括开始/停止位，数据位和奇偶校验位。由于实际数据位取决于通信协议的选取，术语“包”指任何通信的情况。</p><h3 id="停止位"><a href="#停止位" class="headerlink" title="停止位"></a>停止位</h3><p>用于表示单个包的最后一位。典型的值为1，1.5和2位。由于数据是在传输线上定时的，并且每一个设备有其自己的时钟，很可能在通信中两台设备间出现了小小的不同步。因此停止位不仅仅是表示传输的结束，并且提供计算机校正时钟同步的机会。适用于停止位的位数越多，不同时钟同步的容忍程度越大，但是数据传输率同时也越慢。</p><h3 id="奇偶校验位"><a href="#奇偶校验位" class="headerlink" title="奇偶校验位"></a>奇偶校验位</h3><p>在串口通信中一种简单的检错方式。有四种检错方式：偶、奇、高和低。当然没有校验位也是可以的。对于偶和奇校验的情况，串口会设置校验位（数据位后面的一位），用一个值确保传输的数据有偶个或者奇个逻辑高位。例如，如果数据是011，那么对于偶校验，校验位为0，保证逻辑高的位数是偶数个。如果是奇校验，校验位为1，这样就有3个逻辑高位。高位和低位不真正的检查数据，简单置位逻辑高或者逻辑低校验。这样使得接收设备能够知道一个位的状态，有机会判断是否有噪声干扰了通信或者是否传输和接收数据是否不同步。</p><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><h4 id="中断方式"><a href="#中断方式" class="headerlink" title="中断方式"></a>中断方式</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;reg52.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> FOSC             12000000UL             </span><span class="token macro property">#<span class="token directive keyword">define</span> BAUD             2400UL    </span><span class="token keyword">void</span>  <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//串口初始化</span><span class="token punctuation">{</span>         TMOD<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0x0F</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定时器1模式控制在高4位</span>         TMOD<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定时器1工作在模式2，自动重装模式</span>         SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//串口工作在模式1</span>         TH1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span>FOSC<span class="token operator">/</span><span class="token punctuation">(</span>BAUD<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算定时器重装值</span>         TL1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span>FOSC<span class="token operator">/</span><span class="token punctuation">(</span>BAUD<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         PCON<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//串口波特率加倍</span>         ES<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//串行中断允许</span>         TR1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动定时器1</span>         REN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许接收 </span>         EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//允许中断</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">InterruptUART</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token comment" spellcheck="true">//中断源是4</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//unsigned char receive_data;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>RI<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         RI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        SBUF <span class="token operator">=</span> SBUF<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//receive_data = SBUF;//接收到的数据</span>        <span class="token comment" spellcheck="true">//if(receive_data == '1')    </span>        <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//   LED1 = 0;</span>    <span class="token comment" spellcheck="true">//     DELAY_nMS(500);</span>    <span class="token comment" spellcheck="true">//     LED1=1;</span>    <span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//   if(receive_data == ' ')    //接受一个字符 </span><span class="token comment" spellcheck="true">//        {</span><span class="token comment" spellcheck="true">//          //执行代码，你想要的控制的东西，例如led,蜂鸣器，等传感器        </span><span class="token comment" spellcheck="true">//        }    </span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//EA=1;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>TI<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        TI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="注：现在只是一个简单的记录（之后更新）"><a href="#注：现在只是一个简单的记录（之后更新）" class="headerlink" title="注：现在只是一个简单的记录（之后更新）"></a>注：现在只是一个简单的记录（之后更新）</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.串口通信基本原理（超基础、详细版） <a href="https://blog.csdn.net/qq_38410730/article/details/79887200" target="_blank" rel="noopener">https://blog.csdn.net/qq_38410730/article/details/79887200</a><br>2. 百度百科串口通信<a href="https://baike.baidu.com/item/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/3775296?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/3775296?fr=aladdin</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>加法器</title>
      <link href="/2020/05/08/jia-fa-qi/"/>
      <url>/2020/05/08/jia-fa-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a>加法器</h1><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>数字系统中，任何信息和信号都是以二进制代码的形式出现的，电路要实现对输人系统的数字信息的相应运算，就要能够实现对二进制代码的各种运算。<br>二进制数的四则运算都是以加法为基础的，因此，加法器是实现各种算术运算功能的基本单元，不论是对于计算机系统，还是可以处理数字数据信息的其他数字系统，都非常重要。</p><h3 id="加法器包括两种类型：半加器和全加器。"><a href="#加法器包括两种类型：半加器和全加器。" class="headerlink" title="加法器包括两种类型：半加器和全加器。"></a>加法器包括两种类型：半加器和全加器。</h3><h2 id="半加器"><a href="#半加器" class="headerlink" title="半加器"></a>半加器</h2><p>所谓“半加”，即指不考虑低位向本位来的进位的加法，但是，要考；虑本位相加后，给高位的进位，实现半加运算的逻辑电路称为半加器。<br>以两个1位二进制数相加为例，根据二进制数相加的基本规则，只有4种可能。<br><img src="/medias/images/add1.jpg" alt="avatar"><br>对输入、输出信号设定变量，得到1位二进制数半加器的真值表，见表。<br><img src="/medias/images/add2.jpg" alt="avatar"><br>输人、输出信号定义如下：</p><ol><li>A、B为相加的本位两个1位二进制数；</li><li>S为相加后本位结果；</li><li>CO为相加后向高位的进位。<h4 id=""><a href="#" class="headerlink" title=""></a></h4>由此得到1位二进制数半加器的函数表达式为S=A^B (AB异或) CO =AB (AB与运算)<br><img src="/medias/images/add3.jpg" alt="avatar"></li></ol><h2 id="全加器"><a href="#全加器" class="headerlink" title="全加器"></a>全加器</h2><h2 id="有道云笔记-加法器http-note-youdao-com-noteshare-id-64bca20d2f4b14f6f3ed71cb43a6f69f-amp-sub-66263A87712649F6A61BB8637CA0B15B"><a href="#有道云笔记-加法器http-note-youdao-com-noteshare-id-64bca20d2f4b14f6f3ed71cb43a6f69f-amp-sub-66263A87712649F6A61BB8637CA0B15B" class="headerlink" title="有道云笔记 加法器http://note.youdao.com/noteshare?id=64bca20d2f4b14f6f3ed71cb43a6f69f&amp;sub=66263A87712649F6A61BB8637CA0B15B"></a>有道云笔记 加法器<a href="http://note.youdao.com/noteshare?id=64bca20d2f4b14f6f3ed71cb43a6f69f&amp;sub=66263A87712649F6A61BB8637CA0B15B" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=64bca20d2f4b14f6f3ed71cb43a6f69f&amp;sub=66263A87712649F6A61BB8637CA0B15B</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2020/05/08/wei-yun-suan/"/>
      <url>/2020/05/08/wei-yun-suan/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言笔记–位操作"><a href="#C语言笔记–位操作" class="headerlink" title="C语言笔记–位操作"></a>C语言笔记–位操作</h1><a id="more"></a><h2 id="基本位运算"><a href="#基本位运算" class="headerlink" title="基本位运算"></a>基本位运算</h2><!-- more --> <ol><li><p>按位与运算符（&amp;）#<br>定义：参加运算的两个数据，按二进制位进行“与”运算。<br>运算规则：<br>0&amp;0=0  0&amp;1=0  1&amp;0=0  1&amp;1=1<br>总结：两位同时为1，结果才为1，否则结果为0。</p><h4 id="与运算的用途："><a href="#与运算的用途：" class="headerlink" title="与运算的用途："></a>与运算的用途：</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h6 id="1）清零"><a href="#1）清零" class="headerlink" title="1）清零"></a>1）清零</h6><p> 如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p><h6 id="2）取一个数的指定位"><a href="#2）取一个数的指定位" class="headerlink" title="2）取一个数的指定位"></a>2）取一个数的指定位</h6><p> 比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位与运算（X&amp;Y=0000 1110）即可得到X的指定位。</p><h6 id="3）判断奇偶"><a href="#3）判断奇偶" class="headerlink" title="3）判断奇偶"></a>3）判断奇偶</h6><p> 只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((a &amp; 1) == 0)代替if (a % 2 == 0)来判断a是不是偶数。</p></li><li><p>按位或运算符（|）<br> 定义：参加运算的两个对象，按二进制位进行“或”运算。<br> 运算规则：<br> 0|0=0  0|1=1  1|0=1  1|1=1<br> 总结：参加运算的两个对象只要有一个为1，其值为1。<br> 注意：负数按补码形式参加按位或运算。</p><h4 id="或运算的用途："><a href="#或运算的用途：" class="headerlink" title="或运算的用途："></a>或运算的用途：</h4><h5 id="常用来对一个数据的某些位设置为1"><a href="#常用来对一个数据的某些位设置为1" class="headerlink" title="常用来对一个数据的某些位设置为1"></a>常用来对一个数据的某些位设置为1</h5><p> 比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位或运算（X|Y=1010 1111）即可得到。</p></li><li><p>异或运算符（^）<br> 定义：参加运算的两个数据，按二进制位进行“异或”运算。<br> 运算规则：<br> 0^0=0  0^1=1  1^0=1  1^1=0<br> 总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p> 异或的几条性质:<br> 1、交换律<br> 2、结合律 (a^b)^c == a^(b^c)<br> 3、对于任何数x，都有 x^x=0，x^0=x<br> 4、自反性: a^b^b=a^0=a;</p><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><p> 异或运算的用途：</p><h6 id="1）翻转指定位"><a href="#1）翻转指定位" class="headerlink" title="1）翻转指定位"></a>1）翻转指定位</h6><p> 比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。</p><h6 id="2）与0相异或值不变"><a href="#2）与0相异或值不变" class="headerlink" title="2）与0相异或值不变"></a>2）与0相异或值不变</h6><p> 例如：1010 1110 ^ 0000 0000 = 1010 1110</p><h6 id="3）交换两个数"><a href="#3）交换两个数" class="headerlink" title="3）交换两个数"></a>3）交换两个数</h6><pre><code> void Swap(int &amp;a, int &amp;b) {     if (a != b)     {         a ^= b;         b ^= a;         a ^= b;     } }</code></pre></li><li><p>取反运算符 (~)<br> 定义：参加运算的一个数据，按二进制进行“取反”运算。<br> 运算规则：　<br> ~1=0<br> ~0=1<br> 总结：对一个二进制数按位取反，即将0变1，1变0。</p><h3 id="异或运算的用途："><a href="#异或运算的用途：" class="headerlink" title="异或运算的用途："></a>异或运算的用途：</h3><h4 id="使一个数的最低位为零"><a href="#使一个数的最低位为零" class="headerlink" title="使一个数的最低位为零"></a>使一个数的最低位为零</h4><p> 使a的最低位为0，可以表示为：a &amp; <del>1。</del>1的值为 1111 1111 1111 1110，再按”与”运算，最低位一定为0。因为“ ~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。</p></li><li><p>左移运算符（&lt;&lt;）<br> 定义：将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</p><h5 id="设-a-1010-1110，a-a-lt-lt-2-将a的二进制位左移2位、右补0，即得a-1011-1000。"><a href="#设-a-1010-1110，a-a-lt-lt-2-将a的二进制位左移2位、右补0，即得a-1011-1000。" class="headerlink" title="设 a=1010 1110，a = a&lt;&lt; 2 将a的二进制位左移2位、右补0，即得a=1011 1000。"></a>设 a=1010 1110，a = a&lt;&lt; 2 将a的二进制位左移2位、右补0，即得a=1011 1000。</h5><p> 若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</p></li><li><p>右移运算符（&gt;&gt;）<br> 定义：将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</p><h6 id="例如：a-a-gt-gt-2-将a的二进制位右移2位，左补0-或者-左补1得看被移数是正还是负。"><a href="#例如：a-a-gt-gt-2-将a的二进制位右移2位，左补0-或者-左补1得看被移数是正还是负。" class="headerlink" title="例如：a=a&gt;&gt;2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。"></a>例如：a=a&gt;&gt;2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。</h6><p> 操作数每右移一位，相当于该数除以2。</p></li><li><p>复合赋值运算符<br> 位运算符与赋值运算符结合，组成新的复合赋值运算符，它们是：</p><h4 id="amp-例：a-amp-b-相当于-a-a-amp-b"><a href="#amp-例：a-amp-b-相当于-a-a-amp-b" class="headerlink" title="&amp;=        例：a&amp;=b    相当于     a=a&amp;b"></a>&amp;=        例：a&amp;=b    相当于     a=a&amp;b</h4><h4 id="例：a-b-相当于-a-a-b"><a href="#例：a-b-相当于-a-a-b" class="headerlink" title="|=        例：a|=b    相当于     a=a|b"></a>|=        例：a|=b    相当于     a=a|b</h4><h4 id="gt-gt-例：a-gt-gt-b-相当于-a-a-gt-gt-b"><a href="#gt-gt-例：a-gt-gt-b-相当于-a-a-gt-gt-b" class="headerlink" title="&gt;&gt;=      例：a&gt;&gt;=b   相当于     a=a&gt;&gt;b"></a>&gt;&gt;=      例：a&gt;&gt;=b   相当于     a=a&gt;&gt;b</h4><h4 id="lt-lt-例：a-lt-lt-b-相当于-a-a-lt-lt-b"><a href="#lt-lt-例：a-lt-lt-b-相当于-a-a-lt-lt-b" class="headerlink" title="&lt;&lt;=      例：a&lt;&lt;=b     相当于      a=a&lt;&lt;b"></a>&lt;&lt;=      例：a&lt;&lt;=b     相当于      a=a&lt;&lt;b</h4><h4 id="例：a-b-相当于-a-a-b-1"><a href="#例：a-b-相当于-a-a-b-1" class="headerlink" title="^=        例：a^=b    相当于   a=a^b"></a>^=        例：a^=b    相当于   a=a^b</h4><h5 id="运算规则：和前面讲的复合赋值运算符的运算规则相似。"><a href="#运算规则：和前面讲的复合赋值运算符的运算规则相似。" class="headerlink" title="运算规则：和前面讲的复合赋值运算符的运算规则相似。"></a>运算规则：和前面讲的复合赋值运算符的运算规则相似。</h5><p> 不同长度的数据进行位运算：如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。</p><h4 id="以“与运算”为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行“与运算“，右端对齐后，左边不足的位依下面三种情况补足，"><a href="#以“与运算”为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行“与运算“，右端对齐后，左边不足的位依下面三种情况补足，" class="headerlink" title="以“与运算”为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行“与运算“，右端对齐后，左边不足的位依下面三种情况补足，"></a>以“与运算”为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行“与运算“，右端对齐后，左边不足的位依下面三种情况补足，</h4><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h5 id="1）如果整型数据为正数，左边补16个0。"><a href="#1）如果整型数据为正数，左边补16个0。" class="headerlink" title="1）如果整型数据为正数，左边补16个0。"></a>1）如果整型数据为正数，左边补16个0。</h5><h5 id="2）如果整型数据为负数，左边补16个1。"><a href="#2）如果整型数据为负数，左边补16个1。" class="headerlink" title="2）如果整型数据为负数，左边补16个1。"></a>2）如果整型数据为负数，左边补16个1。</h5><h5 id="3）如果整形数据为无符号数，左边也补16个0。"><a href="#3）如果整形数据为无符号数，左边也补16个0。" class="headerlink" title="3）如果整形数据为无符号数，左边也补16个0。"></a>3）如果整形数据为无符号数，左边也补16个0。</h5><h5 id="如：long-a-123；int-b-1；计算a-amp-b。"><a href="#如：long-a-123；int-b-1；计算a-amp-b。" class="headerlink" title="如：long a=123；int b=1；计算a&amp; b。"></a>如：long a=123；int b=1；计算a&amp; b。</h5><h5 id="如：long-a-123；int-b-1；计算a-amp-b。-1"><a href="#如：long-a-123；int-b-1；计算a-amp-b。-1" class="headerlink" title="如：long a=123；int b=-1；计算a&amp; b。"></a>如：long a=123；int b=-1；计算a&amp; b。</h5><h5 id="如：long-a-123；unsigned-intb-1；计算a-amp-b。"><a href="#如：long-a-123；unsigned-intb-1；计算a-amp-b。" class="headerlink" title="如：long a=123；unsigned intb=1；计算a &amp; b。"></a>如：long a=123；unsigned intb=1；计算a &amp; b。</h5></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单片机学习-HC-05蓝牙模块-LCD12864显示</title>
      <link href="/2020/05/08/dan-pian-ji-xue-xi-hc-05-lan-ya-mo-kuai-lcd12864-xian-shi/"/>
      <url>/2020/05/08/dan-pian-ji-xue-xi-hc-05-lan-ya-mo-kuai-lcd12864-xian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="单片机学习-HC-05蓝牙模块-LCD12864显示"><a href="#单片机学习-HC-05蓝牙模块-LCD12864显示" class="headerlink" title="单片机学习-HC-05蓝牙模块-LCD12864显示"></a>单片机学习-HC-05蓝牙模块-LCD12864显示</h1><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>1.硬件部分<br>HC-05蓝牙模块 STC12C5A60S2(51系列单片机) LCD12864<br>2.软件部分<br>Keil软件 串口调试软件</p><h2 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h2><h3 id="蓝牙模块"><a href="#蓝牙模块" class="headerlink" title="蓝牙模块"></a>蓝牙模块</h3><p>蓝牙HC05是主从一体的蓝牙串口模块，简单的说，当蓝牙设备与蓝牙设备配对连接成功后，我们可以忽视蓝牙内部的通信协议，直接将将蓝牙当做串口用。当建立连接，两设备共同使用一通道也就是同一个串口，一个设备发送数据到通道中，另外一个设备便可以接收通道中的数据。<br><img src="https://img-blog.csdnimg.cn/20200330191950940.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="调试部分（百度搜索）"><a href="#调试部分（百度搜索）" class="headerlink" title="调试部分（百度搜索）"></a>调试部分（百度搜索）</h4><p>AT指令集调试配置</p><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*-----------------------------------------------------------------------------* 实 验 名         : HC05蓝牙模块LCD12864显示* 实验说明     : 普中单片机蓝牙串口接收数据控制灯亮灭和LCD12864显示* 连接方式     : * 注    意         : 该试验使用的晶振是12MHZ*******************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg52.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;intrins.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char</span><span class="token macro property">#<span class="token directive keyword">define</span> uint  unsigned int</span><span class="token macro property">#<span class="token directive keyword">define</span> jingzhen     12000000UL             </span><span class="token comment" spellcheck="true">/*使用12.0M晶体*/</span>    <span class="token macro property">#<span class="token directive keyword">define</span> botelv   4800UL                   </span><span class="token comment" spellcheck="true">/*波特率定义为4800*/</span>uchar PuZh<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"www.1234567890.com"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--定义使用的IO--//</span> <span class="token comment" spellcheck="true">/**********************************************************************************************************                    端口定义************************************************************************************************************/</span>sbit RS<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//命令/数据选择  </span>sbit RW<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//读写口 </span>sbit  E<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">7</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//锁存控制  </span>sbit RES <span class="token operator">=</span> P2<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span> sbit PSB <span class="token operator">=</span> P2<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span>sbit LED1<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">;</span>sbit LED2<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--声明全局函数--//   </span><span class="token keyword">void</span> <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Delay_1ms</span><span class="token punctuation">(</span>uint i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DELAY_nUS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/********************************************************************* 名称 : Delay_1ms()* 功能 : 延时子程序，延时时间为 1ms* x * 输入 : x (延时一毫秒的个数)* 输出 : 无***********************************************************************/</span><span class="token keyword">void</span> <span class="token function">Delay_1ms</span><span class="token punctuation">(</span>uint i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1ms延时</span><span class="token punctuation">{</span>  uchar x<span class="token punctuation">,</span>j<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span><span class="token number">148</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>time<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">939</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DELAY_nUS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>Time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//int型数据为16位,所以最大值为65535            </span> <span class="token punctuation">{</span>                                           <span class="token comment" spellcheck="true">//0.1ms</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//定义变量i,j,用于循环语句 </span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>time<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//for循环,循环50*time次</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//for循环,循环50次</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**********************************************************LCD12864部分 *************************************************************/</span> <span class="token keyword">void</span> <span class="token function">checkbusy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>   RS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      RW<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                     E<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>P0<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmdcode<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">checkbusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              RS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      RW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      E<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                     P0<span class="token operator">=</span>cmdcode<span class="token punctuation">;</span>               <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  E<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">wdata</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> dispdata<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">checkbusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              RS<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                     RW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                     E<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                      P0<span class="token operator">=</span>dispdata<span class="token punctuation">;</span>              <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 E<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">LCD12864_InitLCD</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>         PSB<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                     RES<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  RES<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                      <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x0c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">LCD12864_Display_Char</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span>  Char<span class="token punctuation">)</span>   <span class="token punctuation">{</span>                                      <span class="token keyword">switch</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>                                   <span class="token punctuation">{</span>             <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第1行</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第2行</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第3行</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x98</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第4行</span>      <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token function">wdata</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">LCD12864_Display_String</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span>  <span class="token operator">*</span>s<span class="token punctuation">)</span>   <span class="token punctuation">{</span>                                     <span class="token keyword">switch</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>                                          <span class="token punctuation">{</span>             <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x98</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>                  <span class="token function">wdata</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     s<span class="token operator">++</span><span class="token punctuation">;</span>                              <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">LCD12864_Display_UnsignedInt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumbArray<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        NumbArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>     NumbArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumbArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumbArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumbArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>     NumbArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">LCD12864_Display_String</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumbArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Display_SignedInt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>                       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span>                       <span class="token keyword">signed</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span>                       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">signed</span> <span class="token keyword">int</span> Number_Temp<span class="token punctuation">;</span>    Number_Temp <span class="token operator">=</span> Number<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number_Temp <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number_Temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    NumberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">;</span>     NumberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>     NumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">LCD12864_Display_String</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/********************************************************************* 名称 : Com_Int()* 功能 : 串口中断子函数* 输入 : 无 * 输出 : 无***********************************************************************/</span><span class="token keyword">void</span> <span class="token function">Com_Int</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token punctuation">{</span>    uchar i<span class="token punctuation">;</span>  uchar receive_data<span class="token punctuation">;</span>  EA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>RI <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当硬件接收到一个数据时，RI会置位</span>    <span class="token punctuation">{</span>                     RI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            receive_data <span class="token operator">=</span> SBUF<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收到的数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>receive_data <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                LED1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              LED1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">LCD12864_Display_String</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"led1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LED2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              LED2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">LCD12864_Display_String</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"led2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>receive_data <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>              LED2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              LED2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">LCD12864_Display_String</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"led2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LED1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              LED1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">LCD12864_Display_String</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"led1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>             <span class="token function">LCD12864_Display_String</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">36</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SBUF <span class="token operator">=</span> PuZh<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将要发送的数据放入到发送寄存器</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>TI<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待发送数据完成</span>            TI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//清除发送完成标志位</span>            <span class="token function">Delay_1ms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名       : UsartConfiguration()* 函数功能           : 设置串口* 输    入       : 无* 输    出       : 无*******************************************************************************/</span><span class="token keyword">void</span>  <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//串口初始化</span><span class="token punctuation">{</span>         EA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//暂时关闭中断</span>         TMOD<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0x0F</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定时器1模式控制在高4位</span>         TMOD<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定时器1工作在模式2，自动重装模式</span>         SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//串口工作在模式1</span>         TH1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span>jingzhen<span class="token operator">/</span><span class="token punctuation">(</span>botelv<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算定时器重装值</span>         TL1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span>jingzhen<span class="token operator">/</span><span class="token punctuation">(</span>botelv<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         PCON<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//串口波特率加倍</span>         ES<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//串行中断允许</span>         TR1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动定时器1</span>         REN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许接收 </span>         EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//允许中断</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名       : main* 函数功能           : 主函数* 输    入       : 无* 输    出       : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化串口</span>    <span class="token function">LCD12864_InitLCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//LCD12864_Display_String(0,1,"test");</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//LCD12864_Display_String(0,0,"test");</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> 定时器 串口通信 </category>
          
          <category> 嵌入式 </category>
          
          <category> 电子模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> 定时器 串口通信 </tag>
            
            <tag> LCD </tag>
            
            <tag> 蓝牙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32--固件库-矩阵键盘</title>
      <link href="/2020/05/08/stm32-gu-jian-ku-ju-zhen-jian-pan/"/>
      <url>/2020/05/08/stm32-gu-jian-ku-ju-zhen-jian-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-矩阵键盘"><a href="#STM32-矩阵键盘" class="headerlink" title="STM32   矩阵键盘"></a>STM32   矩阵键盘</h1><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>1.硬件部分<br>2.软件部分</p><h2 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h2><p>矩阵键盘的工作方式</p><p>对键盘的响应取决于键盘的工作方式，键盘的工作方式应根据实际应用系统中的CPU的工作状况而定，其选取的原则是既要保证CPU能及时响应按键操作，又不要过多占用CPU的工作时间。通常键盘的工作方式有三种，编程扫描、定时扫描和中断扫描。</p><p>（1）编程扫描方式</p><p>编程扫描方式是利用CPU完成其它工作的空余时间，调用键盘扫描子程序来响应键盘输入的要求。在执行键功能程序时，CPU不再响应键输入要求，直到CPU重新扫描键盘为止。</p><p>（2）定时扫描方式</p><p>定时扫描方式就是每隔一段时间对键盘扫描一次，它利用单片机内部的定时器产生一定时间（例如10ms）的定时，当定时时间到就产生定时器溢出中断。CPU响应中断后对键盘进行扫描，并在有按键按下时识别出该键，再执行该键的功能程序。</p><p>（3）中断扫描方式</p><p>上述两种键盘扫描方式，无论是否按键，CPU都要定时扫描键盘，而单片机应用系统工作时，并非经常需要键盘输入，因此，CPU经常处于空扫描状态。</p><p>为提高CPU工作效率，可采用中断扫描工作方式。其工作过程如下：当无按键按下时，CPU处理自己的工作，当有按键按下时，产生中断请求，CPU转去执行键盘扫描子程序，并识别键号。</p><p>4x4矩阵键盘模块原理图<br><img src="https://img-blog.csdnimg.cn/20200329163924418.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>4x4矩阵键盘模块实物图<br><img src="https://img-blog.csdnimg.cn/20200329163935351.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><h4 id="key-c"><a href="#key-c" class="headerlink" title="key.c"></a>key.c</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************* * 文件名  ：key4x4.c * 描述    ：按键应用函数库         * 硬件连接：------------------------- *          | PB8  - H4          | *          | PB9  - H3             | *          | PB10 - H2          | *          | PB11 - H1             | *          | PB12 - L4          | *          | PB13 - L3             | *          | PB14 - L2          | *          | PB15 - L1             | *           ------------------------- * 库版本  ：ST3.5.0*********************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"key4x4.h"</span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span> </span> <span class="token comment" spellcheck="true">/* * 函数名：Key_GPIO_Config * 描述  ：配置按键用到的I/O口 GPIO端口可以自行定义 * 输入  ：无 * 输出  ：无 */</span><span class="token keyword">void</span> <span class="token function">Key4x4_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*开启按键端口的时钟*/</span>      <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_12 <span class="token operator">|</span> GPIO_Pin_13 <span class="token operator">|</span> GPIO_Pin_14 <span class="token operator">|</span> GPIO_Pin_15<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//GPIO端口引脚可以自行定义</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_10MHz<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//配置引脚速度</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IPU<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//配置引脚模式  GPIO_Mode_IPU 上拉输入</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_8 <span class="token operator">|</span> GPIO_Pin_9 <span class="token operator">|</span> GPIO_Pin_10 <span class="token operator">|</span> GPIO_Pin_11<span class="token punctuation">;</span>          GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>             GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>      <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* * 函数名：u8 Key_Scan * 描述  ：按键扫描函数 * 输入  ：无 * 输出  ：无 */</span>u8 <span class="token function">Key_Scan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    u16 temp<span class="token punctuation">;</span>    u8 ucBackValue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//====扫描第一列==========</span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span><span class="token number">0xfe00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读出整个口得到的值</span>    temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//屏蔽低4位</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//假如高4位不全是1</span>    <span class="token punctuation">{</span>         <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 延时消抖再读</span>        temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span>         temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//消抖后如果再次高4位确定不是全1</span>        <span class="token punctuation">{</span>             temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff00</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读出此次按键的值</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token keyword">case</span> <span class="token number">0xee00</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0xde00</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0xbe00</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0x7e00</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//等待按键放开，初始必然被执行</span>            <span class="token punctuation">{</span>                 temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span>                 temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//====第二列送0==========</span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span><span class="token number">0xfd00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读出整个口得到的值</span>    temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//屏蔽低4位</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//假如高4位不全是1</span>    <span class="token punctuation">{</span>         <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 延时消抖再读</span>        temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span>         temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//消抖后如果再次高4位确定不是全1</span>        <span class="token punctuation">{</span>             temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff00</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读出此次按键的值</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token keyword">case</span> <span class="token number">0xed00</span><span class="token punctuation">:</span>                    ucBackValue <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0xdd00</span><span class="token punctuation">:</span>                    ucBackValue <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0xbd00</span><span class="token punctuation">:</span>                    ucBackValue <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0x7d00</span><span class="token punctuation">:</span>                    ucBackValue <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//等待按键放开</span>            <span class="token punctuation">{</span>                 temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span>                 temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//====第3列送0==========</span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span><span class="token number">0xfb00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读出整个口得到的值</span>    temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//屏蔽低4位</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//假如高4位不全是1</span>    <span class="token punctuation">{</span>         <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 延时消抖再读</span>        temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span>         temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//消抖后如果再次高4位确定不是全1</span>        <span class="token punctuation">{</span>             temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff00</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读出此次按键的值</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token keyword">case</span> <span class="token number">0xeb00</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0xdb00</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0xbb00</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0x7b00</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//等待按键放开</span>        <span class="token punctuation">{</span>             temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span>             temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//====第4列送0==========</span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span><span class="token number">0xf700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读出整个口得到的值</span>    temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//屏蔽低4位</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//假如高4位不全是1</span>    <span class="token punctuation">{</span>         <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 延时消抖再读</span>        temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span>         temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//消抖后如果再次高4位确定不是全1</span>        <span class="token punctuation">{</span>             temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff00</span><span class="token punctuation">;</span>             <span class="token keyword">switch</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token keyword">case</span> <span class="token number">0xe700</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0xd700</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0xb700</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">0x7700</span><span class="token punctuation">:</span>                ucBackValue <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0xf000</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//等待按键放开</span>            <span class="token punctuation">{</span>                 temp<span class="token operator">=</span><span class="token function">GPIO_ReadInputData</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">)</span><span class="token punctuation">;</span>                 temp<span class="token operator">=</span>temp<span class="token operator">&amp;</span><span class="token number">0xf000</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ucBackValue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="key-h"><a href="#key-h" class="headerlink" title="key.h"></a>key.h</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __KEY_H</span><span class="token macro property">#<span class="token directive keyword">define</span>    __KEY_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token keyword">void</span> <span class="token function">Key4x4_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u8 <span class="token function">Key_Scan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">/* __KEY_H */</span></code></pre><h3 id="案例（51单片机-矩阵键盘-数码管显示0-F）"><a href="#案例（51单片机-矩阵键盘-数码管显示0-F）" class="headerlink" title="案例（51单片机 矩阵键盘 数码管显示0~F）"></a>案例（51单片机 矩阵键盘 数码管显示0~F）</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span>             </span><span class="token comment" spellcheck="true">//此文件中定义了单片机的一些特殊功能寄存器</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u16<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//对数据类型进行声明定义</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIO_DIG P0</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIO_KEY P1  </span><span class="token comment" spellcheck="true">//可以改变，引脚可以自定义</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span>  KeyValue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用来存放读取到的键值</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code smgduan<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示0~F的值//共阴数码管</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         : delay* 函数功能           : 延时函数，i=1时，大约延时10us*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span>u16 i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         : KeyDown* 函数功能           : 检测有按键按下并读取键值* 输    入         : 无* 输    出         : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    GPIO_KEY<span class="token operator">=</span><span class="token number">0x0f</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GPIO_KEY<span class="token operator">!=</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读取按键是否按下</span>    <span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时10ms进行消抖</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>GPIO_KEY<span class="token operator">!=</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//再次检测键盘是否按下</span>        <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//测试列</span>            GPIO_KEY<span class="token operator">=</span><span class="token number">0X0F</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>GPIO_KEY<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0X07</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0X0b</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0X0d</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     KeyValue<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0X0e</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//测试行</span>            GPIO_KEY<span class="token operator">=</span><span class="token number">0XF0</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>GPIO_KEY<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0X70</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span>KeyValue<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0Xb0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span>KeyValue<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0Xd0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     KeyValue<span class="token operator">=</span>KeyValue<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0Xe0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span>KeyValue<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>             <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>GPIO_KEY<span class="token operator">!=</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//检测按键松手检测</span>    <span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>                <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按键判断函数</span>            GPIO_DIG<span class="token operator">=</span><span class="token operator">~</span>smgduan<span class="token punctuation">[</span>KeyValue<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.野火STM32视频学习<a href="https://space.bilibili.com/356820657/" target="_blank" rel="noopener">https://space.bilibili.com/356820657/</a><br>2.野火STM32论坛<a href="http://www.firebbs.cn/forum.php" target="_blank" rel="noopener">http://www.firebbs.cn/forum.php</a><br>3.野火STM32开源资料<a href="http://products.embedfire.com/zh_CN/latest/" target="_blank" rel="noopener">http://products.embedfire.com/zh_CN/latest/</a><br>4.畅学电子网 <a href="http://www.eeskill.com/" target="_blank" rel="noopener">http://www.eeskill.com/</a><br>5.知乎链接<a href="https://zhuanlan.zhihu.com/p/103576433" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/103576433</a></p>]]></content>
      
      
      <categories>
          
          <category> STM32 ARM单片机 </category>
          
          <category> C </category>
          
          <category> 电子模块 </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> C </tag>
            
            <tag> STM32 ARM单片机 </tag>
            
            <tag> 矩阵键盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32--基本知识点</title>
      <link href="/2020/05/08/stm32-ji-ben-zhi-shi-dian/"/>
      <url>/2020/05/08/stm32-ji-ben-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32–基本知识点"><a href="#STM32–基本知识点" class="headerlink" title="STM32–基本知识点"></a>STM32–基本知识点</h1><a id="more"></a><h2 id="GPIO端口模式"><a href="#GPIO端口模式" class="headerlink" title="GPIO端口模式"></a>GPIO端口模式</h2><p>（1）GPIO_Mode_AIN 模拟输入<br>（2）GPIO_Mode_IN_FLOATING 浮空输入<br>（3）GPIO_Mode_IPD 下拉输入<br>（4）GPIO_Mode_IPU 上拉输入<br>（5）GPIO_Mode_Out_OD 开漏输出<br>（6）GPIO_Mode_Out_PP 推挽输出<br>（7）GPIO_Mode_AF_OD 复用开漏输出<br>（8）GPIO_Mode_AF_PP 复用推挽输出</p><h2 id="STM32F10C8T6-引脚分布功能图"><a href="#STM32F10C8T6-引脚分布功能图" class="headerlink" title="STM32F10C8T6 引脚分布功能图"></a>STM32F10C8T6 引脚分布功能图</h2><p><img src="https://img-blog.csdnimg.cn/20200329154507476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329154420177.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329154429334.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329154437766.jpg#pic_center" alt="在这里插入图片描述"></p><h2 id="STM32F10C8T6-串口分布"><a href="#STM32F10C8T6-串口分布" class="headerlink" title="STM32F10C8T6 串口分布"></a>STM32F10C8T6 串口分布</h2><pre><code>串口 1PA9  /USART1 _TX/TIM1_ _CH2 PA10 /USART1_ RX/TIM1_ _CH3 ;串口 2PA2  /USART2_ TX/ ADC_ IN2/TIM2_ CH3PA3  /USART2_ RX/ADC_ IN3/TIM2_ _CH4串口 3 21 PB10 /12C2 SCL 1 USART3_ TX22 PB11 / 12C2_ SDA /USART3 _RX</code></pre><h2 id="学习案例"><a href="#学习案例" class="headerlink" title="学习案例"></a>学习案例</h2><h3 id="STM32固件库使用-GPIO端口控制LED"><a href="#STM32固件库使用-GPIO端口控制LED" class="headerlink" title="STM32固件库使用(GPIO端口控制LED)"></a>STM32固件库使用(GPIO端口控制LED)</h3><h4 id="led-c"><a href="#led-c" class="headerlink" title="led.c"></a>led.c</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"led.h"</span></span><span class="token keyword">void</span> <span class="token function">LED_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//定义结构体指针变量    </span>        <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>LED1_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//配置时钟RCC_APB2PeriphClock寄存器</span>    <span class="token comment" spellcheck="true">/*配置GPIO端口的模式        {            1.选择要控制的GPIO引脚            2.设置引脚模式(通用推挽输出)            3.设置引脚速率        }*/</span>        GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode  <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>           GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> LED1_GPIO_PIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//red</span>      <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>LED1_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用GPIO库函数，初始化GPIO端口</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> LED2_GPIO_PIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//blue</span>      <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>LED2_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用GPIO库函数，初始化GPIO端口</span>      GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin   <span class="token operator">=</span> LED3_GPIO_PIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//green</span>      <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>LED3_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用GPIO库函数，初始化GPIO端口</span></code></pre><h4 id="led-h"><a href="#led-h" class="headerlink" title="led.h"></a>led.h</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __LED_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __LED_H</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">/*注意：该引脚定义是根据野火STM32F103霸道开发板的原理图定义的，如果需要自行的设计需要重新更改宏定义选择不同的GPIO端口STM32F103ZET6芯片共有144个引脚其中：GPIOA,GPIOB,GPIOC,GPIOD,GPIOE*/</span><span class="token comment" spellcheck="true">/*red*/</span><span class="token macro property">#<span class="token directive keyword">define</span> LED1_GPIO_PORT        GPIOB                          </span><span class="token comment" spellcheck="true">/* GPIO端口 */</span><span class="token macro property">#<span class="token directive keyword">define</span> LED1_GPIO_CLK         RCC_APB2Periph_GPIOB        </span><span class="token comment" spellcheck="true">/* GPIO端口时钟 */</span><span class="token macro property">#<span class="token directive keyword">define</span> LED1_GPIO_PIN            GPIO_Pin_5                    </span><span class="token comment" spellcheck="true">/* 连接到SCL时钟线的GPIO */</span><span class="token comment" spellcheck="true">/*blue*/</span><span class="token macro property">#<span class="token directive keyword">define</span> LED2_GPIO_PORT        GPIOB                          </span><span class="token comment" spellcheck="true">/* GPIO端口 */</span><span class="token macro property">#<span class="token directive keyword">define</span> LED2_GPIO_CLK         RCC_APB2Periph_GPIOB        </span><span class="token comment" spellcheck="true">/* GPIO端口时钟 */</span><span class="token macro property">#<span class="token directive keyword">define</span> LED2_GPIO_PIN            GPIO_Pin_1                    </span><span class="token comment" spellcheck="true">/* 连接到SCL时钟线的GPIO */</span><span class="token comment" spellcheck="true">/*green*/</span><span class="token macro property">#<span class="token directive keyword">define</span> LED3_GPIO_PORT        GPIOB                          </span><span class="token comment" spellcheck="true">/* GPIO端口 */</span><span class="token macro property">#<span class="token directive keyword">define</span> LED3_GPIO_CLK         RCC_APB2Periph_GPIOB        </span><span class="token comment" spellcheck="true">/* GPIO端口时钟 */</span><span class="token macro property">#<span class="token directive keyword">define</span> LED3_GPIO_PIN            GPIO_Pin_0                    </span><span class="token comment" spellcheck="true">/* 连接到SCL时钟线的GPIO */</span><span class="token macro property">#<span class="token directive keyword">define</span> ON  0</span><span class="token macro property">#<span class="token directive keyword">define</span> OFF 1</span><span class="token comment" spellcheck="true">/* 使用标准的固件库控制IO*/</span><span class="token macro property">#<span class="token directive keyword">define</span> LED1(a)    if (a)    \                    GPIO_SetBits(LED1_GPIO_PORT,LED1_GPIO_PIN);\                    else        \                    GPIO_ResetBits(LED1_GPIO_PORT,LED1_GPIO_PIN)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED2(a)    if (a)    \                    GPIO_SetBits(LED2_GPIO_PORT,LED2_GPIO_PIN);\                    else        \                    GPIO_ResetBits(LED2_GPIO_PORT,LED2_GPIO_PIN)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED3(a)    if (a)    \                    GPIO_SetBits(LED3_GPIO_PORT,LED3_GPIO_PIN);\                    else        \                    GPIO_ResetBits(LED3_GPIO_PORT,LED3_GPIO_PIN)</span><span class="token comment" spellcheck="true">/* 直接操作寄存器的方法控制IO */</span><span class="token macro property">#<span class="token directive keyword">define</span>    digitalHi(p,i)         {p->BSRR=i;}     </span><span class="token comment" spellcheck="true">//输出为高电平        </span><span class="token macro property">#<span class="token directive keyword">define</span> digitalLo(p,i)         {p->BRR=i;}     </span><span class="token comment" spellcheck="true">//输出低电平</span><span class="token macro property">#<span class="token directive keyword">define</span> digitalToggle(p,i) {p->ODR ^=i;} </span><span class="token comment" spellcheck="true">//输出反转状态</span><span class="token comment" spellcheck="true">/* 定义控制IO的宏 */</span><span class="token macro property">#<span class="token directive keyword">define</span> LED1_TOGGLE         digitalToggle(LED1_GPIO_PORT,LED1_GPIO_PIN)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED1_OFF           digitalHi(LED1_GPIO_PORT,LED1_GPIO_PIN)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED1_ON               digitalLo(LED1_GPIO_PORT,LED1_GPIO_PIN)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED2_TOGGLE         digitalToggle(LED2_GPIO_PORT,LED2_GPIO_PIN)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED2_OFF           digitalHi(LED2_GPIO_PORT,LED2_GPIO_PIN)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED2_ON               digitalLo(LED2_GPIO_PORT,LED2_GPIO_PIN)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED3_TOGGLE         digitalToggle(LED3_GPIO_PORT,LED3_GPIO_PIN)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED3_OFF           digitalHi(LED3_GPIO_PORT,LED3_GPIO_PIN)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED3_ON               digitalLo(LED3_GPIO_PORT,LED3_GPIO_PIN)</span><span class="token comment" spellcheck="true">/* 基本混色，后面高级用法使用PWM可混出全彩颜色,且效果更好 */</span><span class="token comment" spellcheck="true">//红</span><span class="token macro property">#<span class="token directive keyword">define</span> LED_RED  \                    LED1_ON;\                    LED2_OFF\                    LED3_OFF</span><span class="token comment" spellcheck="true">//绿</span><span class="token macro property">#<span class="token directive keyword">define</span> LED_GREEN        \                    LED1_OFF;\                    LED2_ON\                    LED3_OFF</span><span class="token comment" spellcheck="true">//蓝</span><span class="token macro property">#<span class="token directive keyword">define</span> LED_BLUE    \                    LED1_OFF;\                    LED2_OFF\                    LED3_ON</span><span class="token comment" spellcheck="true">//黄(红+绿)                    </span><span class="token macro property">#<span class="token directive keyword">define</span> LED_YELLOW    \                    LED1_ON;\                    LED2_ON\                    LED3_OFF</span><span class="token comment" spellcheck="true">//紫(红+蓝)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED_PURPLE    \                    LED1_ON;\                    LED2_OFF\                    LED3_ON</span><span class="token comment" spellcheck="true">//青(绿+蓝)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED_CYAN \                    LED1_OFF;\                    LED2_ON\                    LED3_ON</span><span class="token comment" spellcheck="true">//白(红+绿+蓝)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED_WHITE    \                    LED1_ON;\                    LED2_ON\                    LED3_ON</span><span class="token comment" spellcheck="true">//黑(全部关闭)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED_RGBOFF    \                    LED1_OFF;\                    LED2_OFF\                    LED3_OFF</span><span class="token keyword">void</span> <span class="token function">LED_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>   </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 来到这里的时候，系统的时钟已经被配置成72M。</span>        <span class="token function">LED_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//red</span>                 <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>LED1_GPIO_PORT <span class="token punctuation">,</span> LED1_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开</span>                 <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>LED1_GPIO_PORT <span class="token punctuation">,</span> LED1_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关</span>             <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// blue</span>             <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>LED2_GPIO_PORT <span class="token punctuation">,</span> LED2_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开</span>             <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>LED2_GPIO_PORT <span class="token punctuation">,</span> LED2_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关</span>             <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//green </span>             <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>LED3_GPIO_PORT <span class="token punctuation">,</span> LED3_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开</span>             <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>LED3_GPIO_PORT <span class="token punctuation">,</span> LED3_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关</span>             <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="软件延迟函数"><a href="#软件延迟函数" class="headerlink" title="软件延迟函数"></a>软件延迟函数</h4><h5 id="delay-c"><a href="#delay-c" class="headerlink" title="delay.c"></a>delay.c</h5><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"DELAY.H"</span>                           </span><span class="token keyword">void</span> <span class="token function">DELAY_nUS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>Time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>time<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">939</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h5 id="dely-h"><a href="#dely-h" class="headerlink" title="dely.h"></a>dely.h</h5><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __DELAY_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __DELAY_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token keyword">void</span> <span class="token function">DELAY_nUS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="STM32-GPIO端口-寄存器点灯"><a href="#STM32-GPIO端口-寄存器点灯" class="headerlink" title="STM32 GPIO端口 寄存器点灯"></a>STM32 GPIO端口 寄存器点灯</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">//STM32库文件</span><span class="token comment" spellcheck="true">/***************************************************  * @file    main.c  * @author  dele  * @version V1.0  * @date    2020-01-28  * @brief   测试LED*****************************************************/</span><span class="token comment" spellcheck="true">/*****************************************************    操作LED时寄存器的步骤    {      1.打开 GPIO 端口的时钟      2.配置IO口  (输出/输入)      3.控制ODR寄存器的高低电平状态    }*****************************************************/</span><span class="token comment" spellcheck="true">/*函数声明*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SystemInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*****************************************************函数名称：main()函数功能：主函数*****************************************************/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 打开 GPIOB 端口的时钟</span>        <span class="token operator">*</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token number">0x40021018</span> <span class="token operator">|</span><span class="token operator">=</span>  <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 配置IO口为输出</span>        <span class="token operator">*</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token number">0x40010C00</span> <span class="token operator">|</span><span class="token operator">=</span>  <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 控制 ODR 寄存器</span>        <span class="token operator">*</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token number">0x40010C0C</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出低电平    </span>         <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 打开 GPIOB 端口的时钟</span>        <span class="token operator">*</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token number">0x40021018</span> <span class="token operator">|</span><span class="token operator">=</span>  <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 配置IO口为输出</span>        <span class="token operator">*</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token number">0x40010C00</span> <span class="token operator">|</span><span class="token operator">=</span>  <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token number">0x40010C0C</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出高电平    </span>        <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********************************************************************函数名称：DELAY_nMS()函数功能：延迟函数(延迟1ms)***********************************************************************/</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>time<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">939</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**********************************************************************函数名称：SystemInit()函数功能：系统初始化(从汇编代码进入C程序)***********************************************************************/</span><span class="token keyword">void</span> <span class="token function">SystemInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//骗过编译器</span><span class="token punctuation">}</span></code></pre><p>注：使用开发板是野火F103ZET6霸道开发板（代码是火哥的例程资料代码）</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>1.野火STM32视频学习<a href="https://space.bilibili.com/356820657/" target="_blank" rel="noopener">https://space.bilibili.com/356820657/</a><br>2.野火STM32论坛<a href="http://www.firebbs.cn/forum.php" target="_blank" rel="noopener">http://www.firebbs.cn/forum.php</a><br>3.野火STM32开源资料<a href="http://products.embedfire.com/zh_CN/latest/" target="_blank" rel="noopener">http://products.embedfire.com/zh_CN/latest/</a></p>]]></content>
      
      
      <categories>
          
          <category> STM32 ARM单片机 </category>
          
          <category> C </category>
          
          <category> 电子模块 </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> C </tag>
            
            <tag> STM32 ARM单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32--固件库使用--按键输入 (1)</title>
      <link href="/2020/05/08/stm32-gu-jian-ku-shi-yong-an-jian-shu-ru-1/"/>
      <url>/2020/05/08/stm32-gu-jian-ku-shi-yong-an-jian-shu-ru-1/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32–固件库使用–按键输入"><a href="#STM32–固件库使用–按键输入" class="headerlink" title="STM32–固件库使用–按键输入"></a>STM32–固件库使用–按键输入</h1><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>1.硬件<br>STM32F103C8T6 独立按键<br>2.软件<br>keil软件</p><h2 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h2><p>1.按键分类与输入原理</p><p>按键按照结构原理科分为两类，一类是触点式开关按键，如机械式开关、导电橡胶式开关灯；另一类是无触点式开关按键，如电气式按键，磁感应按键等。前者造价低，后者寿命长。目前，微机系统中最常见的是触点式开关按键。</p><p>在单片机应用系统中，除了复位按键有专门的复位电路及专一的复位功能外，其他按键都是以开关状态来设置控制功能或输入数据的。当所设置的功能键或数字键按下时，计算机应用系统应完成该按键所设定的功能，键信息输入时与软件结构密切相关的过程。</p><p>对于一组键或一个键盘，总有一个接口电路与CPU相连。CPU可以采用查询或中断方式了解有无将按键输入，并检查是哪一个按键按下，将该键号送人累加器，然后通过跳转指令转入执行该键的功能程序，执行完成后再返回主程序。</p><p>2.按键结构与特点</p><p>微机键盘通常使用机械触点式按键开关，其主要功能式把机械上的通断转换为电气上的逻辑关系。也就是说，它能提供标准的TTL逻辑电平，以便于通用数字系统的逻辑电平相容。机械式按键再按下或释放时，由于机械弹性作用的影响，通常伴随有一定的时间触点机械抖动，然后其触点才稳定下来。其抖动过程如下图1所示，抖动时间的长短与开关的机械特性有关，一般为5-10ms。在触点抖动期间检测按键的通与断，可能导致判断出错，即按键一次按下或释放错误的被认为是多次操作，这种情况是不允许出现的。为了克服你、按键触点机械抖动所致的检测误判，必须采取消抖措施。按键较少时，可采用硬件消抖；按键较多式，采用软件消抖。</p><p><img src="https://img-blog.csdnimg.cn/20200329162917702.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>按键编码</p><p>一组按键或键盘都要通过I/O口线查询按键的开关状态。根据键盘结构的不同，采用不同的编码。无论有无编码，以及采用什么编码，最后都要转换成为与累加器中数值相对应的键值，以实现按键功能程序的跳转。</p><p>（2）键盘程序</p><p>一个完整的键盘控制程序应具备以下功能：</p><p>a.检测有无按键按下，并采取硬件或软件措施消抖。</p><p>b.有可靠的逻辑处理办法。每次只处理一个按键，期间对任何按键的操作对系统不产生影响，且无论一次按键 时间有多长，系统仅执行一次按键功能程序。</p><p>c.准确输出按键值（或键号），以满足跳转指令要求。</p><p>3.独立按键</p><p>（1）独立按键</p><p>单片机控制系统中，如果只需要几个功能键，此时，可采用独立式按键结构。</p><p>独立按键式直接用I/O口线构成的单个按键电路，其特点式每个按键单独占用一根I/O口线，每个按键的工作不会影响其他I/O口线的状态。独立按键的典型应用如图所示。独立式按键电路配置灵活，软件结构简单，但每个按键必须占用一个I/O口线，因此，在按键较多时，I/O口线浪费较大，不宜采用。</p><p><img src="https://img-blog.csdnimg.cn/20200329162937333.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>独立按键的软件常采用查询式结构。先逐位查询没跟I/O口线的输入状态，如某一根I/O口线输入为低电平，则可确认该I/O口线所对应的按键已按下，然后，再转向该键的功能处理程序。</p><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><h4 id="key-c"><a href="#key-c" class="headerlink" title="key.c"></a>key.c</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"key.h"</span></span><span class="token keyword">void</span> <span class="token function">KEY_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//定义结构体指针变量</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>KEY1_GPIO_CLK<span class="token operator">|</span>KEY2_GPIO_CLK<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//开启按键端口的时钟</span>    <span class="token comment" spellcheck="true">/*按键输入控制GPIO端口的步骤*/</span>    <span class="token comment" spellcheck="true">/*      {   1.选择按键的引脚   2.设置按键的引脚为浮空输入   3.使用结构体初始化按键   }    */</span>  <span class="token comment" spellcheck="true">//key1</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY1_GPIO_PIN<span class="token punctuation">;</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>     <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY1_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//key2</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> KEY2_GPIO_PIN<span class="token punctuation">;</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span>     <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>KEY2_GPIO_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* * 函数名：Key_Scan * 描述  ：检测是否有按键按下 * 输入  ：GPIOx：x 可以是 A，B，C，D或者 E *             GPIO_Pin：待读取的端口位      * 输出  ：KEY_OFF(没按下按键)、KEY_ON（按下按键） */</span>uint8_t <span class="token function">Key_Scan</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span>uint16_t GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*检测是否有按键按下 */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOx<span class="token punctuation">,</span>GPIO_Pin<span class="token punctuation">)</span> <span class="token operator">==</span> KEY_ON <span class="token punctuation">)</span>      <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/*等待按键释放 */</span><span class="token comment" spellcheck="true">//松手检测</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOx<span class="token punctuation">,</span>GPIO_Pin<span class="token punctuation">)</span> <span class="token operator">==</span> KEY_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span>     KEY_ON<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> KEY_OFF<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="key-h"><a href="#key-h" class="headerlink" title="key.h"></a>key.h</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __KEY_H</span><span class="token macro property">#<span class="token directive keyword">define</span> __KEY_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token comment" spellcheck="true">/*注意：该引脚定义是根据野火STM32F103霸道开发板的原理图定义的，如果需要自行的设计需要重新更改宏定义选择不同的GPIO端口STM32F103ZET6芯片共有144个引脚其中：GPIOA,GPIOB,GPIOC,GPIOD,GPIOE*/</span><span class="token comment" spellcheck="true">//  引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY1_GPIO_CLK     RCC_APB2Periph_GPIOA</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY1_GPIO_PORT    GPIOA               </span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY1_GPIO_PIN     GPIO_Pin_0</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY2_GPIO_CLK     RCC_APB2Periph_GPIOC</span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY2_GPIO_PORT    GPIOC           </span><span class="token macro property">#<span class="token directive keyword">define</span>    KEY2_GPIO_PIN     GPIO_Pin_13</span> <span class="token comment" spellcheck="true">/** 按键按下标置宏    *  按键按下为高电平，设置 KEY_ON=1， KEY_OFF=0    *  若按键按下为低电平，把宏设置成KEY_ON=0 ，KEY_OFF=1 即可    */</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY_ON    1</span><span class="token macro property">#<span class="token directive keyword">define</span> KEY_OFF    0</span><span class="token keyword">void</span> <span class="token function">KEY_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uint8_t <span class="token function">Key_Scan</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span>uint16_t GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span>   </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">LED_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">KEY_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                                <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Key_Scan</span><span class="token punctuation">(</span>KEY1_GPIO_PORT<span class="token punctuation">,</span>KEY1_GPIO_PIN<span class="token punctuation">)</span> <span class="token operator">==</span> KEY_ON  <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>LED1_GPIO_PORT <span class="token punctuation">,</span> LED1_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开</span>            <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>LED2_GPIO_PORT   <span class="token punctuation">,</span> LED2_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关</span>            <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>LED3_GPIO_PORT   <span class="token punctuation">,</span> LED3_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关</span>        <span class="token punctuation">}</span>          <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Key_Scan</span><span class="token punctuation">(</span>KEY2_GPIO_PORT<span class="token punctuation">,</span>KEY2_GPIO_PIN<span class="token punctuation">)</span> <span class="token operator">==</span> KEY_ON  <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>LED1_GPIO_PORT <span class="token punctuation">,</span> LED1_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关</span>            <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>LED2_GPIO_PORT <span class="token punctuation">,</span> LED2_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关</span>            <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>LED3_GPIO_PORT <span class="token punctuation">,</span> LED3_GPIO_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="案例（51单片机-独立按键）"><a href="#案例（51单片机-独立按键）" class="headerlink" title="案例（51单片机 独立按键）"></a>案例（51单片机 独立按键）</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"reg51.h"</span></span><span class="token comment" spellcheck="true">/*引脚端口定义*/</span>sbit key1<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span>sbit key2<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span>sbit key3<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span> sbit key4<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">;</span>sbit led1<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span>sbit led2<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 声明定义*/</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char</span><span class="token macro property">#<span class="token directive keyword">define</span> uint  unsigned int</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">key_scan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*函数主体部分*/</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//DELAY_nMS(1)//延迟一毫秒</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>time<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">939</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*独立按键扫描函数*/</span><span class="token keyword">void</span> <span class="token function">key_scan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//检测按键K1是否按下</span>    <span class="token punctuation">{</span>            <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//消除抖动 一般大约10ms</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//再次判断按键是否按下</span>        <span class="token punctuation">{</span>            led1<span class="token operator">=</span><span class="token operator">~</span>led1<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//led状态取反</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//检测按键是否松开</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//检测按键K1是否按下</span>    <span class="token punctuation">{</span>            <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//消除抖动 一般大约10ms</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//再次判断按键是否按下</span>        <span class="token punctuation">{</span>            led2<span class="token operator">=</span><span class="token operator">~</span>led2<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//led状态取反</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//检测按键是否松开</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">keyscan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//检测按键K1是否按下</span>    <span class="token punctuation">{</span>            <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//消除抖动 一般大约10ms</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//再次判断按键是否按下</span>        <span class="token punctuation">{</span>                          <span class="token comment" spellcheck="true">//执行需要完成的操作</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//检测按键是否松开</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*主函数部分*/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">key_scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.野火STM32视频学习<a href="https://space.bilibili.com/356820657/" target="_blank" rel="noopener">https://space.bilibili.com/356820657/</a><br>2.野火STM32论坛<a href="http://www.firebbs.cn/forum.php" target="_blank" rel="noopener">http://www.firebbs.cn/forum.php</a><br>3.野火STM32开源资料<a href="http://products.embedfire.com/zh_CN/latest/" target="_blank" rel="noopener">http://products.embedfire.com/zh_CN/latest/</a><br>4.知乎链接<a href="https://zhuanlan.zhihu.com/p/103575964" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/103575964</a></p>]]></content>
      
      
      <categories>
          
          <category> STM32 ARM单片机 </category>
          
          <category> C </category>
          
          <category> 电子模块 </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> C </tag>
            
            <tag> STM32 ARM单片机 </tag>
            
            <tag> 键盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32--数码管显示</title>
      <link href="/2020/05/08/stm32-shu-ma-guan-xian-shi/"/>
      <url>/2020/05/08/stm32-shu-ma-guan-xian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-–-数码管显示"><a href="#STM32-–-数码管显示" class="headerlink" title="STM32 – 数码管显示"></a>STM32 – 数码管显示</h1><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>1.硬件部分<br>STM32F103C8T6 最小系统板  一位共阴数码管<br>2.软件部分<br>Keil软件编程 数码管码表</p><h2 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h2><h3 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>数码管，也称作辉光管，是一种可以显示数字和其他信息的电子设备。玻璃管中包括一个金属丝网制成的阳极和多个阴极。大部分数码管阴极的形状为数字。管中充以低压气体，通常大部分为氖加上一些汞和/或氩。给某一个阴极充电，数码管就会发出颜色光，视乎管内的气体而定，一般都是橙色或绿色。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>数码管也称LED数码管，不同行业人士对数码管的称呼不一样，其实都是同样的产品。<br>按发光二极管单元连接方式可分为共阳极数码管和共阴极数码管。共阳数码管是指将所有发光二极管的阳极接到一起形成公共阳极(COM)的数码管，共阳数码管在应用时应将公共极COM接到+5V，当某一字段发光二极管的阴极为低电平时，相应字段就点亮，当某一字段的阴极为高电平时，相应字段就不亮。共阴数码管是指将所有发光二极管的阴极接到一起形成公共阴极(COM)的数码管，共阴数码管在应用时应将公共极COM接到地线GND上，当某一字段发光二极管的阳极为高电平时，相应字段就点亮，当某一字段的阳极为低电平时，相应字段就不亮。</p><h4 id="1-共阳数码管"><a href="#1-共阳数码管" class="headerlink" title="1.共阳数码管"></a>1.共阳数码管</h4><p>共阳数码管在应用时应将公共极COM接到+5V，当某一字段发光二极管的阴极为低电平时，相应字段就点亮，当某一字段的阴极为高电平时，相应字段就不亮。</p><h4 id="2-共阴数码管"><a href="#2-共阴数码管" class="headerlink" title="2.共阴数码管"></a>2.共阴数码管</h4><p>对于共阴极数码管来说，当某个发光二极管的阳极为高电平时，发光二极管点亮，相应的段被显示。同样，共阳极数码管的阳极连接在一起，公共阳极接+5V，当某个发光二极管的阴极接低电平时，该发光二极管被点亮，相应的段被显示</p><p><img src="https://img-blog.csdnimg.cn/20200329160539852.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="数码管码表"><a href="#数码管码表" class="headerlink" title="数码管码表"></a>数码管码表</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code smgduan<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0xa4</span><span class="token punctuation">,</span> <span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x8e</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//共阳数码管</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code  smgduan<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////共阴数码管</span></code></pre><h4 id="静态数码管硬件电路设计"><a href="#静态数码管硬件电路设计" class="headerlink" title="静态数码管硬件电路设计"></a>静态数码管硬件电路设计</h4><p><img src="https://img-blog.csdnimg.cn/20200329160609282.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="实物"><a href="#实物" class="headerlink" title="实物"></a>实物</h4><p><img src="https://img-blog.csdnimg.cn/20200329160527185.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************** * 文件名  ：smg.c * 描述    ：smg 应用函数库 * 硬件连接：----------------- *          |   PA0 - A   | *          |   PA1 - B   | *          |   PA2 - C   | *          |   PA3 - D   | *          |   PA4 - E   | *          |   PA5 - F   | *          |   PA6 - G   | *          |   PA7 - DP  | *           -----------------                                                                                          *********************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"smg.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token comment" spellcheck="true">//共阳数码管断码表</span>u8 <span class="token keyword">const</span> smg_data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token number">0xf9</span><span class="token punctuation">,</span><span class="token number">0xa4</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token number">0x99</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0xc6</span><span class="token punctuation">,</span><span class="token number">0xa1</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x8e</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 函数名：SMG_GPIO_Config * 描述  ：配置数码管用到的I/O口 * 输入  ：无 * 输出  ：无 */</span><span class="token keyword">void</span> <span class="token function">SMG_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span> RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0 <span class="token operator">|</span> GPIO_Pin_1 <span class="token operator">|</span> GPIO_Pin_2 <span class="token operator">|</span> GPIO_Pin_3 <span class="token operator">|</span> GPIO_Pin_4 <span class="token operator">|</span> GPIO_Pin_5 <span class="token operator">|</span> GPIO_Pin_6 <span class="token operator">|</span> GPIO_Pin_7<span class="token punctuation">;</span>        GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>           GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0 <span class="token operator">|</span> GPIO_Pin_1 <span class="token operator">|</span> GPIO_Pin_2 <span class="token operator">|</span> GPIO_Pin_3 <span class="token operator">|</span> GPIO_Pin_4 <span class="token operator">|</span> GPIO_Pin_5 <span class="token operator">|</span> GPIO_Pin_6 <span class="token operator">|</span> GPIO_Pin_7<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// turn off all led</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * 函数名：SMG_Display * 描述  ：驱动数码管显示0-F * 输入  ：无 * 输出  ：无 */</span><span class="token keyword">void</span> <span class="token function">SMG_Display</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    u8 i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span>smg_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Display_N</span><span class="token punctuation">(</span>u8 N<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span>smg_data<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span></code></pre><h5 id="smg-h"><a href="#smg-h" class="headerlink" title="smg.h"></a>smg.h</h5><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __SMG_H</span><span class="token macro property">#<span class="token directive keyword">define</span>    __SMG_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span> </span><span class="token keyword">void</span> <span class="token function">SMG_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SMG_Display</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Display_N</span><span class="token punctuation">(</span>u8 N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">/* __SMG_H */</span></code></pre><h3 id="数码管案例（基于51单片机-四位数码管模块（74HC595））"><a href="#数码管案例（基于51单片机-四位数码管模块（74HC595））" class="headerlink" title="数码管案例（基于51单片机 四位数码管模块（74HC595））"></a>数码管案例（基于51单片机 四位数码管模块（74HC595））</h3><p><img src="https://img-blog.csdnimg.cn/20200329161633630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>14脚：DS（SER），串行数据输入引脚</p><p>13脚：OE， 输出使能控制脚，它是低电才使能输出，所以接GND</p><p>12脚：RCK，存储寄存器时钟输入引脚。上升沿时，数据从移位寄存器转存带存储寄存器。</p><p>11脚：SCK，移位寄存器时钟引脚，上升沿时，移位寄存器中的bit 数据整体后移，并接受新的bit（从SER输入）。</p><p>10脚：MR,低电平时，清空移位寄存器中已有的bit数据，一般不用，接 高电平即可。</p><p>9 脚 ：串行数据出口引脚。当移位寄存器中的数据多于8bit时，会把已有的bit“挤出去”，就是从这里出去的。用于595的级联。</p><p>Qx：并行输出引脚</p><p>注意：</p><p>当芯片资料上面的引脚说有横线时，属于低电平工作。否则高电平工作；</p><p>共阳数码管如果要点亮，对应的引脚需要给1</p><p>共阴数码管如果要点亮，对应的引脚需要给0</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"reg51.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code LED_0F<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0xF9</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0xB0</span><span class="token punctuation">,</span><span class="token number">0x99</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x8C</span><span class="token punctuation">,</span><span class="token number">0xBF</span><span class="token punctuation">,</span><span class="token number">0xC6</span><span class="token punctuation">,</span><span class="token number">0xA1</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xbf</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//共阳数码管码表</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code  smgduan<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示0~F的值</span> <span class="token comment" spellcheck="true">//-----------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// 函数原形定义</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char</span><span class="token macro property">#<span class="token directive keyword">define</span> uint unsigned int</span><span class="token comment" spellcheck="true">//能够使用unsigned char //unsigned int 尽量使用最原始的变量类型名字</span><span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">void</span> <span class="token function">LED4_Display</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// LED数码管显示</span><span class="token keyword">void</span> <span class="token function">LED_OUT</span><span class="token punctuation">(</span>uchar X<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// LED数码管单字节串行移位函数</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code LED_0F<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// LED字模表</span><span class="token comment" spellcheck="true">/* 端口引脚定义*/</span>sbit DIO <span class="token operator">=</span> P1<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//串行数据输入</span>sbit RCLK  <span class="token operator">=</span> P1<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//时钟脉冲信号――上升沿有效</span>sbit SCLK <span class="token operator">=</span> P1<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//打入信号――――上升沿有效</span><span class="token comment" spellcheck="true">//-----------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">// 全局变量</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> LED<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用于LED的8位显示缓存</span><span class="token comment" spellcheck="true">//*****************************************************************************</span><span class="token comment" spellcheck="true">// 主程序</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LED<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>    LED<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    LED<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>    LED<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LED4_Display</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// LED数码管显示函数</span><span class="token keyword">void</span> <span class="token function">LED4_Display</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> code <span class="token operator">*</span>led_table<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 查表指针</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示第1位</span>    led_table <span class="token operator">=</span> LED_0F <span class="token operator">+</span> LED<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token operator">*</span>led_table<span class="token punctuation">;</span>    <span class="token function">LED_OUT</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LED_OUT</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//0x01显示在第一位    </span>    RCLK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    RCLK <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示第2位</span>    led_table <span class="token operator">=</span> LED_0F <span class="token operator">+</span> LED<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token operator">*</span>led_table<span class="token punctuation">;</span>    <span class="token function">LED_OUT</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LED_OUT</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//0x02显示在第2位    </span>    RCLK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    RCLK <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示第3位</span>    led_table <span class="token operator">=</span> LED_0F <span class="token operator">+</span> LED<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token operator">*</span>led_table<span class="token punctuation">;</span>    <span class="token function">LED_OUT</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LED_OUT</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//0x04显示在第3位</span>    RCLK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    RCLK <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示第4位</span>    led_table <span class="token operator">=</span> LED_0F <span class="token operator">+</span> LED<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token operator">*</span>led_table<span class="token punctuation">;</span>    <span class="token function">LED_OUT</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LED_OUT</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//0x08显示在第4位    </span>    RCLK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    RCLK <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// LED数码管单字节串行移位函数</span><span class="token keyword">void</span> <span class="token function">LED_OUT</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>               DIO<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>           <span class="token keyword">else</span>          <span class="token punctuation">{</span>              DIO<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        number<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        SCLK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        SCLK <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1.野火STM32视频学习<a href="https://space.bilibili.com/356820657/" target="_blank" rel="noopener">https://space.bilibili.com/356820657/</a><br>2.野火STM32论坛<a href="http://www.firebbs.cn/forum.php" target="_blank" rel="noopener">http://www.firebbs.cn/forum.php</a><br>3.野火STM32开源资料<a href="http://products.embedfire.com/zh_CN/latest/" target="_blank" rel="noopener">http://products.embedfire.com/zh_CN/latest/</a><br>4.畅学电子网 <a href="http://www.eeskill.com/" target="_blank" rel="noopener">http://www.eeskill.com/</a><br>5.知乎链接：<a href="https://zhuanlan.zhihu.com/p/103434229" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/103434229</a><br>6.共阳数码管字型码，共阴数码管字型码<br><img src="https://img-blog.csdnimg.cn/20200329161848727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020032916190124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> STM32 ARM单片机 </category>
          
          <category> C </category>
          
          <category> 电子模块 </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> C </tag>
            
            <tag> STM32 ARM单片机 </tag>
            
            <tag> 数码管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Timer &amp; interrupt</title>
      <link href="/2020/05/08/timer-interrupt/"/>
      <url>/2020/05/08/timer-interrupt/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机学习–定时器–中断–串口通信"><a href="#51单片机学习–定时器–中断–串口通信" class="headerlink" title="51单片机学习–定时器–中断–串口通信"></a>51单片机学习–定时器–中断–串口通信</h1><a id="more"></a><h2 id="定时器–中断–串口通信"><a href="#定时器–中断–串口通信" class="headerlink" title="定时器–中断–串口通信"></a>定时器–中断–串口通信</h2><h3 id="中断分类"><a href="#中断分类" class="headerlink" title="中断分类"></a>中断分类</h3><p>  定时器中断 外部中断  串口中断</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ol><li>基本概念<br>对于单片机来讲， 中断是指 CPU 在处理某一事件 A 时， 发生了另一事件 B，<br>请求 CPU 迅速去处理(中断发生)； CPU 暂时停止当前的工作(中断响应)， 转去<br>处理事件 B(中断服务)； 待 CPU 将事件 I 处理完毕后， 再回到原来事件 A 被<br>中断的地方继续处理事件 A(中断返回)， 这一过程称为中断。</li><li>学习目的<br>中断是为使单片机具有对外部或内部随机发生的事件实时处理而设置的，<br>中断功能的存在， 很大程度上提高了单片机处理外部或内部事件的能力。 它也是<br>单片机最重要的功能之一， 是我们学习单片机必须要掌握的。<br><img src="/medias/images/interrput1.jpg" alt="avatar"></li><li>流程图<br><img src="/medias/images/interrput2.jpg" alt="avatar"></li><li>中断系统-中断源<br>引起 CPU 中断的根源称为中断源。 中断源向 CPU 提出中断请求， CPU 暂时<br>中断原来的事务 A， 转去处理事件 B， 对事件 B 处理完毕后， 再回到原来被中断<br>的地方(即断点)， 称为中断返回。 实现上述中断功能的部件称为中断系统(中断<br>机构)。</li><li>优点<br> ①分时操作。 CPU 可以分时为多个 I/O 设备服务， 提高了计算机的利用率；<br> ②实时响应。 CPU 能够及时处理应用系统的随机事件， 系统的实时性大大增<br>强；<br> ③可靠性高。 CPU 具有处理设备故障及掉电等突发性事件能力， 从而使系统<br>可靠性提高。</li><li>STC89C5X系列单片机一般配置<br>51 系列单片机一定有基本的 5 个中断， 但不全有 8 个中断， 需要查看芯片手册，基本的 5 个中断： INT0、 INT1、 定时器 0/1， 串口中断。<br>基本类型单片机的中断有2个中断优先级。<br>用户可以用关总中断允许位(EA/IE.7)或相应中断的允许位来屏蔽所有的中断请求， 也可以用打开相应的中断允许位来使 CPU 响应相应的中断申请。 其中有些中断源可以用软件独立地控制为开中断或关中断状态。 每一个中断的优先级别均可用软件设置。<br>高优先级的中断请求可以打断低优先级的中断， 反之， 低优先级的中断请求不可以打断高优先级及同优先级的中断。 当两个相同优先级的中断同时产生时， 将由查询次序来决定系统先响应哪个中断。 STC89C5X 系列单片机的各个中断查询次序表如下图所示：<br><img src="/medias/images/interrput3.jpg" alt="avatar"></li><li>传统51单片机的5个基本中断源的理解<br><img src="/medias/images/interrput4.jpg" alt="avatar"><br>①INT0 对应的是 P3.2 口的附加功能， 可由 IT0(TCON.0)选择其为低电平有<br>效还是下降沿有效。 当 CPU 检测到 P3.2 引脚上出现有效的中断信号时， 中断标<br>志 IE0(TCON.1)置 1， 向 CPU 申请中断。<br>②INT1 对应的是 P3.3 口的附加功能， 可由 IT1(TCON.2)选择其为低电平有<br>效还是下降沿有效。 当 CPU 检测到 P3.3 引脚上出现有效的中断信号时， 中断标<br>志 IE1(TCON.3)置 1,向 CPU 申请中断。<br>③T0 对应的是 P3.4 口的附加功能， TF0（TCON.5） ,片内定时/计数器 T0 溢<br>出中断请求标志。 当定时/计数器 T0 发生溢出时， 置位 TF0， 并向 CPU 申请中断。<br>④T1 对应的是 P3.5 口的附加功能， TF1（ TCON.7） ， 片内定时/计数器 T1<br>溢出中断请求标志。 当定时/计数器 T1 发生溢出时， 置位 TF1， 并向 CPU 申请中<br>断。<br>⑤RXD 和 TXD 对应对应的是 P3.0 和 P3.1 口的附加功能， RI（SCON.0） 或 TI<br>（SCON.1） ， 串行口中断请求标志。 当串行口接收完一帧串行数据时置位 RI 或<br>当串行口发送完一帧串行数据时置位 TI， 向 CPU 申请中断。</li><li>中断允许控制<br>CPU 对中断系统所有中断以及某个中断源的开放和屏蔽是由中断允许寄存器IE控制。<br><img src="/medias/images/interrput5.jpg" alt="avatar"><br>EX0(IE.0)， 外部中断 0 允许位；<br>ET0(IE.1)， 定时/计数器 T0 中断允许位；<br>EX1(IE.2)， 外部中断 0 允许位；<br>ET1(IE.3)， 定时/计数器 T1 中断允许位；<br>ES（IE.4)， 串行口中断允许位；<br>EA (IE.7)， CPU 中断允许（总允许）位。</li><li>中断请求标志 TCON<br><img src="/medias/images/interrput6.jpg" alt="avatar"><br>IT0（TCON.0） ， 外部中断 0 触发方式控制位。<br>当 IT0=0 时， 为电平触发方式。<br>当 IT0=1 时， 为边沿触发方式（下降沿有效） 。<br>IE0（TCON.1） ， 外部中断 0 中断请求标志位。<br>IT1（TCON.2） ， 外部中断 1 触发方式控制位。<br>IE1（TCON.3） ， 外部中断 1 中断请求标志位。<br>TF0（TCON.5） ， 定时/计数器 T0 溢出中断请求标志位。<br>TF1（TCON.7） ， 定时/计数器 T1 溢出中断请求标志位。</li><li>中断优先级<br><img src="/medias/images/interrput7.jpg" alt="avatar"></li><li>中断号<br><img src="/medias/images/interrput8.jpg" alt="avatar"></li><li>中断响应条件<br>①中断源有中断请求；<br>②此中断源的中断允许位为1；<br>③CPU 开中断（即 EA=1）。</li><li>中断源入口地址<br>中断源              入口地址<br>外部中断0            0003H<br>定时器T0中断         000BH<br>外部中断1            0013H<br>定时器T1中断         001BH<br>串行口中断           0023H<h3 id="软件代码分析"><a href="#软件代码分析" class="headerlink" title="软件代码分析"></a>软件代码分析</h3>一般具有的框架<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//主程序中需要有以下代码：</span>EA<span class="token operator">=</span><span class="token number">1</span>； <span class="token comment" spellcheck="true">//打开总中断开关</span>EX0<span class="token operator">=</span><span class="token number">1</span>； <span class="token comment" spellcheck="true">//开外部中断 0</span>IT0<span class="token operator">=</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span>； <span class="token comment" spellcheck="true">//设置外部中断的触发方式普中 51 单片机开发攻略</span><span class="token comment" spellcheck="true">//中断服务函数</span><span class="token keyword">void</span> <span class="token function">int0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">0</span> using <span class="token number">1</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 编写用户所需的功能代码</span><span class="token punctuation">}</span></code></pre>注意：在中断函数中 int0 是函数名，可自定义，但必须符合 C 语言标识符定义规则， interrupt 是一个关键字， 表示 51 单片机中断。 后面的“0” 是中断号， 外部中断 0 中断号为 0， 这个可参考前面的内容。后面的 using 1 可省略不写。<h3 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Int0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol><p>{<br>    //设置 INT0<br>    IT0=1;//跳变沿出发方式（下降沿）<br>    EX0=1;//打开 INT0 的中断允许。<br>    EA=1;//打开总中断<br>} </p><p>//触发中断后即会进入中断服务函数， 外部中断 0 中断服务函数如下：<br>void Int0() interrupt 0 //外部中断 0 的中断函数<br>{<br>    //执行所需的功能<br>}</p><pre><code>## 定时器1. 基本概念①振荡周期： 为单片机提供定时信号的振荡源的周期（晶振周期或外加振荡周期） 。②状态周期： 2 个振荡周期为 1 个状态周期， 用 S 表示。 振荡周期又称 S 周期或时钟周期。③机器周期： 1 个机器周期含 6 个状态周期， 12 个振荡周期。④指令周期： 完成 1 条指令所占用的全部时间， 它以机器周期为单位。例如： 外接晶振为 12MHz 时， 51 单片机相关周期的具体值为：振荡周期=1/12us;状态周期=1/6us;机器周期=1us;指令周期=1~4us;2. 注意①51 单片机有两组定时器/计数器， 因为既可以定时， 又可以计数， 故称之为定时器/计数器。②定时器/计数器和单片机的 CPU 是相互独立的。 定时器/计数器工作的过程是自动完成的， 不需要 CPU 的参与。③51 单片机中的定时器/计数器是根据机器内部的时钟或者是外部的脉冲信号对寄存器中的数据加 1。3. 原理STC89C5X 单片机内有两个可编程的定时/计数器T0、T1和一个特殊功能定时器 T2。定时/计数器的实质是加 1 计数器（16 位），由高 8 位和低 8 位两个寄存器 THx 和 TLx 组成。 它随着计数器的输入脉冲进行自加 1， 也就是每来一个脉冲， 计数器就自动加 1， 当加到计数器为全 1 时， 再输入一个脉冲就使计数器回零， 且计数器的溢出使相应的中断标志位置 1， 向 CPU 发出中断请求（定时/计数器中断允许时） 。 如果定时/计数器工作于定时模式， 则表示定时时间已到；如果工作于计数模式， 则表示计数值已满。 可见， 由溢出时计数器的值减去计数初值才是加 1 计数器的计数值。4. 定时器/计数器内部结构![avatar](/medias/images/interrput9.jpg) T0 和 T1 引脚对应的是单片机 P3.4 和 P3.5 管脚. 51单片机定时器/计数器：两个特殊功能寄存器控制。  TMOD 是定时/计数器的工作方式寄存器， 确定工作方式和功能；   TCON 是控制寄存器， 控制 T0、 T1 的启动和停止及设置溢出标志；5. TMOD寄存器 工作方式寄存器工作方式寄存器 TMOD 用于设置定时/计数器的工作方式， 低四位用于 T0， 高四位用于 T1。GATE=0;(不需要外部中断INT0/1引脚为高电平) 用于控制定时器的启动是否受外部中断源信号的影响。只要用软件使 TCON 中的 TR0或TR1为1,就可以启动定时/计数器工作；GATE=1;要用软件使TR0或TR1为1.同时外部中断引脚 INT0/1 也为高电平时，才能启动定时/计数器工作.即此时定时器的启动条件,加上了INT0/1引脚为高电平这一条件;C/T :定时/计数模式选择位。C/T ＝0 为定时模式;C/T =1 为计数模式;![avatar](/medias/images/interrput10.jpg)![avatar](/medias/images/interrput11.jpg)M1M0:工作方式设置位：定时器/计数器共有4种方式。M1M0 工作方式计数器模式 TMOD(设置定时器模式) 0 0 方式0 13位计数器 TMOD=0x00 0 1 方式1 16位计数器 TMOD=0x01 1 0 方式2 自动重装8位计数器 TMOD=0x02 1 1 方式3 T0分为2个8位独立计数器，T1为无中断重装8位计数器 TMOD=0x03 6. 控制寄存器 TCONTCON 的低 4 位用于控制外部中断,已在前面介绍。 TCON 的高 4 位用于控制定时/计数器的启动和中断申请。 ![avatar](/medias/images/interrput12.jpg)TCON寄存器高四位TF1（TCON.7）：T1溢出中断请求标志位。T1计数溢出时由硬件自动置TF1为 1。 CPU 响应中断后TF1由硬件自动清0。T1工作时，CPU可随时查询 TF1 的状态。 所以， TF1 可用作查询测试的标志。 TF1 也可以用软件置 1 或清 0， 同硬件置 1 或清 0 的效果一样。TR1（TCON.6）：T1 运行控制位。 TR1 置 1 时， T1 开始工作； TR1 置 0 时，T1 停止工作。 TR1 由软件置 1 或清 0。 所以， 用软件可控制定时/计数器的启动与停止。TF0（TCON.5） ： T0 溢出中断请求标志位， 其功能与 TF1 类同。TR0（TCON.4） ： T0 运行控制位， 其功能与 TR1 类同。TR1,TR0=0;关闭定时器1，0TR1,TR0=1;打开定时器1，07. 定时器/计数器工作方式##### 方式0方式 0 为 13 位计数， 由 TL0 的低 5 位（高 3 位未用） 和 TH0 的 8 位组成。TL0 的低 5 位溢出时向 TH0 进位， TH0 溢出时， 置位 TCON 中的 TF0 标志， 向 CPU发出中断请求。![avatar](/medias/images/interrput13.jpg)##### 方式1方式 1 的计数位数是 16 位， 由 TL0 作为低 8 位， TH0 作为高 8 位， 组成了16 位加 1 计数器。![avatar](/medias/images/interrput14.jpg)##### 方式2方式 2 为自动重装初值的 8 位计数方式。 工作方式 2 特别适合于用作较精确的脉冲信号发生器。![avatar](/medias/images/interrput16.jpg)##### 方式3方式 3 只适用于定时/计数器 T0， 定时器 T1 处于方式 3 时相当于 TR1=0，停止计数。 工作方式 3 将 T0 分成为两个独立的 8 位计数器 TL0 和 TH0。![avatar](/medias/images/interrput17.jpg)8. 单片机编写定时器程序时一些步骤对TMOD赋值，以确定T0和T1的工作方式； 计算初值，并将初值写入TH0，TL0或者TH1，TL1； 中断方式时，则对IE赋值，开放中断 使TR0或TR1置位，启动定时器/计数器定时或者计数。9. 应用应用较多的是方式 1 和方式 2。 定时器中通常使用定时器方式 1， 串口通信中通常使用方式 2。### 定时器配置#### 步骤①对 TMOD 赋值，以确定 T0 和 T1 的工作方式，如果使用定时器0即对T0配置， 如果使用定时器 1 即对 T1 配置。②根据所要定时的时间计算初值,并将其写入 TH0、 TL0 或 TH1、 TL1。③如果使用中断， 则对 EA 赋值， 开放定时器中断。④使 TR0 或 TR1 置位， 启动定时/计数器定时或计数。初值的计算:```cTH0=(65536-50000)/256; //装定时器初值高8位TL0=(65536-50000)%256; //装定时器初值低8位    TH0=(65536-T0)/256 ;//装定时器初值高8位TL0=(65536-T0)%256 ;//装定时器初值低8位//其中T0是需要计算的时间//一般编程过程并直接计算T0的值，直接写让单片机自己去计算</code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//定时器0中断函数 </span><span class="token keyword">void</span> T0<span class="token operator">/</span><span class="token function">T1_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token comment" spellcheck="true">//使用定时器中断1</span><span class="token punctuation">{</span>    TMOD<span class="token operator">=</span><span class="token number">0X01</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择了定时器0 方式1</span>    <span class="token comment" spellcheck="true">//可以设置TMOD=0x00;0x01;0x10;0x11;共四组方式</span>    TH0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span>T0<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//装定时器初值高8位</span>    TL0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span>T0<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//装定时器初值低8位</span>    <span class="token comment" spellcheck="true">//T0是需要计算的时间</span>    uchar count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>X<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清0重新计数</span>        执行程序代码    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//其中X是需要计算次数，比如让定时器定时个1s；</span>    <span class="token comment" spellcheck="true">//则需要定时器一个50ms的时间；</span>    <span class="token comment" spellcheck="true">//如果要达成1s则需要执行20次；</span>    <span class="token comment" spellcheck="true">//让定时器定时个50ms时间，需要这样去写</span>    <span class="token comment" spellcheck="true">//TH0=(65536-50000)/256;</span>    <span class="token comment" spellcheck="true">//TL0=(65536-50000)%256;</span>    <span class="token comment" spellcheck="true">//让定时器定时个T0时间，需要这样去写</span>    <span class="token comment" spellcheck="true">//</span>     <span class="token comment" spellcheck="true">//TH0=(65536-T0乘10的3次方)/256;</span>    <span class="token comment" spellcheck="true">//TL0=(65536-T0乘10的3次方)%256;</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 使用定时器0</span><span class="token comment" spellcheck="true">//配置定时器0工作方式1，设置1ms的初值，打开定时器计数器功能</span><span class="token keyword">void</span> <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TMOD<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0X01</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择为定时器 0 模式， 工作方式 1， 仅用 TR0 打开启动。</span>    TH0<span class="token operator">=</span><span class="token number">0XFC</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给定时器赋初值， 定时 1ms</span>    TL0<span class="token operator">=</span><span class="token number">0X18</span><span class="token punctuation">;</span>    ET0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开定时器 0 中断允许</span>    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开总中断普中 51 单片机开发攻略</span>    TR0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开定时器</span><span class="token punctuation">}</span></code></pre><h4 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**************************************************************************************实验现象： 下载程序后， D1 小灯循环点亮 1 秒， 熄灭 1 秒。 使用单片机内部定时器可以实现准确延时接线说明： (具体接线图可见开发攻略对应实验的“实验现象” 章节)1， 单片机-->LED&amp;交通灯模块P20-->D1注意事项：***************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span> </span><span class="token comment" spellcheck="true">//此文件中定义了单片机的一些特殊功能寄存器</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u16<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对数据类型进行声明定义</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">;</span>sbit led<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义 P20 口是 led</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名 : Timer0Init* 函数功能 : 定时器 0 初始化* 输 入 : 无* 输 出 : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TMOD<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0X01</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择为定时器 0 模式， 工作方式 1， 仅用 TR0 打开启动。</span>    TH0<span class="token operator">=</span><span class="token number">0XFC</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给定时器赋初值， 定时 1ms</span>    TL0<span class="token operator">=</span><span class="token number">0X18</span><span class="token punctuation">;</span>    ET0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开定时器 0 中断允许</span>    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开总中断</span>    TR0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开定时器</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名 : main* 函数功能 : 主函数* 输 入 : 无* 输 出 : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定时器 0 初始化</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名 : void Timer0() interrupt 1* 函数功能 : 定时器 0 中断函数* 输 入 : 无* 输 出 : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Timer0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> u16 i<span class="token punctuation">;</span>    TH0<span class="token operator">=</span><span class="token number">0XFC</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给定时器赋初值， 定时 1ms</span>    TL0<span class="token operator">=</span><span class="token number">0X18</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        led<span class="token operator">=</span><span class="token operator">~</span>led<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="串口中断"><a href="#串口中断" class="headerlink" title="串口中断"></a>串口中断</h3><p>串口相关寄存器</p><ol><li><p>串口控制寄存器SCON</p></li><li><p>电源控制寄存器PCON</p><h3 id="串口工作方式"><a href="#串口工作方式" class="headerlink" title="串口工作方式"></a>串口工作方式</h3></li><li><p>方式0</p></li><li><p>方式1</p></li><li><p>方式2</p></li><li><p>方式4</p><h3 id="串口初始化"><a href="#串口初始化" class="headerlink" title="串口初始化"></a>串口初始化</h3><p>步骤<br>①确定 T1 的工作方式（TMOD 寄存器） ；<br>②确定串口工作方式（SCON 寄存器） ；<br>③计算 T1 的初值（设定波特率） ， 装载 TH1、 TL1；<br>④启动 T1（TCON 中的 TR1 位） ；<br>⑤如果使用中断， 需开启串口中断控制位（IE 寄存器）。</p><h4 id="串口初始化案例"><a href="#串口初始化案例" class="headerlink" title="串口初始化案例"></a>串口初始化案例</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">UsartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  SCON<span class="token operator">=</span><span class="token number">0X50</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置为工作方式 1</span>  TMOD<span class="token operator">=</span><span class="token number">0X20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置计数器工作方式 2</span>  PCON<span class="token operator">=</span><span class="token number">0X80</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//波特率加倍</span>  TH1<span class="token operator">=</span><span class="token number">0XF3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计数器初始值设置， 注意波特率是 4800 的</span>  TL1<span class="token operator">=</span><span class="token number">0XF3</span><span class="token punctuation">;</span>  ES<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打开接收中断</span>  EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打开总中断</span>  TR1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打开计数器</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="串口中断方式案例"><a href="#串口中断方式案例" class="headerlink" title="串口中断方式案例"></a>串口中断方式案例</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;reg52.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> FOSC             12000000UL             </span><span class="token macro property">#<span class="token directive keyword">define</span> BAUD             2400UL    </span><span class="token keyword">void</span>  <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//串口初始化</span><span class="token punctuation">{</span>         TMOD<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0x0F</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定时器1模式控制在高4位</span>         TMOD<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定时器1工作在模式2，自动重装模式</span>         SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//串口工作在模式1</span>         TH1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span>FOSC<span class="token operator">/</span><span class="token punctuation">(</span>BAUD<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算定时器重装值</span>         TL1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span>FOSC<span class="token operator">/</span><span class="token punctuation">(</span>BAUD<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         PCON<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//串口波特率加倍</span>         ES<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//串行中断允许</span>         TR1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动定时器1</span>         REN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许接收 </span>         EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//允许中断</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">InterruptUART</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span> <span class="token comment" spellcheck="true">//中断源是4</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//unsigned char receive_data;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>RI<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         RI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        SBUF <span class="token operator">=</span> SBUF<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//receive_data = SBUF;//接收到的数据</span>        <span class="token comment" spellcheck="true">//if(receive_data == '1')    </span>        <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//   LED1 = 0;</span>    <span class="token comment" spellcheck="true">//     DELAY_nMS(500);</span>    <span class="token comment" spellcheck="true">//     LED1=1;</span>    <span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//   if(receive_data == ' ')    //接受一个字符 </span><span class="token comment" spellcheck="true">//        {</span><span class="token comment" spellcheck="true">//          //执行代码，你想要的控制的东西，例如led,蜂鸣器，等传感器        </span><span class="token comment" spellcheck="true">//        }    </span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//EA=1;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>TI<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        TI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="软件代码"><a href="#软件代码" class="headerlink" title="软件代码"></a>软件代码</h2><h4 id="简单实现定时器led"><a href="#简单实现定时器led" class="headerlink" title="简单实现定时器led"></a>简单实现定时器led</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"reg51.h"</span></span>sbit led<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个LED灯为1.1引脚</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char</span><span class="token comment" spellcheck="true">//#define uint unsigned int</span>uchar num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义全局变量</span><span class="token keyword">void</span> <span class="token function">timer0Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定时器0的初始化函数</span><span class="token punctuation">{</span>       TMOD<span class="token operator">=</span><span class="token number">0x01</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器0为工作方式1（M1 M0为01）</span>    TH0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//装初值11.0582晶振定时50ms数为45872</span>    TL0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开总中断</span>    ET0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开定时器0中断</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">T0_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token punctuation">{</span>       num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//num每加一次判断一次是否到20次</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果到了20次，说明1秒时间到</span>        <span class="token punctuation">{</span>            num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//num清0重新计数</span>            led<span class="token operator">=</span><span class="token operator">~</span>led<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">timer0Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     TR0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动定时器0//该步骤也可在初始化写</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//程序停止在这里等待中断发生</span> <span class="token punctuation">}</span> </code></pre><h3 id="一些案例"><a href="#一些案例" class="headerlink" title="一些案例"></a>一些案例</h3><ol><li>普中单片机串口接收数据控制灯亮灭<br>```c<br>/*—————————————————————————–</li></ol><ul><li>实 验 名         : 串口试验</li><li>实验说明     : 普中单片机串口接收数据控制灯亮灭</li><li>连接方式     : </li><li>注    意         : 该试验使用的晶振是12MHZ</li><li><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</li></ul><p>#include&lt;reg52.h&gt;<br>#include&lt;intrins.h&gt;</p><p>#define uchar unsigned char<br>#define uint  unsigned int</p><p>#define jingzhen     12000000UL             /<em>使用12.0M晶体</em>/<br>#define botelv   4800UL                   /<em>波特率定义为4800</em>/</p><p>uchar PuZh[] = “<a href="http://www.lemonhubs.github.io&quot;" target="_blank" rel="noopener">www.lemonhubs.github.io&quot;</a>;</p><p>//–定义使用的IO–//</p><p>sbit LED1=P2^0;<br>sbit LED2=P2^1;<br>sbit LED3=P2^2;</p><p>//–声明全局函数–//<br>void UsartConfiguration();<br>void Delay_1ms(uint i);</p><p>void DELAY_nMS(unsigned int time);</p><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><ul><li><p>名称 : Com_Int()</p></li><li><p>功能 : 串口中断子函数</p></li><li><p>输入 : 无 * 输出 : 无</p></li><li><p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br>void Com_Int(void) interrupt 4<br>{<br>   uchar i;<br> uchar receive_data;</p><p> EA = 0;</p><p> if(RI == 1) //当硬件接收到一个数据时，RI会置位<br>   {         </p><pre><code>       RI = 0;       receive_data = SBUF;//接收到的数据   if(receive_data == &#39;1&#39;)        {           LED1= 0;         DELAY_nMS(500);           LED2= 0;        DELAY_nMS(500);           LED3= 1;        DELAY_nMS(500);   }   else   {           LED1 = 1;         DELAY_nMS(500);         LED2 = 1;         DELAY_nMS(500);         LED3 = 0;         DELAY_nMS(500);   }</code></pre><p>   }</p><pre><code>   for(i=0; i&lt;36; i++)   {       SBUF = PuZh[i];   //将要发送的数据放入到发送寄存器       while(!TI);            //等待发送数据完成       TI=0;                    //清除发送完成标志位       Delay_1ms(1);   }   EA = 1;</code></pre><p>}</p></li></ul><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><ul><li>函 数 名       : main</li><li>函数功能           : 主函数</li><li>输    入       : 无</li><li>输    出       : 无</li><li><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</li></ul><p>void main()<br>{</p><pre><code>UsartConfiguration();//初始化串口while(1);    </code></pre><p>}</p><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><ul><li>函 数 名       : UsartConfiguration()</li><li>函数功能           : 设置串口</li><li>输    入       : 无</li><li>输    出       : 无</li><li><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</li></ul><p>void  UsartConfiguration(void)                //串口初始化<br>{<br>         EA=0;            //暂时关闭中断<br>         TMOD&amp;=0x0F;      //定时器1模式控制在高4位<br>         TMOD|=0x20;      //定时器1工作在模式2，自动重装模式<br>         SCON=0x50;       //串口工作在模式1<br>         TH1=256-jingzhen/(botelv<em>12</em>16);  //计算定时器重装值<br>         TL1=256-jingzhen/(botelv<em>12</em>16);<br>         PCON|=0x80;    //串口波特率加倍<br>         ES=1;         //串行中断允许<br>         TR1=1;        //启动定时器1<br>         REN=1;        //允许接收<br>         EA=1;         //允许中断<br>}</p><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><ul><li><p>名称 : Delay_1ms()</p></li><li><p>功能 : 延时子程序，延时时间为 1ms</p></li><li><p>x * 输入 : x (延时一毫秒的个数)</p></li><li><p>输出 : 无</p></li><li><p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br>void Delay_1ms(uint i)//1ms延时<br>{<br> uchar x,j;</p><p> for(j=0;j&lt;i;j++)<br>   for(x=0;x&lt;=148;x++);<br>}</p></li></ul><p>void DELAY_nMS(unsigned int time)<br>{<br>  unsigned int  i,j;<br>  for(i=0;i&lt;time;i++)<br>     for(j=0;j&lt;939;j++);<br>}</p><pre><code>2. 普中单片机---串口通信（1）--通过按键控制发送```c#include &lt;reg52.h&gt;#define jingzhen     12000000UL             /*使用12.0M晶体*/    #define botelv   4800UL                   /*波特率定义为4800*/unsigned char zifu=&#39;a&#39;;            //待显示字符volatile unsigned char sending;sbit S4=P3^2;//setting a keyvoid delay(unsigned char i)//延迟函数{    unsigned char j,k;    for(j=i;j&gt;0;j--)        for(k=90;k&gt;0;k--);}/*************************************************************************函数名称：UART_init函数功能：串口初始化**************************************************************************/void UART_init(void)                //串口初始化{         EA=0;            //暂时关闭中断         TMOD&amp;=0x0F;      //定时器1模式控制在高4位         TMOD|=0x20;      //定时器1工作在模式2，自动重装模式         SCON=0x50;       //串口工作在模式1         TH1=256-jingzhen/(botelv*12*16);  //计算定时器重装值         TL1=256-jingzhen/(botelv*12*16);         PCON|=0x80;    //串口波特率加倍         ES=1;         //串行中断允许         TR1=1;        //启动定时器1         REN=1;        //允许接收          EA=1;         //允许中断}/*************************************************************************函数名称：UART_Send_char函数功能：发送一个字符**************************************************************************/void UART_Sendchar(unsigned char d)          //发送一个字节的数据，形参d即为待发送数据。{     SBUF=d; //将数据写入到串口缓冲     sending=1;     //设置发送标志     while(sending); //等待发送完毕}/*************************************************************************函数名称：UART_SendString函数功能：发送一个字符串**************************************************************************/void UART_SendString(unsigned char *String){    while(*String)    {        UART_Sendchar(*String);        String++;    }}/*************************************************************************函数名称：UART_SendLine函数功能：串口发送换行**************************************************************************/void UART_SendLine(void){    UART_Sendchar(0x0D);    UART_Sendchar(0x0A);}//*********************************************************************************** 函数名称：UART_SendIntNumber函数功能：串口发送整型数字//*********************************************************************************** void UART_SendIntNumber(int Number){    unsigned char NumbArray[6]={0};    // 定义局部数组，用于数据存储    if(Number&lt;0)    {        Number=0-Number;        UART_Sendchar(&#39;-&#39;);    }    else    {       UART_Sendchar(&#39;+&#39;);    }    NumbArray[0]=(Number/10000)%10+0x30;     NumbArray[1]=(Number/1000) %10+0x30;    NumbArray[2]=(Number/100)  %10+0x30;    NumbArray[3]=(Number/10)   %10+0x30;    NumbArray[4]=(Number/1)    %10+0x30;     NumbArray[5]= 0;         UART_SendString(NumbArray);}//*********************************************************************************** 函数名称：UART_SendFloatNumber函数功能：串口发送浮点型数字//*********************************************************************************** void UART_SendFloatNumber(float Number){    unsigned char NumberArray[11]={0};              // 定义局部数组，用于数据存储    unsigned char i=1;                              // 定义局部变量，记录整数位数    long j=1;    unsigned int Real_Int=0;                        // 定义局部变量，记录整数部分    unsigned int Real_Dec=0;                        // 定义局部变量，记录小数部分    double Deci=0;                                  // 定义局部数组，暂存小数数值    //----------------------------------------------------------------------------------------------    // 判断 浮点数字正负    //----------------------------------------------------------------------------------------------    if(Number&lt;0)    {        Number=0-Number;        UART_Sendchar(&#39;-&#39;);    }    else    {        UART_Sendchar(&#39;+&#39;);    }    //----------------------------------------------------------------------------------------------    // 分离 整数位与小数位    //----------------------------------------------------------------------------------------------    Real_Int=(int)Number;                           // 取整数部分    Deci    =Number-Real_Int;                       // 取小数部分    Real_Dec=(unsigned int)(Deci*1e4);              // 小数变整型数字，1e4科学计数法    //----------------------------------------------------------------------------------------------    // 串口输出    //----------------------------------------------------------------------------------------------    NumberArray[0] = (Real_Int/10000)%10+0x30;    NumberArray[1] = (Real_Int/1000) %10+0x30;    NumberArray[2] = (Real_Int/100)  %10+0x30;    NumberArray[3] = (Real_Int/10)   %10+0x30;    NumberArray[4] = (Real_Int/1)    %10+0x30;    NumberArray[5] = &#39;.&#39;;    NumberArray[6] = (Real_Dec/1000)%10+0x30;    NumberArray[7] = (Real_Dec/100) %10+0x30;    NumberArray[8] = (Real_Dec/10)  %10+0x30;    NumberArray[9] = (Real_Dec/1)   %10+0x30;    NumberArray[10]= 0;    UART_SendString(NumberArray);}/*************************************************************************函数名称：MAIN函数功能：主函数**************************************************************************/void main(){    UART_init();    while(1)    {        if(S4==0)        {            delay(20);            if(!S4)            {                while(!S4);                           //UART_Sendchar(zifu);                //UART_SendString(&quot;dpj&quot;);                UART_SendString(&quot;wlb&quot;);                UART_SendLine();                UART_SendIntNumber(100);            }        }    }}void uart(void) interrupt 4         //串口发送中断{     if(RI)    //收到数据     {        RI=0;   //清中断请求     }     else      //发送完一字节数据     {            TI=0;            sending=0;  //清正在发送标志     }}</code></pre><p><img src="/medias/images/interrput18.jpg" alt="avatar"><br>3. 普中单片机–串口通信（2）—通过串口助手发送数据点LED</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;reg52.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> jingzhen     12000000UL             </span><span class="token comment" spellcheck="true">/*使用12.0M晶体*/</span>     <span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">define</span> botelv   4800UL             </span><span class="token comment" spellcheck="true">/*波特率定义为4800*/</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> uchar<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> uint<span class="token punctuation">;</span>uchar buf<span class="token punctuation">;</span>sbit beep<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         EA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//暂时关闭中断</span>         TMOD<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0x0F</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定时器1模式控制在高4位</span>         TMOD<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定时器1工作在模式2，自动重装模式</span>         SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//串口工作在模式1</span>         TH1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span>jingzhen<span class="token operator">/</span><span class="token punctuation">(</span>botelv<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算定时器重装值</span>         TL1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span>jingzhen<span class="token operator">/</span><span class="token punctuation">(</span>botelv<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         PCON<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//串口波特率加倍</span>         ES<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//串行中断允许</span>         TR1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动定时器1</span>         REN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许接收 </span>         EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//允许中断</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*********************************************************  串行中断服务函数*********************************************************/</span><span class="token keyword">void</span>  <span class="token function">serial</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span> <span class="token punctuation">{</span>   ES <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//关闭串行中断</span>   RI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//清除串行接受标志位</span>   buf <span class="token operator">=</span> SBUF<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从串口缓冲区取得数据</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">0x31</span><span class="token punctuation">:</span>  P2<span class="token operator">=</span><span class="token number">0xfe</span><span class="token punctuation">;</span>beep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接受到1，第一个LED亮         </span>      <span class="token keyword">case</span> <span class="token number">0x32</span><span class="token punctuation">:</span>  P2<span class="token operator">=</span><span class="token number">0xfd</span><span class="token punctuation">;</span>beep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接受到2，第二个LED亮        </span>      <span class="token keyword">case</span> <span class="token number">0x33</span><span class="token punctuation">:</span>  P2<span class="token operator">=</span><span class="token number">0xfb</span><span class="token punctuation">;</span>beep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接受到3，第三个LED亮        </span>      <span class="token keyword">case</span> <span class="token number">0x34</span><span class="token punctuation">:</span>  P2<span class="token operator">=</span><span class="token number">0xf7</span><span class="token punctuation">;</span>beep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接受到4，第四个LED亮       </span>      <span class="token keyword">case</span> <span class="token number">0x35</span><span class="token punctuation">:</span>  P2<span class="token operator">=</span><span class="token number">0xef</span><span class="token punctuation">;</span>beep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接受到5，第五个LED亮            </span>      <span class="token keyword">case</span> <span class="token number">0x36</span><span class="token punctuation">:</span>  P2<span class="token operator">=</span><span class="token number">0xdf</span><span class="token punctuation">;</span>beep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接受到5，第六个LED亮                   </span>      <span class="token keyword">case</span> <span class="token number">0x37</span><span class="token punctuation">:</span>  P2<span class="token operator">=</span><span class="token number">0xbf</span><span class="token punctuation">;</span>beep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接受到5，第七个LED亮</span>        <span class="token keyword">case</span> <span class="token number">0x38</span><span class="token punctuation">:</span>  P2<span class="token operator">=</span><span class="token number">0x7f</span><span class="token punctuation">;</span>beep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接受到5，第八个LED亮</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>    beep<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2<span class="token operator">=</span><span class="token number">0xff</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接受到其它数据，蜂鸣器响         </span>   <span class="token punctuation">}</span>   ES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//允许串口中断</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>HC05蓝牙模块LCD12864显示<br>```c<br>/*—————————————————————————–</li></ol><ul><li>实 验 名         : HC05蓝牙模块LCD12864显示</li><li>实验说明     : 普中单片机蓝牙串口接收数据控制灯亮灭和LCD12864显示</li><li>连接方式     : </li><li>注    意         : 该试验使用的晶振是12MHZ</li><li><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</li></ul><p>#include&lt;reg52.h&gt;<br>#include&lt;intrins.h&gt;<br>#define uchar unsigned char<br>#define uint  unsigned int</p><p>#define jingzhen     12000000UL             /<em>使用12.0M晶体</em>/<br>#define botelv   4800UL                   /<em>波特率定义为4800</em>/</p><p>uchar PuZh[] = “<a href="http://www.1234567890.com&quot;" target="_blank" rel="noopener">www.1234567890.com&quot;</a>;</p><p>//–定义使用的IO–//<br> /<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>                    端口定义<br><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p><p>sbit RS=P2^6; //命令/数据选择<br>sbit RW=P2^5;  //读写口<br>sbit  E=P2^7;      //锁存控制<br>sbit RES = P2^0;<br>sbit PSB = P2^2;</p><p>sbit LED1=P2^3;<br>sbit LED2=P2^4;</p><p>//–声明全局函数–//<br>void UsartConfiguration();<br>void Delay_1ms(uint i);<br>void delay(unsigned int time);<br>void DELAY_nUS(unsigned int Time);<br>void DELAY_nMS(unsigned int time);<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><ul><li><p>名称 : Delay_1ms()</p></li><li><p>功能 : 延时子程序，延时时间为 1ms</p></li><li><p>x * 输入 : x (延时一毫秒的个数)</p></li><li><p>输出 : 无</p></li><li><p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br>void Delay_1ms(uint i)//1ms延时<br>{<br> uchar x,j;</p><p> for(j=0;j&lt;i;j++)<br>   for(x=0;x&lt;=148;x++);<br>}</p></li></ul><p>void DELAY_nMS(unsigned int time)<br>{<br>  unsigned int  i,j;<br>  for(i=0;i&lt;time;i++)<br>     for(j=0;j&lt;939;j++);<br>}</p><p>void DELAY_nUS(unsigned int Time)<br>{<br>    while(–Time);<br>}</p><p>void delay(unsigned int time)              //int型数据为16位,所以最大值为65535<br> {                                           //0.1ms<br>   unsigned int  i,j;                  //定义变量i,j,用于循环语句<br>   for(i=0;i&lt;time;i++)         //for循环,循环50*time次<br>     for(j=0;j&lt;50;j++);       //for循环,循环50次<br> }</p><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>LCD12864部分<br><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br> void checkbusy(void)<br>{<br>   RS=0;<br>   RW=1;<br>   E=1;<br>   while((P0&amp;0x80)==0x80);<br>   E=0;<br>}</p><p>void wcode(unsigned char cmdcode)<br>{<br>   checkbusy();<br>   RS=0;<br>   RW=0;<br>   E=1;<br>   P0=cmdcode;<br>   delay(10);<br>   E=0;<br>}<br>void wdata(unsigned char dispdata)<br>{<br>   checkbusy();<br>   RS=1;<br>   RW=0;<br>   E=1;<br>   P0=dispdata;<br>   delay(10);<br>   E=0;<br>}</p><p>void LCD12864_InitLCD(void)<br>   {<br>         PSB=1;<br>         RES=0;<br>         delay(10);<br>         RES=1;<br>         wcode(0x30);<br>         wcode(0x0c);<br>         wcode(0x01);<br>         wcode(0x06);<br>}  </p><p>void LCD12864_Display_Char(unsigned char x,unsigned char y,unsigned char  Char)<br>{<br>  switch(y)<br>     {<br>            case 0: wcode(0x80+x);break;    //第1行<br>        case 1: wcode(0x90+x);break;    //第2行<br>        case 2: wcode(0x88+x);break;    //第3行<br>        case 3: wcode(0x98+x);break;    //第4行<br>      default:break;<br>       }<br>     wdata(Char);</p><p>}</p><p>void LCD12864_Display_String(unsigned char x,unsigned char y,unsigned char  <em>s)<br>{<br> switch(y)<br>     {<br>            case 0: wcode(0x80+x);break;<br>            case 1: wcode(0x90+x);break;<br>            case 2: wcode(0x88+x);break;<br>            case 3: wcode(0x98+x);break;<br>                default:break;<br>     }<br>   while(</em>s&gt;0)<br>     {<br>                wdata(*s);<br>                delay(10);<br>                s++;<br>     }<br>}</p><p>void LCD12864_Display_UnsignedInt(unsigned char x,unsigned char y,unsigned int Number,unsigned char Count)<br>{<br>    unsigned char NumbArray[6]={0};    </p><pre><code>NumbArray[0]=(Number/10000)%10+0x30; NumbArray[1]=(Number/1000) %10+0x30;NumbArray[2]=(Number/100)  %10+0x30;NumbArray[3]=(Number/10)   %10+0x30;NumbArray[4]=(Number/1)    %10+0x30; NumbArray[5]= 0;LCD12864_Display_String(x,y,&amp;NumbArray[5-Count]);</code></pre><p>}</p><p>void Display_SignedInt(unsigned char x,<br>                       unsigned char y,<br>                       signed int Number,<br>                       unsigned char Count)<br>{<br>    unsigned char NumberArray[7]={0};<br>    signed int Number_Temp;</p><pre><code>Number_Temp = Number;if(Number_Temp&lt;0){    Number_Temp = 0 - Number_Temp;}NumberArray[0]=&#39;+&#39;; NumberArray[1]=(Number_Temp/10000)%10+0x30; NumberArray[2]=(Number_Temp/1000) %10+0x30;NumberArray[3]=(Number_Temp/100)  %10+0x30;NumberArray[4]=(Number_Temp/10)   %10+0x30;NumberArray[5]=(Number_Temp/1)    %10+0x30;NumberArray[6]=0;if(Number&gt;0){    NumberArray[5-Count] = &#39;+&#39;;}else{    NumberArray[5-Count] = &#39;-&#39;;}LCD12864_Display_String(x, y, &amp;NumberArray[5-Count]);</code></pre><p>}</p><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><ul><li><p>名称 : Com_Int()</p></li><li><p>功能 : 串口中断子函数</p></li><li><p>输入 : 无 * 输出 : 无</p></li><li><p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br>void Com_Int(void) interrupt 4<br>{<br>   uchar i;<br> uchar receive_data;</p><p> EA = 0;</p><p> if(RI == 1) //当硬件接收到一个数据时，RI会置位<br>   {         </p><pre><code>       RI = 0;       receive_data = SBUF;//接收到的数据   if(receive_data == &#39;1&#39;)        {           LED1=0;         DELAY_nMS(200);         LED1=1;         DELAY_nMS(200);         LCD12864_Display_String(0,1,&quot;led1&quot;);         DELAY_nMS(500);         wcode(0x01);           LED2=1;         DELAY_nMS(200);         LED2=0;         DELAY_nMS(200);         LCD12864_Display_String(0,2,&quot;led2&quot;);         DELAY_nMS(500);         wcode(0x01);   }   else if(receive_data == &#39;2&#39;)        {         LED2=1;         DELAY_nMS(200);         LED2=0;         DELAY_nMS(200);         LCD12864_Display_String(8,2,&quot;led2&quot;);         DELAY_nMS(500);         wcode(0x01);           LED1=0;         DELAY_nMS(200);         LED1=1;         DELAY_nMS(200);         LCD12864_Display_String(8,1,&quot;led1&quot;);         DELAY_nMS(500);         wcode(0x01);</code></pre></li></ul><pre><code>    }    else     {         LCD12864_Display_String(0,3,&quot;error&quot;);         DELAY_nMS(500);         wcode(0x01);    }}    for(i=0; i&lt;36; i++)    {        SBUF = PuZh[i];   //将要发送的数据放入到发送寄存器        while(!TI);            //等待发送数据完成        TI=0;                    //清除发送完成标志位        Delay_1ms(1);    }    EA = 1;</code></pre><p>}</p><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><ul><li>函 数 名       : UsartConfiguration()</li><li>函数功能           : 设置串口</li><li>输    入       : 无</li><li>输    出       : 无</li><li><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</li></ul><p>void  UsartConfiguration(void)                //串口初始化<br>{<br>         EA=0;            //暂时关闭中断<br>         TMOD&amp;=0x0F;      //定时器1模式控制在高4位<br>         TMOD|=0x20;      //定时器1工作在模式2，自动重装模式<br>         SCON=0x50;       //串口工作在模式1<br>         TH1=256-jingzhen/(botelv<em>12</em>16);  //计算定时器重装值<br>         TL1=256-jingzhen/(botelv<em>12</em>16);<br>         PCON|=0x80;    //串口波特率加倍<br>         ES=1;         //串行中断允许<br>         TR1=1;        //启动定时器1<br>         REN=1;        //允许接收<br>         EA=1;         //允许中断<br>}</p><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><ul><li><p>函 数 名       : main</p></li><li><p>函数功能           : 主函数</p></li><li><p>输    入       : 无</p></li><li><p>输    出       : 无</p></li><li><p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br>void main()<br>{</p><p>   UsartConfiguration();//初始化串口<br>   LCD12864_InitLCD();<br>   //LCD12864_Display_String(0,1,”test”);<br>   while(1)<br>   {</p><pre><code>   //LCD12864_Display_String(0,0,&quot;test&quot;);</code></pre><p>   }<br>}</p><pre><code>### 参考资料##### 普中科技--普中单片机开发资料##### 蒙蒙Plus--一周学习完51单片机##### 海创电子--51单片机学习&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=77185741&amp;bvid=BV1vJ411X7iZ&amp;cid=132022563&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;</code></pre></li></ul><iframe src="//player.bilibili.com/player.html?aid=56557697&bvid=BV1j4411g7vd&cid=98818572&page=8" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> 定时器 串口通信 </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> 定时器 串口通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_esp8266</title>
      <link href="/2020/05/08/stm32-esp8266/"/>
      <url>/2020/05/08/stm32-esp8266/</url>
      
        <content type="html"><![CDATA[<h1 id="基于STM32机智云物联网环境检测系统"><a href="#基于STM32机智云物联网环境检测系统" class="headerlink" title="基于STM32机智云物联网环境检测系统"></a>基于STM32机智云物联网环境检测系统</h1><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="学习STM32单片机与WIFI模块的简单的使用。"><a href="#学习STM32单片机与WIFI模块的简单的使用。" class="headerlink" title="学习STM32单片机与WIFI模块的简单的使用。"></a>学习STM32单片机与WIFI模块的简单的使用。</h3><h5 id="STM32单片机是意法半导体公司生产的基于ARM公司的高性能Cortex-M3内核的32位微处理器。"><a href="#STM32单片机是意法半导体公司生产的基于ARM公司的高性能Cortex-M3内核的32位微处理器。" class="headerlink" title="STM32单片机是意法半导体公司生产的基于ARM公司的高性能Cortex-M3内核的32位微处理器。"></a>STM32单片机是意法半导体公司生产的基于ARM公司的高性能Cortex-M3内核的32位微处理器。</h5><h5 id="NodeMCU是一个开源的物联网平台。它使用Lua脚本语言编程。该平台基于eLua-开源项目-底层使用中国乐鑫公司的ESP8266-sdk-0-9-5版本。NodeMCU包含了可以运行在-esp8266-Wi-Fi-SoC芯片之上的固件-以及基于ESP-12模组的硬件。"><a href="#NodeMCU是一个开源的物联网平台。它使用Lua脚本语言编程。该平台基于eLua-开源项目-底层使用中国乐鑫公司的ESP8266-sdk-0-9-5版本。NodeMCU包含了可以运行在-esp8266-Wi-Fi-SoC芯片之上的固件-以及基于ESP-12模组的硬件。" class="headerlink" title="NodeMCU是一个开源的物联网平台。它使用Lua脚本语言编程。该平台基于eLua 开源项目,底层使用中国乐鑫公司的ESP8266 sdk 0.9.5版本。NodeMCU包含了可以运行在 esp8266 Wi-Fi SoC芯片之上的固件,以及基于ESP-12模组的硬件。"></a>NodeMCU是一个开源的物联网平台。它使用Lua脚本语言编程。该平台基于eLua 开源项目,底层使用中国乐鑫公司的ESP8266 sdk 0.9.5版本。NodeMCU包含了可以运行在 esp8266 Wi-Fi SoC芯片之上的固件,以及基于ESP-12模组的硬件。</h5><h5 id="机智云物联网平台是国内一家物联网平台，主要为开发者提供物联网设备的自助开发工具、后台技术支持服务、设备远程操控管理、数据存储分析、第三方数据整合、硬件社交化等技术服务，也为智能硬件厂家提供一站式物联网开发和运维服务，将智能硬件产品开发周期最快缩短到半天，快速实现智能化。"><a href="#机智云物联网平台是国内一家物联网平台，主要为开发者提供物联网设备的自助开发工具、后台技术支持服务、设备远程操控管理、数据存储分析、第三方数据整合、硬件社交化等技术服务，也为智能硬件厂家提供一站式物联网开发和运维服务，将智能硬件产品开发周期最快缩短到半天，快速实现智能化。" class="headerlink" title="机智云物联网平台是国内一家物联网平台，主要为开发者提供物联网设备的自助开发工具、后台技术支持服务、设备远程操控管理、数据存储分析、第三方数据整合、硬件社交化等技术服务，也为智能硬件厂家提供一站式物联网开发和运维服务，将智能硬件产品开发周期最快缩短到半天，快速实现智能化。"></a>机智云物联网平台是国内一家物联网平台，主要为开发者提供物联网设备的自助开发工具、后台技术支持服务、设备远程操控管理、数据存储分析、第三方数据整合、硬件社交化等技术服务，也为智能硬件厂家提供一站式物联网开发和运维服务，将智能硬件产品开发周期最快缩短到半天，快速实现智能化。</h5><h5 id="通过使用C语言编程，使用机智云官方提供相关资料，使用STM32单片机基本外设，一些简单的传感器和电子模块，例如LED灯，蜂鸣器，温湿度传感器等其他外设，使用由机智云官网提供的APP客户端，也可以去进行简单的安卓开发修改官方的APP客户端，做出自己的APP。控制单片机与WIFI模块之间的通信-手机APP简单控制LED亮灭，显示当前的温湿度情况。"><a href="#通过使用C语言编程，使用机智云官方提供相关资料，使用STM32单片机基本外设，一些简单的传感器和电子模块，例如LED灯，蜂鸣器，温湿度传感器等其他外设，使用由机智云官网提供的APP客户端，也可以去进行简单的安卓开发修改官方的APP客户端，做出自己的APP。控制单片机与WIFI模块之间的通信-手机APP简单控制LED亮灭，显示当前的温湿度情况。" class="headerlink" title="通过使用C语言编程，使用机智云官方提供相关资料，使用STM32单片机基本外设，一些简单的传感器和电子模块，例如LED灯，蜂鸣器，温湿度传感器等其他外设，使用由机智云官网提供的APP客户端，也可以去进行简单的安卓开发修改官方的APP客户端，做出自己的APP。控制单片机与WIFI模块之间的通信,手机APP简单控制LED亮灭，显示当前的温湿度情况。"></a>通过使用C语言编程，使用机智云官方提供相关资料，使用STM32单片机基本外设，一些简单的传感器和电子模块，例如LED灯，蜂鸣器，温湿度传感器等其他外设，使用由机智云官网提供的APP客户端，也可以去进行简单的安卓开发修改官方的APP客户端，做出自己的APP。控制单片机与WIFI模块之间的通信,手机APP简单控制LED亮灭，显示当前的温湿度情况。</h5><h2 id="流程步骤"><a href="#流程步骤" class="headerlink" title="流程步骤"></a>流程步骤</h2><ol><li>注册机智云账号</li><li>进入开发者中心</li><li>创建新的产品</li><li>进入开发向导创建数据点</li><li>查看基本信息</li><li>应用配置</li><li>应用开发</li><li>MCU开发</li><li>下载机智云官方代码</li><li>代码移植</li></ol><h2 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h2><ol><li>ESP8266/NodeMCU模块 </li><li>STM32F103C8T6单片机</li><li>LED模块，蜂鸣器，继电器</li><li>DHT11温湿度传感器</li><li>步进电机(模拟风扇或者通风口/目前没有搞)</li><li>门禁部分(目前没有搞)</li><li>PCB设计</li></ol><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><ol><li>STM32工程模板建立</li><li>ESP8266模块配置网络g</li><li>Keil软件使用</li><li>安卓APP开发</li><li>AndroidStudio安装使用</li><li>机智云APP修改</li><li>APP UI设计</li></ol><h2 id="实物部分"><a href="#实物部分" class="headerlink" title="实物部分"></a>实物部分</h2><h3 id="实物图片"><a href="#实物图片" class="headerlink" title="实物图片"></a>实物图片</h3><p><img src="/medias/images/sw.jpg" alt="avatar"></p><h3 id="视频1"><a href="#视频1" class="headerlink" title="视频1"></a>视频1</h3><iframe src="//player.bilibili.com/player.html?aid=96301494&cid=164401217&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="视频2"><a href="#视频2" class="headerlink" title="视频2"></a>视频2</h3><iframe src="//player.bilibili.com/player.html?aid=96810002&cid=165280428&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="nodemcu模块的简单使用视频"><a href="#nodemcu模块的简单使用视频" class="headerlink" title="nodemcu模块的简单使用视频"></a>nodemcu模块的简单使用视频</h3><iframe src="//player.bilibili.com/player.html?aid=91103747&cid=155568637&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=90853215&cid=155149664&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=90509401&cid=154570876&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="安卓APP学习"><a href="#安卓APP学习" class="headerlink" title="安卓APP学习"></a>安卓APP学习</h3><iframe src="//player.bilibili.com/player.html?aid=90699361&cid=154889831&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="APP修改之后视频"><a href="#APP修改之后视频" class="headerlink" title="APP修改之后视频"></a>APP修改之后视频</h3><iframe src="//player.bilibili.com/player.html?aid=96549480&cid=164830245&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>STM32物联网设计学习视频(哔哩哔哩 temp_duan)<br><a href="https://space.bilibili.com/443798197/" target="_blank" rel="noopener">https://space.bilibili.com/443798197/</a></li><li>APP学习部分（哔哩哔哩_阿正）<br><a href="https://space.bilibili.com/265908761/" target="_blank" rel="noopener">https://space.bilibili.com/265908761/</a></li><li>阿正个人站<br><a href="http://wenzheng.club/" target="_blank" rel="noopener">http://wenzheng.club/</a></li><li>有道云笔记<br><a href="http://note.youdao.com/noteshare?id=4b88adf86691af993d13b9d387336976&amp;sub=F247909E6B89440AACFCFFC40DAA030F" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=4b88adf86691af993d13b9d387336976&amp;sub=F247909E6B89440AACFCFFC40DAA030F</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> STM32 ARM单片机 </category>
          
          <category> C </category>
          
          <category> 电子模块 </category>
          
          <category> 嵌入式 </category>
          
          <category> 机智云 </category>
          
          <category> 物联网 </category>
          
          <category> ESP8266 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> C </tag>
            
            <tag> STM32 ARM单片机 </tag>
            
            <tag> 矩阵键盘 </tag>
            
            <tag> 机智云 </tag>
            
            <tag> ESP8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络数据采集--视频下载</title>
      <link href="/2020/05/08/python-wang-luo-shu-ju-cai-ji-shi-pin-xia-zai/"/>
      <url>/2020/05/08/python-wang-luo-shu-ju-cai-ji-shi-pin-xia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="Python网络视频数据下载"><a href="#Python网络视频数据下载" class="headerlink" title="Python网络视频数据下载"></a>Python网络视频数据下载</h1><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li>模块导入（第三方包）</li></ol><pre class=" language-bash"><code class="language-bash">    pip <span class="token function">install</span> requests    pip <span class="token function">install</span> json</code></pre><ol start="2"><li>基本流程（思路）</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 爬虫的一般思路</span><span class="token comment" spellcheck="true"># 1、分析目标网页，确定爬取的url路径，headers参数</span><span class="token comment" spellcheck="true"># 2、发送请求--requests 模拟浏览器发送请求，获取响应数据</span><span class="token comment" spellcheck="true"># 3、解析数据 json模块：把json字符串转化成python可交互的数据类型</span><span class="token comment" spellcheck="true"># 4、保存数据--保存在目标文件夹中</span></code></pre><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><ol><li>使用浏览器打开网络数据采集网站<a href="https://haokan.baidu.com/" target="_blank" rel="noopener">https://haokan.baidu.com/</a><br> 我们随便选择一个分类，例如娱乐<a href="https://haokan.baidu.com/tab/yule" target="_blank" rel="noopener">https://haokan.baidu.com/tab/yule</a><h4 id="使用的浏览器是谷歌chrome浏览器"><a href="#使用的浏览器是谷歌chrome浏览器" class="headerlink" title="使用的浏览器是谷歌chrome浏览器"></a>使用的浏览器是谷歌chrome浏览器<img src="https://img-blog.csdnimg.cn/2020041419581473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h4></li><li>使用谷歌浏览器右击打开检查</li><li>选择Network<img src="https://img-blog.csdnimg.cn/20200414200722450.png#pic_center" alt="在这里插入图片描述"></li><li>重新加载界面，选择XHR<br><img src="https://img-blog.csdnimg.cn/2020041420074068.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>选择videorec?tab…选项打开 里面有两个主要部分<br><img src="https://img-blog.csdnimg.cn/20200414201347983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><ol><li>Headers<br><img src="https://img-blog.csdnimg.cn/20200414201305560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>Preview<br><img src="https://img-blog.csdnimg.cn/20200414201328532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol></li><li>建立一个python工程文件</li><li>使用的环境 Pycharm python3.7.6 anconad <h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true">#导入模块</span><span class="token comment" spellcheck="true"># 爬取网页的url</span><span class="token comment" spellcheck="true"># headers</span>base_url <span class="token operator">=</span> <span class="token string">'https://haokan.baidu.com/videoui/api/videorec?tab=dongman&amp;act=pcFeed&amp;pd=pc&amp;num=20&amp;shuaxin_id=1586786048409'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'</span><span class="token punctuation">,</span><span class="token string">'cookie'</span><span class="token punctuation">:</span> <span class="token string">'BAIDUID=D77C61722C38FDD3B0BFA8B2A820D953:FG=1; BIDUPSID=D77C61722C38FDD3B0BFA8B2A820D953; PSTM=1585266931; BDUSS=lV0S3J5WUpoQVpjc1dzSTd2WDdFRFVJcWxxSm1zWmYxOXJvR3ZjNUlRd1NDN1plSVFBQUFBJCQAAAAAABAAAAEAAAAx~5v6bWlrZWFwawAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJ-jl4Sfo5eR; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; ai-studio-ticket=F4CFFDA9FF2746AF92ABE82F307177F75D82A97D5CDB468D986D3E8F239B685A; PC_TAB_LOG=haokan_website_page; Hm_lvt_4aadd610dfd2f5972f1efee2653a2bc5=1586780010,1586781215; Hm_lpvt_4aadd610dfd2f5972f1efee2653a2bc5=1586781215; reptileData=%7B%22data%22%3A%228ae556604f8334e690c6df18585d95fd66da1768f08b6ef4500a1f442661606743ece5594100dd732b5b7051563e865f31ecc62ed625c9baeb91b86afee8f1f79a81b01972873f7ff06a74b8073c635a0615b26b0790e9afa06686141a80a6de2ca66c7d36af97e2183fd9e72e44bd8b21c7bad462e6fc48f4f2422df70d9ed8%22%2C%22key_id%22%3A%2230%22%2C%22sign%22%3A%22612c0e81%22%7D'</span>        <span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span> get<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(response . request . headers )</span>data <span class="token operator">=</span> response <span class="token punctuation">.</span> json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>data_list <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'response'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'videos'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#列表</span><span class="token comment" spellcheck="true"># print(data_list)</span><span class="token comment" spellcheck="true">#遍历列表</span><span class="token keyword">for</span> datal <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>    video_title <span class="token operator">=</span> datal<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token string">'.mp4'</span>  <span class="token comment" spellcheck="true">#视频的文件名</span>    video_ur1 <span class="token operator">=</span> datal<span class="token punctuation">[</span><span class="token string">'play_url'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 视频的ur1地址</span>    <span class="token comment" spellcheck="true">#   print(video_title,video_ur1)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'srart download.....：'</span><span class="token punctuation">,</span>video_title<span class="token punctuation">)</span>    video_data <span class="token operator">=</span> requests<span class="token punctuation">.</span> get<span class="token punctuation">(</span>video_ur1<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment" spellcheck="true"># 4、保存数据--保存在目标文件夹中</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'video\\'</span><span class="token operator">+</span> video_title<span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video_data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'download finised ....\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载结束了'</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">1. base_url 视频网站的的url2. headers 模拟浏览器登录 user-agent cookie3. 文件的保存</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>哔哩哔哩<a href="https://www.bilibili.com/video/BV16741127po" target="_blank" rel="noopener">https://www.bilibili.com/video/BV16741127po</a></li><li>菜鸟教程 Python<a href="https://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python3-tutorial.html</a></li><li>CSDN<a href="https://blog.csdn.net/weixin_43599390/article/details/105519601" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390/article/details/105519601</a></li><li>知乎<a href="https://zhuanlan.zhihu.com/p/130449420" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/130449420</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 视频下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 百度智能云文字识别 实现手写文字识别</title>
      <link href="/2020/05/08/python-bai-du-zhi-neng-yun-wen-zi-shi-bie-shi-xian-shou-xie-wen-zi-shi-bie/"/>
      <url>/2020/05/08/python-bai-du-zhi-neng-yun-wen-zi-shi-bie-shi-xian-shou-xie-wen-zi-shi-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-实现手写文字识别"><a href="#Python-实现手写文字识别" class="headerlink" title="Python  实现手写文字识别"></a>Python  实现手写文字识别</h1><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li>百度智能云人工智能平台</li><li>文字识别接口使用</li><li>下载IP摄像头应用 调用手机摄像头，实现拍照实现文字识别<h3 id="Python-百度智能云人工智能文字识别接口-实现手写文字识别"><a href="#Python-百度智能云人工智能文字识别接口-实现手写文字识别" class="headerlink" title="Python 百度智能云人工智能文字识别接口 实现手写文字识别"></a>Python 百度智能云人工智能文字识别接口 实现手写文字识别</h3><h3 id="百度智能云"><a href="#百度智能云" class="headerlink" title="百度智能云"></a>百度智能云</h3><img src="https://img-blog.csdnimg.cn/20200420153209214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><img src="https://img-blog.csdnimg.cn/2020042015322235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200420153240863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200420153254241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200420153344552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200420153357580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h4 id="创建Python文件"><a href="#创建Python文件" class="headerlink" title="创建Python文件"></a>创建Python文件</h4><img src="https://img-blog.csdnimg.cn/20200420153413508.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200420153908107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h5 id="注意：其中init-py-只需要建立一个，不需要添加东西在里面"><a href="#注意：其中init-py-只需要建立一个，不需要添加东西在里面" class="headerlink" title="注意：其中init.py,只需要建立一个，不需要添加东西在里面"></a>注意：其中<strong>init</strong>.py,只需要建立一个，不需要添加东西在里面</h5><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4></li></ol><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h4 id="第三方库安装"><a href="#第三方库安装" class="headerlink" title="第三方库安装"></a>第三方库安装</h4><pre class=" language-bash"><code class="language-bash">Python 环境pip <span class="token function">install</span> opencv-pythonpip <span class="token function">install</span> baidu-aip Anconda 环境conda  <span class="token function">install</span> opencv-pythonconda  <span class="token function">install</span> baidu-aip</code></pre><h4 id="Handwritten-py"><a href="#Handwritten-py" class="headerlink" title="Handwritten.py"></a>Handwritten.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> aip <span class="token keyword">import</span> AipOcr  <span class="token comment" spellcheck="true">#pip install baidu-aip</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'appId'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'apiKey'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'secretKey'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># appId apiKey  secretKey 三元组，添加自己的创建应用里面的</span>client <span class="token operator">=</span> AipOcr<span class="token punctuation">(</span><span class="token operator">**</span>config<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取图像内容</span><span class="token keyword">def</span> <span class="token function">get_file_content</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 文字 to 字符</span><span class="token keyword">def</span> <span class="token function">img_to_str</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    image <span class="token operator">=</span> get_file_content<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>    result <span class="token operator">=</span> client<span class="token punctuation">.</span>handwriting<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(result)</span>    <span class="token keyword">if</span> <span class="token string">'words_result'</span> <span class="token keyword">in</span> result<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>w<span class="token punctuation">[</span><span class="token string">'words'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> result<span class="token punctuation">[</span><span class="token string">'words_result'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="ipdemo-py"><a href="#ipdemo-py" class="headerlink" title="ipdemo.py"></a>ipdemo.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span>  cv2  <span class="token comment" spellcheck="true"># pip install openv-python</span><span class="token keyword">from</span> Handwritten <span class="token keyword">import</span> img_to_str <span class="token comment" spellcheck="true"># 导入 img_to_str</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建一个窗口 1表示不能改变窗口大小</span>    cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span><span class="token string">"camera"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开启ip摄像头 </span>    <span class="token comment" spellcheck="true"># http://admin:admin@192.168.137.53:8081/video</span>    <span class="token comment" spellcheck="true"># 用户名/密码默认admin @ip地址 端口</span>    <span class="token comment" spellcheck="true"># video = 'http://admin:admin@IP地址:端口/video'</span>    <span class="token comment" spellcheck="true"># 开启摄像头</span>    capture <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span>video<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 按键处理</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        success<span class="token punctuation">,</span>img <span class="token operator">=</span> capture<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"camera"</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 按键处理</span>        key <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># esc 退出</span>        <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"esc break"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 空格 保存图片</span>        <span class="token keyword">if</span> key <span class="token operator">==</span><span class="token number">32</span><span class="token punctuation">:</span>            filename <span class="token operator">=</span> <span class="token string">"filename.png"</span>            cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>img<span class="token punctuation">)</span>            s <span class="token operator">=</span> img_to_str<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#显示识别内容</span>    <span class="token comment" spellcheck="true"># 释放摄像头</span>    capture<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭窗口</span>    cv2<span class="token punctuation">.</span>destroyWindow<span class="token punctuation">(</span><span class="token string">'camera'</span><span class="token punctuation">)</span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20200420154753558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="博客地址https-lemonhubs-github-io"><a href="#博客地址https-lemonhubs-github-io" class="headerlink" title="博客地址https://lemonhubs.github.io/"></a>博客地址<a href="https://lemonhubs.github.io/" target="_blank" rel="noopener">https://lemonhubs.github.io/</a></h4><h4 id="知乎https-www-zhihu-com-people-bi-shi-san-2-81"><a href="#知乎https-www-zhihu-com-people-bi-shi-san-2-81" class="headerlink" title="知乎https://www.zhihu.com/people/bi-shi-san-2-81"></a>知乎<a href="https://www.zhihu.com/people/bi-shi-san-2-81" target="_blank" rel="noopener">https://www.zhihu.com/people/bi-shi-san-2-81</a></h4><h4 id="CSDNhttps-blog-csdn-net-weixin-43599390"><a href="#CSDNhttps-blog-csdn-net-weixin-43599390" class="headerlink" title="CSDNhttps://blog.csdn.net/weixin_43599390"></a>CSDN<a href="https://blog.csdn.net/weixin_43599390" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390</a></h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 文字识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文字识别 </tag>
            
            <tag> 百度智能云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python小白逆袭大神 爬取青春有你2 小姐姐信息和图片</title>
      <link href="/2020/05/08/python-xiao-bai-ni-xi-da-shen-pa-qu-qing-chun-you-ni-2-xiao-jie-jie-xin-xi-he-tu-pian/"/>
      <url>/2020/05/08/python-xiao-bai-ni-xi-da-shen-pa-qu-qing-chun-you-ni-2-xiao-jie-jie-xin-xi-he-tu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Python小白逆袭大神-爬取青春有你2-小姐姐信息和图片"><a href="#Python小白逆袭大神-爬取青春有你2-小姐姐信息和图片" class="headerlink" title="Python小白逆袭大神 爬取青春有你2 小姐姐信息和图片"></a>Python小白逆袭大神 爬取青春有你2 小姐姐信息和图片</h1><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">1.基于百度百度AIstudio平台 加入课程即可，环境已经配置好了<span class="token punctuation">(</span>白嫖算力<span class="token punctuation">)</span>2.本地电脑环境Pycharm python3.73.模块导入<span class="token function">import</span> json  <span class="token comment" spellcheck="true"># pip install json</span><span class="token function">import</span> re   <span class="token comment" spellcheck="true"># pip install re</span><span class="token function">import</span> requests <span class="token comment" spellcheck="true"># pip install requests</span><span class="token function">import</span> datetime <span class="token comment" spellcheck="true"># pip install datetime</span>from bs4 <span class="token function">import</span> BeautifulSoup <span class="token comment" spellcheck="true"># pip install bs4</span><span class="token function">import</span> os  <span class="token comment" spellcheck="true"># pip install os</span><span class="token comment" spellcheck="true">#### 实在不行一个一个去网上找安装教程，应该很简单的，这些库应该很少出问题</span></code></pre><h2 id="爬虫思路"><a href="#爬虫思路" class="headerlink" title="爬虫思路"></a>爬虫思路</h2><pre class=" language-bash"><code class="language-bash">1.发送请求（requests模块）2.获取响应数据（服务器返回）3.解析并提取数据（BeautifulSoup查找或者re正则）4.保存数据</code></pre><h3 id="request模块："><a href="#request模块：" class="headerlink" title="request模块："></a>request模块：</h3><pre class=" language-python"><code class="language-python">requests是python实现的简单易用的HTTP库，官网地址：http<span class="token punctuation">:</span><span class="token operator">//</span>cn<span class="token punctuation">.</span>python<span class="token operator">-</span>requests<span class="token punctuation">.</span>org<span class="token operator">/</span>zh_CN<span class="token operator">/</span>latest<span class="token operator">/</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>可以发送一个http get请求，返回服务器响应内容。</code></pre><h3 id="BeautifulSoup库："><a href="#BeautifulSoup库：" class="headerlink" title="BeautifulSoup库："></a>BeautifulSoup库：</h3><pre class=" language-bash"><code class="language-bash">BeautifulSoup 是一个可以从HTML或XML文件中提取数据的Python库。网址：https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/BeautifulSoup支持Python标准库中的HTML解析器,还支持一些第三方的解析器,其中一个是 lxml。BeautifulSoup<span class="token punctuation">(</span>markup, <span class="token string">"html.parser"</span><span class="token punctuation">)</span>或者BeautifulSoup<span class="token punctuation">(</span>markup, <span class="token string">"lxml"</span><span class="token punctuation">)</span>，推荐使用lxml作为解析器,因为效率更高。</code></pre><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><pre class=" language-bash"><code class="language-bash">1.爬取百度百科中《青春有你2》中所有参赛选手信息，返回页面数据2.对爬取的页面数据进行解析，并保存为JSON文件3.爬取每个选手的百度百科图片，并进行保存4.打印爬取的所有图片的路径</code></pre><h3 id="1-爬取百度百科中《青春有你2》中所有参赛选手信息，返回页面数据"><a href="#1-爬取百度百科中《青春有你2》中所有参赛选手信息，返回页面数据" class="headerlink" title="1.爬取百度百科中《青春有你2》中所有参赛选手信息，返回页面数据"></a>1.爬取百度百科中《青春有你2》中所有参赛选手信息，返回页面数据</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> datetime<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> os<span class="token comment" spellcheck="true">#获取当天的日期,并进行格式化,用于后面文件命名，格式:20200420</span>today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">crawl_wiki_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    爬取百度百科中《青春有你2》中参赛选手信息，返回html    """</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span>    <span class="token punctuation">}</span>    url<span class="token operator">=</span><span class="token string">'https://baike.baidu.com/item/青春有你第二季'</span>                             <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#将一段文档传入BeautifulSoup的构造方法,就能得到一个文档的对象, 可以传入一段字符串</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回的是class为table-view log-set-param的&lt;table>所有标签</span>        tables <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'table-view log-set-param'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        crawl_table_title <span class="token operator">=</span> <span class="token string">"参赛学员"</span>        <span class="token keyword">for</span> table <span class="token keyword">in</span>  tables<span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true">#对当前节点前面的标签和字符串进行查找</span>            table_titles <span class="token operator">=</span> table<span class="token punctuation">.</span>find_previous<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> title <span class="token keyword">in</span> table_titles<span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>crawl_table_title <span class="token keyword">in</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> table           <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><h3 id="2-对爬取的页面数据进行解析，并保存为JSON文件"><a href="#2-对爬取的页面数据进行解析，并保存为JSON文件" class="headerlink" title="2.对爬取的页面数据进行解析，并保存为JSON文件"></a>2.对爬取的页面数据进行解析，并保存为JSON文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_wiki_data</span><span class="token punctuation">(</span>table_html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    从百度百科返回的html中解析得到选手信息，以当前日期作为文件名，存JSON文件,保存到work目录下    '''</span>    bs <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>str<span class="token punctuation">(</span>table_html<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    all_trs <span class="token operator">=</span> bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span>    error_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\''</span><span class="token punctuation">,</span><span class="token string">'\"'</span><span class="token punctuation">]</span>    stars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> tr <span class="token keyword">in</span> all_trs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         all_tds <span class="token operator">=</span> tr<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span>         star <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#姓名</span>         star<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token operator">=</span>all_tds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text         <span class="token comment" spellcheck="true">#个人百度百科链接</span>         star<span class="token punctuation">[</span><span class="token string">"link"</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'https://baike.baidu.com'</span> <span class="token operator">+</span> all_tds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#籍贯</span>         star<span class="token punctuation">[</span><span class="token string">"zone"</span><span class="token punctuation">]</span><span class="token operator">=</span>all_tds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text         <span class="token comment" spellcheck="true">#星座</span>         star<span class="token punctuation">[</span><span class="token string">"constellation"</span><span class="token punctuation">]</span><span class="token operator">=</span>all_tds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text         <span class="token comment" spellcheck="true">#身高</span>         star<span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span><span class="token operator">=</span>all_tds<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text         <span class="token comment" spellcheck="true">#体重</span>         star<span class="token punctuation">[</span><span class="token string">"weight"</span><span class="token punctuation">]</span><span class="token operator">=</span> all_tds<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text         <span class="token comment" spellcheck="true">#花语,去除掉花语中的单引号或双引号</span>         flower_word <span class="token operator">=</span> all_tds<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text         <span class="token keyword">for</span> c <span class="token keyword">in</span> flower_word<span class="token punctuation">:</span>             <span class="token keyword">if</span>  c <span class="token keyword">in</span> error_list<span class="token punctuation">:</span>                 flower_word<span class="token operator">=</span>flower_word<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>         star<span class="token punctuation">[</span><span class="token string">"flower_word"</span><span class="token punctuation">]</span><span class="token operator">=</span>flower_word          <span class="token comment" spellcheck="true">#公司</span>         <span class="token keyword">if</span> <span class="token operator">not</span> all_tds<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">is</span>  None<span class="token punctuation">:</span>             star<span class="token punctuation">[</span><span class="token string">"company"</span><span class="token punctuation">]</span><span class="token operator">=</span> all_tds<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text         <span class="token keyword">else</span><span class="token punctuation">:</span>             star<span class="token punctuation">[</span><span class="token string">"company"</span><span class="token punctuation">]</span><span class="token operator">=</span> all_tds<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text           stars<span class="token punctuation">.</span>append<span class="token punctuation">(</span>star<span class="token punctuation">)</span>    json_data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>str<span class="token punctuation">(</span>stars<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\'"</span><span class="token punctuation">,</span><span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'work/'</span> <span class="token operator">+</span> today <span class="token operator">+</span> <span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> f<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h3 id="3-爬取每个选手的百度百科图片，并进行保存"><a href="#3-爬取每个选手的百度百科图片，并进行保存" class="headerlink" title="3.爬取每个选手的百度百科图片，并进行保存"></a>3.爬取每个选手的百度百科图片，并进行保存</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">crawl_pic_urls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    爬取每个选手的百度百科图片，并保存    '''</span>     <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'work/'</span><span class="token operator">+</span> today <span class="token operator">+</span> <span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>         json_array <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span>      <span class="token punctuation">}</span>    <span class="token keyword">for</span> star <span class="token keyword">in</span> json_array<span class="token punctuation">:</span>        name <span class="token operator">=</span> star<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>        link <span class="token operator">=</span> star<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>link<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        bs <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>        pic_list_url <span class="token operator">=</span> bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.summary-pic a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>        pic_list_url <span class="token operator">=</span> <span class="token string">'https://baike.baidu.com'</span> <span class="token operator">+</span> pic_list_url        pic_list_response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pic_list_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        bs <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>pic_list_response<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>        pic_list_html <span class="token operator">=</span> bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.pic-list img '</span><span class="token punctuation">)</span>        pic_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> pic_html <span class="token keyword">in</span> pic_list_html<span class="token punctuation">:</span>            pic_url <span class="token operator">=</span> pic_html<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>            pic_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pic_url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># tables = soup.find_all('div',{'class':'summary-pic'})</span>        <span class="token comment" spellcheck="true"># for table in tables:</span>        <span class="token comment" spellcheck="true">#     Href = table.a['href']</span>        <span class="token comment" spellcheck="true">#     album_url = "https://baike.baidu.com" +Href</span>        <span class="token comment" spellcheck="true">#     response = requests.get(album_url, headers=headers)</span>        <span class="token comment" spellcheck="true">#     soup = BeautifulSoup(response.text, "lxml")</span>        <span class="token comment" spellcheck="true">#     pic_list_div = soup.find('div', {'class': 'pic-list'})</span>        <span class="token comment" spellcheck="true">#     albumImages = pic_list_div.find_all('img')</span>        <span class="token comment" spellcheck="true">#     for album_image in albumImages:</span>        <span class="token comment" spellcheck="true">#         album_image_url = album_image["src"]</span>                <span class="token comment" spellcheck="true"># pic_urls.append(album_image_url)</span>                <span class="token comment" spellcheck="true"># count =count+1</span>                <span class="token comment" spellcheck="true"># print(count)</span>        down_pic<span class="token punctuation">(</span>name<span class="token punctuation">,</span>pic_urls<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">down_pic</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>pic_urls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    根据图片链接列表pic_urls, 下载所有图片，保存在以name命名的文件夹中,    '''</span>    path <span class="token operator">=</span> <span class="token string">'work/'</span><span class="token operator">+</span><span class="token string">'pics/'</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">'/'</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>      os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> pic_url <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>pic_urls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pic_url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>            string <span class="token operator">=</span> str<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token operator">+</span>string<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成功下载第%s张图片: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>pic_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载第%s张图片时失败: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>pic_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">continue</span></code></pre><h3 id="4-打印爬取的所有图片的路径"><a href="#4-打印爬取的所有图片的路径" class="headerlink" title="4.打印爬取的所有图片的路径"></a>4.打印爬取的所有图片的路径</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show_pic_path</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    遍历所爬取的每张图片，并打印所有图片的绝对路径    '''</span>    pic_num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>dirpath<span class="token punctuation">,</span>dirnames<span class="token punctuation">,</span>filenames<span class="token punctuation">)</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span>           pic_num <span class="token operator">+=</span> <span class="token number">1</span>           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d张照片：%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pic_num<span class="token punctuation">,</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dirpath<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共爬取《青春有你2》选手的%d照片"</span> <span class="token operator">%</span> pic_num<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#爬取百度百科中《青春有你2》中参赛选手信息，返回html</span>     html <span class="token operator">=</span> crawl_wiki_data<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#解析html,得到选手信息，保存为json文件</span>     parse_wiki_data<span class="token punctuation">(</span>html<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># #从每个选手的百度百科页面上爬取图片,并保存</span>     crawl_pic_urls<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#打印所爬取的选手图片路径</span>     show_pic_path<span class="token punctuation">(</span><span class="token string">'/home/aistudio/work/pics/'</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"所有信息爬取完成！"</span><span class="token punctuation">)</span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20200423223152445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200423224755886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.百度AIstduio-Python小白逆袭大神 <a href="https://aistudio.baidu.com/aistudio/projectdetail/421488" target="_blank" rel="noopener">https://aistudio.baidu.com/aistudio/projectdetail/421488</a><br>2.百度AIstduio开发平台 <a href="https://aistudio.baidu.com/aistudio/index" target="_blank" rel="noopener">https://aistudio.baidu.com/aistudio/index</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
          <category> 百度AIstudio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文字识别 </tag>
            
            <tag> 百度智能云 </tag>
            
            <tag> 百度AIstudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据可视化之Wordcloud</title>
      <link href="/2020/05/08/python-shu-ju-ke-shi-hua-zhi-wordcloud/"/>
      <url>/2020/05/08/python-shu-ju-ke-shi-hua-zhi-wordcloud/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-wordcloud"><a href="#Python-wordcloud" class="headerlink" title="Python wordcloud"></a>Python wordcloud</h1><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装所需的Python第三方模块"><a href="#安装所需的Python第三方模块" class="headerlink" title="安装所需的Python第三方模块"></a>安装所需的Python第三方模块</h3><pre class=" language-python"><code class="language-python">pip install numpy matplotlib pillow wordcloud imageio jieba snownlp itchat <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple</code></pre><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> wordcloudw <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token string">'and that government of the people, by the people, for the people, shall not perish from the earth.'</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'output1.png'</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020041114122811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> wordcloud<span class="token comment" spellcheck="true"># 构建词云对象w，设置词云图片宽、高、字体、背景颜色等参数</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">,</span>background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>font_path<span class="token operator">=</span><span class="token string">'msyh.ttc'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用词云对象的generate方法，将文本传入</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token string">'深度学习 人工智能 神经网络 物联网 5G AI  机器学习 PYTHON'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将生成的词云保存为output2-poem.png图片文件，保存到当前文件夹中</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'output2-poem.png'</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/202004111416442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> wordcloud<span class="token comment" spellcheck="true"># 从外部.txt文件中读取大段文本，存入变量txt中</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'deep learning.txt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 构建词云对象w，设置词云图片宽、高、字体、背景颜色等参数</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>                        height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">,</span>                        background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>                        font_path<span class="token operator">=</span><span class="token string">'msyh.ttc'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将txt变量传入w的generate()方法，给词云输入文字</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将词云图片导出到当前文件夹</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'output3-sentence.png'</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020041114182315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入词云制作库wordcloud和中文分词库jieba</span><span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloud<span class="token comment" spellcheck="true"># 构建并配置词云对象w</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>                        height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">,</span>                        background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>                        font_path<span class="token operator">=</span><span class="token string">'msyh.ttc'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用jieba的lcut()方法对原始文本进行中文分词，得到string</span>txt <span class="token operator">=</span> <span class="token string">'人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。人工智能从诞生以来，理论和技术日益成熟，应用领域也不断扩大，可以设想，未来人工智能带来的科技产品，将会是人类智慧的“容器”。人工智能可以对人的意识、思维的信息过程的模拟。人工智能不是人的智能，但能像人那样思考、也可能超过人的智能。人工智能是一门极富挑战性的科学，从事这项工作的人必须懂得计算机知识，心理学和哲学。人工智能是包括十分广泛的科学，它由不同的领域组成，如机器学习，计算机视觉等等，总的说来，人工智能研究的一个主要目标是使机器能够胜任一些通常需要人类智能才能完成的复杂工作。但不同的时代、不同的人对这种“复杂工作”的理解是不同的。 [1]  2017年12月，人工智能入选“2017年度中国媒体十大流行语'</span>txtlist <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>txtlist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将string变量传入w的generate()方法，给词云输入文字</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将词云图片导出到当前文件夹</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'output4-tongji.png'</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200411142111833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入词云制作库wordcloud和中文分词库jieba</span><span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloud<span class="token comment" spellcheck="true"># 构建并配置词云对象w</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>                        height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">,</span>                        background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>                        font_path<span class="token operator">=</span><span class="token string">'msyh.ttc'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对来自外部文件的文本进行中文分词，得到string</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'deep learning.txt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>txtlist <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>txtlist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将string变量传入w的generate()方法，给词云输入文字</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将词云图片导出到当前文件夹</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'output5-village.png'</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200411142149173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="案例6"><a href="#案例6" class="headerlink" title="案例6"></a>案例6</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入词云制作库wordcloud和中文分词库jieba</span><span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloud<span class="token comment" spellcheck="true"># 导入imageio库中的imread函数，并用这个函数读取本地图片，作为词云形状图片</span><span class="token keyword">import</span> imageiomk <span class="token operator">=</span> imageio<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"E:/opencv face/wordcloud/wujiaoxing.png"</span><span class="token punctuation">)</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>mask<span class="token operator">=</span>mk<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 构建并配置词云对象w，注意要加scale参数，提高清晰度</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>                        height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">,</span>                        background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>                        font_path<span class="token operator">=</span><span class="token string">'msyh.ttc'</span><span class="token punctuation">,</span>                        mask<span class="token operator">=</span>mk<span class="token punctuation">,</span>                        scale<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对来自外部文件的文本进行中文分词，得到string</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'deep learning.txt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>txtlist <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>txtlist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将string变量传入w的generate()方法，给词云输入文字</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将词云图片导出到当前文件夹</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'output6-village.png'</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200411142217713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="案例7"><a href="#案例7" class="headerlink" title="案例7"></a>案例7</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入词云制作库wordcloud和中文分词库jieba</span><span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloud<span class="token comment" spellcheck="true"># 导入imageio库中的imread函数，并用这个函数读取本地图片，作为词云形状图片</span><span class="token keyword">import</span> imageiomk <span class="token operator">=</span> imageio<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"chinamap.png"</span><span class="token punctuation">)</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>mask<span class="token operator">=</span>mk<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 构建并配置词云对象w，注意要加scale参数，提高清晰度</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>                        height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">,</span>                        background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>                        font_path<span class="token operator">=</span><span class="token string">'msyh.ttc'</span><span class="token punctuation">,</span>                        mask<span class="token operator">=</span>mk<span class="token punctuation">,</span>                        scale<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对来自外部文件的文本进行中文分词，得到string</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'deep learning.txt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>txtlist <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>txtlist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将string变量传入w的generate()方法，给词云输入文字</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将词云图片导出到当前文件夹</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'output7-chinamap.png'</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200411142302619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200411142526311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="后面继续增加案例"><a href="#后面继续增加案例" class="headerlink" title="后面继续增加案例"></a>后面继续增加案例</h4><h6 id="白嫖真的舒服"><a href="#白嫖真的舒服" class="headerlink" title="白嫖真的舒服"></a>白嫖真的舒服</h6><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>同济子号兄<a href="https://github.com/TommyZihao" target="_blank" rel="noopener">https://github.com/TommyZihao</a></li><li>CSDN<a href="https://blog.csdn.net/weixin_43599390/article/details/105451858" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390/article/details/105451858</a></li><li>知乎<a href="https://zhuanlan.zhihu.com/p/128987132" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/128987132</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> wordcloud词云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据可视化 </tag>
            
            <tag> wordcloud词云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫学习--爬取【罗翔说刑法】 制作弹幕词云</title>
      <link href="/2020/05/08/python-pa-chong-xue-xi-pa-qu-luo-xiang-shuo-xing-fa-zhi-zuo-dan-mu-ci-yun/"/>
      <url>/2020/05/08/python-pa-chong-xue-xi-pa-qu-luo-xiang-shuo-xing-fa-zhi-zuo-dan-mu-ci-yun/</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫学习爬取哔哩哔哩弹幕制作词云"><a href="#Python爬虫学习爬取哔哩哔哩弹幕制作词云" class="headerlink" title="Python爬虫学习爬取哔哩哔哩弹幕制作词云"></a>Python爬虫学习爬取哔哩哔哩弹幕制作词云</h1><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token comment" spellcheck="true"># pip install requests </span><span class="token keyword">import</span>  re   <span class="token comment" spellcheck="true"># 正则表达式</span><span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloud<span class="token keyword">import</span> imageio</code></pre><h2 id="弹幕处理"><a href="#弹幕处理" class="headerlink" title="弹幕处理"></a>弹幕处理</h2><h4 id="爬取网站地址-https-www-bilibili-com-video-BV14g4y1z75o"><a href="#爬取网站地址-https-www-bilibili-com-video-BV14g4y1z75o" class="headerlink" title="爬取网站地址 https://www.bilibili.com/video/BV14g4y1z75o"></a>爬取网站地址 <a href="https://www.bilibili.com/video/BV14g4y1z75o" target="_blank" rel="noopener">https://www.bilibili.com/video/BV14g4y1z75o</a></h4><h4 id="右击网页点击检查，重新加载页面"><a href="#右击网页点击检查，重新加载页面" class="headerlink" title="右击网页点击检查，重新加载页面"></a>右击网页点击检查，重新加载页面</h4><h4 id="抓包寻找弹幕地址，点击进入，复制地址到代码中"><a href="#抓包寻找弹幕地址，点击进入，复制地址到代码中" class="headerlink" title="抓包寻找弹幕地址，点击进入，复制地址到代码中"></a>抓包寻找弹幕地址，点击进入，复制地址到代码中</h4><p><img src="https://img-blog.csdnimg.cn/20200504142036889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200504142608520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200504142608522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true">#@Time : 2020/5/4 13:27</span><span class="token comment" spellcheck="true">#@Author : dele</span><span class="token comment" spellcheck="true">#@File : spider.py</span><span class="token comment" spellcheck="true">#@Software: PyCharm</span><span class="token comment" spellcheck="true"># 导入第三方模块</span><span class="token keyword">import</span> requests<span class="token keyword">import</span>  re<span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloud<span class="token keyword">import</span> imageio<span class="token comment" spellcheck="true"># 弹幕url 地址</span>base_url <span class="token operator">=</span> <span class="token string">'https://api.bilibili.com/x/v1/dm/list.so?oid=186803402'</span><span class="token comment" spellcheck="true"># 设置请求头，模拟浏览器登录</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'cookie'</span><span class="token punctuation">:</span> <span class="token string">'BAIDUID=D77C61722C38FDD3B0BFA8B2A820D953:FG=1; BIDUPSID=D77C61722C38FDD3B0BFA8B2A820D953; PSTM=1585266931; BDUSS=lV0S3J5WUpoQVpjc1dzSTd2WDdFRFVJcWxxSm1zWmYxOXJvR3ZjNUlRd1NDN1plSVFBQUFBJCQAAAAAABAAAAEAAAAx~5v6bWlrZWFwawAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJ-jl4Sfo5eR; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; ai-studio-ticket=F4CFFDA9FF2746AF92ABE82F307177F75D82A97D5CDB468D986D3E8F239B685A; PC_TAB_LOG=haokan_website_page; Hm_lvt_4aadd610dfd2f5972f1efee2653a2bc5=1586780010,1586781215; Hm_lpvt_4aadd610dfd2f5972f1efee2653a2bc5=1586781215; reptileData=%7B%22data%22%3A%228ae556604f8334e690c6df18585d95fd66da1768f08b6ef4500a1f442661606743ece5594100dd732b5b7051563e865f31ecc62ed625c9baeb91b86afee8f1f79a81b01972873f7ff06a74b8073c635a0615b26b0790e9afa06686141a80a6de2ca66c7d36af97e2183fd9e72e44bd8b21c7bad462e6fc48f4f2422df70d9ed8%22%2C%22key_id%22%3A%2230%22%2C%22sign%22%3A%22612c0e81%22%7D'</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 定义一个函数</span><span class="token keyword">def</span> <span class="token function">get_damu</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>    response <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#通过正则表达式获取两个&lt;d>标签内包含的弹幕信息</span>    data <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'&lt;d.*?>(.*?)&lt;/d>'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#对目标网页使用正则表达式，获取所有匹配的内容</span>    danmu <span class="token operator">=</span> data<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打印一下看看有没有成功获取到弹幕</span>    danmu_word <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>danmu<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将分词结果再次用空格连接，并转化成制作词云需要的字符串形式</span>    <span class="token comment" spellcheck="true"># print(danmu_word)</span>    <span class="token comment" spellcheck="true"># 将分词结果再次用空格连接，并转化成制作词云需要的字符串形式</span>    danmu_str <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>danmu_word<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>danmu_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(danmu)</span>    <span class="token comment" spellcheck="true"># mask 是选择不同形状图片的路径，一般放在于python文件同路径下面</span>    mask <span class="token operator">=</span> imageio<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"E:/deep learning/python_Leran/mask.png"</span><span class="token punctuation">)</span>    w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>font_path<span class="token operator">=</span><span class="token string">"msyh.ttc"</span><span class="token punctuation">,</span> background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> mask<span class="token operator">=</span>mask<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将处理好的分词弹幕加载到词云中</span>    w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>danmu_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将生成的词云保存为danmu.png图片</span>    w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'danmu.png'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_damu<span class="token punctuation">(</span>base_url<span class="token punctuation">)</span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20200504141730970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>哔哩哔哩小姐姐教你做B站视频弹幕python爬虫，用云词展现做简单数据分析 <a href="https://www.bilibili.com/video/BV1z64y1T7tf" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1z64y1T7tf</a></li><li>博客地址<a href="https://lemonhubs.github.io/" target="_blank" rel="noopener">https://lemonhubs.github.io/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
          <category> wordcloud词云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 数据可视化 </tag>
            
            <tag> wordcloud词云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeMCU web网页 DH1T11温湿度显示</title>
      <link href="/2020/05/08/nodemcu-web-wang-ye-dh1t11-wen-shi-du-xian-shi/"/>
      <url>/2020/05/08/nodemcu-web-wang-ye-dh1t11-wen-shi-du-xian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Nodemcu-0-96oled-dht11-web网页显示"><a href="#Nodemcu-0-96oled-dht11-web网页显示" class="headerlink" title="Nodemcu-0.96oled-dht11-web网页显示"></a>Nodemcu-0.96oled-dht11-web网页显示</h1><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>1.软件部分<br> Arduino IDE<br>2.硬件部分<br>NodeMCU   OLED  DHT11<br>3.知识点<br>Web开发  Arduino IDE开发ESP8266 </p><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><h3 id="软件代码"><a href="#软件代码" class="headerlink" title="软件代码"></a>软件代码</h3><h4 id="代码分析（以后再写）"><a href="#代码分析（以后再写）" class="headerlink" title="代码分析（以后再写）"></a>代码分析（以后再写）</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Import required libraries</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Arduino.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ESP8266WiFi.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Hash.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ESPAsyncTCP.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ESPAsyncWebServer.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Adafruit_Sensor.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;DHT.h></span></span><span class="token comment" spellcheck="true">// Replace with your network credentials</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ssid <span class="token operator">=</span> <span class="token string">"MERCURY_3DE2"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//路由器或者热点名称</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password <span class="token operator">=</span> <span class="token string">"88888888"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//路由器或者热点密码</span><span class="token macro property">#<span class="token directive keyword">define</span> DHTPIN 5     </span><span class="token comment" spellcheck="true">// Digital pin connected to the DHT sensor</span><span class="token comment" spellcheck="true">//引脚定义初始化</span><span class="token macro property">#<span class="token directive keyword">define</span> DHTTYPE    DHT11     </span><span class="token comment" spellcheck="true">// DHT 11</span>DHT <span class="token function">dht</span><span class="token punctuation">(</span>DHTPIN<span class="token punctuation">,</span> DHTTYPE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// current temperature &amp; humidity, updated in loop()</span><span class="token keyword">float</span> t <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">float</span> h <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create AsyncWebServer object on port 80</span>AsyncWebServer <span class="token function">server</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Generally, you should use "unsigned long" for variables that hold time</span><span class="token comment" spellcheck="true">// The value will quickly become too large for an int to store</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> previousMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// will store last time DHT was updated</span><span class="token comment" spellcheck="true">// Updates DHT readings every 10 seconds</span><span class="token keyword">const</span> <span class="token keyword">long</span> interval <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*网页端代码编写*/</span><span class="token keyword">const</span> <span class="token keyword">char</span> index_html<span class="token punctuation">[</span><span class="token punctuation">]</span> PROGMEM <span class="token operator">=</span> R"<span class="token function">rawliteral</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE HTML<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"https://use.fontawesome.com/releases/v5.7.2/css/all.css"</span> integrity<span class="token operator">=</span><span class="token string">"sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr"</span> crossorigin<span class="token operator">=</span><span class="token string">"anonymous"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>style<span class="token operator">></span>    html <span class="token punctuation">{</span>     font<span class="token operator">-</span>family<span class="token operator">:</span> Arial<span class="token punctuation">;</span>     display<span class="token operator">:</span> <span class="token keyword">inline</span><span class="token operator">-</span>block<span class="token punctuation">;</span>     margin<span class="token operator">:</span> 0px <span class="token keyword">auto</span><span class="token punctuation">;</span>     text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    h2 <span class="token punctuation">{</span> font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">.</span>0rem<span class="token punctuation">;</span> <span class="token punctuation">}</span>    p <span class="token punctuation">{</span> font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">.</span>0rem<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span>units <span class="token punctuation">{</span> font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>2rem<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span>dht<span class="token operator">-</span>labels<span class="token punctuation">{</span>      font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>5rem<span class="token punctuation">;</span>      vertical<span class="token operator">-</span>align<span class="token operator">:</span>middle<span class="token punctuation">;</span>      padding<span class="token operator">-</span>bottom<span class="token operator">:</span> 15px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span>ESP8266 DHT Server<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-thermometer-half"</span> style<span class="token operator">=</span><span class="token string">"color:#059e8a;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>     <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dht-labels"</span><span class="token operator">></span>Temperature<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>     <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"temperature"</span><span class="token operator">></span><span class="token operator">%</span>TEMPERATURE<span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>sup <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"units"</span><span class="token operator">></span><span class="token operator">&amp;</span>deg<span class="token punctuation">;</span>C<span class="token operator">&lt;</span><span class="token operator">/</span>sup<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-tint"</span> style<span class="token operator">=</span><span class="token string">"color:#00add6;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>     <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dht-labels"</span><span class="token operator">></span>Humidity<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"humidity"</span><span class="token operator">></span><span class="token operator">%</span>HUMIDITY<span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>sup <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"units"</span><span class="token operator">></span><span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>sup<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  var xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"temperature"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/temperature"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  var xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"humidity"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/humidity"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span class="token punctuation">)</span>rawliteral"<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Replaces placeholder with DHT values</span>String <span class="token function">processor</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> var<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Serial.println(var);</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>var <span class="token operator">==</span> <span class="token string">"TEMPERATURE"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>var <span class="token operator">==</span> <span class="token string">"HUMIDITY"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Serial port for debugging purposes</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口波特率</span>  dht<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Connect to Wi-Fi</span>  WiFi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connecting to WiFi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>WiFi<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> WL_CONNECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Print ESP8266 Local IP Address</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>WiFi<span class="token punctuation">.</span><span class="token function">localIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Route for root / web page</span>  server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> HTTP_GET<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>AsyncWebServerRequest <span class="token operator">*</span>request<span class="token punctuation">)</span><span class="token punctuation">{</span>    request<span class="token operator">-</span><span class="token operator">></span><span class="token function">send_P</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> index_html<span class="token punctuation">,</span> processor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"/temperature"</span><span class="token punctuation">,</span> HTTP_GET<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>AsyncWebServerRequest <span class="token operator">*</span>request<span class="token punctuation">)</span><span class="token punctuation">{</span>    request<span class="token operator">-</span><span class="token operator">></span><span class="token function">send_P</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"/humidity"</span><span class="token punctuation">,</span> HTTP_GET<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>AsyncWebServerRequest <span class="token operator">*</span>request<span class="token punctuation">)</span><span class="token punctuation">{</span>    request<span class="token operator">-</span><span class="token operator">></span><span class="token function">send_P</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Start server</span>  server<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> currentMillis <span class="token operator">=</span> <span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentMillis <span class="token operator">-</span> previousMillis <span class="token operator">>=</span> interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// save the last time you updated the DHT values</span>    previousMillis <span class="token operator">=</span> currentMillis<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Read temperature as Celsius (the default)</span>    <span class="token keyword">float</span> newT <span class="token operator">=</span> dht<span class="token punctuation">.</span><span class="token function">readTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Read temperature as Fahrenheit (isFahrenheit = true)</span>    <span class="token comment" spellcheck="true">//float newT = dht.readTemperature(true);</span>    <span class="token comment" spellcheck="true">// if temperature read failed, don't change t value</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isnan</span><span class="token punctuation">(</span>newT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Failed to read from DHT sensor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      t <span class="token operator">=</span> newT<span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Read Humidity</span>    <span class="token keyword">float</span> newH <span class="token operator">=</span> dht<span class="token punctuation">.</span><span class="token function">readHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// if humidity read failed, don't change h value </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isnan</span><span class="token punctuation">(</span>newH<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Failed to read from DHT sensor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      h <span class="token operator">=</span> newH<span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Arduino-IDE软件-使用"><a href="#Arduino-IDE软件-使用" class="headerlink" title="Arduino IDE软件 使用"></a>Arduino IDE软件 使用</h3><h4 id="Arduino软件-IDE"><a href="#Arduino软件-IDE" class="headerlink" title="Arduino软件(IDE)"></a>Arduino软件(IDE)</h4><p>Arduino集成开发环境（或是Arduino IDE）包含了一个用于写代码的文本编辑器、一个消息区、一个文本控制台以及一个带有常用功能按钮和文本菜单的工具栏。软件连接Arduino和Genuino之后，能给所连接的控制板上传程序，还能与控制板相互通信。<br><img src="https://img-blog.csdnimg.cn/20200330203800120.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="写项目"><a href="#写项目" class="headerlink" title="写项目"></a>写项目</h4><p>使用Arduino软件（IDE）编写的代码被称为项目（sketches），这些项目写在文本编辑器中，以.ino的文件形式保存，软件中的文本编辑器有剪切/粘贴和搜索/替换功能。当保存、输出以及出现错误时消息区会显示反馈信息。控制台会文字形式显示Arduino软件（IDE）的输出信息，包括完整的错误信息以及其他消息。整个窗口的右下角会显示当前选定的控制板和串口信息。工具栏按钮包含验证、下载程序、新建、打开、保存以及串口监视器的功能。</p><p>注意：Arduino软件（IDE）1.0之前的版本中项目的保存格式为.pde，你能够用1.0版本的软件打开这些文件，软件会提示你将这些项目保存为.ino的形式。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>检查代码编译时的错误</p><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>编译你的代码并且上传到选定的控制板中，细节请查看后面的 上传 内容<br>注意：如果你使用的是专门的编程器，你需要在点击按钮时按住电脑的“shift”键，显示的文字会变成“使用编程器上传”。</p><h4 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h4><p>创建一个新的项目。</p><h4 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h4><p>弹出一个包含你在项目文件夹中所有项目的菜单，选择其中一个会打开相应的代码，新的项目会覆盖当前的项目。<br>注意：因为Java中的一个问题，所以这个菜单不会滚动，如果你需要打开的项目在列表的最后，那么需要通过菜单中的文件|项目文件夹来选择。</p><h4 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h4><p>保存你的项目。</p><h4 id="。。。。。。。。东西太多了"><a href="#。。。。。。。。东西太多了" class="headerlink" title="。。。。。。。。东西太多了"></a>。。。。。。。。东西太多了</h4><h4 id="语言支持"><a href="#语言支持" class="headerlink" title="语言支持"></a>语言支持</h4><p>从版本1.0.1开始，Arduino软件(IDE)已被翻译成30多种语言，默认的情况下，IDE会根据系统的语言选择相应的语言（注意：在Windows中以及可以在Linux中，这是由系统的日期和时间格式来确定的，而不是由操作系统显示的语言来确定的。）<br>如果你想手动更改语言，那就打开Arduino软件，然后在首选项的对话框中选择编辑器语言，在弹出的下来菜单中选择相应的语言，然后重启软件使所选择的语言生效，如果你的操作系统不支持你所选择的语言，那么IDE会默认采用英文。<br>你能够返回Arduino的默认设置，让IDE根据系统的语言选择相应的语言，只需要在语言选择的下拉菜单中选择系统默认。当你重启软件时这个设置会生效。同样的，改变你的系统设置后，你需要重新启动Arduino软件才能变为新的默认语言。</p><h3 id="简单配置（以后再写）"><a href="#简单配置（以后再写）" class="headerlink" title="简单配置（以后再写）"></a>简单配置（以后再写）</h3><h2 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h2><h3 id="NodeMCU"><a href="#NodeMCU" class="headerlink" title="NodeMCU"></a>NodeMCU</h3><p>NodeMCU是一个开源的物联网平台。它使用Lua脚本语言编程。该平台基于eLua 开源项目,底层使用中国乐鑫公司的ESP8266 sdk 0.9.5版本。NodeMCU包含了可以运行在 esp8266 Wi-Fi SoC芯片之上的固件,以及基于ESP-12模组的硬件。<br><img src="https://img-blog.csdnimg.cn/20200330203343829.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="nodemcu-GPIO-端口映射"><a href="#nodemcu-GPIO-端口映射" class="headerlink" title="nodemcu GPIO 端口映射"></a>nodemcu GPIO 端口映射</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t SDA <span class="token operator">=</span> PIN_WIRE_SDA<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t SCL <span class="token operator">=</span> PIN_WIRE_SCL<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t LED_BUILTIN <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t BUILTIN_LED <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D0   <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D1   <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D2   <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D3   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D4   <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D5   <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D6   <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D7   <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D8   <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D9   <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> uint8_t D10  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h3 id="OLED"><a href="#OLED" class="headerlink" title="OLED"></a>OLED</h3><p>OLED(Organic Light-Emitting Diode)，即有机发光二极管,其实物图如下所示. OLED由于同时具备自发光，不需背光源，对比度高，厚度薄，视角广，反应速度快，可用于挠曲性面板，使用温度范围广，构造及制程简单等优异特性，被认为是下一代的平面显示器新兴应用技术。具有轻，薄，省电等特性，工作电压宽度高，从2.2V到5.5V。发光原理：有机发光显示技术由非常薄的有机材料涂层和玻璃基板构成。当有电荷通过时这些有机材料就会发光。OLED发光的颜色取决于有机发光层的材料，故厂商可由改变发光层的材料而得到所需之颜色。有源阵列有机发光显示屏具有内置的电子电路系统因此每个像素都由一个对应的电路独立驱动。<br><img src="https://img-blog.csdnimg.cn/20200330203711396.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="DHT11"><a href="#DHT11" class="headerlink" title="DHT11"></a>DHT11</h3><p>DHT11数字温湿度传感器是一款含有已校准数字信号输出的温湿度复合传感器，它应用专用的数字模块采集技术和温湿度传感技术，确保产品具有极高的可靠性和卓越的长期稳定性。传感器包括一个电阻式感湿元件和一个NTC测温元件，并与一个高性能8位单片机相连接。因此该产品具有品质卓越、超快响应、抗干扰能力强、性价比极高等优点。每个DHT11传感器都在极为精确的湿度校验室中进行校准。校准系数以程序的形式存在OTP内存中，传感器内部在检测信号的处理过程中要调用这些校准系数。单线制串行接口，使系统集成变得简易快捷。超小的体积、极低的功耗，使其成为该类应用中，在苛刻应用场合的最佳选择。产品为4针单排引脚封装，连接方便。<br><img src="https://img-blog.csdnimg.cn/20200330203725264.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h2><ol><li>web网站简单定义<br>　　web（World Wide Web）即全球广域网，也称为万维网，它是一种基于超文本和HTTP的、全球性的、动态交互的、跨平台的分布式图形信息系统。是建立在Internet上的一种网络服务，为浏览者在Internet上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超级链接将Internet上的信息节点组织成一个互为关联的网状结构。<br>　　1989年CERN（欧洲粒子物理研究所）中由Tim Berners-Lee领导的小组提交了一个针对Internet的新协议和一个使用该协议的文档系统，该小组将这个新系统命名为Word Wide Web，它的目的在于使全球的科学家能够利用Internet交流自己的工作文档。<br>这个新系统被设计为允许Internet上任意一个用户都可以从许多文档服务计算机的数据库中搜索和获取文档。1990年末，这个新系统的基本框架已经在CERN中的一台计算机中开发出来并实现了,1991年该系统移植到了其他计算机平台，并正式发布。</li><li>web网站通常采用的是客户机-服务器架构(client – server model) ,而客户机通常情况下用户都是在浏览器里面进行操作，所以说当用户在浏览器里面输入网站地址的时候，交互就已经进行。</li><li>网站内容<br>我们在进行一个项目开发的时候，这个项目里面最少会包含下面的内容，并且对于不同的内容都会存储在不同的目录(文件夹)里面。这样对于团队项目开发能够起到很好的帮助。所以说一个程序员在进入公司得一段时间里，就需要去了解这家公司制定的一些项目规则以便能够适应公司得开发。</li><li>而我们常说的web网站就是指直接以浏览器为载体，通过web网络协议访问的站点，即是web网站。例如下面我们常见的这几个网站。<br>下面我们看到的这些网站，我们都可以说是web站点，简单一点说，无论你看到的网站是什么类型，只要是通过浏览器访问的，那么都可以说是web站点。而我们所熟知的一些语言，例如python、例如php、例如.net等等这些语言，当我们把这些语言用来开发网站的时候，那么我们的定位就是web开发人员。<br><img src="https://img-blog.csdnimg.cn/2020033020422634.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020033020411116.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200330204124283.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><h4 id="HTML语言"><a href="#HTML语言" class="headerlink" title="HTML语言"></a>HTML语言</h4>掌握HTML是网页的核心，是一种制作万维网页面的标准语言，是万维网浏览器使用的一种语言，它消除了不同计算机之间信息交流的障碍。因此，它是网络上应用最为广泛的语言，也是构成网页文档的主要语言，学好HTML是成为Web开发人员的基本条件。<br>HTML是一种标记语言，能够实现Web页面并在浏览器中显示。HTML5作为HTML的最新版本，引入了多项新技术，大大增强了对于应用的支持能力，使得Web技术不再局限于呈现网页内容。<br>随着CSS、JavaScript、Flash等技术的发展，Web对于应用的处理能力逐渐增强，用户浏览网页的体验已经有了较大的改善。不过HTML5中的几项新技术实现了质的突破，使得Web技术首次被认为能够接近于本地原生应用技术，开发Web应用真正成为开发者的一个选择。<br>HTML5可以使开发者的工作大大简化，理论上单次开发就可以在不同平台借助浏览器运行，降低开发的成本，这也是产业界普遍认为HTML5技术的主要优点之一。AppMobi、摩托罗拉、Sencha、Appcelerator等公司均已推出了较为成熟的开发工具，支持HTML5应用的发展。 [3] <h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3>学好CSS是网页外观的重要一点，CSS可以帮助把网页外观做得更加美观。<h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4>学习JavaScript的基本语法，以及如何使用JavaScript编程将会提高开发人员的个人技能。<h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4>了解Unix和Linux的基本知识，对于开发人员有益无害。<h4 id="网络服务器"><a href="#网络服务器" class="headerlink" title="网络服务器"></a>网络服务器</h4>了解Web服务器，包括对Apache的基本配置，htaccess配置技巧的掌握等。<br>(太多了)</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.web网站开发基础博客 <a href="https://www.cnblogs.com/liujunhang/articles/9197151.html" target="_blank" rel="noopener">https://www.cnblogs.com/liujunhang/articles/9197151.html</a><br>2. 单片机菜鸟博哥 arduino esp8266<br><a href="https://blog.csdn.net/dpjcn1990/category_9291479.html" target="_blank" rel="noopener">https://blog.csdn.net/dpjcn1990/category_9291479.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> 电子模块 </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeMCU </tag>
            
            <tag> OLED </tag>
            
            <tag> DHT11 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python requests 网络数据采集 下载 视频(ku6)</title>
      <link href="/2020/05/08/python-requests-wang-luo-shu-ju-cai-ji-xia-zai-shi-pin-ku6/"/>
      <url>/2020/05/08/python-requests-wang-luo-shu-ju-cai-ji-xia-zai-shi-pin-ku6/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-requests-网络数据采集视频下载"><a href="#Python-requests-网络数据采集视频下载" class="headerlink" title="Python requests 网络数据采集视频下载"></a>Python requests 网络数据采集视频下载</h1><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h2 id="爬虫的一般思路-主要流程步骤"><a href="#爬虫的一般思路-主要流程步骤" class="headerlink" title="爬虫的一般思路 主要流程步骤"></a>爬虫的一般思路 主要流程步骤</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#### 1、分析目标网页，确定爬取的url路径，headers参数</span><span class="token comment" spellcheck="true">#### 2、发送请求--requests 模拟浏览器发送请求，获取响应数据</span><span class="token comment" spellcheck="true">#### 3、解析数据 json模块：把json字符串转化成python可交互的数据类型</span><span class="token comment" spellcheck="true">#### 4、保存数据--保存在目标文件夹中</span></code></pre><h2 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h2 id="导入第三方模块"><a href="#导入第三方模块" class="headerlink" title="导入第三方模块"></a>导入第三方模块</h2><pre class=" language-python"><code class="language-python">    pip install requests    pip install json</code></pre><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 学习模块</span><span class="token comment" spellcheck="true"># requests</span><span class="token comment" spellcheck="true"># json</span><span class="token comment" spellcheck="true"># 动态数据抓包</span><span class="token comment" spellcheck="true"># 下载一页的视频</span><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true">#导入模块 pip install requests</span><span class="token comment" spellcheck="true"># 1、分析目标网页，确定爬取的url路径，headers参数</span>base_url <span class="token operator">=</span><span class="token string">'https://www.ku6.com/video/feed?pageNo=0&amp;pageSize=40&amp;subjectId=74'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2、发送请求 requests 模拟浏览器发送请求，获取响应数据</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span>headers<span class="token operator">=</span> headers<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#</span>data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、解析数据 json模块：把json字符串转化成python可交互的数据类型</span>data_list <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print.pprint(data_list) 打印列表</span><span class="token comment" spellcheck="true"># for循环遍历列表</span><span class="token keyword">for</span> datal <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>    video_title <span class="token operator">=</span> datal<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".mp4"</span>  <span class="token comment" spellcheck="true"># 视频标题</span>    video_url <span class="token operator">=</span> datal<span class="token punctuation">[</span><span class="token string">'playUrl'</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true">#  视频Url</span>    <span class="token comment" spellcheck="true"># print(video_title,video_url)           # 打印标题</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'srart download.....：'</span><span class="token punctuation">,</span>video_title<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印 srart download  视频标题</span>    video_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>video_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content  <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># 图片视频音频文件都是二进制的，用wb进行保存，写入response.content content方法</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'video\\'</span><span class="token operator">+</span> video_title<span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#保存数据</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video_data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'download finised ....\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'download endding'</span><span class="token punctuation">)</span> </code></pre><p><img src="https://img-blog.csdnimg.cn/20200417214212915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200417214226213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200417214244761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020041721425842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/2020041721440330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="博客https-lemonhubs-github-io"><a href="#博客https-lemonhubs-github-io" class="headerlink" title="博客https://lemonhubs.github.io/"></a>博客<a href="https://lemonhubs.github.io/" target="_blank" rel="noopener">https://lemonhubs.github.io/</a></h5><h4 id="知乎https-www-zhihu-com-people-bi-shi-san-2-81"><a href="#知乎https-www-zhihu-com-people-bi-shi-san-2-81" class="headerlink" title="知乎https://www.zhihu.com/people/bi-shi-san-2-81"></a>知乎<a href="https://www.zhihu.com/people/bi-shi-san-2-81" target="_blank" rel="noopener">https://www.zhihu.com/people/bi-shi-san-2-81</a></h4><h4 id="CSDNhttps-blog-csdn-net-weixin-43599390"><a href="#CSDNhttps-blog-csdn-net-weixin-43599390" class="headerlink" title="CSDNhttps://blog.csdn.net/weixin_43599390"></a>CSDN<a href="https://blog.csdn.net/weixin_43599390" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390</a></h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 视频下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python requests 网络数据采集贴吧图片下载</title>
      <link href="/2020/05/08/python-requests-wang-luo-shu-ju-cai-ji-tie-ba-tu-pian-xia-zai/"/>
      <url>/2020/05/08/python-requests-wang-luo-shu-ju-cai-ji-tie-ba-tu-pian-xia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-requests-网络数据采集图片下载"><a href="#Python-requests-网络数据采集图片下载" class="headerlink" title="Python requests 网络数据采集图片下载"></a>Python requests 网络数据采集图片下载</h1><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h2 id="爬虫的一般思路-主要流程步骤"><a href="#爬虫的一般思路-主要流程步骤" class="headerlink" title="爬虫的一般思路 主要流程步骤"></a>爬虫的一般思路 主要流程步骤</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#### 1、分析目标网页，确定爬取的url路径，headers参数</span><span class="token comment" spellcheck="true">#### 2、发送请求--requests 模拟浏览器发送请求，获取响应数据</span><span class="token comment" spellcheck="true">#### 3、解析数据 json模块：把json字符串转化成python可交互的数据类型</span><span class="token comment" spellcheck="true">#### 4、保存数据--保存在目标文件夹中</span></code></pre><h2 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h2 id="导入第三方模块"><a href="#导入第三方模块" class="headerlink" title="导入第三方模块"></a>导入第三方模块</h2><pre class=" language-python"><code class="language-python">    pip install requests    pip install json</code></pre><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 模块导入</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> parsel<span class="token comment" spellcheck="true">#  确定爬取的ur1路径，headers参数</span>base_url <span class="token operator">=</span> <span class="token string">'https://tieba.baidu.com/f?kw=%D4%BC%BB%E1'</span><span class="token comment" spellcheck="true"># 模拟浏览器 登录  User-Agent 相当与身份证，假装成浏览器用户</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#2、发送请求--requests 模拟浏览器发送请求，获取响应数据</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>base_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#得到get 发送请求</span>html_str <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token comment" spellcheck="true"># 打印html网页源代码</span><span class="token comment" spellcheck="true"># print(html_str)</span><span class="token comment" spellcheck="true">#3.解析数据--parsel转 化为Selector对象，Selector对象具有xpath的方法，能够 对转化的数据进行处理</span><span class="token comment" spellcheck="true"># 转换数据类型</span>html <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据解析</span>title_url <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="threadlist_lz clearfix"]/div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(title_url)</span><span class="token comment" spellcheck="true"># 获取完整的url地址</span>second_url <span class="token operator">=</span> <span class="token string">'https://tieba.baidu.com'</span><span class="token keyword">for</span> url <span class="token keyword">in</span> title_url<span class="token punctuation">:</span>    all_url <span class="token operator">=</span>second_url <span class="token operator">+</span> url    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前贴子链接'</span><span class="token punctuation">,</span>all_url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 继续发送地址请求</span>    response_2<span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>all_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token comment" spellcheck="true"># 第二次解析</span>    response_2_data <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response_2<span class="token punctuation">)</span>    reslut_list <span class="token operator">=</span> response_2_data<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//cc/div/img[@class="BDE_Image"]/@src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#   print(reslut_list)</span><span class="token comment" spellcheck="true"># 发送图片url</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> reslut_list<span class="token punctuation">:</span>        img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>li<span class="token punctuation">,</span>headers<span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content <span class="token comment" spellcheck="true"># 打印url  print(all_url)</span>    file_name <span class="token operator">=</span>li<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存数据</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'image\\'</span><span class="token operator">+</span>file_name<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载图片'</span><span class="token punctuation">,</span>file_name<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20200417214859893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="博客https-lemonhubs-github-io"><a href="#博客https-lemonhubs-github-io" class="headerlink" title="博客https://lemonhubs.github.io/"></a>博客<a href="https://lemonhubs.github.io/" target="_blank" rel="noopener">https://lemonhubs.github.io/</a></h4><h4 id="知乎https-www-zhihu-com-people-bi-shi-san-2-81"><a href="#知乎https-www-zhihu-com-people-bi-shi-san-2-81" class="headerlink" title="知乎https://www.zhihu.com/people/bi-shi-san-2-81"></a>知乎<a href="https://www.zhihu.com/people/bi-shi-san-2-81" target="_blank" rel="noopener">https://www.zhihu.com/people/bi-shi-san-2-81</a></h4><h4 id="CSDNhttps-blog-csdn-net-weixin-43599390"><a href="#CSDNhttps-blog-csdn-net-weixin-43599390" class="headerlink" title="CSDNhttps://blog.csdn.net/weixin_43599390"></a>CSDN<a href="https://blog.csdn.net/weixin_43599390" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390</a></h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 图片下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python requests 网络数据采集表情包下载</title>
      <link href="/2020/05/08/python-requests-wang-luo-shu-ju-cai-ji-biao-qing-bao-xia-zai/"/>
      <url>/2020/05/08/python-requests-wang-luo-shu-ju-cai-ji-biao-qing-bao-xia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-requests-网络数据采集贴吧图片下载"><a href="#Python-requests-网络数据采集贴吧图片下载" class="headerlink" title="Python requests 网络数据采集贴吧图片下载"></a>Python requests 网络数据采集贴吧图片下载</h1><a id="more"></a><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h2 id="爬虫的一般思路-主要流程步骤"><a href="#爬虫的一般思路-主要流程步骤" class="headerlink" title="爬虫的一般思路 主要流程步骤"></a>爬虫的一般思路 主要流程步骤</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#### 1、分析目标网页，确定爬取的url路径，headers参数</span><span class="token comment" spellcheck="true">#### 2、发送请求--requests 模拟浏览器发送请求，获取响应数据</span><span class="token comment" spellcheck="true">#### 3、解析数据 json模块：把json字符串转化成python可交互的数据类型</span><span class="token comment" spellcheck="true">#### 4、保存数据--保存在目标文件夹中</span></code></pre><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre><h5 id="爬取网站地址https-www-fabiaoqing-com"><a href="#爬取网站地址https-www-fabiaoqing-com" class="headerlink" title="爬取网站地址https://www.fabiaoqing.com/"></a>爬取网站地址<a href="https://www.fabiaoqing.com/" target="_blank" rel="noopener">https://www.fabiaoqing.com/</a></h5><p><img src="https://img-blog.csdnimg.cn/20200417215400629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="导入第三方模块"><a href="#导入第三方模块" class="headerlink" title="导入第三方模块"></a>导入第三方模块</h2><pre class=" language-python"><code class="language-python">    pip install requests    pip install json</code></pre><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 模块导入</span><span class="token keyword">import</span>  requests<span class="token keyword">import</span>  parsel<span class="token keyword">import</span>  osimages_dir <span class="token operator">=</span> <span class="token string">'image'</span> <span class="token comment" spellcheck="true"># 文件保存</span><span class="token comment" spellcheck="true"># for循环 下载多页的图片</span><span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># response = requests. get(base_url,headers)</span>    <span class="token comment" spellcheck="true"># 请求网站 获得数据</span>    <span class="token comment" spellcheck="true"># f'https://www.fabiaoqing.com/biaoqing/lists/page/{page}.html'  f 填空</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>f<span class="token string">'https://www.fabiaoqing.com/biaoqing/lists/page/{page}.html'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据解析方式 css xpath re</span>    sel <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># css技术</span>    <span class="token comment" spellcheck="true"># print(sel.css('.ui.segment img').getall())</span>    <span class="token comment" spellcheck="true"># print(sel.xpath('//*[@id="bqb"]/div[1]/div[32]/a/img').getall())</span>    imgs <span class="token operator">=</span> sel<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.ui.segment img'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> img <span class="token keyword">in</span> imgs<span class="token punctuation">:</span>        image_url <span class="token operator">=</span> img<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./@data-original'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        image_name <span class="token operator">=</span> img<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./@title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>image_url<span class="token punctuation">,</span>image_name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 下载图片</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>image_url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 图片视频音频文件都是二进制的，用wb进行保存，写入response.content</span>        suffix <span class="token operator">=</span> image_url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># open第一个参数path文件夹名/文件名</span>            <span class="token comment" spellcheck="true"># 为什么要加一个判断，判断文件夹是否存在</span>            <span class="token comment" spellcheck="true"># 文件夹文件目录数据库已经存在的东西 创建一个文件夹</span>            <span class="token keyword">if</span> <span class="token operator">not</span>  os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>images_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>images_dir<span class="token punctuation">)</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>images_dir<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>image_name <span class="token operator">+</span> <span class="token string">'.'</span><span class="token operator">+</span>suffix<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img-blog.csdnimg.cn/20200417215520311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="博客https-lemonhubs-github-io"><a href="#博客https-lemonhubs-github-io" class="headerlink" title="博客https://lemonhubs.github.io/"></a>博客<a href="https://lemonhubs.github.io/" target="_blank" rel="noopener">https://lemonhubs.github.io/</a></h5><h4 id="知乎https-www-zhihu-com-people-bi-shi-san-2-81"><a href="#知乎https-www-zhihu-com-people-bi-shi-san-2-81" class="headerlink" title="知乎https://www.zhihu.com/people/bi-shi-san-2-81"></a>知乎<a href="https://www.zhihu.com/people/bi-shi-san-2-81" target="_blank" rel="noopener">https://www.zhihu.com/people/bi-shi-san-2-81</a></h4><h4 id="CSDNhttps-blog-csdn-net-weixin-43599390"><a href="#CSDNhttps-blog-csdn-net-weixin-43599390" class="headerlink" title="CSDNhttps://blog.csdn.net/weixin_43599390"></a>CSDN<a href="https://blog.csdn.net/weixin_43599390" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390</a></h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 图片下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 实现博客文章保存md格式生成pdf</title>
      <link href="/2020/05/08/python-shi-xian-bo-ke-wen-zhang-bao-cun-md-ge-shi-sheng-cheng-pdf/"/>
      <url>/2020/05/08/python-shi-xian-bo-ke-wen-zhang-bao-cun-md-ge-shi-sheng-cheng-pdf/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-实现某博客网站文章保存md格式生成pdf"><a href="#Python-实现某博客网站文章保存md格式生成pdf" class="headerlink" title="Python 实现某博客网站文章保存md格式生成pdf"></a>Python 实现某博客网站文章保存md格式生成pdf</h1><a id="more"></a><ol><li>导入第三方模块<pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> requests -i https://pypi.tuna.tsinghua.edu.cn/simplepip <span class="token function">install</span> parsel -i https://pypi.tuna.tsinghua.edu.cn/simplepip <span class="token function">install</span> tomd -i https://pypi.tuna.tsinghua.edu.cn/simple</code></pre></li><li>环境配置 <pre class=" language-bash"><code class="language-bash">Pycharm开发环境 python 版本 python3.7Anconda 集成开发环境</code></pre></li><li>代码分析</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 模块导入</span><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true">#pip install requests</span><span class="token keyword">import</span> parsel<span class="token keyword">import</span> tomd<span class="token keyword">import</span>  re<span class="token comment" spellcheck="true"># 把文章保存成markdown格式</span><span class="token keyword">def</span> <span class="token function">download_article</span><span class="token punctuation">(</span>article_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>article_url<span class="token punctuation">)</span>    html <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true">#print(html)</span>    <span class="token comment" spellcheck="true"># 把网页变成css选择器</span>    <span class="token comment" spellcheck="true"># 解析网页数据</span>    sel <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    title <span class="token operator">=</span> sel<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.title-article::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> sel<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'article'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> tomd<span class="token punctuation">.</span>Tomd<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>markdown    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'&lt;a.*?a>'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#正则表达式</span>    <span class="token comment" spellcheck="true"># 提取文章的内容与格式</span>    <span class="token comment" spellcheck="true"># print(title)</span>    <span class="token comment" spellcheck="true"># print(content)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">'.md'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token operator">+</span>title<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 博客地址u'r'l,填入即可</span>article_url <span class="token operator">=</span> <span class="token string">'https://blog.csdn.net/weixin_44048823/article/details/90247052'</span>download_article<span class="token punctuation">(</span>article_url<span class="token punctuation">)</span></code></pre><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><pre class=" language-python"><code class="language-python">复制url 运行py文件</code></pre><p><img src="https://img-blog.csdnimg.cn/2020042211491938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre class=" language-bash"><code class="language-bash">出现 <span class="token operator">>></span><span class="token operator">></span> 表示已经完成下载</code></pre><p><img src="https://img-blog.csdnimg.cn/20200422114949529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre class=" language-bash"><code class="language-bash">查看 文件夹里面markdown文件</code></pre><p><img src="https://img-blog.csdnimg.cn/20200422115505626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="markdwon-to-pdf"><a href="#markdwon-to-pdf" class="headerlink" title="markdwon to pdf"></a>markdwon to pdf</h3><pre class=" language-bash"><code class="language-bash">1.打开Typora 网站 https://www.typora.io/<span class="token comment" spellcheck="true">#</span>2.下载电脑操作系统对应的版本，并安装3.打开下载的md文件</code></pre><p><img src="https://img-blog.csdnimg.cn/20200422115027594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200422115135996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre class=" language-bash"><code class="language-bash">使用Typora打开md文件</code></pre><p><img src="https://img-blog.csdnimg.cn/20200422115227706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre class=" language-bash"><code class="language-bash">对于可能的乱码，目前不会其他的，删除就可以了</code></pre><p><img src="https://img-blog.csdnimg.cn/20200422115625643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200422115243654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020042211530954.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/202004221153199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="博客地址https-lemonhubs-github-io"><a href="#博客地址https-lemonhubs-github-io" class="headerlink" title="博客地址https://lemonhubs.github.io/"></a>博客地址<a href="https://lemonhubs.github.io/" target="_blank" rel="noopener">https://lemonhubs.github.io/</a></h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mcu</title>
      <link href="/2020/05/08/mcu/"/>
      <url>/2020/05/08/mcu/</url>
      
        <content type="html"><![CDATA[<h1 id="普中51单片机学习"><a href="#普中51单片机学习" class="headerlink" title="普中51单片机学习"></a>普中51单片机学习</h1><h2 id="基于普中51单片机按键-数码管显示"><a href="#基于普中51单片机按键-数码管显示" class="headerlink" title="基于普中51单片机按键-数码管显示"></a>基于普中51单片机按键-数码管显示</h2><a id="more"></a><h3 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h3><h4 id="51单片机简介"><a href="#51单片机简介" class="headerlink" title="51单片机简介"></a>51单片机简介</h4><p>51单片机是对所有兼容Intel 8031指令系统的单片机的统称。该系列单片机的始祖是Intel的8004单片机，后来随着Flash rom技术的发展，8004单片机取得了长足的进展，成为应用最广泛的8位单片机之一，其代表型号是ATMEL公司的AT89系列，它广泛应用于工业测控系统之中。很多公司都有51系列的兼容机型推出，今后很长的一段时间内将占有大量市场。51单片机是基础入门的一个单片机，还是应用最广泛的一种。需要注意的是51系列的单片机一般不具备自编程能力。</p><h4 id="独立按键"><a href="#独立按键" class="headerlink" title="独立按键"></a>独立按键</h4><h5 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h5><h5 id="1-按键分类与输入原理"><a href="#1-按键分类与输入原理" class="headerlink" title="1.按键分类与输入原理"></a>1.按键分类与输入原理</h5><ol><li><p>按键按照结构原理科分为两类，一类是触点式开关按键，如机械式开关、导电橡胶式开关灯；另一类是无触点式开关按键，如电气式按键，磁感应按键等。前者造价低，后者寿命长。目前，微机系统中最常见的是触点式开关按键。</p></li><li><p>在单片机应用系统中，除了复位按键有专门的复位电路及专一的复位功能外，其他按键都是以开关状态来设置控制功能或输入数据的。当所设置的功能键或数字键按下时，计算机应用系统应完成该按键所设定的功能，键信息输入时与软件结构密切相关的过程。</p></li><li><p>对于一组键或一个键盘，总有一个接口电路与CPU相连。CPU可以采用查询或中断方式了解有无将按键输入，并检查是哪一个按键按下，将该键号送人累加器，然后通过跳转指令转入执行该键的功能程序，执行完成后再返回主程序。</p></li></ol><h5 id="2-按键结构与特点"><a href="#2-按键结构与特点" class="headerlink" title="2.按键结构与特点"></a>2.按键结构与特点</h5><p>微机键盘通常使用机械触点式按键开关，其主要功能式把机械上的通断转换为电气上的逻辑关系。也就是说，它能提供标准的TTL逻辑电平，以便于通用数字系统的逻辑电平相容。机械式按键再按下或释放时，由于机械弹性作用的影响，通常伴随有一定的时间触点机械抖动，然后其触点才稳定下来。其抖动过程如下图1所示，抖动时间的长短与开关的机械特性有关，一般为5-10ms。在触点抖动期间检测按键的通与断，可能导致判断出错，即按键一次按下或释放错误的被认为是多次操作，这种情况是不允许出现的。为了克服你、按键触点机械抖动所致的检测误判，必须采取消抖措施。按键较少时，可采用硬件消抖；按键较多式，采用软件消抖。</p><p><img src="/medias/images/mcu1.jpg" alt="avatar"></p><h5 id="3-按键编码"><a href="#3-按键编码" class="headerlink" title="3.按键编码"></a>3.按键编码</h5><p>一组按键或键盘都要通过I/O口线查询按键的开关状态。根据键盘结构的不同，采用不同的编码。无论有无编码，以及采用什么编码，最后都要转换成为与累加器中数值相对应的键值，以实现按键功能程序的跳转。</p><h5 id="4-键盘程序"><a href="#4-键盘程序" class="headerlink" title="4. 键盘程序"></a>4. 键盘程序</h5><p>一个完整的键盘控制程序应具备以下功能：</p><ol><li><p>检测有无按键按下，并采取硬件或软件措施消抖。</p></li><li><p>有可靠的逻辑处理办法。每次只处理一个按键，期间对任何按键的操作对系统不产生影响，且无论一次按键 时间有多长，系统仅执行一次按键功能程序。</p></li><li><p>准确输出按键值（或键号），以满足跳转指令要求。</p></li></ol><h5 id="独立按键-1"><a href="#独立按键-1" class="headerlink" title="独立按键"></a>独立按键</h5><p>单片机控制系统中，如果只需要几个功能键，此时，可采用独立式按键结构。</p><ol><li>独立按键式直接用I/O口线构成的单个按键电路，其特点式每个按键单独占用一根I/O口线，每个按键的工作不会影响其他I/O口线的状态。独立按键的典型应用如图所示。独立式按键电路配置灵活，软件结构简单，但每个按键必须占用一个I/O口线，因此，在按键较多时，I/O口线浪费较大，不宜采用。</li><li>独立按键的软件常采用查询式结构。先逐位查询没跟I/O口线的输入状态，如某一根I/O口线输入为低电平，则可确认该I/O口线所对应的按键已按下，然后，再转向该键的功能处理程序。</li></ol><p><img src="/medias/images/mcu2.jpg" alt="avatar"></p><h5 id="矩阵键盘"><a href="#矩阵键盘" class="headerlink" title="矩阵键盘"></a>矩阵键盘</h5><h6 id="矩阵键盘的工作方式"><a href="#矩阵键盘的工作方式" class="headerlink" title="矩阵键盘的工作方式"></a>矩阵键盘的工作方式</h6><p>对键盘的响应取决于键盘的工作方式，键盘的工作方式应根据实际应用系统中的CPU的工作状况而定，其选取的原则是既要保证CPU能及时响应按键操作，又不要过多占用CPU的工作时间。通常键盘的工作方式有三种，编程扫描、定时扫描和中断扫描。</p><h4 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h4><p><img src="/medias/images/mcu3.jpg" alt="avatar"><br><img src="/medias/images/mcu4.jpg" alt="avatar"></p><ol><li>编程扫描方式<br>编程扫描方式是利用CPU完成其它工作的空余时间，调用键盘扫描子程序来响应键盘输入的要求。在执行键功能程序时，CPU不再响应键输入要求，直到CPU重新扫描键盘为止。</li><li>定时扫描方式<br>定时扫描方式就是每隔一段时间对键盘扫描一次，它利用单片机内部的定时器产生一定时间（例如10ms）的定时，当定时时间到就产生定时器溢出中断。CPU响应中断后对键盘进行扫描，并在有按键按下时识别出该键，再执行该键的功能程序。</li><li>中断扫描方式<br>上述两种键盘扫描方式，无论是否按键，CPU都要定时扫描键盘，而单片机应用系统工作时，并非经常需要键盘输入，因此，CPU经常处于空扫描状态。<br>为提高CPU工作效率，可采用中断扫描工作方式。其工作过程如下：当无按键按下时，CPU处理自己的工作，当有按键按下时，产生中断请求，CPU转去执行键盘扫描子程序，并识别键号。</li><li>矩阵键盘模块（矩阵按键显示0-F，数码管显示）</li></ol><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span>             </span><span class="token comment" spellcheck="true">//此文件中定义了单片机的一些特殊功能寄存器</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u16<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//对数据类型进行声明定义</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIO_DIG P0</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIO_KEY P1  </span><span class="token comment" spellcheck="true">//可以改变，引脚可以自定义</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span>  KeyValue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用来存放读取到的键值</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code smgduan<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示0~F的值//共阴数码管</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         : delay* 函数功能           : 延时函数，i=1时，大约延时10us*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span>u16 i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         : KeyDown* 函数功能           : 检测有按键按下并读取键值* 输    入         : 无* 输    出         : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    GPIO_KEY<span class="token operator">=</span><span class="token number">0x0f</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GPIO_KEY<span class="token operator">!=</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读取按键是否按下</span>    <span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时10ms进行消抖</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>GPIO_KEY<span class="token operator">!=</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//再次检测键盘是否按下</span>        <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//测试列</span>            GPIO_KEY<span class="token operator">=</span><span class="token number">0X0F</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>GPIO_KEY<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0X07</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0X0b</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0X0d</span><span class="token punctuation">)</span><span class="token punctuation">:</span> KeyValue<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0X0e</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//测试行</span>            GPIO_KEY<span class="token operator">=</span><span class="token number">0XF0</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>GPIO_KEY<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0X70</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span>KeyValue<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0Xb0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span>KeyValue<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0Xd0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> KeyValue<span class="token operator">=</span>KeyValue<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0Xe0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KeyValue<span class="token operator">=</span>KeyValue<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>GPIO_KEY<span class="token operator">!=</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//检测按键松手检测</span>    <span class="token punctuation">{</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>            <span class="token function">KeyDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//按键判断函数</span>            GPIO_DIG<span class="token operator">=</span><span class="token operator">~</span>smgduan<span class="token punctuation">[</span>KeyValue<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="按键代码（通过独立按键按下LED亮灭）"><a href="#按键代码（通过独立按键按下LED亮灭）" class="headerlink" title="按键代码（通过独立按键按下LED亮灭）"></a>按键代码（通过独立按键按下LED亮灭）</h5><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"reg51.h"</span></span><span class="token comment" spellcheck="true">/*引脚端口定义*/</span>sbit key1<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span>sbit key2<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span>sbit key3<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span> sbit key4<span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">;</span>sbit led1<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span>sbit led2<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 声明定义*/</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char</span><span class="token macro property">#<span class="token directive keyword">define</span> uint  unsigned int</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">key_scan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*函数主体部分*/</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//DELAY_nMS(1)//延迟一毫秒</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>time<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">939</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*独立按键扫描函数*/</span><span class="token keyword">void</span> <span class="token function">key_scan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//检测按键K1是否按下</span>    <span class="token punctuation">{</span>            <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//消除抖动 一般大约10ms</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//再次判断按键是否按下</span>        <span class="token punctuation">{</span>            led1<span class="token operator">=</span><span class="token operator">~</span>led1<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//led状态取反</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//检测按键是否松开</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//检测按键K1是否按下</span>    <span class="token punctuation">{</span>            <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//消除抖动 一般大约10ms</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//再次判断按键是否按下</span>        <span class="token punctuation">{</span>            led2<span class="token operator">=</span><span class="token operator">~</span>led2<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//led状态取反</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//检测按键是否松开</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">keyscan</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//检测按键K1是否按下</span>    <span class="token punctuation">{</span>            <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//消除抖动 一般大约10ms</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//再次判断按键是否按下</span>        <span class="token punctuation">{</span>                          <span class="token comment" spellcheck="true">//执行需要完成的操作</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//检测按键是否松开</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*主函数部分*/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">key_scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h4><p>数码管，也称作辉光管，是一种可以显示数字和其他信息的电子设备。玻璃管中包括一个金属丝网制成的阳极和多个阴极。大部分数码管阴极的形状为数字。管中充以低压气体，通常大部分为氖加上一些汞和/或氩。给某一个阴极充电，数码管就会发出颜色光，视乎管内的气体而定，一般都是橙色或绿色。<br>数码管<br>共阳数码管<br>共阳数码管在应用时应将公共极COM接到+5V，当某一字段发光二极管的阴极为低电平时，相应字段就点亮，当某一字段的阴极为高电平时，相应字段就不亮。<br>共阴数码管<br>对于共阴极数码管来说，当某个发光二极管的阳极为高电平时，发光二极管点亮，相应的段被显示。同样，共阳极数码管的阳极连接在一起，公共阳极接+5V，当某个发光二极管的阴极接低电平时，该发光二极管被点亮，相应的段被显示。<br><img src="/medias/images/mcu8.jpg" alt="avatar"><br>静态数码管硬件电路设计<br><img src="/medias/images/mcu9.jpg" alt="avatar"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code LED_0F<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0xa4</span><span class="token punctuation">,</span> <span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x8e</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//共阳数码管</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code  smgduan<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////共阴数码管</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span>             </span><span class="token comment" spellcheck="true">//此文件中定义了单片机的一些特殊功能寄存器</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u16<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//对数据类型进行声明定义</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code table<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0xa4</span><span class="token punctuation">,</span> <span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x8e</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span>i<span class="token punctuation">;</span>m<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">;</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名       : main* 函数功能         : 主函数* 输    入       : 无* 输    出         : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> num<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> num <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> <span class="token operator">++</span>num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                P0<span class="token operator">=</span>table<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//P0=0x00;</span>            <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="138译码器"><a href="#138译码器" class="headerlink" title="138译码器"></a>138译码器</h4><h6 id="74HC138-芯片"><a href="#74HC138-芯片" class="headerlink" title="74HC138 芯片"></a>74HC138 芯片</h6><p>74HC138D 是一种三通道输入、 八通道输出译码器， 主要应用于消费类电子产品。</p><ol><li><p>主要特性<br>采用 CMOS 工艺<br>低功耗<br>工作电压： 3.0V-5.0V<br>封装形式： SOP16</p></li><li><p>原理图<br><img src="/medias/images/mcu5.jpg" alt="avatar"></p></li><li><p>引脚功能定义<br><img src="/medias/images/mcu6.jpg" alt="avatar"></p></li><li><p>真值表<br><img src="/medias/images/mcu7.jpg" alt="avatar"></p></li><li><p>工作原理<br>从上面的管脚功能定义说明及真值表可以知道该芯片使用方法非常简单， 给E1、 E2 使能管脚低电平， E3 管脚为高电平， 至于哪个管脚输出有效电平（低电平） ， 要看 A0， A1， A2 输入管脚的电平状态。 如果 A0， A1， A2 都为低电平， 则Y0 输出有效电平（低电平） ， 其他管脚均输出高电平。 如果 A0 为高电平， A1，A2 都为低电平， 则 Y1 输出有效电平（低电平） ， 其他管脚均输出高电平。 其他几种输出大家可以对照真值表查看。 如果 E1、 E2 使能管脚任意一个为高电平或<br>者 E3 为低电平， 不论输入是什么， 输出都为高电平。</p></li><li><p>总结<br>A0、 A1、 A2 输入就相当于 3 位 2 进制数， A0 是低位， A1 是次高位， A2 是高位。 而 Y0-Y7 具体哪一个输出有效电平， 就看输入二进制对应的十进制数值。<br>例如：<br>输入是 101（A2， A1， A0） ， 其对应的十进制数是 5， 所以 Y5 输出有效电平（低电平）。</p></li></ol><h2 id="软件代码-按键数码管显示"><a href="#软件代码-按键数码管显示" class="headerlink" title="软件代码(按键数码管显示)"></a>软件代码(按键数码管显示)</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span>    </span><span class="token comment" spellcheck="true">//此文件中定义了单片机的一些特殊功能寄存器</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u16<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//对数据类型进行声明定义</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*端口引脚定义*/</span>sbit LSA<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span>sbit LSB<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">;</span>sbit LSC<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">4</span><span class="token punctuation">;</span>sbit KEY1 <span class="token operator">=</span> P3<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span>sbit KEY2 <span class="token operator">=</span> P3<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*变量定义*/</span><span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//被触发的按键编号</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyLock1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyLock2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*函数声明部分*/</span><span class="token keyword">void</span> <span class="token function">KEY_Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">KEY_Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Light_Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span>u16 i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Time0Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*数码管码表*/</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code smgduan<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span>                    <span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//共阴数码管显示0~F的值</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> LightBuf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0XFF</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         : delay* 函数功能           : 延时函数，i=1时，大约延时10us*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span>u16 i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         : Display* 函数功能           : 数码管显示部分*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LightBuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>smgduan<span class="token punctuation">[</span>number<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        LightBuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>smgduan<span class="token punctuation">[</span>number<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        LightBuf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>smgduan<span class="token punctuation">[</span>number<span class="token operator">/</span><span class="token number">100</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        LightBuf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>smgduan<span class="token punctuation">[</span>number<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        LightBuf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>smgduan<span class="token punctuation">[</span>number<span class="token operator">/</span><span class="token number">10000</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         : Light_Scan()* 函数功能           : 数码管扫描函数，选择显示的位置*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Light_Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    u8 i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//位选，选择点亮的数码管，</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                LSA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>LSB<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>LSC<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P0<span class="token operator">=</span>LightBuf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示第0位</span>            <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                LSA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>LSB<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>LSC<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P0<span class="token operator">=</span>LightBuf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示第1位</span>            <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                LSA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>LSB<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>LSC<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P0<span class="token operator">=</span>LightBuf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示第2位</span>            <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                LSA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>LSB<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>LSC<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P0<span class="token operator">=</span>LightBuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示第3位</span>            <span class="token keyword">case</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                LSA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>LSB<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>LSC<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P0<span class="token operator">=</span>LightBuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示第4位</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//间隔一段时间扫描    </span>        P0<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消隐</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         : KEY_Scan()* 函数功能           : 按键扫描函数*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">KEY_Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> cnt1 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> cnt2 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  cnt1 <span class="token operator">=</span><span class="token punctuation">(</span>cnt1<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>KEY1<span class="token punctuation">;</span>    cnt2 <span class="token operator">=</span><span class="token punctuation">(</span>cnt2<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>KEY2<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt1 <span class="token operator">!=</span> <span class="token number">0x00</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>          KeyLock1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>KeyLock1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>          KeyNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          KeyLock1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt2 <span class="token operator">!=</span> <span class="token number">0x00</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         KeyLock2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>KeyLock2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>           KeyNum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>          KeyLock2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         :  KEY_Action()* 函数功能           : 按键执行操作部分*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">KEY_Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span>     <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>number<span class="token operator">++</span><span class="token punctuation">;</span> KeyNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>number<span class="token operator">--</span><span class="token punctuation">;</span> KeyNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         :Time0Iint* 函数功能           :定时器0配置，定时器初始化函数*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">Time0Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        TH0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时2ms</span>        TL0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>        TMOD <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span>        TMOD <span class="token operator">=</span>  <span class="token number">0x01</span><span class="token punctuation">;</span>        ET0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名         :void InterruptT0() interrupt 1* 函数功能           : 定时器0中断执行部分*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">InterruptT0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token punctuation">{</span>        TH0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时2ms</span>        TL0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>        <span class="token function">Light_Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">KEY_Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名       : main* 函数功能         : 主函数* 输    入       : 无* 输    出         : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">Time0Iint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">KEY_Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> 电子模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 数码管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blinker 语音控制 51单片机 点灯</title>
      <link href="/2020/05/08/blinker-yu-yin-kong-zhi-51-dan-pian-ji-dian-deng/"/>
      <url>/2020/05/08/blinker-yu-yin-kong-zhi-51-dan-pian-ji-dian-deng/</url>
      
        <content type="html"><![CDATA[<h1 id="Blinker-语音控制-51单片机-点灯"><a href="#Blinker-语音控制-51单片机-点灯" class="headerlink" title="Blinker 语音控制 51单片机 点灯"></a>Blinker 语音控制 51单片机 点灯</h1><a id="more"></a><h2 id="Blinker"><a href="#Blinker" class="headerlink" title="Blinker"></a>Blinker</h2><p><img src="https://img-blog.csdnimg.cn/20200329144027393.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>blinker是一套跨硬件、跨平台的物联网解决方案，提供APP端、设备端、服务器端支持，使用公有云服务进行数据传输存储。可用于智能家居、数据监测等领域，可以帮助用户更好更快地搭建物联网项目。</p><h3 id="blinker特性"><a href="#blinker特性" class="headerlink" title="blinker特性"></a>blinker特性</h3><p>●其由服务器端、app端、设备端组成，可以部署到几乎所有物联网平台<br>●ap端支持ios、android<br>●设备端可以使用蓝牙、WiFi、MQTT等方式接入，支持Arduino、freeRTOS、mbed OS、Linux等开发平台<br>●服务器端可以部署到阿里云、腾讯云、OneNET、百度云、AWS、google cloud等平台<br>●通过界面布局器，DIY用户可自己拖拽布局设备控制界面，自由打造你的物联网设备●通过专属SDK，认证用户可以使用Blinker开发自己的产品，并用于商业用途blinker</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>●快速开发物联网/智能家居/无线遥控项目<br>●手机/语音助手控制设备<br>●蓝牙ble/局域网WiFi/远程MQTT接入设备</p><h2 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h2><p>Arduino是一款便捷灵活、方便上手的开源电子原型平台。包含硬件（各种型号的Arduino板）和软件（ArduinoIDE)。由一个欧洲开发团队于2005年冬季开发。其成员包括Massimo Banzi、David Cuartielles、Tom Igoe、Gianluca Martino、David Mellis和Nicholas Zambetti等。<br>它构建于开放原始码simple I/O介面版，并且具有使用类似Java、C语言的Processing/Wiring开发环境。主要包含两个的部分：硬件部分是可以用来做电路连接的Arduino电路板；另外一个则是Arduino IDE，你的计算机中的程序开发环境。你只要在IDE中编写程序代码，将程序上传到Arduino电路板后，程序便会告诉Arduino电路板要做些什么了。<br>Arduino能通过各种各样的传感器来感知环境，通过控制灯光、马达和其他的装置来反馈、影响环境。板子上的微控制器可以通过Arduino的编程语言来编写程序，编译成二进制文件，烧录进微控制器。对Arduino的编程是通过 Arduino编程语言 (基于 Wiring)和Arduino开发环境(基于 Processing)来实现的。基于Arduino的项目，可以只包含Arduino，也可以包含Arduino和其他一些在PC上运行的软件，他们之间进行通信 (比如 Flash, Processing, MaxMSP)来实现。<br><img src="https://img-blog.csdnimg.cn/20200329144045354.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>注册点灯科技账号，注册米家账号</li><li>米家绑定其他设备平台点灯科技blinker</li><li>点灯科技blinker平台创建一个设备选择为Arduino,获取密钥</li><li>使用arduino ide 使用nodemcu(esp8266模块) 下载代码（串口发送数据）</li><li>51单片机进行进行串口操作，串口接收数据，进行操作。</li><li>ArduinoIDE 开发esp8266 </li></ol><p><img src="https://img-blog.csdnimg.cn/20200329144140736.jpg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020032914415436.jpg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329144207782.jpg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329144222562.jpg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329144234209.jpg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020032914424444.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329144253869.jpg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329144309256.jpg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329144332336.jpg#pic_center" alt="在这里插入图片描述"></p><h3 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h3><h4 id="Arduino-代码"><a href="#Arduino-代码" class="headerlink" title="Arduino 代码"></a>Arduino 代码</h4><pre class=" language-c"><code class="language-c"><span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span>  <span class="token operator">*</span> Blinker 库下载地址<span class="token punctuation">:</span> <span class="token operator">*</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>blinker<span class="token operator">-</span>iot<span class="token operator">/</span>blinker<span class="token operator">-</span>library<span class="token operator">/</span>archive<span class="token operator">/</span>master<span class="token punctuation">.</span>zip <span class="token operator">*</span>  <span class="token operator">*</span> Blinker 是一套跨硬件、跨平台的物联网解决方案，提供APP端、设备端、 <span class="token operator">*</span> 服务器端支持，使用公有云服务进行数据传输存储。可用于智能家居、 <span class="token operator">*</span> 数据监测等领域，可以帮助用户更好更快地搭建物联网项目。 <span class="token operator">*</span>  <span class="token operator">*</span> 如果使用 ESP8266 接入 Blinker<span class="token punctuation">,</span> <span class="token operator">*</span> 请确保安装了 <span class="token number">2.5</span><span class="token punctuation">.</span><span class="token number">0</span> 或更新的 ESP8266<span class="token operator">/</span>Arduino 支持包。 <span class="token operator">*</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>esp8266<span class="token operator">/</span>Arduino<span class="token operator">/</span>releases <span class="token operator">*</span>  <span class="token operator">*</span> 如果使用 ESP32 接入 Blinker<span class="token punctuation">,</span> <span class="token operator">*</span> 请确保安装了 <span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">2</span> 或更新的 ESP32<span class="token operator">/</span>Arduino 支持包。 <span class="token operator">*</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>espressif<span class="token operator">/</span>arduino<span class="token operator">-</span>esp32<span class="token operator">/</span>releases <span class="token operator">*</span>  <span class="token operator">*</span> 文档<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>doc<span class="token punctuation">.</span>blinker<span class="token punctuation">.</span>app<span class="token operator">/</span> <span class="token operator">*</span>       https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>blinker<span class="token operator">-</span>iot<span class="token operator">/</span>blinker<span class="token operator">-</span>doc<span class="token operator">/</span>wiki <span class="token operator">*</span>  <span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token macro property">#<span class="token directive keyword">define</span> BLINKER_WIFI</span><span class="token macro property">#<span class="token directive keyword">define</span> BLINKER_MIOT_LIGHT</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Blinker.h></span></span><span class="token keyword">char</span> auth<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ff07996779a7"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设备密钥//很重要的</span><span class="token keyword">char</span> ssid<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"MERCURY_3DE2"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//你的wifi或者热点名称</span><span class="token keyword">char</span> pswd<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"88888888"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//你的wifi或者热点密码</span><span class="token macro property">#<span class="token directive keyword">define</span> LED            D1</span><span class="token keyword">void</span> <span class="token function">miotPowerState</span><span class="token punctuation">(</span><span class="token keyword">const</span> String <span class="token operator">&amp;</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"need set power state: "</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BLINKER_CMD_ON<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BLINKER_CMD_OFF<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">pinMode</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    Blinker<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>auth<span class="token punctuation">,</span> ssid<span class="token punctuation">,</span> pswd<span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">attachPowerState</span><span class="token punctuation">(</span>miotPowerState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Blinker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="STC89C51代码"><a href="#STC89C51代码" class="headerlink" title="STC89C51代码"></a>STC89C51代码</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;reg52.h></span></span>sbit LED <span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ConfigUART</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> baud<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//串口配置函数，baud为波特率</span><span class="token punctuation">{</span>    SCON <span class="token operator">=</span> <span class="token number">0x50</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//配置串口为模式1</span>    TMOD<span class="token operator">=</span> <span class="token number">0x21</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//配置T1为模式2</span>    TH1 <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">11095200</span><span class="token operator">/</span><span class="token number">12</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> baud<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算T1重载值</span>    TL1 <span class="token operator">=</span> TH1<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//初值等于重载值</span>    ET1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//禁止T1中断</span>    ES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打开串口中断</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打开总中断</span>      TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//启动T1</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ConfigUART</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//配置波特率为9600</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">InterruptUART</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>RI<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收到字节</span>    <span class="token punctuation">{</span>        RI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//手动清零接收中断标志</span>        a<span class="token operator">=</span>SBUF<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>            P2<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全部亮</span>        <span class="token keyword">else</span>             P2<span class="token operator">=</span><span class="token number">0xff</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全部灭</span>        SBUF<span class="token operator">=</span>a<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TI<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//字节发送完毕</span>    <span class="token punctuation">{</span>      TI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//手动清零发送中断标志位</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h3><ol><li>STC89C5x系列单片机</li><li>nodemcu esp8266 WIFI模块</li><li>串口连接部分<br>nodemcu —- STC89C5x单片机<br> RX      –&gt;       TX<br> TX      –&gt;       RX<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2></li><li>Arduino ESP8266 学习 单片机菜鸟的博客<br><a href="https://blog.csdn.net/dpjcn1990?t=1" target="_blank" rel="noopener">https://blog.csdn.net/dpjcn1990?t=1</a></li><li>哔哩哔哩-UP主–雅痞1900<br><a href="https://space.bilibili.com/397351217?spm_id_from=333.788.b_765f7570696e666f.2" target="_blank" rel="noopener">https://space.bilibili.com/397351217?spm_id_from=333.788.b_765f7570696e666f.2</a><br>（这个东西不不是我搞的，我只是把这个东西写成了一个笔记，毕竟一个渣渣，只能靠白嫖维持）</li><li>视频学习（主要还是哔哩哔哩UP主提供的资料–哔哩哔哩）<iframe src="//player.bilibili.com/player.html?aid=667534606&bvid=BV1Ka4y1t7wc&cid=170092797&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li></ol>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> Blinker </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android</title>
      <link href="/2020/05/08/android/"/>
      <url>/2020/05/08/android/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的安卓学习"><a href="#简单的安卓学习" class="headerlink" title="简单的安卓学习"></a>简单的安卓学习</h1><h2 id="基本控件学习"><a href="#基本控件学习" class="headerlink" title="基本控件学习"></a>基本控件学习</h2><a id="more"></a><p>//暂时不处理</p><h2 id="学习中的问题"><a href="#学习中的问题" class="headerlink" title="学习中的问题"></a>学习中的问题</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><h4 id="点击控件调用手机本地浏览器"><a href="#点击控件调用手机本地浏览器" class="headerlink" title="点击控件调用手机本地浏览器"></a>点击控件调用手机本地浏览器</h4><h5 id="功能：点击哔哩哔哩图片，调用手机浏览器"><a href="#功能：点击哔哩哔哩图片，调用手机浏览器" class="headerlink" title="功能：点击哔哩哔哩图片，调用手机浏览器"></a>功能：点击哔哩哔哩图片，调用手机浏览器</h5><p><img src="/medias/images/android1.jpg" alt="avatar">D:\delehubBlog\themes\matery\source\images</p><h4 id="安卓简单UI设计"><a href="#安卓简单UI设计" class="headerlink" title="安卓简单UI设计"></a>安卓简单UI设计</h4><h5 id="生成一个简单的图片控件"><a href="#生成一个简单的图片控件" class="headerlink" title="生成一个简单的图片控件"></a>生成一个简单的图片控件</h5><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><ol><li>声明一个线性布局的框架</li><li>长度和宽度自适应</li><li>导入图片资源</li><li>注册ID(关键的部分)<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>LinearLayout android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span> android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span><span class="token operator">></span> <span class="token operator">&lt;</span>ImageView     android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>     android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@drawable/blibli"</span>     android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/bilibili"</span>     android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>ImageView<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span></code></pre></li></ol><h4 id="java逻辑代码"><a href="#java逻辑代码" class="headerlink" title="java逻辑代码"></a>java逻辑代码</h4><h5 id="点击图片调用本地浏览器"><a href="#点击图片调用本地浏览器" class="headerlink" title="点击图片调用本地浏览器"></a>点击图片调用本地浏览器</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 首先这是一张图片，所以要声明这个图片控件的变量</span><span class="token keyword">private</span> ImageView bilibili<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//图片ID</span><span class="token comment" spellcheck="true">//然后进入下一个函数protected void onCreate进行调用</span>    <span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token string">"HandlerLeak"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        bilibili <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>bilibili<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 绑定这个图片资源并监视这个图片</span>        bilibili<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"bilibili"</span> <span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Uri uri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"https://space.bilibili.com/352284146/video"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//Uri uri = Uri.parse("填入你想要打开的链接");</span>                Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"android.intent.action.VIEW"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><p>继续学习…….(以后更新)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件开发 </tag>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blinker</title>
      <link href="/2020/05/08/blinker/"/>
      <url>/2020/05/08/blinker/</url>
      
        <content type="html"><![CDATA[<h1 id="Blinker-语音控制-51单片机-点灯"><a href="#Blinker-语音控制-51单片机-点灯" class="headerlink" title="Blinker 语音控制 51单片机 点灯"></a>Blinker 语音控制 51单片机 点灯</h1><a id="more"></a><h2 id="Blinker"><a href="#Blinker" class="headerlink" title="Blinker"></a>Blinker</h2><p><img src="/medias/images/blinker10.jpg" alt="avatar"><br>blinker是一套跨硬件、跨平台的物联网解决方案，提供APP端、设备端、服务器端支持，使用公有云服务进行数据传输存储。可用于智能家居、数据监测等领域，可以帮助用户更好更快地搭建物联网项目。</p><h3 id="blinker特性"><a href="#blinker特性" class="headerlink" title="blinker特性"></a>blinker特性</h3><p>●其由服务器端、app端、设备端组成，可以部署到几乎所有物联网平台<br>●ap端支持ios、android<br>●设备端可以使用蓝牙、WiFi、MQTT等方式接入，支持Arduino、freeRTOS、mbed OS、Linux等开发平台<br>●服务器端可以部署到阿里云、腾讯云、OneNET、百度云、AWS、google cloud等平台<br>●通过界面布局器，DIY用户可自己拖拽布局设备控制界面，自由打造你的物联网设备●通过专属SDK，认证用户可以使用Blinker开发自己的产品，并用于商业用途blinker</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>●快速开发物联网/智能家居/无线遥控项目<br>●手机/语音助手控制设备<br>●蓝牙ble/局域网WiFi/远程MQTT接入设备</p><h2 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h2><p>Arduino是一款便捷灵活、方便上手的开源电子原型平台。包含硬件（各种型号的Arduino板）和软件（ArduinoIDE)。由一个欧洲开发团队于2005年冬季开发。其成员包括Massimo Banzi、David Cuartielles、Tom Igoe、Gianluca Martino、David Mellis和Nicholas Zambetti等。<br>它构建于开放原始码simple I/O介面版，并且具有使用类似Java、C语言的Processing/Wiring开发环境。主要包含两个的部分：硬件部分是可以用来做电路连接的Arduino电路板；另外一个则是Arduino IDE，你的计算机中的程序开发环境。你只要在IDE中编写程序代码，将程序上传到Arduino电路板后，程序便会告诉Arduino电路板要做些什么了。<br>Arduino能通过各种各样的传感器来感知环境，通过控制灯光、马达和其他的装置来反馈、影响环境。板子上的微控制器可以通过Arduino的编程语言来编写程序，编译成二进制文件，烧录进微控制器。对Arduino的编程是通过 Arduino编程语言 (基于 Wiring)和Arduino开发环境(基于 Processing)来实现的。基于Arduino的项目，可以只包含Arduino，也可以包含Arduino和其他一些在PC上运行的软件，他们之间进行通信 (比如 Flash, Processing, MaxMSP)来实现。<br><img src="/medias/images/blinker11.jpg" alt="avatar"></p><h2 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>注册点灯科技账号，注册米家账号</li><li>米家绑定其他设备平台点灯科技blinker</li><li>点灯科技blinker平台创建一个设备选择为Arduino,获取密钥</li><li>使用arduino ide 使用nodemcu(esp8266模块) 下载代码（串口发送数据）</li><li>51单片机进行进行串口操作，串口接收数据，进行操作。</li><li>ArduinoIDE 开发esp8266<br><img src="/medias/images/blinker1.jpg" alt="avatar"><br><img src="/medias/images/blinker2.jpg" alt="avatar"><br><img src="/medias/images/blinker3.jpg" alt="avatar"></li></ol><p><img src="/medias/images/blinker4.jpg" alt="avatar"><br><img src="/medias/images/blinker5.jpg" alt="avatar"><br><img src="/medias/images/blinker6.jpg" alt="avatar"><br><img src="/medias/images/blinker7.jpg" alt="avatar"></p><p><img src="/medias/images/blinker8.jpg" alt="avatar"><br><img src="/medias/images/blinker9.jpg" alt="avatar"></p><h3 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h3><h4 id="Arduino-代码"><a href="#Arduino-代码" class="headerlink" title="Arduino 代码"></a>Arduino 代码</h4><pre class=" language-c"><code class="language-c"><span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span>  <span class="token operator">*</span> Blinker 库下载地址<span class="token punctuation">:</span> <span class="token operator">*</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>blinker<span class="token operator">-</span>iot<span class="token operator">/</span>blinker<span class="token operator">-</span>library<span class="token operator">/</span>archive<span class="token operator">/</span>master<span class="token punctuation">.</span>zip <span class="token operator">*</span>  <span class="token operator">*</span> Blinker 是一套跨硬件、跨平台的物联网解决方案，提供APP端、设备端、 <span class="token operator">*</span> 服务器端支持，使用公有云服务进行数据传输存储。可用于智能家居、 <span class="token operator">*</span> 数据监测等领域，可以帮助用户更好更快地搭建物联网项目。 <span class="token operator">*</span>  <span class="token operator">*</span> 如果使用 ESP8266 接入 Blinker<span class="token punctuation">,</span> <span class="token operator">*</span> 请确保安装了 <span class="token number">2.5</span><span class="token punctuation">.</span><span class="token number">0</span> 或更新的 ESP8266<span class="token operator">/</span>Arduino 支持包。 <span class="token operator">*</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>esp8266<span class="token operator">/</span>Arduino<span class="token operator">/</span>releases <span class="token operator">*</span>  <span class="token operator">*</span> 如果使用 ESP32 接入 Blinker<span class="token punctuation">,</span> <span class="token operator">*</span> 请确保安装了 <span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">2</span> 或更新的 ESP32<span class="token operator">/</span>Arduino 支持包。 <span class="token operator">*</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>espressif<span class="token operator">/</span>arduino<span class="token operator">-</span>esp32<span class="token operator">/</span>releases <span class="token operator">*</span>  <span class="token operator">*</span> 文档<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>doc<span class="token punctuation">.</span>blinker<span class="token punctuation">.</span>app<span class="token operator">/</span> <span class="token operator">*</span>       https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>blinker<span class="token operator">-</span>iot<span class="token operator">/</span>blinker<span class="token operator">-</span>doc<span class="token operator">/</span>wiki <span class="token operator">*</span>  <span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token macro property">#<span class="token directive keyword">define</span> BLINKER_WIFI</span><span class="token macro property">#<span class="token directive keyword">define</span> BLINKER_MIOT_LIGHT</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Blinker.h></span></span><span class="token keyword">char</span> auth<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ff07996779a7"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设备密钥//很重要的</span><span class="token keyword">char</span> ssid<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"MERCURY_3DE2"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//你的wifi或者热点名称</span><span class="token keyword">char</span> pswd<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"88888888"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//你的wifi或者热点密码</span><span class="token macro property">#<span class="token directive keyword">define</span> LED            D1</span><span class="token keyword">void</span> <span class="token function">miotPowerState</span><span class="token punctuation">(</span><span class="token keyword">const</span> String <span class="token operator">&amp;</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"need set power state: "</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BLINKER_CMD_ON<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BLINKER_CMD_OFF<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">pinMode</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    Blinker<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>auth<span class="token punctuation">,</span> ssid<span class="token punctuation">,</span> pswd<span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">attachPowerState</span><span class="token punctuation">(</span>miotPowerState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Blinker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="STC89C51代码"><a href="#STC89C51代码" class="headerlink" title="STC89C51代码"></a>STC89C51代码</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;reg52.h></span></span>sbit LED <span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ConfigUART</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> baud<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//串口配置函数，baud为波特率</span><span class="token punctuation">{</span>    SCON <span class="token operator">=</span> <span class="token number">0x50</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//配置串口为模式1</span>    TMOD<span class="token operator">=</span> <span class="token number">0x21</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//配置T1为模式2</span>    TH1 <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">11095200</span><span class="token operator">/</span><span class="token number">12</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> baud<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算T1重载值</span>    TL1 <span class="token operator">=</span> TH1<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//初值等于重载值</span>    ET1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//禁止T1中断</span>    ES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打开串口中断</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打开总中断</span>      TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//启动T1</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ConfigUART</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//配置波特率为9600</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">InterruptUART</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>RI<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//接收到字节</span>    <span class="token punctuation">{</span>        RI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//手动清零接收中断标志</span>        a<span class="token operator">=</span>SBUF<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>            P2<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全部亮</span>        <span class="token keyword">else</span>             P2<span class="token operator">=</span><span class="token number">0xff</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全部灭</span>        SBUF<span class="token operator">=</span>a<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TI<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//字节发送完毕</span>    <span class="token punctuation">{</span>      TI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//手动清零发送中断标志位</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h3><ol><li>STC89C5x系列单片机</li><li>nodemcu esp8266 WIFI模块</li><li>串口连接部分<br>nodemcu —- STC89C5x单片机<br> RX      –&gt;       TX<br> TX      –&gt;       RX<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2></li><li>Arduino ESP8266 学习 单片机菜鸟的博客<br><a href="https://blog.csdn.net/dpjcn1990?t=1" target="_blank" rel="noopener">https://blog.csdn.net/dpjcn1990?t=1</a></li><li>哔哩哔哩-UP主–雅痞1900<br><a href="https://space.bilibili.com/397351217?spm_id_from=333.788.b_765f7570696e666f.2" target="_blank" rel="noopener">https://space.bilibili.com/397351217?spm_id_from=333.788.b_765f7570696e666f.2</a><br>（这个东西不不是我搞的，我只是把这个东西写成了一个笔记，毕竟一个渣渣，只能靠白嫖维持）</li><li>视频学习（主要还是哔哩哔哩UP主提供的资料–哔哩哔哩）<iframe src="//player.bilibili.com/player.html?aid=667534606&bvid=BV1Ka4y1t7wc&cid=170092797&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li></ol>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> Blinker </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lcd</title>
      <link href="/2020/05/08/lcd/"/>
      <url>/2020/05/08/lcd/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机学习–LCD模块使用"><a href="#51单片机学习–LCD模块使用" class="headerlink" title="51单片机学习–LCD模块使用"></a>51单片机学习–LCD模块使用</h1><h3 id="常见的液晶显示屏模块-LCD1602-LCD12864"><a href="#常见的液晶显示屏模块-LCD1602-LCD12864" class="headerlink" title="常见的液晶显示屏模块 LCD1602 LCD12864"></a>常见的液晶显示屏模块 LCD1602 LCD12864</h3><a id="more"></a><h2 id="LCD1602"><a href="#LCD1602" class="headerlink" title="LCD1602"></a>LCD1602</h2><h3 id="LCD1602模块"><a href="#LCD1602模块" class="headerlink" title="LCD1602模块"></a>LCD1602模块</h3><p>工业字符型液晶。1602是指LCD显示的内容为16X2,即可以显示两行，每行16个字符.</p><h3 id="特殊接口说明"><a href="#特殊接口说明" class="headerlink" title="特殊接口说明:"></a>特殊接口说明:</h3><ol><li>RS:寄存器选择输入端</li><li>RS=1:指向数据寄存器</li><li>RS=0:指向指令寄存器</li><li>RW:读写控制输入端</li><li>RW=0:写操作 RW=1：读操作</li><li>E:使能信号输入端,读操作时，高电平有效；写操作时，下降沿有效；</li></ol><h3 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h3><p>第一步：写指令38H，显示模式设置；<br>第二步：写指令08H，显示关闭；<br>第三步；写指令01H，显示清屏；<br>第四步：写指令06H，显示光标移动设置；<br>第五步：写指令0CH，显示光标开及光标设置<br><img src="/medias/images/lcd1.jpg" alt="avatar"><br><img src="/medias/images/lcd2.jpg" alt="avatar"><br><img src="/medias/images/lcd3.jpg" alt="avatar"></p><h3 id="硬件电路"><a href="#硬件电路" class="headerlink" title="硬件电路"></a>硬件电路</h3><p><img src="/medias/images/lcd4.jpg" alt="avatar"></p><h3 id="软件代码"><a href="#软件代码" class="headerlink" title="软件代码"></a>软件代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"reg51.h"</span></span><span class="token comment" spellcheck="true">//51单片机头文件</span><span class="token comment" spellcheck="true">/*相关引脚的定义*/</span><span class="token comment" spellcheck="true">//该部分可以自己去定义，我是学习51单片机时选择普中单片机开发板。</span>sbit rs<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//命令/数据选择</span>sbit rw<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读写口</span>sbit  e<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//锁存控制</span><span class="token comment" spellcheck="true">/*函数声明*/</span><span class="token keyword">void</span> <span class="token function">LCD1602_SetArea</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD1602_ShowChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD1602_ShowString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD1602_ShowArray</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD1602_ShowNumber_Integer</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">int</span> IntegerNumber<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitLCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*延迟函数的定义*/</span><span class="token keyword">void</span> <span class="token function">DELAY_nUS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>Time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>time<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">939</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//向LCD写一命令</span><span class="token keyword">void</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>  rs<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 写的是命令</span>  rw<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 写状态</span>  e<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使能</span>  P0<span class="token operator">=</span>t<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//写入命令 </span>  <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//等待写入,如果时间太短，会导致液晶无法显示</span>  e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据的锁定</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//向LCD写一数据</span><span class="token keyword">void</span> <span class="token function">wdata</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>  rs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 写的是数据</span>  rw<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 写状态</span>  e<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//使能</span>  P0<span class="token operator">=</span>t<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//写入数据</span>  <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//等待写入,如果时间太短，会导致液晶无法显示</span>  e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//数据的锁定</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//LCD设置坐标位置</span><span class="token keyword">void</span> <span class="token function">LCD1602_SetArea</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">+</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0xC0</span> <span class="token operator">+</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//LCD显示字符</span><span class="token keyword">void</span> <span class="token function">LCD1602_ShowChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD1602_SetArea</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// 设置显示坐标</span>    <span class="token function">wdata</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 显示指定字符</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//LCD显示字符串</span><span class="token keyword">void</span> <span class="token function">LCD1602_ShowString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">LCD1602_SetArea</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// 设置显示坐标</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">wdata</span><span class="token punctuation">(</span><span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//LCD显示数组</span><span class="token keyword">void</span> <span class="token function">LCD1602_ShowArray</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Array<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 定义局部变量，用于函数循环计数</span>    <span class="token function">LCD1602_SetArea</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// 设置显示坐标</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">wdata</span><span class="token punctuation">(</span>Array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//LCD显示有符号的整形数字</span><span class="token keyword">void</span> <span class="token function">LCD1602_ShowNumber_Integer</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> X<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Y<span class="token punctuation">,</span><span class="token keyword">int</span> IntegerNumber<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Number_Integer_Array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 判断 整型数字正负</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>IntegerNumber <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        IntegerNumber<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">-</span> IntegerNumber<span class="token punctuation">;</span>        <span class="token function">LCD1602_ShowChar</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">LCD1602_ShowChar</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// 限制 显示字符数</span>    <span class="token comment" spellcheck="true">//----------------------------------------------------------------------------------------------</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Count <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">100</span>  <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">10</span>   <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    Number_Integer_Array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IntegerNumber <span class="token operator">/</span> <span class="token number">1</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token function">LCD1602_ShowArray</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>Y<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>Number_Integer_Array<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名       : Display_Unsignedint（）* 函数功能         : 显示无符号整形* 输    入       : 无* 输    出       : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">LCD1602_ShowNumber_UnsignedInt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumbArray<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        NumbArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>     NumbArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumbArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumbArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumbArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>     NumbArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">LCD1602_ShowString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumbArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名       : Display_Float（）* 函数功能         : 显示浮点数* 输    入       : 无* 输    出       : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">LCD1602_Display_Float</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>                    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span>                    <span class="token keyword">float</span> Number<span class="token punctuation">,</span>                    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span>                    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  Number_Integer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  Number_Decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">float</span> Number_Temp<span class="token punctuation">;</span>    Number_Temp <span class="token operator">=</span> Number<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number_Temp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number_Temp<span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number_Temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Number_Integer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Number_Temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            Number_Decimal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Number_Temp <span class="token operator">-</span> Number_Integer <span class="token operator">+</span> <span class="token number">0.0005</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         NumberArray<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span><span class="token number">10000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    NumberArray<span class="token punctuation">[</span><span class="token number">7</span><span class="token operator">+</span>Count2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token function">LCD1602_ShowString</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//LCD初始化</span><span class="token keyword">void</span> <span class="token function">InitLCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//清屏</span>   <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输入方式控制,增量光标不移位</span>   <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x0e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//显示开关控制</span>   <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//功能设定:设置16x2显示，5x7显示,8位数据接口         </span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/******************************************************************************** 函 数 名       : main（）* 函数功能       :主函数* 输    入       : 无* 输    出       : 无*******************************************************************************/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">InitLCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token function">LCD1602_ShowString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"hello mcu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">LCD1602_Display_Float</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">123.4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="LCD12864模块"><a href="#LCD12864模块" class="headerlink" title="LCD12864模块"></a>LCD12864模块</h2><p>12864LCD属于点阵图形液晶显示模块，不但能显示字符，还能显示汉字和图形，分带汉字库和不带那字库两种，价格也有差别。带汉字库的12864LCD使用起来非常方便，不需要编写复杂的汉字显示程序，只要按时序写入两个字节的汉字机内码，汉字就能显示出来了，驱动程序简单许多。本文例程就是基于带汉字库的12864液晶显示模块。DM12864M 汉字图形点阵液晶显示模块，可显示汉字及图形，内置 8192 个中文汉字（16X16 点阵）、128个字符 64X256 点阵显示 RAM。</p><h3 id="12864有两种工作模式。"><a href="#12864有两种工作模式。" class="headerlink" title="12864有两种工作模式。"></a>12864有两种工作模式。</h3><h4 id="（1）文本工作模式"><a href="#（1）文本工作模式" class="headerlink" title="（1）文本工作模式"></a>（1）文本工作模式</h4><p>整屏平均分成32个显示区（每个显示区是16X16点阵），每个显示区可显示一个中文，每个显示区可显示两个英文ASCII字符。下图为汉字显示坐标即地址。<br><img src="/medias/images/lcd5.jpg" alt="avatar"></p><h4 id="（2）绘图工作模式"><a href="#（2）绘图工作模式" class="headerlink" title="（2）绘图工作模式"></a>（2）绘图工作模式</h4><p>整屏按水平方向每16个点分为一组，所以整屏共有8192/16＝512组，每次可控制任意一组的16个点。图形显示坐标：水平方向 X—以字节单位，垂直方向 Y—以位为单位。<br><img src="/medias/images/lcd6.jpg" alt="avatar"></p><h3 id="12864的硬件接口"><a href="#12864的硬件接口" class="headerlink" title="12864的硬件接口"></a>12864的硬件接口</h3><p><img src="/medias/images/lcd7.jpg" alt="avatar"><br><img src="/medias/images/lcd8.jpg" alt="avatar"></p><h3 id="软件代码-1"><a href="#软件代码-1" class="headerlink" title="软件代码"></a>软件代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"reg51.h"</span></span><span class="token comment" spellcheck="true">/*********************************************************************************************************************************  实验名称：普中单片机12864的使用  实验效果：倒计时100显示*****************************************************************************************************************************/</span><span class="token comment" spellcheck="true">/**********************************************************************************************************                    端口定义************************************************************************************************************/</span>sbit RS<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//命令/数据选择  </span>sbit RW<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//读写口 </span>sbit  E<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">7</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//锁存控制  </span>sbit RES <span class="token operator">=</span> P2<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span> sbit PSB <span class="token operator">=</span> P2<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**********************************************************************************************************              函数声明        ************************************************************************************************************/</span><span class="token keyword">void</span> <span class="token function">InitLCD</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">Display_Char</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span>  Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Display_String</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span>  <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Display_UnsignedInt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>                          <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span>                          <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span>                          <span class="token keyword">unsigned</span>  <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">Display_SignedInt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>                       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span>                       <span class="token keyword">signed</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span>                       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span>    <span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Display_Float</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>                    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span>                    <span class="token keyword">float</span> Number<span class="token punctuation">,</span>                    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span>                    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DELAY_nUS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**********************************************************************    函数主体部分***************************************************************************/</span><span class="token keyword">void</span> <span class="token function">DELAY_nUS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>Time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>time<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">939</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//int型数据为16位,所以最大值为65535            </span> <span class="token punctuation">{</span>                                           <span class="token comment" spellcheck="true">//0.1ms</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//定义变量i,j,用于循环语句 </span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>time<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//for循环,循环50*time次</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//for循环,循环50次</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//查忙</span><span class="token keyword">void</span> <span class="token function">checkbusy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>   RS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      RW<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                     E<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>P0<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmdcode<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">checkbusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              RS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      RW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      E<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                     P0<span class="token operator">=</span>cmdcode<span class="token punctuation">;</span>               <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  E<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">wdata</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> dispdata<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">checkbusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              RS<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                     RW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                     E<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                      P0<span class="token operator">=</span>dispdata<span class="token punctuation">;</span>              <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 E<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">InitLCD</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>   PSB<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>               RES<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RES<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x0c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">Display_Char</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span>  Char<span class="token punctuation">)</span>   <span class="token punctuation">{</span>                                      <span class="token keyword">switch</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>                                   <span class="token punctuation">{</span>       <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x98</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">wdata</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Display_String</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span>  <span class="token operator">*</span>s<span class="token punctuation">)</span>   <span class="token punctuation">{</span>                                     <span class="token keyword">switch</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>                                          <span class="token punctuation">{</span>       <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x90</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token function">wcode</span><span class="token punctuation">(</span><span class="token number">0x98</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>        <span class="token function">wdata</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           s<span class="token operator">++</span><span class="token punctuation">;</span>                              <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Display_UnsignedInt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumbArray<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        NumbArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>     NumbArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumbArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumbArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumbArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>     NumbArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">Display_String</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>NumbArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Display_SignedInt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>                       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span>                       <span class="token keyword">signed</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span>                       <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">signed</span> <span class="token keyword">int</span> Number_Temp<span class="token punctuation">;</span>    Number_Temp <span class="token operator">=</span> Number<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number_Temp <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number_Temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    NumberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">;</span>     NumberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>     NumberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>Number_Temp<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Display_String</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Display_Float</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span>                    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span>                    <span class="token keyword">float</span> Number<span class="token punctuation">,</span>                    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count1<span class="token punctuation">,</span>                    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> Count2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> NumberArray<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  Number_Integer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  Number_Decimal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">float</span> Number_Temp<span class="token punctuation">;</span>    Number_Temp <span class="token operator">=</span> Number<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number_Temp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Number_Temp<span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> Number_Temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Number_Integer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Number_Temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            Number_Decimal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Number_Temp <span class="token operator">-</span> Number_Integer <span class="token operator">+</span> <span class="token number">0.0005</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         NumberArray<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span><span class="token number">10000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Integer<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>  <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>   <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> Number_Decimal<span class="token operator">/</span>    <span class="token number">1</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    NumberArray<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    NumberArray<span class="token punctuation">[</span><span class="token number">7</span><span class="token operator">+</span>Count2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token function">Display_String</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberArray<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">-</span>Count1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token punctuation">;</span>     <span class="token function">InitLCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token function">Display_SignedInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">DELAY_nMS</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>知乎链接 <a href="https://zhuanlan.zhihu.com/p/102563354" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/102563354</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> LCD </category>
          
          <category> 电子模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> LCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium Designer 规则检查(DRC)英汉对照表</title>
      <link href="/2020/05/08/altium-designer-gui-ze-jian-cha-drc-ying-han-dui-zhao-biao/"/>
      <url>/2020/05/08/altium-designer-gui-ze-jian-cha-drc-ying-han-dui-zhao-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="Altium-Designer-规则检查-DRC-英汉对照表"><a href="#Altium-Designer-规则检查-DRC-英汉对照表" class="headerlink" title="Altium Designer 规则检查(DRC)英汉对照表"></a>Altium Designer 规则检查(DRC)英汉对照表</h1><a id="more"></a><h2 id="Error-Reporting-错误报告"><a href="#Error-Reporting-错误报告" class="headerlink" title="Error Reporting 错误报告"></a>Error Reporting 错误报告</h2><h3 id="A：Violations-Associated-with-Buses-有关总线电气错误的各类型（共12项）"><a href="#A：Violations-Associated-with-Buses-有关总线电气错误的各类型（共12项）" class="headerlink" title="A：Violations Associated with Buses 有关总线电气错误的各类型（共12项）"></a>A：Violations Associated with Buses 有关总线电气错误的各类型（共12项）</h3><pre><code>1、 bus indices out of range 总线分支索引超出范围 2、 Bus range syntax errors 总线范围的语法错误 3、 Illegal bus range values 非法的总线范围值 4、 Illegal bus definitions 定义的总线非法 5、 Mismatched bus label ordering 总线分支网络标号错误排序 6、 Mismatched bus/wire object on wire/bus 总线/导线错误的连接导线/总线 7、 Mismatched bus widths 总线宽度错误 8、 Mismatched bus section index ordering 总线范围值表达错误 9、 Mismatched electrical types on bus 总线上错误的电气类型 10、 Mismatched generics on bus (first index) 总线范围值的首位错误 11、 Mismatched generics on bus (second index) 总线范围值末位错误 12、 Mixed generics and numeric bus labeling 总线命名规则错误 </code></pre><h3 id="B：Violations-Associated-Components-有关元件符号电气错误（共20项）"><a href="#B：Violations-Associated-Components-有关元件符号电气错误（共20项）" class="headerlink" title="B：Violations Associated Components 有关元件符号电气错误（共20项）"></a>B：Violations Associated Components 有关元件符号电气错误（共20项）</h3><pre><code>1、Component Implementations with missing pins in sequence 元件管脚的序号出现序号丢失 2、 Component contaning duplicate sub-parts 元件中出现了重复的子部分 3、 Component with duplicate Implementations 元件被重复使用 4、 Component with duplicate pins 元件中有重复的管脚 5、 Duplicate component models 一个元件被定义多种重复模型 6、 Duplicate part designators 元件中出现标示号重复的部分 7、 Errors in component model parameters 元件模型中出现错误的的参数 8、 Extra pin found in component display mode 多余的管脚在元件上显示 9、 Mismatched hidden pin component 元件隐藏管脚的连接不匹配 10、 Mismatched pin visibility 管脚的可视性不匹配 11、 Missing component model parameters 元件模型参数丢失 12、 Missing component models 元件模型丢失 13、 Missing component models in model files 元件模型不能在模型文件中找到 14、 Missing pin found in component display mode 不见的管脚在元件上显示 15、 Models found in different model locations 元件模型在未知的路径中找到 16、 Sheet symbol with duplicate entries 方框电路图中出现重复的端口 17、 Un-designated parts requiring annotation 未标记的部分需要自动标号 18、 Unused sub-part in component 元件中某个部分未使用 19、 Component Implementations with duplicate pins usage 元件管脚在原理图中重复被使用 20、 Component Implementations with invalid pin mappings 元件管脚在应用中和PCB封装中的焊盘不符</code></pre><h3 id="C：violations-associated-with-document-相关的文档电气错误（共10项）"><a href="#C：violations-associated-with-document-相关的文档电气错误（共10项）" class="headerlink" title="C：violations associated with document 相关的文档电气错误（共10项）"></a>C：violations associated with document 相关的文档电气错误（共10项）</h3><pre><code>1、 conflicting constraints 约束不一致的 2、 duplicate sheet symbol name 层次原理图中使用了重复的方框电路图 3、 duplicate sheet numbers 重复的原理图图纸序号 4、 missing child sheet for sheet symbol 方框图没有对应的子电路图 5、 missing configuration target 缺少配置对象 6、 missing sub-project sheet for component 元件丢失子项目 7、 multiple configuration targets 无效的配置对象 8、 multiple top-level document 无效的顶层文件 9、 port not linked to parent sheet symbol 子原理图中的端口没有对应到总原理图上的端口 10、sheet enter not linked to child sheet 方框电路图上的端口在对应子原理图中没有对应端口 </code></pre><hr><h3 id="D：violations-associated-with-nets-有关网络电气错误（共19项）"><a href="#D：violations-associated-with-nets-有关网络电气错误（共19项）" class="headerlink" title="D：violations associated with nets 有关网络电气错误（共19项）"></a>D：violations associated with nets 有关网络电气错误（共19项）</h3><pre><code>1、 adding hidden net to sheet 原理图中出现隐藏网络 2、 adding items from hidden net to net 在隐藏网络中添加对象到已有网络中 3、 auto-assigned ports to device pins 自动分配端口到设备引脚 4、 duplicate nets 原理图中出现重名的网络 5、 floating net labels 原理图中有悬空的网络标签 6、 global power-objects scope changes 全局的电源符号错误 7、 net parameters with no name 网络属性中缺少名称 8、 net parameters with no value 网络属性中缺少赋值 9、 nets containing floating input pins 网络包括悬空的输入引脚 10、nets with multiple names 同一个网络被附加多个网络名 11、nets with no driving source 网络中没有驱动 12、nets with only one pin 网络只连接一个引脚 13、nets with possible connection problems 网络可能有连接上的错误 14、signals with multiple drivers 重复的驱动信号 15、sheets containing duplicate ports 原理图中包含重复的端口 16、signals with load 信号无负载 17、signals with drivers 信号无驱动 18、unconnected objects in net 网络中的元件出现未连接对象 19、unconnected wires 原理图中有没连接的导线 </code></pre><hr><h3 id="E：Violations-associated-with-others有关原理图的各种类型的错误-3项"><a href="#E：Violations-associated-with-others有关原理图的各种类型的错误-3项" class="headerlink" title="E：Violations associated with others有关原理图的各种类型的错误(3项)"></a>E：Violations associated with others有关原理图的各种类型的错误(3项)</h3><pre><code>1、 No Error 无错误 2、 Object not completely within sheet boundaries 原理图中的对象超出了图纸边框 3、 Off-grid object原理图中的对象不在格点位置 </code></pre><hr><h3 id="F：Violations-associated-with-parameters-有关参数错误的各种类型"><a href="#F：Violations-associated-with-parameters-有关参数错误的各种类型" class="headerlink" title="F：Violations associated with parameters 有关参数错误的各种类型"></a>F：Violations associated with parameters 有关参数错误的各种类型</h3><pre><code>1、 same parameter containing different types 相同的参数出现在不同的模型中 2、 same parameter containing different values 相同的参数出现了不同的取</code></pre>]]></content>
      
      
      <categories>
          
          <category> AD </category>
          
          <category> PCB </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD </tag>
            
            <tag> PCB </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium designer -- 基本规则设置-- 覆铜设计Polygon</title>
      <link href="/2020/05/08/altium-designer-ji-ben-gui-ze-she-zhi-fu-tong-she-ji-polygon/"/>
      <url>/2020/05/08/altium-designer-ji-ben-gui-ze-she-zhi-fu-tong-she-ji-polygon/</url>
      
        <content type="html"><![CDATA[<h1 id="Altium-designer-–-基本规则设置-5"><a href="#Altium-designer-–-基本规则设置-5" class="headerlink" title="Altium designer – 基本规则设置 (5)"></a>Altium designer – 基本规则设置 (5)</h1><a id="more"></a><h2 id="覆铜设计Polygon"><a href="#覆铜设计Polygon" class="headerlink" title="覆铜设计Polygon"></a>覆铜设计Polygon</h2><h3 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h3><ol><li>软件 Altium designer 10</li><li>PCB设计<h3 id="规则设置"><a href="#规则设置" class="headerlink" title="规则设置"></a>规则设置</h3>一、覆铜连接 PolygonConnect Style</li></ol><hr><p>AD10 与 AD16规则有所不同<br>AD10情况：<br>规则名称：PolygonConnect_IsVia_IsPolygon<br>语句1：IsVia<br>语句2：IsPolygon<br>连接类型：Direct Connect<br><img src="https://img-blog.csdnimg.cn/20200331125724921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>AD16情况：<br>规则名称：PolygonConnect_IsVia_IsPolygon<br>语句1：InNet(‘GND’) And IsVia<br>语句2：IsPolygon<br>连接类型：Direct Connect<br><img src="https://img-blog.csdnimg.cn/20200331125736654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>AD10情况：<br>规则名称：PolygonConnect<br>连接类型：Relief Connect<br>导线数：4<br>导线宽度：10mil<br>设置导线宽度为15mil -&gt; 10mil，原因15mil会导致GND网络标签焊盘焊接困难。<br><img src="https://img-blog.csdnimg.cn/20200331125852866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>AD16情况：<br>规则名称：PolygonConnect<br>连接类型：Relief Connect<br>导线数：4<br>导线宽度：10mil<br>导线间距：12mil<br><img src="https://img-blog.csdnimg.cn/20200331125903719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>覆铜情况说明：<br>覆铜模式：Hatched(Tracks/Arcs)<br>轨迹宽度：10mil<br>栅格宽度：0mil<br>孵化模式：90度<br>属性 - 层：Top Layer或 Bottom Layer<br>属性 - 最小整洁长度：3mil<br>网络选项 - 链接到网络：GND<br>                       Pour Over All Same Net Objects<br>                       选中 死铜移除<br>                       <img src="https://img-blog.csdnimg.cn/20200331125923437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> AD </category>
          
          <category> PCB </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD </tag>
            
            <tag> PCB </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机 --串口通信</title>
      <link href="/2020/05/08/51-dan-pian-ji-chuan-kou-tong-xin/"/>
      <url>/2020/05/08/51-dan-pian-ji-chuan-kou-tong-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机-–串口通信"><a href="#51单片机-–串口通信" class="headerlink" title="51单片机 –串口通信"></a>51单片机 –串口通信</h1><a id="more"></a><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><p>一般情况下，设备之间的通信方式可以分成并行通信和串行通信两种。它们的区别是：<br><img src="https://img-blog.csdnimg.cn/20200330193353400.jpg#pic_center" alt="在这里插入图片描述"></p><h2 id="串行通信方式"><a href="#串行通信方式" class="headerlink" title="串行通信方式"></a>串行通信方式</h2><h3 id="串行通信的分类"><a href="#串行通信的分类" class="headerlink" title="串行通信的分类"></a>串行通信的分类</h3><h4 id="按照数据传送方向分类："><a href="#按照数据传送方向分类：" class="headerlink" title="按照数据传送方向分类："></a>按照数据传送方向分类：</h4><p>单工：数据传输只支持数据在一个方向上传输；<br>半双工：允许数据在两个方向上传输。但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信；它不需要独立的接收端和发送端，两者可以合并一起使用一个端口。<br>全双工：允许数据同时在两个方向上传输。因此，全双工通信是两个单工通信方式的结合，需要独立的接收端和发送端。<br><img src="https://img-blog.csdnimg.cn/2020033019375459.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="按照通信方式分类："><a href="#按照通信方式分类：" class="headerlink" title="按照通信方式分类："></a>按照通信方式分类：</h4><p>同步通信：带时钟同步信号传输。比如：SPI，IIC通信接口。<br>异步通信：不带时钟同步信号。比如：UART(通用异步收发器)，单总线。<br>在同步通讯中，收发设备上方会使用一根信号线传输信号，在时钟信号的驱动下双方进行协调，同步数据。例如，通讯中通常双方会统一规定在时钟信号的上升沿或者下降沿对数据线进行采样。</p><p>在异步通讯中不使用时钟信号进行数据同步，它们直接在数据信号中穿插一些用于同步的信号位，或者将主题数据进行打包，以数据帧的格式传输数据。通讯中还需要双方规约好数据的传输速率（也就是波特率）等，以便更好地同步。常用的波特率有4800bps、9600bps、115200bps等。</p><p>在同步通讯中，数据信号所传输的内容绝大部分是有效数据，而异步通讯中会则会包含数据帧的各种标识符，所以同步通讯效率高，但是同步通讯双方的时钟允许误差小，稍稍时钟出错就可能导致数据错乱，异步通讯双方的时钟允许误差较大。</p><h3 id="常见的串行通信接口"><a href="#常见的串行通信接口" class="headerlink" title="常见的串行通信接口"></a>常见的串行通信接口</h3><p><img src="https://img-blog.csdnimg.cn/2020033019381586.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="串口通信（Serial-Communications）"><a href="#串口通信（Serial-Communications）" class="headerlink" title="串口通信（Serial Communications）"></a>串口通信（Serial Communications）</h3><p>串口通信（Serial Communications）的概念非常简单，串口按位（bit）发送和接收字节。尽管比按字节（byte）的并行通信慢，但是串口可以在使用一根线发送数据的同时用另一根线接收数据。它很简单并且能够实现远距离通信。比如IEEE488定义并行通行状态时，规定设备线总长不得超过20米，并且任意两个设备间的长度不得超过2米；而对于串口而言，长度可达1200米。典型地，串口用于ASCII码字符的传输。通信使用3根线完成，分别是地线、发送、接收。由于串口通信是异步的，端口能够在一根线上发送数据同时在另一根线上接收数据。其他线用于握手，但不是必须的。串口通信最重要的参数是波特率、数据位、停止位和奇偶校验。对于两个进行通信的端口，这些参数必须匹配。</p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p>这是一个衡量符号传输速率的参数。指的是信号被调制以后在单位时间内的变化，即单位时间内载波参数变化的次数，如每秒钟传送240个字符，而每个字符格式包含10位（1个起始位，1个停止位，8个数据位），这时的波特率为240Bd，比特率为10位*240个/秒=2400bps。一般调制速率大于波特率，比如曼彻斯特编码）。通常电话线的波特率为14400，28800和36600。波特率可以远远大于这些值，但是波特率和距离成反比。高波特率常常用于放置的很近的仪器间的通信，典型的例子就是GPIB设备的通信。 [1] </p><h3 id="数据位"><a href="#数据位" class="headerlink" title="数据位"></a>数据位</h3><p>这是衡量通信中实际数据位的参数。当计算机发送一个信息包，实际的数据往往不会是8位的，标准的值是6、7和8位。如何设置取决于你想传送的信息。比如，标准的ASCII码是0～127（7位）。扩展的ASCII码是0～255（8位）。如果数据使用简单的文本（标准 ASCII码），那么每个数据包使用7位数据。每个包是指一个字节，包括开始/停止位，数据位和奇偶校验位。由于实际数据位取决于通信协议的选取，术语“包”指任何通信的情况。</p><h3 id="停止位"><a href="#停止位" class="headerlink" title="停止位"></a>停止位</h3><p>用于表示单个包的最后一位。典型的值为1，1.5和2位。由于数据是在传输线上定时的，并且每一个设备有其自己的时钟，很可能在通信中两台设备间出现了小小的不同步。因此停止位不仅仅是表示传输的结束，并且提供计算机校正时钟同步的机会。适用于停止位的位数越多，不同时钟同步的容忍程度越大，但是数据传输率同时也越慢。</p><h3 id="奇偶校验位"><a href="#奇偶校验位" class="headerlink" title="奇偶校验位"></a>奇偶校验位</h3><p>在串口通信中一种简单的检错方式。有四种检错方式：偶、奇、高和低。当然没有校验位也是可以的。对于偶和奇校验的情况，串口会设置校验位（数据位后面的一位），用一个值确保传输的数据有偶个或者奇个逻辑高位。例如，如果数据是011，那么对于偶校验，校验位为0，保证逻辑高的位数是偶数个。如果是奇校验，校验位为1，这样就有3个逻辑高位。高位和低位不真正的检查数据，简单置位逻辑高或者逻辑低校验。这样使得接收设备能够知道一个位的状态，有机会判断是否有噪声干扰了通信或者是否传输和接收数据是否不同步。</p><h2 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h2><h4 id="中断方式"><a href="#中断方式" class="headerlink" title="中断方式"></a>中断方式</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;reg52.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> FOSC             12000000UL             </span><span class="token macro property">#<span class="token directive keyword">define</span> BAUD             2400UL    </span><span class="token keyword">void</span>  <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//串口初始化</span><span class="token punctuation">{</span>         TMOD<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0x0F</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定时器1模式控制在高4位</span>         TMOD<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定时器1工作在模式2，自动重装模式</span>         SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//串口工作在模式1</span>         TH1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span>FOSC<span class="token operator">/</span><span class="token punctuation">(</span>BAUD<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算定时器重装值</span>         TL1<span class="token operator">=</span><span class="token number">256</span><span class="token operator">-</span>FOSC<span class="token operator">/</span><span class="token punctuation">(</span>BAUD<span class="token operator">*</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         PCON<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//串口波特率加倍</span>         ES<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//串行中断允许</span>         TR1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动定时器1</span>         REN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许接收 </span>         EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//允许中断</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">InterruptUART</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token comment" spellcheck="true">//中断源是4</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//unsigned char receive_data;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>RI<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         RI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        SBUF <span class="token operator">=</span> SBUF<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//receive_data = SBUF;//接收到的数据</span>        <span class="token comment" spellcheck="true">//if(receive_data == '1')    </span>        <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//   LED1 = 0;</span>    <span class="token comment" spellcheck="true">//     DELAY_nMS(500);</span>    <span class="token comment" spellcheck="true">//     LED1=1;</span>    <span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//   if(receive_data == ' ')    //接受一个字符 </span><span class="token comment" spellcheck="true">//        {</span><span class="token comment" spellcheck="true">//          //执行代码，你想要的控制的东西，例如led,蜂鸣器，等传感器        </span><span class="token comment" spellcheck="true">//        }    </span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//EA=1;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>TI<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        TI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="注：现在只是一个简单的记录（之后更新）"><a href="#注：现在只是一个简单的记录（之后更新）" class="headerlink" title="注：现在只是一个简单的记录（之后更新）"></a>注：现在只是一个简单的记录（之后更新）</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.串口通信基本原理（超基础、详细版） <a href="https://blog.csdn.net/qq_38410730/article/details/79887200" target="_blank" rel="noopener">https://blog.csdn.net/qq_38410730/article/details/79887200</a><br>2. 百度百科串口通信<a href="https://baike.baidu.com/item/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/3775296?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/3775296?fr=aladdin</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
          <category> C </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 51单片机 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium designer -- 基本规则设置--线宽设置RoutingWidth</title>
      <link href="/2020/05/08/altium-designer-ji-ben-gui-ze-she-zhi-xian-kuan-she-zhi-routingwidth/"/>
      <url>/2020/05/08/altium-designer-ji-ben-gui-ze-she-zhi-xian-kuan-she-zhi-routingwidth/</url>
      
        <content type="html"><![CDATA[<h1 id="Altium-designer-–-基本规则设置-4"><a href="#Altium-designer-–-基本规则设置-4" class="headerlink" title="Altium designer – 基本规则设置 (4)"></a>Altium designer – 基本规则设置 (4)</h1><a id="more"></a><h2 id="线宽设置RoutingWidth"><a href="#线宽设置RoutingWidth" class="headerlink" title="线宽设置RoutingWidth"></a>线宽设置RoutingWidth</h2><h3 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h3><ol><li>软件 Altium designer 10</li><li>PCB设计<h3 id="规则设置"><a href="#规则设置" class="headerlink" title="规则设置"></a>规则设置</h3>线宽设置</li></ol><hr><p>最小宽度：10mil<br>首选宽度：10mil<br>最大宽度：1000mil</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="https://img-blog.csdnimg.cn/20200331124938533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> AD </category>
          
          <category> PCB </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD </tag>
            
            <tag> PCB </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium designer -- 基本规则设置--边框设置KeepOut</title>
      <link href="/2020/05/08/altium-designer-ji-ben-gui-ze-she-zhi-bian-kuang-she-zhi-keepout/"/>
      <url>/2020/05/08/altium-designer-ji-ben-gui-ze-she-zhi-bian-kuang-she-zhi-keepout/</url>
      
        <content type="html"><![CDATA[<h1 id="Altium-designer-–-基本规则设置（2）"><a href="#Altium-designer-–-基本规则设置（2）" class="headerlink" title="Altium designer – 基本规则设置（2）"></a>Altium designer – 基本规则设置（2）</h1><a id="more"></a><h2 id="边框设置KeepOut"><a href="#边框设置KeepOut" class="headerlink" title="边框设置KeepOut"></a>边框设置KeepOut</h2><h3 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h3><ol><li>软件 Altium designer 10</li><li>PCB设计</li></ol><h3 id="边框设计"><a href="#边框设计" class="headerlink" title="边框设计"></a>边框设计</h3><hr><p>线宽：0.2mm （7.874mil）</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><img src="https://img-blog.csdnimg.cn/20200331124047506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331124056184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331124104636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> AD </category>
          
          <category> PCB </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD </tag>
            
            <tag> PCB </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium designer -- 基本规则设置--过孔设置Hole</title>
      <link href="/2020/05/08/altium-designer-ji-ben-gui-ze-she-zhi-guo-kong-she-zhi-hole/"/>
      <url>/2020/05/08/altium-designer-ji-ben-gui-ze-she-zhi-guo-kong-she-zhi-hole/</url>
      
        <content type="html"><![CDATA[<h1 id="Altium-designer-–-基本规则设置-3"><a href="#Altium-designer-–-基本规则设置-3" class="headerlink" title="Altium designer – 基本规则设置 (3)"></a>Altium designer – 基本规则设置 (3)</h1><a id="more"></a><h2 id="过孔设置Hole"><a href="#过孔设置Hole" class="headerlink" title="过孔设置Hole"></a>过孔设置Hole</h2><h3 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h3><ol><li>软件 Altium designer 10</li><li>PCB设计<h3 id="规则设置"><a href="#规则设置" class="headerlink" title="规则设置"></a>规则设置</h3></li></ol><hr><p>GND过孔  - 15mil / 20mil<br>信号线   - 20mil / 30mil<br>电源线   - 30mil / 40mil</p><p>过孔设计（GND覆铜过孔）</p><hr><p>孔直径：12mil<br>外直径：25mil<br>强制完成顶部隆起 Solder Mask Tenting - Top<br>强制完成底部隆起 Solder Mask Tenting - Bottom</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="https://img-blog.csdnimg.cn/20200331124517786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> AD </category>
          
          <category> PCB </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD </tag>
            
            <tag> PCB </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Altium designer -- 基本规则设置--间距设置Clearance</title>
      <link href="/2020/05/08/altium-designer-ji-ben-gui-ze-she-zhi-jian-ju-she-zhi-clearance/"/>
      <url>/2020/05/08/altium-designer-ji-ben-gui-ze-she-zhi-jian-ju-she-zhi-clearance/</url>
      
        <content type="html"><![CDATA[<h1 id="Altium-designer-–-基本规则设置-（1）"><a href="#Altium-designer-–-基本规则设置-（1）" class="headerlink" title="Altium designer – 基本规则设置 （1）"></a>Altium designer – 基本规则设置 （1）</h1><a id="more"></a><h2 id="间距设置Clearance"><a href="#间距设置Clearance" class="headerlink" title="间距设置Clearance"></a>间距设置Clearance</h2><h2 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h2><ol><li>软件 Altium designer 10</li><li>PCB设计<h3 id="间距设置"><a href="#间距设置" class="headerlink" title="间距设置"></a>间距设置</h3></li></ol><hr><p>规则名称1：Clearance<br>一般间距 - 最小间距：6mil/8mil （优先考虑8mil）<br>规则1：All<br>规则2：All</p><hr><p>规则名称2：Clearance_IsGND<br>GND网络间距 - 最小间距：15mil/12mil（优先考虑12mil）<br>规则1：InNet(‘GND’)<br>规则2：All</p><hr><h3 id="AD10界面"><a href="#AD10界面" class="headerlink" title="AD10界面"></a>AD10界面</h3><p><img src="https://img-blog.csdnimg.cn/20200331123417541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331123426686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331123435772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331123507522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> AD </category>
          
          <category> PCB </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD </tag>
            
            <tag> PCB </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造程序逻辑</title>
      <link href="/2020/05/08/gou-zao-cheng-xu-luo-ji/"/>
      <url>/2020/05/08/gou-zao-cheng-xu-luo-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="构造程序逻辑"><a href="#构造程序逻辑" class="headerlink" title="构造程序逻辑"></a>构造程序逻辑</h2><a id="more"></a><h3 id="经典的例子"><a href="#经典的例子" class="headerlink" title="经典的例子"></a>经典的例子</h3><ol><li><p>寻找<strong>水仙花数</strong>。</p><blockquote><p><strong>说明</strong>：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3=153$。</p></blockquote><pre class=" language-Python"><code class="language-Python">"""找出所有水仙花数Version: 0.1Author: 骆昊"""for num in range(100, 1000):    low = num % 10    mid = num // 10 % 10    high = num // 100    if num == low ** 3 + mid ** 3 + high ** 3:        print(num)</code></pre><p>在上面的代码中，我们通过整除和求模运算分别找出了一个三位数的个位、十位和百位，这种小技巧在实际开发中还是常用的。用类似的方法，我们还可以实现将一个正整数反转，例如：将12345变成54321，代码如下所示。</p><pre class=" language-Python"><code class="language-Python">"""正整数的反转Version: 0.1Author: 骆昊"""num = int(input('num = '))reversed_num = 0while num > 0:    reversed_num = reversed_num * 10 + num % 10    num //= 10print(reversed_num)</code></pre></li><li><p><strong>百钱百鸡</strong>问题。</p><blockquote><p><strong>说明</strong>：百钱百鸡是我国古代数学家<a href="https://baike.baidu.com/item/%E5%BC%A0%E4%B8%98%E5%BB%BA/10246238" target="_blank" rel="noopener">张丘建</a>在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？</p></blockquote><pre class=" language-Python"><code class="language-Python">"""《百钱百鸡》问题Version: 0.1Author: 骆昊"""for x in range(0, 20):    for y in range(0, 33):        z = 100 - x - y        if 5 * x + 3 * y + z / 3 == 100:            print('公鸡: %d只, 母鸡: %d只, 小鸡: %d只' % (x, y, z))</code></pre><p>上面使用的方法叫做<strong>穷举法</strong>，也称为<strong>暴力搜索法</strong>，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，而且问题的解如果存在，这种方法一定能够找到它。</p></li><li><p><strong>CRAPS赌博游戏</strong>。</p><blockquote><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简单的规则是：玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数，玩家继续要骰子，直到分出胜负。</p></blockquote><pre class=" language-Python"><code class="language-Python">"""Craps赌博游戏我们设定玩家开始游戏时有1000元的赌注游戏结束的条件是玩家输光所有的赌注Version: 0.1Author: 骆昊"""from random import randintmoney = 1000while money > 0:    print('你的总资产为:', money)    needs_go_on = False    while True:        debt = int(input('请下注: '))        if 0 < debt <= money:            break    first = randint(1, 6) + randint(1, 6)    print('玩家摇出了%d点' % first)    if first == 7 or first == 11:        print('玩家胜!')        money += debt    elif first == 2 or first == 3 or first == 12:        print('庄家胜!')        money -= debt    else:        needs_go_on = True    while needs_go_on:        needs_go_on = False        current = randint(1, 6) + randint(1, 6)        print('玩家摇出了%d点' % current)        if current == 7:            print('庄家胜')            money -= debt        elif current == first:            print('玩家胜')            money += debt        else:            needs_go_on = Trueprint('你破产了, 游戏结束!')</code></pre></li></ol><p>###有用的练习 </p><ol><li><p>生成<strong>斐波那契数列</strong>的前20个数。</p><blockquote><p><strong>说明</strong>：斐波那契数列（Fibonacci sequence），又称黄金分割数列，是意大利数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）在《计算之书》中提出一个在理想假设条件下兔子成长率的问题而引入的数列，所以这个数列也被戏称为&quot;兔子数列&quot;。斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，形如：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …。斐波那契数列在现代物理、准晶体结构、化学等领域都有直接的应用。</p></blockquote></li><li><p>找出10000以内的<strong>完美数</strong>。</p><blockquote><p><strong>说明</strong>：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。例如：6（$6=1+2+3$）和28（$28=1+2+4+7+14$）就是完美数。完美数有很多神奇的特性，有兴趣的可以自行了解。</p></blockquote></li><li><p>输出<strong>100以内所有的素数</strong>。</p><blockquote><p><strong>说明</strong>：素数指的是只能被1和自身整除的正整数（不包括1）。</p></blockquote></li></ol><p>上面练习的参考答案在本章对应的代码目录中，如果需要帮助请读者自行查看参考答案。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python小白逆袭大神 百度AI Studio 学习</title>
      <link href="/2020/05/08/python-xiao-bai-ni-xi-da-shen-bai-du-ai-studio-xue-xi/"/>
      <url>/2020/05/08/python-xiao-bai-ni-xi-da-shen-bai-du-ai-studio-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="百度AI-Studio【飞桨】Python小白逆袭大神课程-学习心得"><a href="#百度AI-Studio【飞桨】Python小白逆袭大神课程-学习心得" class="headerlink" title="百度AI-Studio【飞桨】Python小白逆袭大神课程 学习心得"></a>百度AI-Studio【飞桨】Python小白逆袭大神课程 学习心得</h1><a id="more"></a><h2 id="百度AI-Studio学习平台"><a href="#百度AI-Studio学习平台" class="headerlink" title="百度AI-Studio学习平台"></a>百度AI-Studio学习平台</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="开源深度学习平台-飞桨"><a href="#开源深度学习平台-飞桨" class="headerlink" title="开源深度学习平台 飞桨"></a>开源深度学习平台 飞桨</h4><p><img src="https://img-blog.csdnimg.cn/20200428093905856.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="百度AI开放平台"><a href="#百度AI开放平台" class="headerlink" title="百度AI开放平台"></a>百度AI开放平台</h4><p><img src="https://img-blog.csdnimg.cn/20200428094046302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="Python小白逆袭大神课程"><a href="#Python小白逆袭大神课程" class="headerlink" title="Python小白逆袭大神课程"></a>Python小白逆袭大神课程</h4><pre class=" language-bash"><code class="language-bash">1. 课程安排明确，视频，文档资料更新快速2. 课程安排相应的作业，实时同步你所学习的3. 评论区，讨论激励4. 最重要的是奖品丰富，白嫖算力<span class="token punctuation">(</span>这是最简单的奖品<span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200428094120554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428094120518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428094120488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428094120471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="主要学习内容："><a href="#主要学习内容：" class="headerlink" title="主要学习内容："></a>主要学习内容：</h2><h4 id="Day1：Python基础练习-百度智能云平台体验"><a href="#Day1：Python基础练习-百度智能云平台体验" class="headerlink" title="Day1：Python基础练习(百度智能云平台体验)"></a>Day1：Python基础练习(百度智能云平台体验)</h4><h5 id="作业二：查找特定名称文件"><a href="#作业二：查找特定名称文件" class="headerlink" title="作业二：查找特定名称文件"></a>作业二：查找特定名称文件</h5><pre class=" language-bash"><code class="language-bash">遍历”Day1-homework”目录下文件；找到文件名包含“2020”的文件；将文件名保存到数组result中；按照序号、文件名分行打印输出。</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#导入OS模块</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true">#待搜索的目录路径</span>path <span class="token operator">=</span> <span class="token string">"Day1-homework"</span><span class="token comment" spellcheck="true">#待搜索的名称</span>filename <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token comment" spellcheck="true">#定义保存结果的数组</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">findfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> name <span class="token keyword">in</span> files<span class="token punctuation">:</span>            <span class="token keyword">if</span> filename <span class="token keyword">in</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    list <span class="token operator">=</span> sorted<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> res <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>        l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    findfiles<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/202004280949069.png#pic_center" alt="在这里插入图片描述"></p><h5 id="百度智能云平台体验"><a href="#百度智能云平台体验" class="headerlink" title="百度智能云平台体验"></a>百度智能云平台体验</h5><h5 id="Python-百度智能云文字识别-实现手写文字识别https-blog-csdn-net-weixin-43599390-article-details-105636437"><a href="#Python-百度智能云文字识别-实现手写文字识别https-blog-csdn-net-weixin-43599390-article-details-105636437" class="headerlink" title="Python 百度智能云文字识别 实现手写文字识别https://blog.csdn.net/weixin_43599390/article/details/105636437"></a>Python 百度智能云文字识别 实现手写文字识别<a href="https://blog.csdn.net/weixin_43599390/article/details/105636437" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390/article/details/105636437</a></h5><p><img src="https://img-blog.csdnimg.cn/20200428095157453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428095157451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Day2：爬取《青春有你2》小姐姐图片信息"><a href="#Day2：爬取《青春有你2》小姐姐图片信息" class="headerlink" title="Day2：爬取《青春有你2》小姐姐图片信息"></a>Day2：爬取《青春有你2》小姐姐图片信息</h4><h5 id="Python小白逆袭大神-爬取青春有你2-小姐姐信息和图片https-blog-csdn-net-weixin-43599390-article-details-105719255"><a href="#Python小白逆袭大神-爬取青春有你2-小姐姐信息和图片https-blog-csdn-net-weixin-43599390-article-details-105719255" class="headerlink" title="Python小白逆袭大神 爬取青春有你2 小姐姐信息和图片https://blog.csdn.net/weixin_43599390/article/details/105719255"></a>Python小白逆袭大神 爬取青春有你2 小姐姐信息和图片<a href="https://blog.csdn.net/weixin_43599390/article/details/105719255" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390/article/details/105719255</a></h5><p><img src="https://img-blog.csdnimg.cn/20200428095551511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="下面这个是课程交流群里面一个大佬的博客记录过程，十分有意思"><a href="#下面这个是课程交流群里面一个大佬的博客记录过程，十分有意思" class="headerlink" title="下面这个是课程交流群里面一个大佬的博客记录过程，十分有意思"></a>下面这个是课程交流群里面一个大佬的博客记录过程，十分有意思</h4><h5 id="被遗忘的8张图片（day2爬虫的王姝慧的问题）https-blog-csdn-net-yinyiyu-article-details-105722144"><a href="#被遗忘的8张图片（day2爬虫的王姝慧的问题）https-blog-csdn-net-yinyiyu-article-details-105722144" class="headerlink" title="被遗忘的8张图片（day2爬虫的王姝慧的问题）https://blog.csdn.net/yinyiyu/article/details/105722144"></a>被遗忘的8张图片（day2爬虫的王姝慧的问题）<a href="https://blog.csdn.net/yinyiyu/article/details/105722144" target="_blank" rel="noopener">https://blog.csdn.net/yinyiyu/article/details/105722144</a></h5><p><img src="https://img-blog.csdnimg.cn/20200428100324189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="Day3-《青春有你2》选手数据分析可视化"><a href="#Day3-《青春有你2》选手数据分析可视化" class="headerlink" title="Day3-《青春有你2》选手数据分析可视化"></a>Day3-《青春有你2》选手数据分析可视化</h4><p><img src="https://img-blog.csdnimg.cn/20200428095635495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> json<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>font_manager <span class="token keyword">as</span> font_manager<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data/data31557/20200422.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>         json_array <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>labels <span class="token operator">=</span> <span class="token string">'40~45kg'</span><span class="token punctuation">,</span><span class="token string">'45~50kg'</span><span class="token punctuation">,</span><span class="token string">'50~55kg'</span><span class="token punctuation">,</span><span class="token string">'55~60kg'</span>weight_size<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#4个分类</span>explode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#分离程度</span><span class="token keyword">def</span> <span class="token function">weght_sort</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>    weight <span class="token operator">=</span> float<span class="token punctuation">(</span>weight<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'kg'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> weight<span class="token operator">&lt;</span><span class="token number">45</span><span class="token punctuation">:</span>        weight_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">elif</span> <span class="token number">45</span><span class="token operator">&lt;=</span>weight<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">:</span>        weight_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">elif</span> <span class="token number">50</span><span class="token operator">&lt;=</span>weight<span class="token operator">&lt;=</span><span class="token number">55</span><span class="token punctuation">:</span>        weight_size<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">elif</span> weight<span class="token operator">></span><span class="token number">55</span><span class="token punctuation">:</span>        weight_size<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> star <span class="token keyword">in</span> json_array<span class="token punctuation">:</span>    weight <span class="token operator">=</span> star<span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span>    weght_sort<span class="token punctuation">(</span>weight<span class="token punctuation">)</span>    weights<span class="token punctuation">.</span>append<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置显示中文</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 指定默认字体</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#长宽</span>patches<span class="token punctuation">,</span>l_text<span class="token punctuation">,</span>p_text <span class="token operator">=</span> plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>weight_size<span class="token punctuation">,</span>explode<span class="token operator">=</span>explode<span class="token punctuation">,</span>labels<span class="token operator">=</span>labels<span class="token punctuation">,</span>                                labeldistance <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">,</span>autopct <span class="token operator">=</span> <span class="token string">'%3.1f%%'</span><span class="token punctuation">,</span>shadow <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                                startangle <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">,</span>pctdistance <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#labeldistance，文本的位置离远点有多远，1.1指1.1倍半径的位置</span><span class="token comment" spellcheck="true">#autopct，圆里面的文本格式，%3.1f%%表示小数有三位，整数有一位的浮点数</span><span class="token comment" spellcheck="true">#shadow，饼是否有阴影</span><span class="token comment" spellcheck="true">#startangle，起始角度，0，表示从0开始逆时针转，为第一块。一般选择从90度开始比较好看</span><span class="token comment" spellcheck="true">#pctdistance，百分比的text离圆心的距离</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"体重分布"</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'work/bin_result.jpg'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>weight_size<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200428095752502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="Day4：自制数据集，利用PaddleHub-进行识别"><a href="#Day4：自制数据集，利用PaddleHub-进行识别" class="headerlink" title="Day4：自制数据集，利用PaddleHub  进行识别"></a>Day4：自制数据集，利用PaddleHub  进行识别</h4><h5 id="这个作业最烦人，一个路径问题让许多人都出现问题，也是这个课程中讨论最多的的一个问题"><a href="#这个作业最烦人，一个路径问题让许多人都出现问题，也是这个课程中讨论最多的的一个问题" class="headerlink" title="这个作业最烦人，一个路径问题让许多人都出现问题，也是这个课程中讨论最多的的一个问题"></a>这个作业最烦人，一个路径问题让许多人都出现问题，也是这个课程中讨论最多的的一个问题</h5><p><img src="https://img-blog.csdnimg.cn/20200428100723731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="明明有图片，但是找不到"><a href="#明明有图片，但是找不到" class="headerlink" title="明明有图片，但是找不到"></a>明明有图片，但是找不到</h4><h4 id="自制数据集的一些东西"><a href="#自制数据集的一些东西" class="headerlink" title="自制数据集的一些东西"></a>自制数据集的一些东西</h4><p><img src="https://img-blog.csdnimg.cn/20200428100954369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428100954344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="预测效果"><a href="#预测效果" class="headerlink" title="预测效果"></a>预测效果</h4><p><img src="https://img-blog.csdnimg.cn/20200428103915140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="Day5：大作业-《青春有你2》评论调取、词频统计、绘制词云；自制数据集、利用PaddleHub进行评论情感分析"><a href="#Day5：大作业-《青春有你2》评论调取、词频统计、绘制词云；自制数据集、利用PaddleHub进行评论情感分析" class="headerlink" title="Day5：大作业 《青春有你2》评论调取、词频统计、绘制词云；自制数据集、利用PaddleHub进行评论情感分析"></a>Day5：大作业 《青春有你2》<strong>评论调取</strong>、<strong>词频</strong>统计、绘制<strong>词云</strong>；自制数据集、利用PaddleHub进行<strong>评论</strong>情感<strong>分析</strong></h4><h4 id="要求效果"><a href="#要求效果" class="headerlink" title="要求效果"></a>要求效果<img src="https://img-blog.csdnimg.cn/20200428101244219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h4><h4 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h4><p><img src="https://img-blog.csdnimg.cn/20200428101401967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="day5-代码"><a href="#day5-代码" class="headerlink" title="day5 代码"></a>day5 代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> re <span class="token comment" spellcheck="true">#正则匹配</span><span class="token keyword">import</span> time <span class="token comment" spellcheck="true">#时间处理模块</span><span class="token keyword">import</span> jieba <span class="token comment" spellcheck="true">#中文分词</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>font_manager <span class="token keyword">as</span> font_manager<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud  <span class="token comment" spellcheck="true">#绘制词云模块</span><span class="token keyword">import</span> paddlehub <span class="token keyword">as</span> hub<span class="token keyword">import</span> emoji<span class="token comment" spellcheck="true">#请求爱奇艺评论接口，返回response信息</span><span class="token triple-quoted-string string">'''请求爱奇艺评论接口，返回response信息参数  url: 评论的url:return: response信息'''</span><span class="token keyword">def</span> <span class="token function">getMovieinfo</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 模仿数据请求，防止反爬虫</span>    <span class="token comment" spellcheck="true">#爱奇艺第14期下</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>text   <span class="token triple-quoted-string string">'''解析json数据，获取评论参数  lastId:最后一条评论ID  arr:存放文本的list:return: 新的lastId '''</span><span class="token comment" spellcheck="true">#解析json数据，获取评论</span><span class="token keyword">def</span> <span class="token function">saveMovieInfoToFile</span><span class="token punctuation">(</span>lastId<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span><span class="token string">"https://sns-comment.iqiyi.com/v3/comment/get_comments.action?agent_type=118&amp;agent_version=9.11.5&amp;\authcookie=null&amp;business_type=17&amp;content_id=15535228800&amp;hot_size=0&amp;last_id="</span>    url <span class="token operator">+=</span> str<span class="token punctuation">(</span>lastId<span class="token punctuation">)</span>    responseTxt <span class="token operator">=</span> getMovieinfo<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取网页</span>    responseJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>responseTxt<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#获取网页数据</span>    comments <span class="token operator">=</span> responseJson<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'comments'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#获取评论数据（包括id，内容等）</span>    <span class="token keyword">for</span> val <span class="token keyword">in</span> comments<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'content'</span> <span class="token keyword">in</span>  val<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#防止有val没有'conten'键</span>            con <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#具体评论文本</span>            <span class="token comment" spellcheck="true">#print(con)  #打印评论</span>            arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>con<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#添加进arr</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        lastId <span class="token operator">=</span> str<span class="token punctuation">(</span>val<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#最后一个id</span>    <span class="token keyword">return</span> lastIdIn<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#去除文本中特殊字符</span><span class="token keyword">def</span> <span class="token function">clear_special_char</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    正则处理特殊字符    参数 content:原文本    return: 清除后的文本    '''</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true">#将表情符转换成英文字符</span>    s <span class="token operator">=</span> emoji<span class="token punctuation">.</span>demojize<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#去除不可见字符</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'[\001\002\003\004\005\006\007\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a]+'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 去除中文，返回中文列表</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'[\u4e00-\u9fa5]'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#重新转换成字符串</span>    s <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">return</span> sIn<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''利用jieba进行分词参数 text:需要分词的句子或文本return：分词后的评论列表'''</span><span class="token keyword">def</span> <span class="token function">fenci</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    su <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> com <span class="token keyword">in</span> content<span class="token punctuation">:</span>        seg <span class="token operator">=</span>jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>com<span class="token punctuation">,</span>cut_all<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> seg<span class="token punctuation">:</span>            su<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">return</span> suIn<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''创建停用词表参数 file_path:停用词文本路径return：停用词列表stop'''</span><span class="token keyword">def</span> <span class="token function">stopwordslist</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    spc_word <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"欣虞书"</span><span class="token punctuation">,</span><span class="token string">"真的"</span><span class="token punctuation">,</span><span class="token string">"言喻"</span><span class="token punctuation">,</span><span class="token string">'一个'</span><span class="token punctuation">,</span><span class="token string">'啊啊啊'</span><span class="token punctuation">,</span><span class="token string">'镜头'</span><span class="token punctuation">,</span><span class="token string">'哈哈哈'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#特殊停用词  </span>    stop <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#停用词列表</span>    f1 <span class="token operator">=</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 去除换行符</span>        stop<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加进停用词列表</span>    <span class="token comment" spellcheck="true">#print(stop)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> spc_word<span class="token punctuation">:</span>        stop<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#添加特殊停止词</span>    f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> stopIn<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''去除停用词,统计词频参数 file_path:停用词文本路径 stopwords:停用词list counts: 词频统计结果return con  #返回的是不带停用词的单词列表   '''</span><span class="token comment" spellcheck="true">#content：完全净化后的评论词列表</span><span class="token comment" spellcheck="true">#word_counts：词频字典</span><span class="token comment" spellcheck="true">#停用词库来源：百度</span><span class="token keyword">def</span> <span class="token function">movestopwords</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>content<span class="token punctuation">,</span>word_counts<span class="token punctuation">)</span><span class="token punctuation">:</span>    con <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    stop <span class="token operator">=</span> stopwordslist<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> content<span class="token punctuation">:</span>        <span class="token keyword">if</span> s <span class="token keyword">in</span> stop<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        con<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> con<span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#如果存在就+1，如果不存在就创建</span>            word_counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> word_counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">return</span> con  <span class="token comment" spellcheck="true">#返回的是不带停用词的单词列表    </span>In<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''词频统计图'''</span><span class="token keyword">def</span> <span class="token function">drawcounts</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># # 显示matplotlib生成的图形</span>    <span class="token comment" spellcheck="true"># % matplotlib inline</span>    x_aixs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    y_aixs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    c_order <span class="token operator">=</span> sorted<span class="token punctuation">(</span>s<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#排序</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> c_order<span class="token punctuation">[</span><span class="token punctuation">:</span>num<span class="token punctuation">]</span><span class="token punctuation">:</span>        x_aixs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y_aixs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置显示中文</span>    plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 指定默认字体</span>    <span class="token comment" spellcheck="true">#plt.rcParams['axes.unciode_minus'] = False #解决保存图像是负号’-‘显示为方块的问题</span>    plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x_aixs<span class="token punctuation">,</span>y_aixs<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''词频统计'''</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'bar_result.jpg'</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''根据词频绘制词云图参数 word_f:统计出的词频结果return：none'''</span><span class="token keyword">def</span> <span class="token function">drawcloud</span><span class="token punctuation">(</span>word_f<span class="token punctuation">)</span><span class="token punctuation">:</span>    cloud_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'wujiaoxing.png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#加载背景形状，转换成数组形式</span>    ignore <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#忽略词</span>    wc <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>        background_color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">,</span>        mask <span class="token operator">=</span> cloud_mask<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#背景形状</span>        max_words<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#显示词数</span>        font_path<span class="token operator">=</span><span class="token string">'simhei.ttf'</span><span class="token punctuation">,</span>        min_font_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#最小尺寸</span>        max_font_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>        width<span class="token operator">=</span><span class="token number">1200</span><span class="token punctuation">,</span>        relative_scaling<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>        stopwords<span class="token operator">=</span>ignore<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#忽略词</span>        mode<span class="token operator">=</span><span class="token string">'RGBA'</span><span class="token punctuation">)</span>    wc<span class="token punctuation">.</span>fit_words<span class="token punctuation">(</span>word_f<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#填充词云</span>    wc<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'pic.png'</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''使用hub对评论进行内容分析return：分析结果'''</span><span class="token keyword">def</span> <span class="token function">text_detection</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    porn_detection_lstm <span class="token operator">=</span> hub<span class="token punctuation">.</span>Module<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"porn_detection_lstm"</span><span class="token punctuation">)</span>    input_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"text"</span><span class="token punctuation">:</span>text<span class="token punctuation">}</span>    results <span class="token operator">=</span> porn_detection_lstm<span class="token punctuation">.</span>detection<span class="token punctuation">(</span>data<span class="token operator">=</span>input_dict<span class="token punctuation">,</span>use_gpu<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#训练结果</span>    <span class="token comment" spellcheck="true">#print(results)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可能敏感句子:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span>item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'porn_detection_key'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'porn'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>item<span class="token punctuation">[</span><span class="token string">'porn_probs'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#评论是多分页的，得多次请求爱奇艺的评论接口才能获取多页评论,有些评论含有表情、特殊字符之类的</span><span class="token comment" spellcheck="true">#num 是页数，一页10条评论，假如爬取1000条评论，设置num=100</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    con <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#含有特殊字符的评论</span>    content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#不含有特殊字符的评论</span>    count_words<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#词频统计结果</span>    lastId <span class="token operator">=</span> <span class="token number">41040619521</span>    file_path <span class="token operator">=</span><span class="token string">"data/baidu_stopwords.txt"</span>  <span class="token comment" spellcheck="true">#停用词库地址</span>    jieba<span class="token punctuation">.</span>load_userdict<span class="token punctuation">(</span><span class="token string">"data/add_words.txt"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#添加自定义分词典</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#控制评论数</span>        lastId <span class="token operator">=</span> saveMovieInfoToFile<span class="token punctuation">(</span>lastId<span class="token punctuation">,</span>con<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#改变了con，即增加了评论内容</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#缓冲</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共获取{:}条评论"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("净化后的评论：")</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> con<span class="token punctuation">:</span>        s <span class="token operator">=</span> clear_special_char<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#去除空字符串</span>            <span class="token keyword">continue</span>        content<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    content <span class="token operator">=</span> fenci<span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#分词</span>    content <span class="token operator">=</span> movestopwords<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>content<span class="token punctuation">,</span>count_words<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#去除停用词,同时统计词频</span>    <span class="token comment" spellcheck="true">#print(count_words)</span>    drawcounts<span class="token punctuation">(</span>count_words<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    drawcloud<span class="token punctuation">(</span>count_words<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#敏感句子检测</span>text_detection<span class="token punctuation">(</span>con<span class="token punctuation">)</span></code></pre><h4 id="字体库"><a href="#字体库" class="headerlink" title="字体库"></a>字体库</h4><p><img src="https://img-blog.csdnimg.cn/20200428102748706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5OTM5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="data-文件夹里面上传自己的敏感词汇或者其他添加的文件"><a href="#data-文件夹里面上传自己的敏感词汇或者其他添加的文件" class="headerlink" title="data 文件夹里面上传自己的敏感词汇或者其他添加的文件"></a>data 文件夹里面上传自己的敏感词汇或者其他添加的文件</h4><p><img src="https://img-blog.csdnimg.cn/20200428102748685.png" alt="在这里插入图片描述"></p><h4 id="其中的图片形状可以自行选择，我使用的是五角星，但是一定要上传图片文件"><a href="#其中的图片形状可以自行选择，我使用的是五角星，但是一定要上传图片文件" class="headerlink" title="其中的图片形状可以自行选择，我使用的是五角星，但是一定要上传图片文件"></a>其中的图片形状可以自行选择，我使用的是五角星，但是一定要上传图片文件</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>整个的学习过程虽然不长，但是能够学习到一些之前没有接触过的知识</li><li>虽然能够提交作业，但是发现最大的问题的是基础不牢，而且一些作业是看着视频或者别人的代码敲的，所以可能掌握的并不很好，特别是是第2天的爬虫作业，作为一个真正的小白，python都没有学习几天，就开始搞爬虫，有点不大现实，其实大部分的代码都给好了，只是是去找关键部分，而且对于爬虫对于HTML网页结构，如何获取数据其实不懂，视频中的部分还是很少的，这就有了以后学习的方向。</li><li>day4 的自制数据集，还是要靠各位大佬的提供的数据集，所以开源是个好东西</li><li>day5 综合性作业，没有提供代码，只提供一些简单的东西 需要了解的东西就更加多了</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>Python小白逆袭大神课程链接<a href="https://aistudio.baidu.com/aistudio/course/introduce/1224" target="_blank" rel="noopener">https://aistudio.baidu.com/aistudio/course/introduce/1224</a></li><li>百度AI-Studio学习平台<a href="http://ai.baidu.com/" target="_blank" rel="noopener">http://ai.baidu.com/</a></li><li>个人博客<a href="https://lemonhubs.github.io/" target="_blank" rel="noopener">https://lemonhubs.github.io/</a></li><li>CSDN<a href="https://blog.csdn.net/weixin_43599390" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43599390</a></li><li>知乎<a href="https://zhuanlan.zhihu.com/p/136879675" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/136879675</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 软件开发 </category>
          
          <category> 爬虫 </category>
          
          <category> 百度AIstudio </category>
          
          <category> paddlepaddle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文字识别 </tag>
            
            <tag> 百度智能云 </tag>
            
            <tag> 百度AIstudio </tag>
            
            <tag> 百度飞桨 paddlepaddle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/08/hello-world/"/>
      <url>/2020/05/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
